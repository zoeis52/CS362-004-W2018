unittest1.c:
Test passed with input i: -5, and return value from getCost: -1 
Test passed with input i: -4, and return value from getCost: -1 
Test passed with input i: -3, and return value from getCost: -1 
Test passed with input i: -2, and return value from getCost: -1 
Test passed with input i: -1, and return value from getCost: -1 
Test passed with input i: 0, and return value from getCost: 0 
Test passed with input i: 1, and return value from getCost: 2 
Test passed with input i: 2, and return value from getCost: 5 
Test passed with input i: 3, and return value from getCost: 8 
Test passed with input i: 4, and return value from getCost: 0 
Test passed with input i: 5, and return value from getCost: 3 
Test passed with input i: 6, and return value from getCost: 6 
Test passed with input i: 7, and return value from getCost: 6 
Test passed with input i: 8, and return value from getCost: 5 
Test passed with input i: 9, and return value from getCost: 4 
Test passed with input i: 10, and return value from getCost: 4 
Test passed with input i: 11, and return value from getCost: 5 
Test passed with input i: 12, and return value from getCost: 4 
Test passed with input i: 13, and return value from getCost: 4 
Test passed with input i: 14, and return value from getCost: 3 
Test passed with input i: 15, and return value from getCost: 4 
Test passed with input i: 16, and return value from getCost: 3 
Test passed with input i: 17, and return value from getCost: 5 
Test passed with input i: 18, and return value from getCost: 3 
Test passed with input i: 19, and return value from getCost: 5 
Test passed with input i: 20, and return value from getCost: 3 
Test passed with input i: 21, and return value from getCost: 4 
Test passed with input i: 22, and return value from getCost: 2 
Test passed with input i: 23, and return value from getCost: 5 
Test passed with input i: 24, and return value from getCost: 4 
Test passed with input i: 25, and return value from getCost: 4 
Test passed with input i: 26, and return value from getCost: 4 
Test passed with input i: 27, and return value from getCost: -1 
Test passed with input i: 28, and return value from getCost: -1 
Test passed with input i: 29, and return value from getCost: -1 
File 'dominion.c'
Lines executed:34.94% of 561
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:85
        -:    0:Programs:80
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      270:    8:int compare(const void* a, const void* b) {
      270:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      270:   11:  if (*(int*)a < *(int*)b)
       72:   12:    return -1;
      198:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
        9:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
        -:   74:    {
        9:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
        -:   88:    {
        9:   89:      state->supplyCount[estate] = 8;
        9:   90:      state->supplyCount[duchy] = 8;
        9:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       90:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       27:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       18:  140:      state->deckCount[i] = 0;
       72:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       54:  143:	  state->deck[i][j] = estate;
       54:  144:	  state->deckCount[i]++;
        -:  145:	}
      144:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      126:  148:	  state->deck[i][j] = copper;
      126:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       27:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       18:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       27:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       18:  166:      state->handCount[i] = 0;
       18:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
       45:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
       18:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       18:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       18:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       18:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      216:  214:  while (state->deckCount[player] > 0) {
      180:  215:    card = floor(Random() * state->deckCount[player]);
      180:  216:    newDeck[newDeckPos] = state->deck[player][card];
      180:  217:    newDeckPos++;
      648:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      468:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      180:  221:    state->deckCount[player]--;
        -:  222:  }
      198:  223:  for (i = 0; i < newDeckPos; i++) {
      180:  224:    state->deck[player][i] = newDeck[i];
      180:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       18:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
      156:  311:int numHandCards(struct gameState *state) {
      156:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    68165:  346:int whoseTurn(struct gameState *state) {
    68165:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    13026:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    13026:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
     1559:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    11467:  401:  j = 0;
   298142:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
   286675:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    34362:  406:	  j++;
        -:  407:	}
        -:  408:    }
    11467:  409:  if ( j >= 3)
        -:  410:    {
    11454:  411:      return 1;
        -:  412:    }
        -:  413:
       13:  414:  return 0;
        -:  415:}
        -:  416:
       36:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       36:  420:  int score = 0;
        -:  421:  //score from hand
      144:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
      108:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
      108:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
      108:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
      108:  427:      if (state->hand[player][i] == province) { score = score + 6; };
      108:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      108:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       36:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       36:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
       36:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   204063:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   204063:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   204063:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   204063:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   204063:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   204063:  576:    state->deckCount[player]--;
   204063:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   204063:  580:  return 0;
        -:  581:}
        -:  582:
      490:  583:int getCost(int cardNumber)
        -:  584:{
      490:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
       14:  588:      return 0;
        -:  589:    case estate:
       14:  590:      return 2;
        -:  591:    case duchy:
       14:  592:      return 5;
        -:  593:    case province:
       14:  594:      return 8;
        -:  595:    case copper:
       14:  596:      return 0;
        -:  597:    case silver:
       14:  598:      return 3;
        -:  599:    case gold:
       14:  600:      return 6;
        -:  601:    case adventurer:
       14:  602:      return 6;
        -:  603:    case council_room:
       14:  604:      return 5;
        -:  605:    case feast:
       14:  606:      return 4;
        -:  607:    case gardens:
       14:  608:      return 4;
        -:  609:    case mine:
       14:  610:      return 5;
        -:  611:    case remodel:
       14:  612:      return 4;
        -:  613:    case smithy:
       14:  614:      return 4;
        -:  615:    case village:
       14:  616:      return 3;
        -:  617:    case baron:
       14:  618:      return 4;
        -:  619:    case great_hall:
       14:  620:      return 3;
        -:  621:    case minion:
       14:  622:      return 5;
        -:  623:    case steward:
       14:  624:      return 3;
        -:  625:    case tribute:
       14:  626:      return 5;
        -:  627:    case ambassador:
       14:  628:      return 3;
        -:  629:    case cutpurse:
       14:  630:      return 4;
        -:  631:    case embargo:
       14:  632:      return 2;
        -:  633:    case outpost:
       14:  634:      return 5;
        -:  635:    case salvager:
       14:  636:      return 4;
        -:  637:    case sea_hag:
       14:  638:      return 4;
        -:  639:    case treasure_map:
       14:  640:      return 4;
        -:  641:    }
        -:  642:
      112:  643:  return -1;
        -:  644:}
        -:  645:
        9:  646:void adventurer_action (int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z) {
       36:  647:    while(drawntreasure<2){
       18:  648:        if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:            shuffle(currentPlayer, state);
        -:  650:        }
       18:  651:        drawCard(currentPlayer, state);
       18:  652:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       18:  653:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       18:  654:          drawntreasure++;
        -:  655:        else{
    #####:  656:          temphand[z]=cardDrawn;
    #####:  657:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  658:        }
        -:  659:  }
       18:  660:  while(z-1>=0){
    #####:  661:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  662:      z=z-1;
        -:  663:  }
        9:  664:}
        -:  665:
    44000:  666:void smithy_action (int currentPlayer, struct gameState *state, int i, int handPos) {
        -:  667:  //+3 Cards
   176000:  668:  for (i = 0; i < 3; i++) {
   132000:  669:    drawCard(currentPlayer, state);
        -:  670:  }
        -:  671:
        -:  672:  //discard card from hand
    44000:  673:  discardCard(handPos, currentPlayer, state, 0);
    44000:  674:}
        -:  675:
    #####:  676:void village_action (int currentPlayer, struct gameState *state, int handPos) {
        -:  677:  //+1 Card
    #####:  678:  drawCard(currentPlayer, state);
        -:  679:
        -:  680:  //+2 Actions
    #####:  681:  state->numActions = state->numActions + 2;
        -:  682:
        -:  683:  //discard played card from hand
    #####:  684:  discardCard(handPos, currentPlayer, state, 0);
    #####:  685:}
        -:  686:
    12000:  687:void council_room_action (int i, int currentPlayer, struct gameState *state) {
        -:  688:  //+4 Cards
    60000:  689:  for (i = 0; i < 4; i++) {
    48000:  690:      drawCard(currentPlayer, state);
        -:  691:  }
        -:  692:
        -:  693:  //+1 Buy
    12000:  694:  state->numBuys++;
        -:  695:
        -:  696:  //Each other player draws a card
    60000:  697:  for (i = 0; i < state->numPlayers; i++) {
    48000:  698:      if ( i == currentPlayer ) {
    12000:  699:          drawCard(i, state);
        -:  700:      }
        -:  701:  }
    12000:  702:}
        -:  703:
    #####:  704:int mine_action (int j, struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos, int i) {
    #####:  705:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  706:
    #####:  707:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
    #####:  708:      return -1;
        -:  709:  }
        -:  710:
    #####:  711:  if (choice2 > treasure_map || choice2 < curse) {
    #####:  712:      return -1;
        -:  713:  }
        -:  714:
    #####:  715:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
    #####:  716:      return -1;
        -:  717:  }
        -:  718:
    #####:  719:  gainCard(choice2, state, 2, currentPlayer);
        -:  720:
        -:  721:  //discard card from hand
    #####:  722:  discardCard(handPos, currentPlayer, state, 0);
        -:  723:
        -:  724:  //discard trashed card
    #####:  725:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  726:      if (state->hand[currentPlayer][i] == j) {
    #####:  727:        discardCard(i, currentPlayer, state, 0);
    #####:  728:        break;
        -:  729:      }
        -:  730:  }
        -:  731:
    #####:  732:  return -1;
        -:  733:}
        -:  734:
    68009:  735:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  736:{
        -:  737:  int i;
        -:  738:  int j;
        -:  739:  int k;
        -:  740:  int x;
        -:  741:  int m;
        -:  742:  int index;
    68009:  743:  int currentPlayer = whoseTurn(state);
    68009:  744:  int nextPlayer = currentPlayer + 1;
        -:  745:
    68009:  746:  int tributeRevealedCards[2] = {-1, -1};
        -:  747:  int temphand[MAX_HAND];// moved above the if statement
    68009:  748:  int drawntreasure=0;
        -:  749:  int cardDrawn;
    68009:  750:  int z = 0;// this is the counter for the temp hand
    68009:  751:  if (nextPlayer > (state->numPlayers - 1)){
    47000:  752:    nextPlayer = 0;
        -:  753:  }
        -:  754:
        -:  755:
        -:  756:  //uses switch to select card and perform actions
    68009:  757:  switch( card )
        -:  758:    {
        -:  759:    case adventurer:
        9:  760:      adventurer_action (drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        9:  761:      return 0;
        -:  762:
        -:  763:    case council_room:
    12000:  764:      council_room_action (i, currentPlayer, state);
    12000:  765:      return 0;
        -:  766:
        -:  767:    case feast:
        -:  768:      //gain card with cost up to 5
        -:  769:      //Backup hand
    #####:  770:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  771:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  772:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  773:      }
        -:  774:      //Backup hand
        -:  775:
        -:  776:      //Update Coins for Buy
    #####:  777:      updateCoins(currentPlayer, state, 5);
    #####:  778:      x = 1;//Condition to loop on
    #####:  779:      while( x == 1) {//Buy one card
    #####:  780:	if (supplyCount(choice1, state) <= 0){
        -:  781:	  if (DEBUG)
        -:  782:	    printf("None of that card left, sorry!\n");
        -:  783:
        -:  784:	  if (DEBUG){
        -:  785:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  786:	  }
        -:  787:	}
    #####:  788:	else if (state->coins < getCost(choice1)){
    #####:  789:	  printf("That card is too expensive!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  793:	  }
        -:  794:	}
        -:  795:	else{
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  799:	  }
        -:  800:
    #####:  801:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  802:	  x = 0;//No more buying cards
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
        -:  808:	}
        -:  809:      }
        -:  810:
        -:  811:      //Reset Hand
    #####:  812:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  813:	state->hand[currentPlayer][i] = temphand[i];
    #####:  814:	temphand[i] = -1;
        -:  815:      }
        -:  816:      //Reset Hand
        -:  817:
    #####:  818:      return 0;
        -:  819:
        -:  820:    case gardens:
    #####:  821:      return -1;
        -:  822:
        -:  823:    case mine:
    #####:  824:      m = mine_action (j, state, currentPlayer, choice1, choice2, handPos, i);
    #####:  825:      return m;
        -:  826:
        -:  827:    case remodel:
    #####:  828:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  829:
    #####:  830:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  831:	{
    #####:  832:	  return -1;
        -:  833:	}
        -:  834:
    #####:  835:      gainCard(choice2, state, 0, currentPlayer);
        -:  836:
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:
        -:  840:      //discard trashed card
    #####:  841:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  842:	{
    #####:  843:	  if (state->hand[currentPlayer][i] == j)
        -:  844:	    {
    #####:  845:	      discardCard(i, currentPlayer, state, 0);
    #####:  846:	      break;
        -:  847:	    }
        -:  848:	}
        -:  849:
        -:  850:
    #####:  851:      return 0;
        -:  852:
        -:  853:    case smithy:
    44000:  854:      smithy_action (currentPlayer, state, i, handPos);
    44000:  855:      return 0;
        -:  856:
        -:  857:    case village:
    #####:  858:      village_action (currentPlayer, state, handPos);
    #####:  859:      return 0;
        -:  860:
        -:  861:    case baron:
    #####:  862:      state->numBuys++;//Increase buys by 1!
    #####:  863:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  864:	int p = 0;//Iterator for hand!
    #####:  865:	int card_not_discarded = 1;//Flag for discard set!
    #####:  866:	while(card_not_discarded){
    #####:  867:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  868:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  869:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  870:	    state->discardCount[currentPlayer]++;
    #####:  871:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  872:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  873:	    }
    #####:  874:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  875:	    state->handCount[currentPlayer]--;
    #####:  876:	    card_not_discarded = 0;//Exit the loop
        -:  877:	  }
    #####:  878:	  else if (p > state->handCount[currentPlayer]){
        -:  879:	    if(DEBUG) {
        -:  880:	      printf("No estate cards in your hand, invalid choice\n");
        -:  881:	      printf("Must gain an estate if there are any\n");
        -:  882:	    }
    #####:  883:	    if (supplyCount(estate, state) > 0){
    #####:  884:	      gainCard(estate, state, 0, currentPlayer);
    #####:  885:	      state->supplyCount[estate]--;//Decrement estates
    #####:  886:	      if (supplyCount(estate, state) == 0){
    #####:  887:		isGameOver(state);
        -:  888:	      }
        -:  889:	    }
    #####:  890:	    card_not_discarded = 0;//Exit the loop
        -:  891:	  }
        -:  892:
        -:  893:	  else{
    #####:  894:	    p++;//Next card
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:
        -:  899:      else{
    #####:  900:	if (supplyCount(estate, state) > 0){
    #####:  901:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  902:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  903:	  if (supplyCount(estate, state) == 0){
    #####:  904:	    isGameOver(state);
        -:  905:	  }
        -:  906:	}
        -:  907:      }
        -:  908:
        -:  909:
    #####:  910:      return 0;
        -:  911:
        -:  912:    case great_hall:
        -:  913:      //+1 Card
    12000:  914:      drawCard(currentPlayer, state);
        -:  915:
        -:  916:      //+1 Actions
    12000:  917:      state->numActions++;
        -:  918:
        -:  919:      //discard card from hand
    12000:  920:      discardCard(handPos, currentPlayer, state, 0);
    12000:  921:      return 0;
        -:  922:
        -:  923:    case minion:
        -:  924:      //+1 action
    #####:  925:      state->numActions++;
        -:  926:
        -:  927:      //discard card from hand
    #####:  928:      discardCard(handPos, currentPlayer, state, 0);
        -:  929:
    #####:  930:      if (choice1)		//+2 coins
        -:  931:	{
    #####:  932:	  state->coins = state->coins + 2;
        -:  933:	}
        -:  934:
    #####:  935:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  936:	{
        -:  937:	  //discard hand
    #####:  938:	  while(numHandCards(state) > 0)
        -:  939:	    {
    #####:  940:	      discardCard(handPos, currentPlayer, state, 0);
        -:  941:	    }
        -:  942:
        -:  943:	  //draw 4
    #####:  944:	  for (i = 0; i < 4; i++)
        -:  945:	    {
    #####:  946:	      drawCard(currentPlayer, state);
        -:  947:	    }
        -:  948:
        -:  949:	  //other players discard hand and redraw if hand size > 4
    #####:  950:	  for (i = 0; i < state->numPlayers; i++)
        -:  951:	    {
    #####:  952:	      if (i != currentPlayer)
        -:  953:		{
    #####:  954:		  if ( state->handCount[i] > 4 )
        -:  955:		    {
        -:  956:		      //discard hand
    #####:  957:		      while( state->handCount[i] > 0 )
        -:  958:			{
    #####:  959:			  discardCard(handPos, i, state, 0);
        -:  960:			}
        -:  961:
        -:  962:		      //draw 4
    #####:  963:		      for (j = 0; j < 4; j++)
        -:  964:			{
    #####:  965:			  drawCard(i, state);
        -:  966:			}
        -:  967:		    }
        -:  968:		}
        -:  969:	    }
        -:  970:
        -:  971:	}
    #####:  972:      return 0;
        -:  973:
        -:  974:    case steward:
    #####:  975:      if (choice1 == 1)
        -:  976:	{
        -:  977:	  //+2 cards
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
    #####:  981:      else if (choice1 == 2)
        -:  982:	{
        -:  983:	  //+2 coins
    #####:  984:	  state->coins = state->coins + 2;
        -:  985:	}
        -:  986:      else
        -:  987:	{
        -:  988:	  //trash 2 cards in hand
    #####:  989:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  990:	  discardCard(choice3, currentPlayer, state, 1);
        -:  991:	}
        -:  992:
        -:  993:      //discard card from hand
    #####:  994:      discardCard(handPos, currentPlayer, state, 0);
    #####:  995:      return 0;
        -:  996:
        -:  997:    case tribute:
    #####:  998:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  999:	if (state->deckCount[nextPlayer] > 0){
    #####: 1000:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1001:	  state->deckCount[nextPlayer]--;
        -: 1002:	}
    #####: 1003:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1004:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1005:	  state->discardCount[nextPlayer]--;
        -: 1006:	}
        -: 1007:	else{
        -: 1008:	  //No Card to Reveal
        -: 1009:	  if (DEBUG){
        -: 1010:	    printf("No cards to reveal\n");
        -: 1011:	  }
        -: 1012:	}
        -: 1013:      }
        -: 1014:
        -: 1015:      else{
    #####: 1016:	if (state->deckCount[nextPlayer] == 0){
    #####: 1017:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1018:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1019:	    state->deckCount[nextPlayer]++;
    #####: 1020:	    state->discard[nextPlayer][i] = -1;
    #####: 1021:	    state->discardCount[nextPlayer]--;
        -: 1022:	  }
        -: 1023:
    #####: 1024:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1025:	}
    #####: 1026:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1028:	state->deckCount[nextPlayer]--;
    #####: 1029:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1030:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1031:	state->deckCount[nextPlayer]--;
        -: 1032:      }
        -: 1033:
    #####: 1034:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1035:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1036:	state->playedCardCount++;
    #####: 1037:	tributeRevealedCards[1] = -1;
        -: 1038:      }
        -: 1039:
    #####: 1040:      for (i = 0; i <= 2; i ++){
    #####: 1041:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1042:	  state->coins += 2;
        -: 1043:	}
        -: 1044:
    #####: 1045:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1046:	  drawCard(currentPlayer, state);
    #####: 1047:	  drawCard(currentPlayer, state);
        -: 1048:	}
        -: 1049:	else{//Action Card
    #####: 1050:	  state->numActions = state->numActions + 2;
        -: 1051:	}
        -: 1052:      }
        -: 1053:
    #####: 1054:      return 0;
        -: 1055:
        -: 1056:    case ambassador:
    #####: 1057:      j = 0;		//used to check if player has enough cards to discard
        -: 1058:
    #####: 1059:      if (choice2 > 2 || choice2 < 0)
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:
    #####: 1064:      if (choice1 == handPos)
        -: 1065:	{
    #####: 1066:	  return -1;
        -: 1067:	}
        -: 1068:
    #####: 1069:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1070:	{
    #####: 1071:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1072:	    {
    #####: 1073:	      j++;
        -: 1074:	    }
        -: 1075:	}
    #####: 1076:      if (j < choice2)
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
        -: 1081:      if (DEBUG)
        -: 1082:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1083:
        -: 1084:      //increase supply count for choosen card by amount being discarded
    #####: 1085:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1086:
        -: 1087:      //each other player gains a copy of revealed card
    #####: 1088:      for (i = 0; i < state->numPlayers; i++)
        -: 1089:	{
    #####: 1090:	  if (i != currentPlayer)
        -: 1091:	    {
    #####: 1092:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1093:	    }
        -: 1094:	}
        -: 1095:
        -: 1096:      //discard played card from hand
    #####: 1097:      discardCard(handPos, currentPlayer, state, 0);
        -: 1098:
        -: 1099:      //trash copies of cards returned to supply
    #####: 1100:      for (j = 0; j < choice2; j++)
        -: 1101:	{
    #####: 1102:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1103:	    {
    #####: 1104:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1105:		{
    #####: 1106:		  discardCard(i, currentPlayer, state, 1);
    #####: 1107:		  break;
        -: 1108:		}
        -: 1109:	    }
        -: 1110:	}
        -: 1111:
    #####: 1112:      return 0;
        -: 1113:
        -: 1114:    case cutpurse:
        -: 1115:
    #####: 1116:      updateCoins(currentPlayer, state, 2);
    #####: 1117:      for (i = 0; i < state->numPlayers; i++)
        -: 1118:	{
    #####: 1119:	  if (i != currentPlayer)
        -: 1120:	    {
    #####: 1121:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1122:		{
    #####: 1123:		  if (state->hand[i][j] == copper)
        -: 1124:		    {
    #####: 1125:		      discardCard(j, i, state, 0);
    #####: 1126:		      break;
        -: 1127:		    }
    #####: 1128:		  if (j == state->handCount[i])
        -: 1129:		    {
    #####: 1130:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1131:			{
        -: 1132:			  if (DEBUG)
        -: 1133:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1134:			}
    #####: 1135:		      break;
        -: 1136:		    }
        -: 1137:		}
        -: 1138:
        -: 1139:	    }
        -: 1140:
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
    #####: 1146:      return 0;
        -: 1147:
        -: 1148:
        -: 1149:    case embargo:
        -: 1150:      //+2 Coins
    #####: 1151:      state->coins = state->coins + 2;
        -: 1152:
        -: 1153:      //see if selected pile is in play
    #####: 1154:      if ( state->supplyCount[choice1] == -1 )
        -: 1155:	{
    #####: 1156:	  return -1;
        -: 1157:	}
        -: 1158:
        -: 1159:      //add embargo token to selected supply pile
    #####: 1160:      state->embargoTokens[choice1]++;
        -: 1161:
        -: 1162:      //trash card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1164:      return 0;
        -: 1165:
        -: 1166:    case outpost:
        -: 1167:      //set outpost flag
    #####: 1168:      state->outpostPlayed++;
        -: 1169:
        -: 1170:      //discard card
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1172:      return 0;
        -: 1173:
        -: 1174:    case salvager:
        -: 1175:      //+1 buy
    #####: 1176:      state->numBuys++;
        -: 1177:
    #####: 1178:      if (choice1)
        -: 1179:	{
        -: 1180:	  //gain coins equal to trashed card
    #####: 1181:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1182:	  //trash card
    #####: 1183:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1184:	}
        -: 1185:
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:    case sea_hag:
    #####: 1191:      for (i = 0; i < state->numPlayers; i++){
    #####: 1192:	if (i != currentPlayer){
    #####: 1193:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1194:	  state->discardCount[i]++;
    #####: 1195:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1196:	}
        -: 1197:      }
    #####: 1198:      return 0;
        -: 1199:
        -: 1200:    case treasure_map:
        -: 1201:      //search hand for another treasure_map
    #####: 1202:      index = -1;
    #####: 1203:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1206:	    {
    #####: 1207:	      index = i;
    #####: 1208:	      break;
        -: 1209:	    }
        -: 1210:	}
    #####: 1211:      if (index > -1)
        -: 1212:	{
        -: 1213:	  //trash both treasure cards
    #####: 1214:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1215:	  discardCard(index, currentPlayer, state, 1);
        -: 1216:
        -: 1217:	  //gain 4 Gold cards
    #####: 1218:	  for (i = 0; i < 4; i++)
        -: 1219:	    {
    #####: 1220:	      gainCard(gold, state, 1, currentPlayer);
        -: 1221:	    }
        -: 1222:
        -: 1223:	  //return success
    #####: 1224:	  return 1;
        -: 1225:	}
        -: 1226:
        -: 1227:      //no second treasure_map found in hand
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:  return -1;
        -: 1232:}
        -: 1233:
    56000: 1234:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1235:{
        -: 1236:
        -: 1237:  //if card is not trashed, added to Played pile
    56000: 1238:  if (trashFlag < 1)
        -: 1239:    {
        -: 1240:      //add card to played pile
    56000: 1241:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    56000: 1242:      state->playedCardCount++;
        -: 1243:    }
        -: 1244:
        -: 1245:  //set played card to -1
    56000: 1246:  state->hand[currentPlayer][handPos] = -1;
        -: 1247:
        -: 1248:  //remove card from player's hand
    56000: 1249:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1250:    {
        -: 1251:      //reduce number of cards in hand
       19: 1252:      state->handCount[currentPlayer]--;
        -: 1253:    }
    55981: 1254:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1255:    {
        -: 1256:      //reduce number of cards in hand
    #####: 1257:      state->handCount[currentPlayer]--;
        -: 1258:    }
        -: 1259:  else
        -: 1260:    {
        -: 1261:      //replace discarded card with last card in hand
    55981: 1262:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1263:      //set last card to -1
    55981: 1264:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1265:      //reduce number of cards in hand
    55981: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
        -: 1268:
    56000: 1269:  return 0;
        -: 1270:}
        -: 1271:
    #####: 1272:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1273:{
        -: 1274:  //Note: supplyPos is enum of choosen card
        -: 1275:
        -: 1276:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1277:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1278:    {
    #####: 1279:      return -1;
        -: 1280:    }
        -: 1281:
        -: 1282:  //added card for [whoseTurn] current player:
        -: 1283:  // toFlag = 0 : add to discard
        -: 1284:  // toFlag = 1 : add to deck
        -: 1285:  // toFlag = 2 : add to hand
        -: 1286:
    #####: 1287:  if (toFlag == 1)
        -: 1288:    {
    #####: 1289:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1290:      state->deckCount[player]++;
        -: 1291:    }
    #####: 1292:  else if (toFlag == 2)
        -: 1293:    {
    #####: 1294:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1295:      state->handCount[player]++;
        -: 1296:    }
        -: 1297:  else
        -: 1298:    {
    #####: 1299:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1300:      state->discardCount[player]++;
        -: 1301:    }
        -: 1302:
        -: 1303:  //decrease number in supply pile
    #####: 1304:  state->supplyCount[supplyPos]--;
        -: 1305:
    #####: 1306:  return 0;
        -: 1307:}
        -: 1308:
      113: 1309:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1310:{
        -: 1311:  int i;
        -: 1312:
        -: 1313:  //reset coin count
      113: 1314:  state->coins = 0;
        -: 1315:
        -: 1316:  //add coins for each Treasure card in player's hand
      158: 1317:  for (i = 0; i < state->handCount[player]; i++)
        -: 1318:    {
       45: 1319:      if (state->hand[player][i] == copper)
        -: 1320:	{
       36: 1321:	  state->coins += 1;
        -: 1322:	}
        9: 1323:      else if (state->hand[player][i] == silver)
        -: 1324:	{
    #####: 1325:	  state->coins += 2;
        -: 1326:	}
        9: 1327:      else if (state->hand[player][i] == gold)
        -: 1328:	{
    #####: 1329:	  state->coins += 3;
        -: 1330:	}
        -: 1331:    }
        -: 1332:
        -: 1333:  //add bonus
      113: 1334:  state->coins += bonus;
        -: 1335:
      113: 1336:  return 0;
        -: 1337:}
        -: 1338:
        -: 1339:
        -: 1340://end of dominion.c
unittest2.c:
Test passed! The return value of isGameOver was 1 when the province count was set to zero
Test passed! The return value of isGameOver was 0 when all the supply counts were greater than 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
File 'dominion.c'
Lines executed:34.94% of 561
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:86
        -:    0:Programs:81
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      270:    8:int compare(const void* a, const void* b) {
      270:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      270:   11:  if (*(int*)a < *(int*)b)
       72:   12:    return -1;
      198:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
        9:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
        -:   74:    {
        9:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
        -:   88:    {
        9:   89:      state->supplyCount[estate] = 8;
        9:   90:      state->supplyCount[duchy] = 8;
        9:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       90:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       27:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       18:  140:      state->deckCount[i] = 0;
       72:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       54:  143:	  state->deck[i][j] = estate;
       54:  144:	  state->deckCount[i]++;
        -:  145:	}
      144:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      126:  148:	  state->deck[i][j] = copper;
      126:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       27:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       18:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       27:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       18:  166:      state->handCount[i] = 0;
       18:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
       45:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
       18:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       18:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       18:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       18:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      216:  214:  while (state->deckCount[player] > 0) {
      180:  215:    card = floor(Random() * state->deckCount[player]);
      180:  216:    newDeck[newDeckPos] = state->deck[player][card];
      180:  217:    newDeckPos++;
      648:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      468:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      180:  221:    state->deckCount[player]--;
        -:  222:  }
      198:  223:  for (i = 0; i < newDeckPos; i++) {
      180:  224:    state->deck[player][i] = newDeck[i];
      180:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       18:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
      156:  311:int numHandCards(struct gameState *state) {
      156:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    68165:  346:int whoseTurn(struct gameState *state) {
    68165:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    14028:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    14028:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
     1666:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    12362:  401:  j = 0;
   321412:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
   309050:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    37044:  406:	  j++;
        -:  407:	}
        -:  408:    }
    12362:  409:  if ( j >= 3)
        -:  410:    {
    12348:  411:      return 1;
        -:  412:    }
        -:  413:
       14:  414:  return 0;
        -:  415:}
        -:  416:
       36:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       36:  420:  int score = 0;
        -:  421:  //score from hand
      144:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
      108:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
      108:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
      108:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
      108:  427:      if (state->hand[player][i] == province) { score = score + 6; };
      108:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      108:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       36:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       36:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
       36:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   204063:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   204063:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   204063:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   204063:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   204063:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   204063:  576:    state->deckCount[player]--;
   204063:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   204063:  580:  return 0;
        -:  581:}
        -:  582:
      490:  583:int getCost(int cardNumber)
        -:  584:{
      490:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
       14:  588:      return 0;
        -:  589:    case estate:
       14:  590:      return 2;
        -:  591:    case duchy:
       14:  592:      return 5;
        -:  593:    case province:
       14:  594:      return 8;
        -:  595:    case copper:
       14:  596:      return 0;
        -:  597:    case silver:
       14:  598:      return 3;
        -:  599:    case gold:
       14:  600:      return 6;
        -:  601:    case adventurer:
       14:  602:      return 6;
        -:  603:    case council_room:
       14:  604:      return 5;
        -:  605:    case feast:
       14:  606:      return 4;
        -:  607:    case gardens:
       14:  608:      return 4;
        -:  609:    case mine:
       14:  610:      return 5;
        -:  611:    case remodel:
       14:  612:      return 4;
        -:  613:    case smithy:
       14:  614:      return 4;
        -:  615:    case village:
       14:  616:      return 3;
        -:  617:    case baron:
       14:  618:      return 4;
        -:  619:    case great_hall:
       14:  620:      return 3;
        -:  621:    case minion:
       14:  622:      return 5;
        -:  623:    case steward:
       14:  624:      return 3;
        -:  625:    case tribute:
       14:  626:      return 5;
        -:  627:    case ambassador:
       14:  628:      return 3;
        -:  629:    case cutpurse:
       14:  630:      return 4;
        -:  631:    case embargo:
       14:  632:      return 2;
        -:  633:    case outpost:
       14:  634:      return 5;
        -:  635:    case salvager:
       14:  636:      return 4;
        -:  637:    case sea_hag:
       14:  638:      return 4;
        -:  639:    case treasure_map:
       14:  640:      return 4;
        -:  641:    }
        -:  642:
      112:  643:  return -1;
        -:  644:}
        -:  645:
        9:  646:void adventurer_action (int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z) {
       36:  647:    while(drawntreasure<2){
       18:  648:        if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:            shuffle(currentPlayer, state);
        -:  650:        }
       18:  651:        drawCard(currentPlayer, state);
       18:  652:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       18:  653:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       18:  654:          drawntreasure++;
        -:  655:        else{
    #####:  656:          temphand[z]=cardDrawn;
    #####:  657:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  658:        }
        -:  659:  }
       18:  660:  while(z-1>=0){
    #####:  661:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  662:      z=z-1;
        -:  663:  }
        9:  664:}
        -:  665:
    44000:  666:void smithy_action (int currentPlayer, struct gameState *state, int i, int handPos) {
        -:  667:  //+3 Cards
   176000:  668:  for (i = 0; i < 3; i++) {
   132000:  669:    drawCard(currentPlayer, state);
        -:  670:  }
        -:  671:
        -:  672:  //discard card from hand
    44000:  673:  discardCard(handPos, currentPlayer, state, 0);
    44000:  674:}
        -:  675:
    #####:  676:void village_action (int currentPlayer, struct gameState *state, int handPos) {
        -:  677:  //+1 Card
    #####:  678:  drawCard(currentPlayer, state);
        -:  679:
        -:  680:  //+2 Actions
    #####:  681:  state->numActions = state->numActions + 2;
        -:  682:
        -:  683:  //discard played card from hand
    #####:  684:  discardCard(handPos, currentPlayer, state, 0);
    #####:  685:}
        -:  686:
    12000:  687:void council_room_action (int i, int currentPlayer, struct gameState *state) {
        -:  688:  //+4 Cards
    60000:  689:  for (i = 0; i < 4; i++) {
    48000:  690:      drawCard(currentPlayer, state);
        -:  691:  }
        -:  692:
        -:  693:  //+1 Buy
    12000:  694:  state->numBuys++;
        -:  695:
        -:  696:  //Each other player draws a card
    60000:  697:  for (i = 0; i < state->numPlayers; i++) {
    48000:  698:      if ( i == currentPlayer ) {
    12000:  699:          drawCard(i, state);
        -:  700:      }
        -:  701:  }
    12000:  702:}
        -:  703:
    #####:  704:int mine_action (int j, struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos, int i) {
    #####:  705:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  706:
    #####:  707:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
    #####:  708:      return -1;
        -:  709:  }
        -:  710:
    #####:  711:  if (choice2 > treasure_map || choice2 < curse) {
    #####:  712:      return -1;
        -:  713:  }
        -:  714:
    #####:  715:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
    #####:  716:      return -1;
        -:  717:  }
        -:  718:
    #####:  719:  gainCard(choice2, state, 2, currentPlayer);
        -:  720:
        -:  721:  //discard card from hand
    #####:  722:  discardCard(handPos, currentPlayer, state, 0);
        -:  723:
        -:  724:  //discard trashed card
    #####:  725:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  726:      if (state->hand[currentPlayer][i] == j) {
    #####:  727:        discardCard(i, currentPlayer, state, 0);
    #####:  728:        break;
        -:  729:      }
        -:  730:  }
        -:  731:
    #####:  732:  return -1;
        -:  733:}
        -:  734:
    68009:  735:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  736:{
        -:  737:  int i;
        -:  738:  int j;
        -:  739:  int k;
        -:  740:  int x;
        -:  741:  int m;
        -:  742:  int index;
    68009:  743:  int currentPlayer = whoseTurn(state);
    68009:  744:  int nextPlayer = currentPlayer + 1;
        -:  745:
    68009:  746:  int tributeRevealedCards[2] = {-1, -1};
        -:  747:  int temphand[MAX_HAND];// moved above the if statement
    68009:  748:  int drawntreasure=0;
        -:  749:  int cardDrawn;
    68009:  750:  int z = 0;// this is the counter for the temp hand
    68009:  751:  if (nextPlayer > (state->numPlayers - 1)){
    47000:  752:    nextPlayer = 0;
        -:  753:  }
        -:  754:
        -:  755:
        -:  756:  //uses switch to select card and perform actions
    68009:  757:  switch( card )
        -:  758:    {
        -:  759:    case adventurer:
        9:  760:      adventurer_action (drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        9:  761:      return 0;
        -:  762:
        -:  763:    case council_room:
    12000:  764:      council_room_action (i, currentPlayer, state);
    12000:  765:      return 0;
        -:  766:
        -:  767:    case feast:
        -:  768:      //gain card with cost up to 5
        -:  769:      //Backup hand
    #####:  770:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  771:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  772:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  773:      }
        -:  774:      //Backup hand
        -:  775:
        -:  776:      //Update Coins for Buy
    #####:  777:      updateCoins(currentPlayer, state, 5);
    #####:  778:      x = 1;//Condition to loop on
    #####:  779:      while( x == 1) {//Buy one card
    #####:  780:	if (supplyCount(choice1, state) <= 0){
        -:  781:	  if (DEBUG)
        -:  782:	    printf("None of that card left, sorry!\n");
        -:  783:
        -:  784:	  if (DEBUG){
        -:  785:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  786:	  }
        -:  787:	}
    #####:  788:	else if (state->coins < getCost(choice1)){
    #####:  789:	  printf("That card is too expensive!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  793:	  }
        -:  794:	}
        -:  795:	else{
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  799:	  }
        -:  800:
    #####:  801:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  802:	  x = 0;//No more buying cards
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
        -:  808:	}
        -:  809:      }
        -:  810:
        -:  811:      //Reset Hand
    #####:  812:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  813:	state->hand[currentPlayer][i] = temphand[i];
    #####:  814:	temphand[i] = -1;
        -:  815:      }
        -:  816:      //Reset Hand
        -:  817:
    #####:  818:      return 0;
        -:  819:
        -:  820:    case gardens:
    #####:  821:      return -1;
        -:  822:
        -:  823:    case mine:
    #####:  824:      m = mine_action (j, state, currentPlayer, choice1, choice2, handPos, i);
    #####:  825:      return m;
        -:  826:
        -:  827:    case remodel:
    #####:  828:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  829:
    #####:  830:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  831:	{
    #####:  832:	  return -1;
        -:  833:	}
        -:  834:
    #####:  835:      gainCard(choice2, state, 0, currentPlayer);
        -:  836:
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:
        -:  840:      //discard trashed card
    #####:  841:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  842:	{
    #####:  843:	  if (state->hand[currentPlayer][i] == j)
        -:  844:	    {
    #####:  845:	      discardCard(i, currentPlayer, state, 0);
    #####:  846:	      break;
        -:  847:	    }
        -:  848:	}
        -:  849:
        -:  850:
    #####:  851:      return 0;
        -:  852:
        -:  853:    case smithy:
    44000:  854:      smithy_action (currentPlayer, state, i, handPos);
    44000:  855:      return 0;
        -:  856:
        -:  857:    case village:
    #####:  858:      village_action (currentPlayer, state, handPos);
    #####:  859:      return 0;
        -:  860:
        -:  861:    case baron:
    #####:  862:      state->numBuys++;//Increase buys by 1!
    #####:  863:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  864:	int p = 0;//Iterator for hand!
    #####:  865:	int card_not_discarded = 1;//Flag for discard set!
    #####:  866:	while(card_not_discarded){
    #####:  867:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  868:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  869:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  870:	    state->discardCount[currentPlayer]++;
    #####:  871:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  872:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  873:	    }
    #####:  874:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  875:	    state->handCount[currentPlayer]--;
    #####:  876:	    card_not_discarded = 0;//Exit the loop
        -:  877:	  }
    #####:  878:	  else if (p > state->handCount[currentPlayer]){
        -:  879:	    if(DEBUG) {
        -:  880:	      printf("No estate cards in your hand, invalid choice\n");
        -:  881:	      printf("Must gain an estate if there are any\n");
        -:  882:	    }
    #####:  883:	    if (supplyCount(estate, state) > 0){
    #####:  884:	      gainCard(estate, state, 0, currentPlayer);
    #####:  885:	      state->supplyCount[estate]--;//Decrement estates
    #####:  886:	      if (supplyCount(estate, state) == 0){
    #####:  887:		isGameOver(state);
        -:  888:	      }
        -:  889:	    }
    #####:  890:	    card_not_discarded = 0;//Exit the loop
        -:  891:	  }
        -:  892:
        -:  893:	  else{
    #####:  894:	    p++;//Next card
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:
        -:  899:      else{
    #####:  900:	if (supplyCount(estate, state) > 0){
    #####:  901:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  902:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  903:	  if (supplyCount(estate, state) == 0){
    #####:  904:	    isGameOver(state);
        -:  905:	  }
        -:  906:	}
        -:  907:      }
        -:  908:
        -:  909:
    #####:  910:      return 0;
        -:  911:
        -:  912:    case great_hall:
        -:  913:      //+1 Card
    12000:  914:      drawCard(currentPlayer, state);
        -:  915:
        -:  916:      //+1 Actions
    12000:  917:      state->numActions++;
        -:  918:
        -:  919:      //discard card from hand
    12000:  920:      discardCard(handPos, currentPlayer, state, 0);
    12000:  921:      return 0;
        -:  922:
        -:  923:    case minion:
        -:  924:      //+1 action
    #####:  925:      state->numActions++;
        -:  926:
        -:  927:      //discard card from hand
    #####:  928:      discardCard(handPos, currentPlayer, state, 0);
        -:  929:
    #####:  930:      if (choice1)		//+2 coins
        -:  931:	{
    #####:  932:	  state->coins = state->coins + 2;
        -:  933:	}
        -:  934:
    #####:  935:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  936:	{
        -:  937:	  //discard hand
    #####:  938:	  while(numHandCards(state) > 0)
        -:  939:	    {
    #####:  940:	      discardCard(handPos, currentPlayer, state, 0);
        -:  941:	    }
        -:  942:
        -:  943:	  //draw 4
    #####:  944:	  for (i = 0; i < 4; i++)
        -:  945:	    {
    #####:  946:	      drawCard(currentPlayer, state);
        -:  947:	    }
        -:  948:
        -:  949:	  //other players discard hand and redraw if hand size > 4
    #####:  950:	  for (i = 0; i < state->numPlayers; i++)
        -:  951:	    {
    #####:  952:	      if (i != currentPlayer)
        -:  953:		{
    #####:  954:		  if ( state->handCount[i] > 4 )
        -:  955:		    {
        -:  956:		      //discard hand
    #####:  957:		      while( state->handCount[i] > 0 )
        -:  958:			{
    #####:  959:			  discardCard(handPos, i, state, 0);
        -:  960:			}
        -:  961:
        -:  962:		      //draw 4
    #####:  963:		      for (j = 0; j < 4; j++)
        -:  964:			{
    #####:  965:			  drawCard(i, state);
        -:  966:			}
        -:  967:		    }
        -:  968:		}
        -:  969:	    }
        -:  970:
        -:  971:	}
    #####:  972:      return 0;
        -:  973:
        -:  974:    case steward:
    #####:  975:      if (choice1 == 1)
        -:  976:	{
        -:  977:	  //+2 cards
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
    #####:  981:      else if (choice1 == 2)
        -:  982:	{
        -:  983:	  //+2 coins
    #####:  984:	  state->coins = state->coins + 2;
        -:  985:	}
        -:  986:      else
        -:  987:	{
        -:  988:	  //trash 2 cards in hand
    #####:  989:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  990:	  discardCard(choice3, currentPlayer, state, 1);
        -:  991:	}
        -:  992:
        -:  993:      //discard card from hand
    #####:  994:      discardCard(handPos, currentPlayer, state, 0);
    #####:  995:      return 0;
        -:  996:
        -:  997:    case tribute:
    #####:  998:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  999:	if (state->deckCount[nextPlayer] > 0){
    #####: 1000:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1001:	  state->deckCount[nextPlayer]--;
        -: 1002:	}
    #####: 1003:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1004:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1005:	  state->discardCount[nextPlayer]--;
        -: 1006:	}
        -: 1007:	else{
        -: 1008:	  //No Card to Reveal
        -: 1009:	  if (DEBUG){
        -: 1010:	    printf("No cards to reveal\n");
        -: 1011:	  }
        -: 1012:	}
        -: 1013:      }
        -: 1014:
        -: 1015:      else{
    #####: 1016:	if (state->deckCount[nextPlayer] == 0){
    #####: 1017:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1018:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1019:	    state->deckCount[nextPlayer]++;
    #####: 1020:	    state->discard[nextPlayer][i] = -1;
    #####: 1021:	    state->discardCount[nextPlayer]--;
        -: 1022:	  }
        -: 1023:
    #####: 1024:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1025:	}
    #####: 1026:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1028:	state->deckCount[nextPlayer]--;
    #####: 1029:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1030:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1031:	state->deckCount[nextPlayer]--;
        -: 1032:      }
        -: 1033:
    #####: 1034:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1035:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1036:	state->playedCardCount++;
    #####: 1037:	tributeRevealedCards[1] = -1;
        -: 1038:      }
        -: 1039:
    #####: 1040:      for (i = 0; i <= 2; i ++){
    #####: 1041:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1042:	  state->coins += 2;
        -: 1043:	}
        -: 1044:
    #####: 1045:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1046:	  drawCard(currentPlayer, state);
    #####: 1047:	  drawCard(currentPlayer, state);
        -: 1048:	}
        -: 1049:	else{//Action Card
    #####: 1050:	  state->numActions = state->numActions + 2;
        -: 1051:	}
        -: 1052:      }
        -: 1053:
    #####: 1054:      return 0;
        -: 1055:
        -: 1056:    case ambassador:
    #####: 1057:      j = 0;		//used to check if player has enough cards to discard
        -: 1058:
    #####: 1059:      if (choice2 > 2 || choice2 < 0)
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:
    #####: 1064:      if (choice1 == handPos)
        -: 1065:	{
    #####: 1066:	  return -1;
        -: 1067:	}
        -: 1068:
    #####: 1069:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1070:	{
    #####: 1071:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1072:	    {
    #####: 1073:	      j++;
        -: 1074:	    }
        -: 1075:	}
    #####: 1076:      if (j < choice2)
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
        -: 1081:      if (DEBUG)
        -: 1082:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1083:
        -: 1084:      //increase supply count for choosen card by amount being discarded
    #####: 1085:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1086:
        -: 1087:      //each other player gains a copy of revealed card
    #####: 1088:      for (i = 0; i < state->numPlayers; i++)
        -: 1089:	{
    #####: 1090:	  if (i != currentPlayer)
        -: 1091:	    {
    #####: 1092:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1093:	    }
        -: 1094:	}
        -: 1095:
        -: 1096:      //discard played card from hand
    #####: 1097:      discardCard(handPos, currentPlayer, state, 0);
        -: 1098:
        -: 1099:      //trash copies of cards returned to supply
    #####: 1100:      for (j = 0; j < choice2; j++)
        -: 1101:	{
    #####: 1102:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1103:	    {
    #####: 1104:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1105:		{
    #####: 1106:		  discardCard(i, currentPlayer, state, 1);
    #####: 1107:		  break;
        -: 1108:		}
        -: 1109:	    }
        -: 1110:	}
        -: 1111:
    #####: 1112:      return 0;
        -: 1113:
        -: 1114:    case cutpurse:
        -: 1115:
    #####: 1116:      updateCoins(currentPlayer, state, 2);
    #####: 1117:      for (i = 0; i < state->numPlayers; i++)
        -: 1118:	{
    #####: 1119:	  if (i != currentPlayer)
        -: 1120:	    {
    #####: 1121:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1122:		{
    #####: 1123:		  if (state->hand[i][j] == copper)
        -: 1124:		    {
    #####: 1125:		      discardCard(j, i, state, 0);
    #####: 1126:		      break;
        -: 1127:		    }
    #####: 1128:		  if (j == state->handCount[i])
        -: 1129:		    {
    #####: 1130:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1131:			{
        -: 1132:			  if (DEBUG)
        -: 1133:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1134:			}
    #####: 1135:		      break;
        -: 1136:		    }
        -: 1137:		}
        -: 1138:
        -: 1139:	    }
        -: 1140:
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
    #####: 1146:      return 0;
        -: 1147:
        -: 1148:
        -: 1149:    case embargo:
        -: 1150:      //+2 Coins
    #####: 1151:      state->coins = state->coins + 2;
        -: 1152:
        -: 1153:      //see if selected pile is in play
    #####: 1154:      if ( state->supplyCount[choice1] == -1 )
        -: 1155:	{
    #####: 1156:	  return -1;
        -: 1157:	}
        -: 1158:
        -: 1159:      //add embargo token to selected supply pile
    #####: 1160:      state->embargoTokens[choice1]++;
        -: 1161:
        -: 1162:      //trash card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1164:      return 0;
        -: 1165:
        -: 1166:    case outpost:
        -: 1167:      //set outpost flag
    #####: 1168:      state->outpostPlayed++;
        -: 1169:
        -: 1170:      //discard card
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1172:      return 0;
        -: 1173:
        -: 1174:    case salvager:
        -: 1175:      //+1 buy
    #####: 1176:      state->numBuys++;
        -: 1177:
    #####: 1178:      if (choice1)
        -: 1179:	{
        -: 1180:	  //gain coins equal to trashed card
    #####: 1181:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1182:	  //trash card
    #####: 1183:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1184:	}
        -: 1185:
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:    case sea_hag:
    #####: 1191:      for (i = 0; i < state->numPlayers; i++){
    #####: 1192:	if (i != currentPlayer){
    #####: 1193:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1194:	  state->discardCount[i]++;
    #####: 1195:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1196:	}
        -: 1197:      }
    #####: 1198:      return 0;
        -: 1199:
        -: 1200:    case treasure_map:
        -: 1201:      //search hand for another treasure_map
    #####: 1202:      index = -1;
    #####: 1203:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1206:	    {
    #####: 1207:	      index = i;
    #####: 1208:	      break;
        -: 1209:	    }
        -: 1210:	}
    #####: 1211:      if (index > -1)
        -: 1212:	{
        -: 1213:	  //trash both treasure cards
    #####: 1214:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1215:	  discardCard(index, currentPlayer, state, 1);
        -: 1216:
        -: 1217:	  //gain 4 Gold cards
    #####: 1218:	  for (i = 0; i < 4; i++)
        -: 1219:	    {
    #####: 1220:	      gainCard(gold, state, 1, currentPlayer);
        -: 1221:	    }
        -: 1222:
        -: 1223:	  //return success
    #####: 1224:	  return 1;
        -: 1225:	}
        -: 1226:
        -: 1227:      //no second treasure_map found in hand
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:  return -1;
        -: 1232:}
        -: 1233:
    56000: 1234:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1235:{
        -: 1236:
        -: 1237:  //if card is not trashed, added to Played pile
    56000: 1238:  if (trashFlag < 1)
        -: 1239:    {
        -: 1240:      //add card to played pile
    56000: 1241:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    56000: 1242:      state->playedCardCount++;
        -: 1243:    }
        -: 1244:
        -: 1245:  //set played card to -1
    56000: 1246:  state->hand[currentPlayer][handPos] = -1;
        -: 1247:
        -: 1248:  //remove card from player's hand
    56000: 1249:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1250:    {
        -: 1251:      //reduce number of cards in hand
       19: 1252:      state->handCount[currentPlayer]--;
        -: 1253:    }
    55981: 1254:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1255:    {
        -: 1256:      //reduce number of cards in hand
    #####: 1257:      state->handCount[currentPlayer]--;
        -: 1258:    }
        -: 1259:  else
        -: 1260:    {
        -: 1261:      //replace discarded card with last card in hand
    55981: 1262:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1263:      //set last card to -1
    55981: 1264:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1265:      //reduce number of cards in hand
    55981: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
        -: 1268:
    56000: 1269:  return 0;
        -: 1270:}
        -: 1271:
    #####: 1272:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1273:{
        -: 1274:  //Note: supplyPos is enum of choosen card
        -: 1275:
        -: 1276:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1277:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1278:    {
    #####: 1279:      return -1;
        -: 1280:    }
        -: 1281:
        -: 1282:  //added card for [whoseTurn] current player:
        -: 1283:  // toFlag = 0 : add to discard
        -: 1284:  // toFlag = 1 : add to deck
        -: 1285:  // toFlag = 2 : add to hand
        -: 1286:
    #####: 1287:  if (toFlag == 1)
        -: 1288:    {
    #####: 1289:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1290:      state->deckCount[player]++;
        -: 1291:    }
    #####: 1292:  else if (toFlag == 2)
        -: 1293:    {
    #####: 1294:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1295:      state->handCount[player]++;
        -: 1296:    }
        -: 1297:  else
        -: 1298:    {
    #####: 1299:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1300:      state->discardCount[player]++;
        -: 1301:    }
        -: 1302:
        -: 1303:  //decrease number in supply pile
    #####: 1304:  state->supplyCount[supplyPos]--;
        -: 1305:
    #####: 1306:  return 0;
        -: 1307:}
        -: 1308:
      113: 1309:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1310:{
        -: 1311:  int i;
        -: 1312:
        -: 1313:  //reset coin count
      113: 1314:  state->coins = 0;
        -: 1315:
        -: 1316:  //add coins for each Treasure card in player's hand
      158: 1317:  for (i = 0; i < state->handCount[player]; i++)
        -: 1318:    {
       45: 1319:      if (state->hand[player][i] == copper)
        -: 1320:	{
       36: 1321:	  state->coins += 1;
        -: 1322:	}
        9: 1323:      else if (state->hand[player][i] == silver)
        -: 1324:	{
    #####: 1325:	  state->coins += 2;
        -: 1326:	}
        9: 1327:      else if (state->hand[player][i] == gold)
        -: 1328:	{
    #####: 1329:	  state->coins += 3;
        -: 1330:	}
        -: 1331:    }
        -: 1332:
        -: 1333:  //add bonus
      113: 1334:  state->coins += bonus;
        -: 1335:
      113: 1336:  return 0;
        -: 1337:}
        -: 1338:
        -: 1339:
        -: 1340://end of dominion.c
unittest3.c:
Expected coin count: 0. Actual coin count: 0 
Expected coin count: 1. Actual coin count: 1 
Expected coin count: 0. Actual coin count: 0 
Expected coin count: 1. Actual coin count: 1 
Expected coin count: 0. Actual coin count: 0 
Expected coin count: 1. Actual coin count: 1 
Expected coin count: 0. Actual coin count: 0 
Expected coin count: 1. Actual coin count: 1 
File 'dominion.c'
Lines executed:34.94% of 561
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:87
        -:    0:Programs:82
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      270:    8:int compare(const void* a, const void* b) {
      270:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      270:   11:  if (*(int*)a < *(int*)b)
       72:   12:    return -1;
      198:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
        9:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
        -:   74:    {
        9:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
        -:   88:    {
        9:   89:      state->supplyCount[estate] = 8;
        9:   90:      state->supplyCount[duchy] = 8;
        9:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       90:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       27:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       18:  140:      state->deckCount[i] = 0;
       72:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       54:  143:	  state->deck[i][j] = estate;
       54:  144:	  state->deckCount[i]++;
        -:  145:	}
      144:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      126:  148:	  state->deck[i][j] = copper;
      126:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       27:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       18:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       27:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       18:  166:      state->handCount[i] = 0;
       18:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
       45:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
       18:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       18:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       18:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       18:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      216:  214:  while (state->deckCount[player] > 0) {
      180:  215:    card = floor(Random() * state->deckCount[player]);
      180:  216:    newDeck[newDeckPos] = state->deck[player][card];
      180:  217:    newDeckPos++;
      648:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      468:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      180:  221:    state->deckCount[player]--;
        -:  222:  }
      198:  223:  for (i = 0; i < newDeckPos; i++) {
      180:  224:    state->deck[player][i] = newDeck[i];
      180:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       18:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
      156:  311:int numHandCards(struct gameState *state) {
      156:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    68165:  346:int whoseTurn(struct gameState *state) {
    68165:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    14028:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    14028:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
     1666:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    12362:  401:  j = 0;
   321412:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
   309050:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    37044:  406:	  j++;
        -:  407:	}
        -:  408:    }
    12362:  409:  if ( j >= 3)
        -:  410:    {
    12348:  411:      return 1;
        -:  412:    }
        -:  413:
       14:  414:  return 0;
        -:  415:}
        -:  416:
       36:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       36:  420:  int score = 0;
        -:  421:  //score from hand
      144:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
      108:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
      108:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
      108:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
      108:  427:      if (state->hand[player][i] == province) { score = score + 6; };
      108:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      108:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       36:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       36:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
       36:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   204063:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   204063:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   204063:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   204063:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   204063:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   204063:  576:    state->deckCount[player]--;
   204063:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   204063:  580:  return 0;
        -:  581:}
        -:  582:
      490:  583:int getCost(int cardNumber)
        -:  584:{
      490:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
       14:  588:      return 0;
        -:  589:    case estate:
       14:  590:      return 2;
        -:  591:    case duchy:
       14:  592:      return 5;
        -:  593:    case province:
       14:  594:      return 8;
        -:  595:    case copper:
       14:  596:      return 0;
        -:  597:    case silver:
       14:  598:      return 3;
        -:  599:    case gold:
       14:  600:      return 6;
        -:  601:    case adventurer:
       14:  602:      return 6;
        -:  603:    case council_room:
       14:  604:      return 5;
        -:  605:    case feast:
       14:  606:      return 4;
        -:  607:    case gardens:
       14:  608:      return 4;
        -:  609:    case mine:
       14:  610:      return 5;
        -:  611:    case remodel:
       14:  612:      return 4;
        -:  613:    case smithy:
       14:  614:      return 4;
        -:  615:    case village:
       14:  616:      return 3;
        -:  617:    case baron:
       14:  618:      return 4;
        -:  619:    case great_hall:
       14:  620:      return 3;
        -:  621:    case minion:
       14:  622:      return 5;
        -:  623:    case steward:
       14:  624:      return 3;
        -:  625:    case tribute:
       14:  626:      return 5;
        -:  627:    case ambassador:
       14:  628:      return 3;
        -:  629:    case cutpurse:
       14:  630:      return 4;
        -:  631:    case embargo:
       14:  632:      return 2;
        -:  633:    case outpost:
       14:  634:      return 5;
        -:  635:    case salvager:
       14:  636:      return 4;
        -:  637:    case sea_hag:
       14:  638:      return 4;
        -:  639:    case treasure_map:
       14:  640:      return 4;
        -:  641:    }
        -:  642:
      112:  643:  return -1;
        -:  644:}
        -:  645:
        9:  646:void adventurer_action (int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z) {
       36:  647:    while(drawntreasure<2){
       18:  648:        if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:            shuffle(currentPlayer, state);
        -:  650:        }
       18:  651:        drawCard(currentPlayer, state);
       18:  652:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       18:  653:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       18:  654:          drawntreasure++;
        -:  655:        else{
    #####:  656:          temphand[z]=cardDrawn;
    #####:  657:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  658:        }
        -:  659:  }
       18:  660:  while(z-1>=0){
    #####:  661:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  662:      z=z-1;
        -:  663:  }
        9:  664:}
        -:  665:
    44000:  666:void smithy_action (int currentPlayer, struct gameState *state, int i, int handPos) {
        -:  667:  //+3 Cards
   176000:  668:  for (i = 0; i < 3; i++) {
   132000:  669:    drawCard(currentPlayer, state);
        -:  670:  }
        -:  671:
        -:  672:  //discard card from hand
    44000:  673:  discardCard(handPos, currentPlayer, state, 0);
    44000:  674:}
        -:  675:
    #####:  676:void village_action (int currentPlayer, struct gameState *state, int handPos) {
        -:  677:  //+1 Card
    #####:  678:  drawCard(currentPlayer, state);
        -:  679:
        -:  680:  //+2 Actions
    #####:  681:  state->numActions = state->numActions + 2;
        -:  682:
        -:  683:  //discard played card from hand
    #####:  684:  discardCard(handPos, currentPlayer, state, 0);
    #####:  685:}
        -:  686:
    12000:  687:void council_room_action (int i, int currentPlayer, struct gameState *state) {
        -:  688:  //+4 Cards
    60000:  689:  for (i = 0; i < 4; i++) {
    48000:  690:      drawCard(currentPlayer, state);
        -:  691:  }
        -:  692:
        -:  693:  //+1 Buy
    12000:  694:  state->numBuys++;
        -:  695:
        -:  696:  //Each other player draws a card
    60000:  697:  for (i = 0; i < state->numPlayers; i++) {
    48000:  698:      if ( i == currentPlayer ) {
    12000:  699:          drawCard(i, state);
        -:  700:      }
        -:  701:  }
    12000:  702:}
        -:  703:
    #####:  704:int mine_action (int j, struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos, int i) {
    #####:  705:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  706:
    #####:  707:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
    #####:  708:      return -1;
        -:  709:  }
        -:  710:
    #####:  711:  if (choice2 > treasure_map || choice2 < curse) {
    #####:  712:      return -1;
        -:  713:  }
        -:  714:
    #####:  715:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
    #####:  716:      return -1;
        -:  717:  }
        -:  718:
    #####:  719:  gainCard(choice2, state, 2, currentPlayer);
        -:  720:
        -:  721:  //discard card from hand
    #####:  722:  discardCard(handPos, currentPlayer, state, 0);
        -:  723:
        -:  724:  //discard trashed card
    #####:  725:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  726:      if (state->hand[currentPlayer][i] == j) {
    #####:  727:        discardCard(i, currentPlayer, state, 0);
    #####:  728:        break;
        -:  729:      }
        -:  730:  }
        -:  731:
    #####:  732:  return -1;
        -:  733:}
        -:  734:
    68009:  735:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  736:{
        -:  737:  int i;
        -:  738:  int j;
        -:  739:  int k;
        -:  740:  int x;
        -:  741:  int m;
        -:  742:  int index;
    68009:  743:  int currentPlayer = whoseTurn(state);
    68009:  744:  int nextPlayer = currentPlayer + 1;
        -:  745:
    68009:  746:  int tributeRevealedCards[2] = {-1, -1};
        -:  747:  int temphand[MAX_HAND];// moved above the if statement
    68009:  748:  int drawntreasure=0;
        -:  749:  int cardDrawn;
    68009:  750:  int z = 0;// this is the counter for the temp hand
    68009:  751:  if (nextPlayer > (state->numPlayers - 1)){
    47000:  752:    nextPlayer = 0;
        -:  753:  }
        -:  754:
        -:  755:
        -:  756:  //uses switch to select card and perform actions
    68009:  757:  switch( card )
        -:  758:    {
        -:  759:    case adventurer:
        9:  760:      adventurer_action (drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        9:  761:      return 0;
        -:  762:
        -:  763:    case council_room:
    12000:  764:      council_room_action (i, currentPlayer, state);
    12000:  765:      return 0;
        -:  766:
        -:  767:    case feast:
        -:  768:      //gain card with cost up to 5
        -:  769:      //Backup hand
    #####:  770:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  771:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  772:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  773:      }
        -:  774:      //Backup hand
        -:  775:
        -:  776:      //Update Coins for Buy
    #####:  777:      updateCoins(currentPlayer, state, 5);
    #####:  778:      x = 1;//Condition to loop on
    #####:  779:      while( x == 1) {//Buy one card
    #####:  780:	if (supplyCount(choice1, state) <= 0){
        -:  781:	  if (DEBUG)
        -:  782:	    printf("None of that card left, sorry!\n");
        -:  783:
        -:  784:	  if (DEBUG){
        -:  785:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  786:	  }
        -:  787:	}
    #####:  788:	else if (state->coins < getCost(choice1)){
    #####:  789:	  printf("That card is too expensive!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  793:	  }
        -:  794:	}
        -:  795:	else{
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  799:	  }
        -:  800:
    #####:  801:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  802:	  x = 0;//No more buying cards
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
        -:  808:	}
        -:  809:      }
        -:  810:
        -:  811:      //Reset Hand
    #####:  812:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  813:	state->hand[currentPlayer][i] = temphand[i];
    #####:  814:	temphand[i] = -1;
        -:  815:      }
        -:  816:      //Reset Hand
        -:  817:
    #####:  818:      return 0;
        -:  819:
        -:  820:    case gardens:
    #####:  821:      return -1;
        -:  822:
        -:  823:    case mine:
    #####:  824:      m = mine_action (j, state, currentPlayer, choice1, choice2, handPos, i);
    #####:  825:      return m;
        -:  826:
        -:  827:    case remodel:
    #####:  828:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  829:
    #####:  830:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  831:	{
    #####:  832:	  return -1;
        -:  833:	}
        -:  834:
    #####:  835:      gainCard(choice2, state, 0, currentPlayer);
        -:  836:
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:
        -:  840:      //discard trashed card
    #####:  841:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  842:	{
    #####:  843:	  if (state->hand[currentPlayer][i] == j)
        -:  844:	    {
    #####:  845:	      discardCard(i, currentPlayer, state, 0);
    #####:  846:	      break;
        -:  847:	    }
        -:  848:	}
        -:  849:
        -:  850:
    #####:  851:      return 0;
        -:  852:
        -:  853:    case smithy:
    44000:  854:      smithy_action (currentPlayer, state, i, handPos);
    44000:  855:      return 0;
        -:  856:
        -:  857:    case village:
    #####:  858:      village_action (currentPlayer, state, handPos);
    #####:  859:      return 0;
        -:  860:
        -:  861:    case baron:
    #####:  862:      state->numBuys++;//Increase buys by 1!
    #####:  863:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  864:	int p = 0;//Iterator for hand!
    #####:  865:	int card_not_discarded = 1;//Flag for discard set!
    #####:  866:	while(card_not_discarded){
    #####:  867:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  868:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  869:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  870:	    state->discardCount[currentPlayer]++;
    #####:  871:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  872:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  873:	    }
    #####:  874:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  875:	    state->handCount[currentPlayer]--;
    #####:  876:	    card_not_discarded = 0;//Exit the loop
        -:  877:	  }
    #####:  878:	  else if (p > state->handCount[currentPlayer]){
        -:  879:	    if(DEBUG) {
        -:  880:	      printf("No estate cards in your hand, invalid choice\n");
        -:  881:	      printf("Must gain an estate if there are any\n");
        -:  882:	    }
    #####:  883:	    if (supplyCount(estate, state) > 0){
    #####:  884:	      gainCard(estate, state, 0, currentPlayer);
    #####:  885:	      state->supplyCount[estate]--;//Decrement estates
    #####:  886:	      if (supplyCount(estate, state) == 0){
    #####:  887:		isGameOver(state);
        -:  888:	      }
        -:  889:	    }
    #####:  890:	    card_not_discarded = 0;//Exit the loop
        -:  891:	  }
        -:  892:
        -:  893:	  else{
    #####:  894:	    p++;//Next card
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:
        -:  899:      else{
    #####:  900:	if (supplyCount(estate, state) > 0){
    #####:  901:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  902:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  903:	  if (supplyCount(estate, state) == 0){
    #####:  904:	    isGameOver(state);
        -:  905:	  }
        -:  906:	}
        -:  907:      }
        -:  908:
        -:  909:
    #####:  910:      return 0;
        -:  911:
        -:  912:    case great_hall:
        -:  913:      //+1 Card
    12000:  914:      drawCard(currentPlayer, state);
        -:  915:
        -:  916:      //+1 Actions
    12000:  917:      state->numActions++;
        -:  918:
        -:  919:      //discard card from hand
    12000:  920:      discardCard(handPos, currentPlayer, state, 0);
    12000:  921:      return 0;
        -:  922:
        -:  923:    case minion:
        -:  924:      //+1 action
    #####:  925:      state->numActions++;
        -:  926:
        -:  927:      //discard card from hand
    #####:  928:      discardCard(handPos, currentPlayer, state, 0);
        -:  929:
    #####:  930:      if (choice1)		//+2 coins
        -:  931:	{
    #####:  932:	  state->coins = state->coins + 2;
        -:  933:	}
        -:  934:
    #####:  935:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  936:	{
        -:  937:	  //discard hand
    #####:  938:	  while(numHandCards(state) > 0)
        -:  939:	    {
    #####:  940:	      discardCard(handPos, currentPlayer, state, 0);
        -:  941:	    }
        -:  942:
        -:  943:	  //draw 4
    #####:  944:	  for (i = 0; i < 4; i++)
        -:  945:	    {
    #####:  946:	      drawCard(currentPlayer, state);
        -:  947:	    }
        -:  948:
        -:  949:	  //other players discard hand and redraw if hand size > 4
    #####:  950:	  for (i = 0; i < state->numPlayers; i++)
        -:  951:	    {
    #####:  952:	      if (i != currentPlayer)
        -:  953:		{
    #####:  954:		  if ( state->handCount[i] > 4 )
        -:  955:		    {
        -:  956:		      //discard hand
    #####:  957:		      while( state->handCount[i] > 0 )
        -:  958:			{
    #####:  959:			  discardCard(handPos, i, state, 0);
        -:  960:			}
        -:  961:
        -:  962:		      //draw 4
    #####:  963:		      for (j = 0; j < 4; j++)
        -:  964:			{
    #####:  965:			  drawCard(i, state);
        -:  966:			}
        -:  967:		    }
        -:  968:		}
        -:  969:	    }
        -:  970:
        -:  971:	}
    #####:  972:      return 0;
        -:  973:
        -:  974:    case steward:
    #####:  975:      if (choice1 == 1)
        -:  976:	{
        -:  977:	  //+2 cards
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
    #####:  981:      else if (choice1 == 2)
        -:  982:	{
        -:  983:	  //+2 coins
    #####:  984:	  state->coins = state->coins + 2;
        -:  985:	}
        -:  986:      else
        -:  987:	{
        -:  988:	  //trash 2 cards in hand
    #####:  989:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  990:	  discardCard(choice3, currentPlayer, state, 1);
        -:  991:	}
        -:  992:
        -:  993:      //discard card from hand
    #####:  994:      discardCard(handPos, currentPlayer, state, 0);
    #####:  995:      return 0;
        -:  996:
        -:  997:    case tribute:
    #####:  998:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  999:	if (state->deckCount[nextPlayer] > 0){
    #####: 1000:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1001:	  state->deckCount[nextPlayer]--;
        -: 1002:	}
    #####: 1003:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1004:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1005:	  state->discardCount[nextPlayer]--;
        -: 1006:	}
        -: 1007:	else{
        -: 1008:	  //No Card to Reveal
        -: 1009:	  if (DEBUG){
        -: 1010:	    printf("No cards to reveal\n");
        -: 1011:	  }
        -: 1012:	}
        -: 1013:      }
        -: 1014:
        -: 1015:      else{
    #####: 1016:	if (state->deckCount[nextPlayer] == 0){
    #####: 1017:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1018:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1019:	    state->deckCount[nextPlayer]++;
    #####: 1020:	    state->discard[nextPlayer][i] = -1;
    #####: 1021:	    state->discardCount[nextPlayer]--;
        -: 1022:	  }
        -: 1023:
    #####: 1024:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1025:	}
    #####: 1026:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1028:	state->deckCount[nextPlayer]--;
    #####: 1029:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1030:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1031:	state->deckCount[nextPlayer]--;
        -: 1032:      }
        -: 1033:
    #####: 1034:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1035:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1036:	state->playedCardCount++;
    #####: 1037:	tributeRevealedCards[1] = -1;
        -: 1038:      }
        -: 1039:
    #####: 1040:      for (i = 0; i <= 2; i ++){
    #####: 1041:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1042:	  state->coins += 2;
        -: 1043:	}
        -: 1044:
    #####: 1045:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1046:	  drawCard(currentPlayer, state);
    #####: 1047:	  drawCard(currentPlayer, state);
        -: 1048:	}
        -: 1049:	else{//Action Card
    #####: 1050:	  state->numActions = state->numActions + 2;
        -: 1051:	}
        -: 1052:      }
        -: 1053:
    #####: 1054:      return 0;
        -: 1055:
        -: 1056:    case ambassador:
    #####: 1057:      j = 0;		//used to check if player has enough cards to discard
        -: 1058:
    #####: 1059:      if (choice2 > 2 || choice2 < 0)
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:
    #####: 1064:      if (choice1 == handPos)
        -: 1065:	{
    #####: 1066:	  return -1;
        -: 1067:	}
        -: 1068:
    #####: 1069:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1070:	{
    #####: 1071:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1072:	    {
    #####: 1073:	      j++;
        -: 1074:	    }
        -: 1075:	}
    #####: 1076:      if (j < choice2)
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
        -: 1081:      if (DEBUG)
        -: 1082:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1083:
        -: 1084:      //increase supply count for choosen card by amount being discarded
    #####: 1085:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1086:
        -: 1087:      //each other player gains a copy of revealed card
    #####: 1088:      for (i = 0; i < state->numPlayers; i++)
        -: 1089:	{
    #####: 1090:	  if (i != currentPlayer)
        -: 1091:	    {
    #####: 1092:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1093:	    }
        -: 1094:	}
        -: 1095:
        -: 1096:      //discard played card from hand
    #####: 1097:      discardCard(handPos, currentPlayer, state, 0);
        -: 1098:
        -: 1099:      //trash copies of cards returned to supply
    #####: 1100:      for (j = 0; j < choice2; j++)
        -: 1101:	{
    #####: 1102:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1103:	    {
    #####: 1104:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1105:		{
    #####: 1106:		  discardCard(i, currentPlayer, state, 1);
    #####: 1107:		  break;
        -: 1108:		}
        -: 1109:	    }
        -: 1110:	}
        -: 1111:
    #####: 1112:      return 0;
        -: 1113:
        -: 1114:    case cutpurse:
        -: 1115:
    #####: 1116:      updateCoins(currentPlayer, state, 2);
    #####: 1117:      for (i = 0; i < state->numPlayers; i++)
        -: 1118:	{
    #####: 1119:	  if (i != currentPlayer)
        -: 1120:	    {
    #####: 1121:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1122:		{
    #####: 1123:		  if (state->hand[i][j] == copper)
        -: 1124:		    {
    #####: 1125:		      discardCard(j, i, state, 0);
    #####: 1126:		      break;
        -: 1127:		    }
    #####: 1128:		  if (j == state->handCount[i])
        -: 1129:		    {
    #####: 1130:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1131:			{
        -: 1132:			  if (DEBUG)
        -: 1133:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1134:			}
    #####: 1135:		      break;
        -: 1136:		    }
        -: 1137:		}
        -: 1138:
        -: 1139:	    }
        -: 1140:
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
    #####: 1146:      return 0;
        -: 1147:
        -: 1148:
        -: 1149:    case embargo:
        -: 1150:      //+2 Coins
    #####: 1151:      state->coins = state->coins + 2;
        -: 1152:
        -: 1153:      //see if selected pile is in play
    #####: 1154:      if ( state->supplyCount[choice1] == -1 )
        -: 1155:	{
    #####: 1156:	  return -1;
        -: 1157:	}
        -: 1158:
        -: 1159:      //add embargo token to selected supply pile
    #####: 1160:      state->embargoTokens[choice1]++;
        -: 1161:
        -: 1162:      //trash card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1164:      return 0;
        -: 1165:
        -: 1166:    case outpost:
        -: 1167:      //set outpost flag
    #####: 1168:      state->outpostPlayed++;
        -: 1169:
        -: 1170:      //discard card
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1172:      return 0;
        -: 1173:
        -: 1174:    case salvager:
        -: 1175:      //+1 buy
    #####: 1176:      state->numBuys++;
        -: 1177:
    #####: 1178:      if (choice1)
        -: 1179:	{
        -: 1180:	  //gain coins equal to trashed card
    #####: 1181:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1182:	  //trash card
    #####: 1183:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1184:	}
        -: 1185:
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:    case sea_hag:
    #####: 1191:      for (i = 0; i < state->numPlayers; i++){
    #####: 1192:	if (i != currentPlayer){
    #####: 1193:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1194:	  state->discardCount[i]++;
    #####: 1195:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1196:	}
        -: 1197:      }
    #####: 1198:      return 0;
        -: 1199:
        -: 1200:    case treasure_map:
        -: 1201:      //search hand for another treasure_map
    #####: 1202:      index = -1;
    #####: 1203:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1206:	    {
    #####: 1207:	      index = i;
    #####: 1208:	      break;
        -: 1209:	    }
        -: 1210:	}
    #####: 1211:      if (index > -1)
        -: 1212:	{
        -: 1213:	  //trash both treasure cards
    #####: 1214:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1215:	  discardCard(index, currentPlayer, state, 1);
        -: 1216:
        -: 1217:	  //gain 4 Gold cards
    #####: 1218:	  for (i = 0; i < 4; i++)
        -: 1219:	    {
    #####: 1220:	      gainCard(gold, state, 1, currentPlayer);
        -: 1221:	    }
        -: 1222:
        -: 1223:	  //return success
    #####: 1224:	  return 1;
        -: 1225:	}
        -: 1226:
        -: 1227:      //no second treasure_map found in hand
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:  return -1;
        -: 1232:}
        -: 1233:
    56000: 1234:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1235:{
        -: 1236:
        -: 1237:  //if card is not trashed, added to Played pile
    56000: 1238:  if (trashFlag < 1)
        -: 1239:    {
        -: 1240:      //add card to played pile
    56000: 1241:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    56000: 1242:      state->playedCardCount++;
        -: 1243:    }
        -: 1244:
        -: 1245:  //set played card to -1
    56000: 1246:  state->hand[currentPlayer][handPos] = -1;
        -: 1247:
        -: 1248:  //remove card from player's hand
    56000: 1249:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1250:    {
        -: 1251:      //reduce number of cards in hand
       19: 1252:      state->handCount[currentPlayer]--;
        -: 1253:    }
    55981: 1254:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1255:    {
        -: 1256:      //reduce number of cards in hand
    #####: 1257:      state->handCount[currentPlayer]--;
        -: 1258:    }
        -: 1259:  else
        -: 1260:    {
        -: 1261:      //replace discarded card with last card in hand
    55981: 1262:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1263:      //set last card to -1
    55981: 1264:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1265:      //reduce number of cards in hand
    55981: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
        -: 1268:
    56000: 1269:  return 0;
        -: 1270:}
        -: 1271:
    #####: 1272:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1273:{
        -: 1274:  //Note: supplyPos is enum of choosen card
        -: 1275:
        -: 1276:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1277:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1278:    {
    #####: 1279:      return -1;
        -: 1280:    }
        -: 1281:
        -: 1282:  //added card for [whoseTurn] current player:
        -: 1283:  // toFlag = 0 : add to discard
        -: 1284:  // toFlag = 1 : add to deck
        -: 1285:  // toFlag = 2 : add to hand
        -: 1286:
    #####: 1287:  if (toFlag == 1)
        -: 1288:    {
    #####: 1289:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1290:      state->deckCount[player]++;
        -: 1291:    }
    #####: 1292:  else if (toFlag == 2)
        -: 1293:    {
    #####: 1294:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1295:      state->handCount[player]++;
        -: 1296:    }
        -: 1297:  else
        -: 1298:    {
    #####: 1299:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1300:      state->discardCount[player]++;
        -: 1301:    }
        -: 1302:
        -: 1303:  //decrease number in supply pile
    #####: 1304:  state->supplyCount[supplyPos]--;
        -: 1305:
    #####: 1306:  return 0;
        -: 1307:}
        -: 1308:
      121: 1309:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1310:{
        -: 1311:  int i;
        -: 1312:
        -: 1313:  //reset coin count
      121: 1314:  state->coins = 0;
        -: 1315:
        -: 1316:  //add coins for each Treasure card in player's hand
      166: 1317:  for (i = 0; i < state->handCount[player]; i++)
        -: 1318:    {
       45: 1319:      if (state->hand[player][i] == copper)
        -: 1320:	{
       36: 1321:	  state->coins += 1;
        -: 1322:	}
        9: 1323:      else if (state->hand[player][i] == silver)
        -: 1324:	{
    #####: 1325:	  state->coins += 2;
        -: 1326:	}
        9: 1327:      else if (state->hand[player][i] == gold)
        -: 1328:	{
    #####: 1329:	  state->coins += 3;
        -: 1330:	}
        -: 1331:    }
        -: 1332:
        -: 1333:  //add bonus
      121: 1334:  state->coins += bonus;
        -: 1335:
      121: 1336:  return 0;
        -: 1337:}
        -: 1338:
        -: 1339:
        -: 1340://end of dominion.c
unittest4.c:
Test passed! Expected number of cards: -1. Actual number of cards: -1
Test passed! Expected number of cards: 4. Actual number of cards: 4
Test passed! Expected number of cards: 30. Actual number of cards: 30
Test passed! Expected number of cards: -1. Actual number of cards: -1
Test passed! Expected number of cards: 4. Actual number of cards: 4
Test passed! Expected number of cards: 48. Actual number of cards: 48
Test passed! Expected number of cards: -1. Actual number of cards: -1
Test passed! Expected number of cards: 4. Actual number of cards: 4
Test passed! Expected number of cards: 95. Actual number of cards: 95
Test passed! Expected number of cards: -1. Actual number of cards: -1
Test passed! Expected number of cards: 4. Actual number of cards: 4
Test passed! Expected number of cards: 19. Actual number of cards: 19
File 'dominion.c'
Lines executed:34.94% of 561
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:88
        -:    0:Programs:83
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      270:    8:int compare(const void* a, const void* b) {
      270:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      270:   11:  if (*(int*)a < *(int*)b)
       72:   12:    return -1;
      198:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
        9:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
        -:   74:    {
        9:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
        -:   88:    {
        9:   89:      state->supplyCount[estate] = 8;
        9:   90:      state->supplyCount[duchy] = 8;
        9:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       90:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       27:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       18:  140:      state->deckCount[i] = 0;
       72:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       54:  143:	  state->deck[i][j] = estate;
       54:  144:	  state->deckCount[i]++;
        -:  145:	}
      144:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      126:  148:	  state->deck[i][j] = copper;
      126:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       27:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       18:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       27:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       18:  166:      state->handCount[i] = 0;
       18:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
       45:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
       18:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       18:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       18:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       18:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      216:  214:  while (state->deckCount[player] > 0) {
      180:  215:    card = floor(Random() * state->deckCount[player]);
      180:  216:    newDeck[newDeckPos] = state->deck[player][card];
      180:  217:    newDeckPos++;
      648:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      468:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      180:  221:    state->deckCount[player]--;
        -:  222:  }
      198:  223:  for (i = 0; i < newDeckPos; i++) {
      180:  224:    state->deck[player][i] = newDeck[i];
      180:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       18:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
      168:  311:int numHandCards(struct gameState *state) {
      168:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    68177:  346:int whoseTurn(struct gameState *state) {
    68177:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    14028:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    14028:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
     1666:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    12362:  401:  j = 0;
   321412:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
   309050:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    37044:  406:	  j++;
        -:  407:	}
        -:  408:    }
    12362:  409:  if ( j >= 3)
        -:  410:    {
    12348:  411:      return 1;
        -:  412:    }
        -:  413:
       14:  414:  return 0;
        -:  415:}
        -:  416:
       36:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       36:  420:  int score = 0;
        -:  421:  //score from hand
      144:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
      108:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
      108:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
      108:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
      108:  427:      if (state->hand[player][i] == province) { score = score + 6; };
      108:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      108:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       36:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       36:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
       36:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   204063:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   204063:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   204063:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   204063:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   204063:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   204063:  576:    state->deckCount[player]--;
   204063:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   204063:  580:  return 0;
        -:  581:}
        -:  582:
      490:  583:int getCost(int cardNumber)
        -:  584:{
      490:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
       14:  588:      return 0;
        -:  589:    case estate:
       14:  590:      return 2;
        -:  591:    case duchy:
       14:  592:      return 5;
        -:  593:    case province:
       14:  594:      return 8;
        -:  595:    case copper:
       14:  596:      return 0;
        -:  597:    case silver:
       14:  598:      return 3;
        -:  599:    case gold:
       14:  600:      return 6;
        -:  601:    case adventurer:
       14:  602:      return 6;
        -:  603:    case council_room:
       14:  604:      return 5;
        -:  605:    case feast:
       14:  606:      return 4;
        -:  607:    case gardens:
       14:  608:      return 4;
        -:  609:    case mine:
       14:  610:      return 5;
        -:  611:    case remodel:
       14:  612:      return 4;
        -:  613:    case smithy:
       14:  614:      return 4;
        -:  615:    case village:
       14:  616:      return 3;
        -:  617:    case baron:
       14:  618:      return 4;
        -:  619:    case great_hall:
       14:  620:      return 3;
        -:  621:    case minion:
       14:  622:      return 5;
        -:  623:    case steward:
       14:  624:      return 3;
        -:  625:    case tribute:
       14:  626:      return 5;
        -:  627:    case ambassador:
       14:  628:      return 3;
        -:  629:    case cutpurse:
       14:  630:      return 4;
        -:  631:    case embargo:
       14:  632:      return 2;
        -:  633:    case outpost:
       14:  634:      return 5;
        -:  635:    case salvager:
       14:  636:      return 4;
        -:  637:    case sea_hag:
       14:  638:      return 4;
        -:  639:    case treasure_map:
       14:  640:      return 4;
        -:  641:    }
        -:  642:
      112:  643:  return -1;
        -:  644:}
        -:  645:
        9:  646:void adventurer_action (int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z) {
       36:  647:    while(drawntreasure<2){
       18:  648:        if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:            shuffle(currentPlayer, state);
        -:  650:        }
       18:  651:        drawCard(currentPlayer, state);
       18:  652:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       18:  653:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       18:  654:          drawntreasure++;
        -:  655:        else{
    #####:  656:          temphand[z]=cardDrawn;
    #####:  657:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  658:        }
        -:  659:  }
       18:  660:  while(z-1>=0){
    #####:  661:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  662:      z=z-1;
        -:  663:  }
        9:  664:}
        -:  665:
    44000:  666:void smithy_action (int currentPlayer, struct gameState *state, int i, int handPos) {
        -:  667:  //+3 Cards
   176000:  668:  for (i = 0; i < 3; i++) {
   132000:  669:    drawCard(currentPlayer, state);
        -:  670:  }
        -:  671:
        -:  672:  //discard card from hand
    44000:  673:  discardCard(handPos, currentPlayer, state, 0);
    44000:  674:}
        -:  675:
    #####:  676:void village_action (int currentPlayer, struct gameState *state, int handPos) {
        -:  677:  //+1 Card
    #####:  678:  drawCard(currentPlayer, state);
        -:  679:
        -:  680:  //+2 Actions
    #####:  681:  state->numActions = state->numActions + 2;
        -:  682:
        -:  683:  //discard played card from hand
    #####:  684:  discardCard(handPos, currentPlayer, state, 0);
    #####:  685:}
        -:  686:
    12000:  687:void council_room_action (int i, int currentPlayer, struct gameState *state) {
        -:  688:  //+4 Cards
    60000:  689:  for (i = 0; i < 4; i++) {
    48000:  690:      drawCard(currentPlayer, state);
        -:  691:  }
        -:  692:
        -:  693:  //+1 Buy
    12000:  694:  state->numBuys++;
        -:  695:
        -:  696:  //Each other player draws a card
    60000:  697:  for (i = 0; i < state->numPlayers; i++) {
    48000:  698:      if ( i == currentPlayer ) {
    12000:  699:          drawCard(i, state);
        -:  700:      }
        -:  701:  }
    12000:  702:}
        -:  703:
    #####:  704:int mine_action (int j, struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos, int i) {
    #####:  705:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  706:
    #####:  707:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
    #####:  708:      return -1;
        -:  709:  }
        -:  710:
    #####:  711:  if (choice2 > treasure_map || choice2 < curse) {
    #####:  712:      return -1;
        -:  713:  }
        -:  714:
    #####:  715:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
    #####:  716:      return -1;
        -:  717:  }
        -:  718:
    #####:  719:  gainCard(choice2, state, 2, currentPlayer);
        -:  720:
        -:  721:  //discard card from hand
    #####:  722:  discardCard(handPos, currentPlayer, state, 0);
        -:  723:
        -:  724:  //discard trashed card
    #####:  725:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  726:      if (state->hand[currentPlayer][i] == j) {
    #####:  727:        discardCard(i, currentPlayer, state, 0);
    #####:  728:        break;
        -:  729:      }
        -:  730:  }
        -:  731:
    #####:  732:  return -1;
        -:  733:}
        -:  734:
    68009:  735:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  736:{
        -:  737:  int i;
        -:  738:  int j;
        -:  739:  int k;
        -:  740:  int x;
        -:  741:  int m;
        -:  742:  int index;
    68009:  743:  int currentPlayer = whoseTurn(state);
    68009:  744:  int nextPlayer = currentPlayer + 1;
        -:  745:
    68009:  746:  int tributeRevealedCards[2] = {-1, -1};
        -:  747:  int temphand[MAX_HAND];// moved above the if statement
    68009:  748:  int drawntreasure=0;
        -:  749:  int cardDrawn;
    68009:  750:  int z = 0;// this is the counter for the temp hand
    68009:  751:  if (nextPlayer > (state->numPlayers - 1)){
    47000:  752:    nextPlayer = 0;
        -:  753:  }
        -:  754:
        -:  755:
        -:  756:  //uses switch to select card and perform actions
    68009:  757:  switch( card )
        -:  758:    {
        -:  759:    case adventurer:
        9:  760:      adventurer_action (drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        9:  761:      return 0;
        -:  762:
        -:  763:    case council_room:
    12000:  764:      council_room_action (i, currentPlayer, state);
    12000:  765:      return 0;
        -:  766:
        -:  767:    case feast:
        -:  768:      //gain card with cost up to 5
        -:  769:      //Backup hand
    #####:  770:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  771:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  772:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  773:      }
        -:  774:      //Backup hand
        -:  775:
        -:  776:      //Update Coins for Buy
    #####:  777:      updateCoins(currentPlayer, state, 5);
    #####:  778:      x = 1;//Condition to loop on
    #####:  779:      while( x == 1) {//Buy one card
    #####:  780:	if (supplyCount(choice1, state) <= 0){
        -:  781:	  if (DEBUG)
        -:  782:	    printf("None of that card left, sorry!\n");
        -:  783:
        -:  784:	  if (DEBUG){
        -:  785:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  786:	  }
        -:  787:	}
    #####:  788:	else if (state->coins < getCost(choice1)){
    #####:  789:	  printf("That card is too expensive!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  793:	  }
        -:  794:	}
        -:  795:	else{
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  799:	  }
        -:  800:
    #####:  801:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  802:	  x = 0;//No more buying cards
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
        -:  808:	}
        -:  809:      }
        -:  810:
        -:  811:      //Reset Hand
    #####:  812:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  813:	state->hand[currentPlayer][i] = temphand[i];
    #####:  814:	temphand[i] = -1;
        -:  815:      }
        -:  816:      //Reset Hand
        -:  817:
    #####:  818:      return 0;
        -:  819:
        -:  820:    case gardens:
    #####:  821:      return -1;
        -:  822:
        -:  823:    case mine:
    #####:  824:      m = mine_action (j, state, currentPlayer, choice1, choice2, handPos, i);
    #####:  825:      return m;
        -:  826:
        -:  827:    case remodel:
    #####:  828:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  829:
    #####:  830:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  831:	{
    #####:  832:	  return -1;
        -:  833:	}
        -:  834:
    #####:  835:      gainCard(choice2, state, 0, currentPlayer);
        -:  836:
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:
        -:  840:      //discard trashed card
    #####:  841:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  842:	{
    #####:  843:	  if (state->hand[currentPlayer][i] == j)
        -:  844:	    {
    #####:  845:	      discardCard(i, currentPlayer, state, 0);
    #####:  846:	      break;
        -:  847:	    }
        -:  848:	}
        -:  849:
        -:  850:
    #####:  851:      return 0;
        -:  852:
        -:  853:    case smithy:
    44000:  854:      smithy_action (currentPlayer, state, i, handPos);
    44000:  855:      return 0;
        -:  856:
        -:  857:    case village:
    #####:  858:      village_action (currentPlayer, state, handPos);
    #####:  859:      return 0;
        -:  860:
        -:  861:    case baron:
    #####:  862:      state->numBuys++;//Increase buys by 1!
    #####:  863:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  864:	int p = 0;//Iterator for hand!
    #####:  865:	int card_not_discarded = 1;//Flag for discard set!
    #####:  866:	while(card_not_discarded){
    #####:  867:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  868:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  869:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  870:	    state->discardCount[currentPlayer]++;
    #####:  871:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  872:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  873:	    }
    #####:  874:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  875:	    state->handCount[currentPlayer]--;
    #####:  876:	    card_not_discarded = 0;//Exit the loop
        -:  877:	  }
    #####:  878:	  else if (p > state->handCount[currentPlayer]){
        -:  879:	    if(DEBUG) {
        -:  880:	      printf("No estate cards in your hand, invalid choice\n");
        -:  881:	      printf("Must gain an estate if there are any\n");
        -:  882:	    }
    #####:  883:	    if (supplyCount(estate, state) > 0){
    #####:  884:	      gainCard(estate, state, 0, currentPlayer);
    #####:  885:	      state->supplyCount[estate]--;//Decrement estates
    #####:  886:	      if (supplyCount(estate, state) == 0){
    #####:  887:		isGameOver(state);
        -:  888:	      }
        -:  889:	    }
    #####:  890:	    card_not_discarded = 0;//Exit the loop
        -:  891:	  }
        -:  892:
        -:  893:	  else{
    #####:  894:	    p++;//Next card
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:
        -:  899:      else{
    #####:  900:	if (supplyCount(estate, state) > 0){
    #####:  901:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  902:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  903:	  if (supplyCount(estate, state) == 0){
    #####:  904:	    isGameOver(state);
        -:  905:	  }
        -:  906:	}
        -:  907:      }
        -:  908:
        -:  909:
    #####:  910:      return 0;
        -:  911:
        -:  912:    case great_hall:
        -:  913:      //+1 Card
    12000:  914:      drawCard(currentPlayer, state);
        -:  915:
        -:  916:      //+1 Actions
    12000:  917:      state->numActions++;
        -:  918:
        -:  919:      //discard card from hand
    12000:  920:      discardCard(handPos, currentPlayer, state, 0);
    12000:  921:      return 0;
        -:  922:
        -:  923:    case minion:
        -:  924:      //+1 action
    #####:  925:      state->numActions++;
        -:  926:
        -:  927:      //discard card from hand
    #####:  928:      discardCard(handPos, currentPlayer, state, 0);
        -:  929:
    #####:  930:      if (choice1)		//+2 coins
        -:  931:	{
    #####:  932:	  state->coins = state->coins + 2;
        -:  933:	}
        -:  934:
    #####:  935:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  936:	{
        -:  937:	  //discard hand
    #####:  938:	  while(numHandCards(state) > 0)
        -:  939:	    {
    #####:  940:	      discardCard(handPos, currentPlayer, state, 0);
        -:  941:	    }
        -:  942:
        -:  943:	  //draw 4
    #####:  944:	  for (i = 0; i < 4; i++)
        -:  945:	    {
    #####:  946:	      drawCard(currentPlayer, state);
        -:  947:	    }
        -:  948:
        -:  949:	  //other players discard hand and redraw if hand size > 4
    #####:  950:	  for (i = 0; i < state->numPlayers; i++)
        -:  951:	    {
    #####:  952:	      if (i != currentPlayer)
        -:  953:		{
    #####:  954:		  if ( state->handCount[i] > 4 )
        -:  955:		    {
        -:  956:		      //discard hand
    #####:  957:		      while( state->handCount[i] > 0 )
        -:  958:			{
    #####:  959:			  discardCard(handPos, i, state, 0);
        -:  960:			}
        -:  961:
        -:  962:		      //draw 4
    #####:  963:		      for (j = 0; j < 4; j++)
        -:  964:			{
    #####:  965:			  drawCard(i, state);
        -:  966:			}
        -:  967:		    }
        -:  968:		}
        -:  969:	    }
        -:  970:
        -:  971:	}
    #####:  972:      return 0;
        -:  973:
        -:  974:    case steward:
    #####:  975:      if (choice1 == 1)
        -:  976:	{
        -:  977:	  //+2 cards
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
    #####:  981:      else if (choice1 == 2)
        -:  982:	{
        -:  983:	  //+2 coins
    #####:  984:	  state->coins = state->coins + 2;
        -:  985:	}
        -:  986:      else
        -:  987:	{
        -:  988:	  //trash 2 cards in hand
    #####:  989:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  990:	  discardCard(choice3, currentPlayer, state, 1);
        -:  991:	}
        -:  992:
        -:  993:      //discard card from hand
    #####:  994:      discardCard(handPos, currentPlayer, state, 0);
    #####:  995:      return 0;
        -:  996:
        -:  997:    case tribute:
    #####:  998:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  999:	if (state->deckCount[nextPlayer] > 0){
    #####: 1000:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1001:	  state->deckCount[nextPlayer]--;
        -: 1002:	}
    #####: 1003:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1004:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1005:	  state->discardCount[nextPlayer]--;
        -: 1006:	}
        -: 1007:	else{
        -: 1008:	  //No Card to Reveal
        -: 1009:	  if (DEBUG){
        -: 1010:	    printf("No cards to reveal\n");
        -: 1011:	  }
        -: 1012:	}
        -: 1013:      }
        -: 1014:
        -: 1015:      else{
    #####: 1016:	if (state->deckCount[nextPlayer] == 0){
    #####: 1017:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1018:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1019:	    state->deckCount[nextPlayer]++;
    #####: 1020:	    state->discard[nextPlayer][i] = -1;
    #####: 1021:	    state->discardCount[nextPlayer]--;
        -: 1022:	  }
        -: 1023:
    #####: 1024:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1025:	}
    #####: 1026:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1028:	state->deckCount[nextPlayer]--;
    #####: 1029:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1030:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1031:	state->deckCount[nextPlayer]--;
        -: 1032:      }
        -: 1033:
    #####: 1034:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1035:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1036:	state->playedCardCount++;
    #####: 1037:	tributeRevealedCards[1] = -1;
        -: 1038:      }
        -: 1039:
    #####: 1040:      for (i = 0; i <= 2; i ++){
    #####: 1041:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1042:	  state->coins += 2;
        -: 1043:	}
        -: 1044:
    #####: 1045:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1046:	  drawCard(currentPlayer, state);
    #####: 1047:	  drawCard(currentPlayer, state);
        -: 1048:	}
        -: 1049:	else{//Action Card
    #####: 1050:	  state->numActions = state->numActions + 2;
        -: 1051:	}
        -: 1052:      }
        -: 1053:
    #####: 1054:      return 0;
        -: 1055:
        -: 1056:    case ambassador:
    #####: 1057:      j = 0;		//used to check if player has enough cards to discard
        -: 1058:
    #####: 1059:      if (choice2 > 2 || choice2 < 0)
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:
    #####: 1064:      if (choice1 == handPos)
        -: 1065:	{
    #####: 1066:	  return -1;
        -: 1067:	}
        -: 1068:
    #####: 1069:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1070:	{
    #####: 1071:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1072:	    {
    #####: 1073:	      j++;
        -: 1074:	    }
        -: 1075:	}
    #####: 1076:      if (j < choice2)
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
        -: 1081:      if (DEBUG)
        -: 1082:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1083:
        -: 1084:      //increase supply count for choosen card by amount being discarded
    #####: 1085:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1086:
        -: 1087:      //each other player gains a copy of revealed card
    #####: 1088:      for (i = 0; i < state->numPlayers; i++)
        -: 1089:	{
    #####: 1090:	  if (i != currentPlayer)
        -: 1091:	    {
    #####: 1092:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1093:	    }
        -: 1094:	}
        -: 1095:
        -: 1096:      //discard played card from hand
    #####: 1097:      discardCard(handPos, currentPlayer, state, 0);
        -: 1098:
        -: 1099:      //trash copies of cards returned to supply
    #####: 1100:      for (j = 0; j < choice2; j++)
        -: 1101:	{
    #####: 1102:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1103:	    {
    #####: 1104:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1105:		{
    #####: 1106:		  discardCard(i, currentPlayer, state, 1);
    #####: 1107:		  break;
        -: 1108:		}
        -: 1109:	    }
        -: 1110:	}
        -: 1111:
    #####: 1112:      return 0;
        -: 1113:
        -: 1114:    case cutpurse:
        -: 1115:
    #####: 1116:      updateCoins(currentPlayer, state, 2);
    #####: 1117:      for (i = 0; i < state->numPlayers; i++)
        -: 1118:	{
    #####: 1119:	  if (i != currentPlayer)
        -: 1120:	    {
    #####: 1121:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1122:		{
    #####: 1123:		  if (state->hand[i][j] == copper)
        -: 1124:		    {
    #####: 1125:		      discardCard(j, i, state, 0);
    #####: 1126:		      break;
        -: 1127:		    }
    #####: 1128:		  if (j == state->handCount[i])
        -: 1129:		    {
    #####: 1130:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1131:			{
        -: 1132:			  if (DEBUG)
        -: 1133:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1134:			}
    #####: 1135:		      break;
        -: 1136:		    }
        -: 1137:		}
        -: 1138:
        -: 1139:	    }
        -: 1140:
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
    #####: 1146:      return 0;
        -: 1147:
        -: 1148:
        -: 1149:    case embargo:
        -: 1150:      //+2 Coins
    #####: 1151:      state->coins = state->coins + 2;
        -: 1152:
        -: 1153:      //see if selected pile is in play
    #####: 1154:      if ( state->supplyCount[choice1] == -1 )
        -: 1155:	{
    #####: 1156:	  return -1;
        -: 1157:	}
        -: 1158:
        -: 1159:      //add embargo token to selected supply pile
    #####: 1160:      state->embargoTokens[choice1]++;
        -: 1161:
        -: 1162:      //trash card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1164:      return 0;
        -: 1165:
        -: 1166:    case outpost:
        -: 1167:      //set outpost flag
    #####: 1168:      state->outpostPlayed++;
        -: 1169:
        -: 1170:      //discard card
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1172:      return 0;
        -: 1173:
        -: 1174:    case salvager:
        -: 1175:      //+1 buy
    #####: 1176:      state->numBuys++;
        -: 1177:
    #####: 1178:      if (choice1)
        -: 1179:	{
        -: 1180:	  //gain coins equal to trashed card
    #####: 1181:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1182:	  //trash card
    #####: 1183:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1184:	}
        -: 1185:
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:    case sea_hag:
    #####: 1191:      for (i = 0; i < state->numPlayers; i++){
    #####: 1192:	if (i != currentPlayer){
    #####: 1193:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1194:	  state->discardCount[i]++;
    #####: 1195:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1196:	}
        -: 1197:      }
    #####: 1198:      return 0;
        -: 1199:
        -: 1200:    case treasure_map:
        -: 1201:      //search hand for another treasure_map
    #####: 1202:      index = -1;
    #####: 1203:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1206:	    {
    #####: 1207:	      index = i;
    #####: 1208:	      break;
        -: 1209:	    }
        -: 1210:	}
    #####: 1211:      if (index > -1)
        -: 1212:	{
        -: 1213:	  //trash both treasure cards
    #####: 1214:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1215:	  discardCard(index, currentPlayer, state, 1);
        -: 1216:
        -: 1217:	  //gain 4 Gold cards
    #####: 1218:	  for (i = 0; i < 4; i++)
        -: 1219:	    {
    #####: 1220:	      gainCard(gold, state, 1, currentPlayer);
        -: 1221:	    }
        -: 1222:
        -: 1223:	  //return success
    #####: 1224:	  return 1;
        -: 1225:	}
        -: 1226:
        -: 1227:      //no second treasure_map found in hand
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:  return -1;
        -: 1232:}
        -: 1233:
    56000: 1234:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1235:{
        -: 1236:
        -: 1237:  //if card is not trashed, added to Played pile
    56000: 1238:  if (trashFlag < 1)
        -: 1239:    {
        -: 1240:      //add card to played pile
    56000: 1241:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    56000: 1242:      state->playedCardCount++;
        -: 1243:    }
        -: 1244:
        -: 1245:  //set played card to -1
    56000: 1246:  state->hand[currentPlayer][handPos] = -1;
        -: 1247:
        -: 1248:  //remove card from player's hand
    56000: 1249:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1250:    {
        -: 1251:      //reduce number of cards in hand
       19: 1252:      state->handCount[currentPlayer]--;
        -: 1253:    }
    55981: 1254:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1255:    {
        -: 1256:      //reduce number of cards in hand
    #####: 1257:      state->handCount[currentPlayer]--;
        -: 1258:    }
        -: 1259:  else
        -: 1260:    {
        -: 1261:      //replace discarded card with last card in hand
    55981: 1262:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1263:      //set last card to -1
    55981: 1264:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1265:      //reduce number of cards in hand
    55981: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
        -: 1268:
    56000: 1269:  return 0;
        -: 1270:}
        -: 1271:
    #####: 1272:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1273:{
        -: 1274:  //Note: supplyPos is enum of choosen card
        -: 1275:
        -: 1276:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1277:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1278:    {
    #####: 1279:      return -1;
        -: 1280:    }
        -: 1281:
        -: 1282:  //added card for [whoseTurn] current player:
        -: 1283:  // toFlag = 0 : add to discard
        -: 1284:  // toFlag = 1 : add to deck
        -: 1285:  // toFlag = 2 : add to hand
        -: 1286:
    #####: 1287:  if (toFlag == 1)
        -: 1288:    {
    #####: 1289:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1290:      state->deckCount[player]++;
        -: 1291:    }
    #####: 1292:  else if (toFlag == 2)
        -: 1293:    {
    #####: 1294:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1295:      state->handCount[player]++;
        -: 1296:    }
        -: 1297:  else
        -: 1298:    {
    #####: 1299:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1300:      state->discardCount[player]++;
        -: 1301:    }
        -: 1302:
        -: 1303:  //decrease number in supply pile
    #####: 1304:  state->supplyCount[supplyPos]--;
        -: 1305:
    #####: 1306:  return 0;
        -: 1307:}
        -: 1308:
      121: 1309:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1310:{
        -: 1311:  int i;
        -: 1312:
        -: 1313:  //reset coin count
      121: 1314:  state->coins = 0;
        -: 1315:
        -: 1316:  //add coins for each Treasure card in player's hand
      166: 1317:  for (i = 0; i < state->handCount[player]; i++)
        -: 1318:    {
       45: 1319:      if (state->hand[player][i] == copper)
        -: 1320:	{
       36: 1321:	  state->coins += 1;
        -: 1322:	}
        9: 1323:      else if (state->hand[player][i] == silver)
        -: 1324:	{
    #####: 1325:	  state->coins += 2;
        -: 1326:	}
        9: 1327:      else if (state->hand[player][i] == gold)
        -: 1328:	{
    #####: 1329:	  state->coins += 3;
        -: 1330:	}
        -: 1331:    }
        -: 1332:
        -: 1333:  //add bonus
      121: 1334:  state->coins += bonus;
        -: 1335:
      121: 1336:  return 0;
        -: 1337:}
        -: 1338:
        -: 1339:
        -: 1340://end of dominion.c
cardtest1.c:
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
Test passed! Returned fine and 3 new cards were added
File 'dominion.c'
Lines executed:34.94% of 561
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:89
        -:    0:Programs:84
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      270:    8:int compare(const void* a, const void* b) {
      270:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      270:   11:  if (*(int*)a < *(int*)b)
       72:   12:    return -1;
      198:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
        9:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
        -:   74:    {
        9:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
        -:   88:    {
        9:   89:      state->supplyCount[estate] = 8;
        9:   90:      state->supplyCount[duchy] = 8;
        9:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       90:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       27:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       18:  140:      state->deckCount[i] = 0;
       72:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       54:  143:	  state->deck[i][j] = estate;
       54:  144:	  state->deckCount[i]++;
        -:  145:	}
      144:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      126:  148:	  state->deck[i][j] = copper;
      126:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       27:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       18:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       27:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       18:  166:      state->handCount[i] = 0;
       18:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
       45:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
       18:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       18:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       18:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       18:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      216:  214:  while (state->deckCount[player] > 0) {
      180:  215:    card = floor(Random() * state->deckCount[player]);
      180:  216:    newDeck[newDeckPos] = state->deck[player][card];
      180:  217:    newDeckPos++;
      648:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      468:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      180:  221:    state->deckCount[player]--;
        -:  222:  }
      198:  223:  for (i = 0; i < newDeckPos; i++) {
      180:  224:    state->deck[player][i] = newDeck[i];
      180:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       18:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
      168:  311:int numHandCards(struct gameState *state) {
      168:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    72177:  346:int whoseTurn(struct gameState *state) {
    72177:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    14028:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    14028:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
     1666:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    12362:  401:  j = 0;
   321412:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
   309050:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    37044:  406:	  j++;
        -:  407:	}
        -:  408:    }
    12362:  409:  if ( j >= 3)
        -:  410:    {
    12348:  411:      return 1;
        -:  412:    }
        -:  413:
       14:  414:  return 0;
        -:  415:}
        -:  416:
       36:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       36:  420:  int score = 0;
        -:  421:  //score from hand
      144:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
      108:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
      108:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
      108:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
      108:  427:      if (state->hand[player][i] == province) { score = score + 6; };
      108:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      108:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       36:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       36:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
       36:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   216063:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   216063:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   216063:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   216063:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   216063:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   216063:  576:    state->deckCount[player]--;
   216063:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   216063:  580:  return 0;
        -:  581:}
        -:  582:
      490:  583:int getCost(int cardNumber)
        -:  584:{
      490:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
       14:  588:      return 0;
        -:  589:    case estate:
       14:  590:      return 2;
        -:  591:    case duchy:
       14:  592:      return 5;
        -:  593:    case province:
       14:  594:      return 8;
        -:  595:    case copper:
       14:  596:      return 0;
        -:  597:    case silver:
       14:  598:      return 3;
        -:  599:    case gold:
       14:  600:      return 6;
        -:  601:    case adventurer:
       14:  602:      return 6;
        -:  603:    case council_room:
       14:  604:      return 5;
        -:  605:    case feast:
       14:  606:      return 4;
        -:  607:    case gardens:
       14:  608:      return 4;
        -:  609:    case mine:
       14:  610:      return 5;
        -:  611:    case remodel:
       14:  612:      return 4;
        -:  613:    case smithy:
       14:  614:      return 4;
        -:  615:    case village:
       14:  616:      return 3;
        -:  617:    case baron:
       14:  618:      return 4;
        -:  619:    case great_hall:
       14:  620:      return 3;
        -:  621:    case minion:
       14:  622:      return 5;
        -:  623:    case steward:
       14:  624:      return 3;
        -:  625:    case tribute:
       14:  626:      return 5;
        -:  627:    case ambassador:
       14:  628:      return 3;
        -:  629:    case cutpurse:
       14:  630:      return 4;
        -:  631:    case embargo:
       14:  632:      return 2;
        -:  633:    case outpost:
       14:  634:      return 5;
        -:  635:    case salvager:
       14:  636:      return 4;
        -:  637:    case sea_hag:
       14:  638:      return 4;
        -:  639:    case treasure_map:
       14:  640:      return 4;
        -:  641:    }
        -:  642:
      112:  643:  return -1;
        -:  644:}
        -:  645:
        9:  646:void adventurer_action (int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z) {
       36:  647:    while(drawntreasure<2){
       18:  648:        if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:            shuffle(currentPlayer, state);
        -:  650:        }
       18:  651:        drawCard(currentPlayer, state);
       18:  652:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       18:  653:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       18:  654:          drawntreasure++;
        -:  655:        else{
    #####:  656:          temphand[z]=cardDrawn;
    #####:  657:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  658:        }
        -:  659:  }
       18:  660:  while(z-1>=0){
    #####:  661:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  662:      z=z-1;
        -:  663:  }
        9:  664:}
        -:  665:
    48000:  666:void smithy_action (int currentPlayer, struct gameState *state, int i, int handPos) {
        -:  667:  //+3 Cards
   192000:  668:  for (i = 0; i < 3; i++) {
   144000:  669:    drawCard(currentPlayer, state);
        -:  670:  }
        -:  671:
        -:  672:  //discard card from hand
    48000:  673:  discardCard(handPos, currentPlayer, state, 0);
    48000:  674:}
        -:  675:
    #####:  676:void village_action (int currentPlayer, struct gameState *state, int handPos) {
        -:  677:  //+1 Card
    #####:  678:  drawCard(currentPlayer, state);
        -:  679:
        -:  680:  //+2 Actions
    #####:  681:  state->numActions = state->numActions + 2;
        -:  682:
        -:  683:  //discard played card from hand
    #####:  684:  discardCard(handPos, currentPlayer, state, 0);
    #####:  685:}
        -:  686:
    12000:  687:void council_room_action (int i, int currentPlayer, struct gameState *state) {
        -:  688:  //+4 Cards
    60000:  689:  for (i = 0; i < 4; i++) {
    48000:  690:      drawCard(currentPlayer, state);
        -:  691:  }
        -:  692:
        -:  693:  //+1 Buy
    12000:  694:  state->numBuys++;
        -:  695:
        -:  696:  //Each other player draws a card
    60000:  697:  for (i = 0; i < state->numPlayers; i++) {
    48000:  698:      if ( i == currentPlayer ) {
    12000:  699:          drawCard(i, state);
        -:  700:      }
        -:  701:  }
    12000:  702:}
        -:  703:
    #####:  704:int mine_action (int j, struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos, int i) {
    #####:  705:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  706:
    #####:  707:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
    #####:  708:      return -1;
        -:  709:  }
        -:  710:
    #####:  711:  if (choice2 > treasure_map || choice2 < curse) {
    #####:  712:      return -1;
        -:  713:  }
        -:  714:
    #####:  715:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
    #####:  716:      return -1;
        -:  717:  }
        -:  718:
    #####:  719:  gainCard(choice2, state, 2, currentPlayer);
        -:  720:
        -:  721:  //discard card from hand
    #####:  722:  discardCard(handPos, currentPlayer, state, 0);
        -:  723:
        -:  724:  //discard trashed card
    #####:  725:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  726:      if (state->hand[currentPlayer][i] == j) {
    #####:  727:        discardCard(i, currentPlayer, state, 0);
    #####:  728:        break;
        -:  729:      }
        -:  730:  }
        -:  731:
    #####:  732:  return -1;
        -:  733:}
        -:  734:
    72009:  735:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  736:{
        -:  737:  int i;
        -:  738:  int j;
        -:  739:  int k;
        -:  740:  int x;
        -:  741:  int m;
        -:  742:  int index;
    72009:  743:  int currentPlayer = whoseTurn(state);
    72009:  744:  int nextPlayer = currentPlayer + 1;
        -:  745:
    72009:  746:  int tributeRevealedCards[2] = {-1, -1};
        -:  747:  int temphand[MAX_HAND];// moved above the if statement
    72009:  748:  int drawntreasure=0;
        -:  749:  int cardDrawn;
    72009:  750:  int z = 0;// this is the counter for the temp hand
    72009:  751:  if (nextPlayer > (state->numPlayers - 1)){
    51000:  752:    nextPlayer = 0;
        -:  753:  }
        -:  754:
        -:  755:
        -:  756:  //uses switch to select card and perform actions
    72009:  757:  switch( card )
        -:  758:    {
        -:  759:    case adventurer:
        9:  760:      adventurer_action (drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        9:  761:      return 0;
        -:  762:
        -:  763:    case council_room:
    12000:  764:      council_room_action (i, currentPlayer, state);
    12000:  765:      return 0;
        -:  766:
        -:  767:    case feast:
        -:  768:      //gain card with cost up to 5
        -:  769:      //Backup hand
    #####:  770:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  771:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  772:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  773:      }
        -:  774:      //Backup hand
        -:  775:
        -:  776:      //Update Coins for Buy
    #####:  777:      updateCoins(currentPlayer, state, 5);
    #####:  778:      x = 1;//Condition to loop on
    #####:  779:      while( x == 1) {//Buy one card
    #####:  780:	if (supplyCount(choice1, state) <= 0){
        -:  781:	  if (DEBUG)
        -:  782:	    printf("None of that card left, sorry!\n");
        -:  783:
        -:  784:	  if (DEBUG){
        -:  785:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  786:	  }
        -:  787:	}
    #####:  788:	else if (state->coins < getCost(choice1)){
    #####:  789:	  printf("That card is too expensive!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  793:	  }
        -:  794:	}
        -:  795:	else{
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  799:	  }
        -:  800:
    #####:  801:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  802:	  x = 0;//No more buying cards
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
        -:  808:	}
        -:  809:      }
        -:  810:
        -:  811:      //Reset Hand
    #####:  812:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  813:	state->hand[currentPlayer][i] = temphand[i];
    #####:  814:	temphand[i] = -1;
        -:  815:      }
        -:  816:      //Reset Hand
        -:  817:
    #####:  818:      return 0;
        -:  819:
        -:  820:    case gardens:
    #####:  821:      return -1;
        -:  822:
        -:  823:    case mine:
    #####:  824:      m = mine_action (j, state, currentPlayer, choice1, choice2, handPos, i);
    #####:  825:      return m;
        -:  826:
        -:  827:    case remodel:
    #####:  828:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  829:
    #####:  830:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  831:	{
    #####:  832:	  return -1;
        -:  833:	}
        -:  834:
    #####:  835:      gainCard(choice2, state, 0, currentPlayer);
        -:  836:
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:
        -:  840:      //discard trashed card
    #####:  841:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  842:	{
    #####:  843:	  if (state->hand[currentPlayer][i] == j)
        -:  844:	    {
    #####:  845:	      discardCard(i, currentPlayer, state, 0);
    #####:  846:	      break;
        -:  847:	    }
        -:  848:	}
        -:  849:
        -:  850:
    #####:  851:      return 0;
        -:  852:
        -:  853:    case smithy:
    48000:  854:      smithy_action (currentPlayer, state, i, handPos);
    48000:  855:      return 0;
        -:  856:
        -:  857:    case village:
    #####:  858:      village_action (currentPlayer, state, handPos);
    #####:  859:      return 0;
        -:  860:
        -:  861:    case baron:
    #####:  862:      state->numBuys++;//Increase buys by 1!
    #####:  863:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  864:	int p = 0;//Iterator for hand!
    #####:  865:	int card_not_discarded = 1;//Flag for discard set!
    #####:  866:	while(card_not_discarded){
    #####:  867:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  868:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  869:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  870:	    state->discardCount[currentPlayer]++;
    #####:  871:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  872:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  873:	    }
    #####:  874:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  875:	    state->handCount[currentPlayer]--;
    #####:  876:	    card_not_discarded = 0;//Exit the loop
        -:  877:	  }
    #####:  878:	  else if (p > state->handCount[currentPlayer]){
        -:  879:	    if(DEBUG) {
        -:  880:	      printf("No estate cards in your hand, invalid choice\n");
        -:  881:	      printf("Must gain an estate if there are any\n");
        -:  882:	    }
    #####:  883:	    if (supplyCount(estate, state) > 0){
    #####:  884:	      gainCard(estate, state, 0, currentPlayer);
    #####:  885:	      state->supplyCount[estate]--;//Decrement estates
    #####:  886:	      if (supplyCount(estate, state) == 0){
    #####:  887:		isGameOver(state);
        -:  888:	      }
        -:  889:	    }
    #####:  890:	    card_not_discarded = 0;//Exit the loop
        -:  891:	  }
        -:  892:
        -:  893:	  else{
    #####:  894:	    p++;//Next card
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:
        -:  899:      else{
    #####:  900:	if (supplyCount(estate, state) > 0){
    #####:  901:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  902:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  903:	  if (supplyCount(estate, state) == 0){
    #####:  904:	    isGameOver(state);
        -:  905:	  }
        -:  906:	}
        -:  907:      }
        -:  908:
        -:  909:
    #####:  910:      return 0;
        -:  911:
        -:  912:    case great_hall:
        -:  913:      //+1 Card
    12000:  914:      drawCard(currentPlayer, state);
        -:  915:
        -:  916:      //+1 Actions
    12000:  917:      state->numActions++;
        -:  918:
        -:  919:      //discard card from hand
    12000:  920:      discardCard(handPos, currentPlayer, state, 0);
    12000:  921:      return 0;
        -:  922:
        -:  923:    case minion:
        -:  924:      //+1 action
    #####:  925:      state->numActions++;
        -:  926:
        -:  927:      //discard card from hand
    #####:  928:      discardCard(handPos, currentPlayer, state, 0);
        -:  929:
    #####:  930:      if (choice1)		//+2 coins
        -:  931:	{
    #####:  932:	  state->coins = state->coins + 2;
        -:  933:	}
        -:  934:
    #####:  935:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  936:	{
        -:  937:	  //discard hand
    #####:  938:	  while(numHandCards(state) > 0)
        -:  939:	    {
    #####:  940:	      discardCard(handPos, currentPlayer, state, 0);
        -:  941:	    }
        -:  942:
        -:  943:	  //draw 4
    #####:  944:	  for (i = 0; i < 4; i++)
        -:  945:	    {
    #####:  946:	      drawCard(currentPlayer, state);
        -:  947:	    }
        -:  948:
        -:  949:	  //other players discard hand and redraw if hand size > 4
    #####:  950:	  for (i = 0; i < state->numPlayers; i++)
        -:  951:	    {
    #####:  952:	      if (i != currentPlayer)
        -:  953:		{
    #####:  954:		  if ( state->handCount[i] > 4 )
        -:  955:		    {
        -:  956:		      //discard hand
    #####:  957:		      while( state->handCount[i] > 0 )
        -:  958:			{
    #####:  959:			  discardCard(handPos, i, state, 0);
        -:  960:			}
        -:  961:
        -:  962:		      //draw 4
    #####:  963:		      for (j = 0; j < 4; j++)
        -:  964:			{
    #####:  965:			  drawCard(i, state);
        -:  966:			}
        -:  967:		    }
        -:  968:		}
        -:  969:	    }
        -:  970:
        -:  971:	}
    #####:  972:      return 0;
        -:  973:
        -:  974:    case steward:
    #####:  975:      if (choice1 == 1)
        -:  976:	{
        -:  977:	  //+2 cards
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
    #####:  981:      else if (choice1 == 2)
        -:  982:	{
        -:  983:	  //+2 coins
    #####:  984:	  state->coins = state->coins + 2;
        -:  985:	}
        -:  986:      else
        -:  987:	{
        -:  988:	  //trash 2 cards in hand
    #####:  989:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  990:	  discardCard(choice3, currentPlayer, state, 1);
        -:  991:	}
        -:  992:
        -:  993:      //discard card from hand
    #####:  994:      discardCard(handPos, currentPlayer, state, 0);
    #####:  995:      return 0;
        -:  996:
        -:  997:    case tribute:
    #####:  998:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  999:	if (state->deckCount[nextPlayer] > 0){
    #####: 1000:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1001:	  state->deckCount[nextPlayer]--;
        -: 1002:	}
    #####: 1003:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1004:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1005:	  state->discardCount[nextPlayer]--;
        -: 1006:	}
        -: 1007:	else{
        -: 1008:	  //No Card to Reveal
        -: 1009:	  if (DEBUG){
        -: 1010:	    printf("No cards to reveal\n");
        -: 1011:	  }
        -: 1012:	}
        -: 1013:      }
        -: 1014:
        -: 1015:      else{
    #####: 1016:	if (state->deckCount[nextPlayer] == 0){
    #####: 1017:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1018:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1019:	    state->deckCount[nextPlayer]++;
    #####: 1020:	    state->discard[nextPlayer][i] = -1;
    #####: 1021:	    state->discardCount[nextPlayer]--;
        -: 1022:	  }
        -: 1023:
    #####: 1024:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1025:	}
    #####: 1026:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1028:	state->deckCount[nextPlayer]--;
    #####: 1029:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1030:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1031:	state->deckCount[nextPlayer]--;
        -: 1032:      }
        -: 1033:
    #####: 1034:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1035:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1036:	state->playedCardCount++;
    #####: 1037:	tributeRevealedCards[1] = -1;
        -: 1038:      }
        -: 1039:
    #####: 1040:      for (i = 0; i <= 2; i ++){
    #####: 1041:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1042:	  state->coins += 2;
        -: 1043:	}
        -: 1044:
    #####: 1045:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1046:	  drawCard(currentPlayer, state);
    #####: 1047:	  drawCard(currentPlayer, state);
        -: 1048:	}
        -: 1049:	else{//Action Card
    #####: 1050:	  state->numActions = state->numActions + 2;
        -: 1051:	}
        -: 1052:      }
        -: 1053:
    #####: 1054:      return 0;
        -: 1055:
        -: 1056:    case ambassador:
    #####: 1057:      j = 0;		//used to check if player has enough cards to discard
        -: 1058:
    #####: 1059:      if (choice2 > 2 || choice2 < 0)
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:
    #####: 1064:      if (choice1 == handPos)
        -: 1065:	{
    #####: 1066:	  return -1;
        -: 1067:	}
        -: 1068:
    #####: 1069:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1070:	{
    #####: 1071:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1072:	    {
    #####: 1073:	      j++;
        -: 1074:	    }
        -: 1075:	}
    #####: 1076:      if (j < choice2)
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
        -: 1081:      if (DEBUG)
        -: 1082:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1083:
        -: 1084:      //increase supply count for choosen card by amount being discarded
    #####: 1085:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1086:
        -: 1087:      //each other player gains a copy of revealed card
    #####: 1088:      for (i = 0; i < state->numPlayers; i++)
        -: 1089:	{
    #####: 1090:	  if (i != currentPlayer)
        -: 1091:	    {
    #####: 1092:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1093:	    }
        -: 1094:	}
        -: 1095:
        -: 1096:      //discard played card from hand
    #####: 1097:      discardCard(handPos, currentPlayer, state, 0);
        -: 1098:
        -: 1099:      //trash copies of cards returned to supply
    #####: 1100:      for (j = 0; j < choice2; j++)
        -: 1101:	{
    #####: 1102:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1103:	    {
    #####: 1104:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1105:		{
    #####: 1106:		  discardCard(i, currentPlayer, state, 1);
    #####: 1107:		  break;
        -: 1108:		}
        -: 1109:	    }
        -: 1110:	}
        -: 1111:
    #####: 1112:      return 0;
        -: 1113:
        -: 1114:    case cutpurse:
        -: 1115:
    #####: 1116:      updateCoins(currentPlayer, state, 2);
    #####: 1117:      for (i = 0; i < state->numPlayers; i++)
        -: 1118:	{
    #####: 1119:	  if (i != currentPlayer)
        -: 1120:	    {
    #####: 1121:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1122:		{
    #####: 1123:		  if (state->hand[i][j] == copper)
        -: 1124:		    {
    #####: 1125:		      discardCard(j, i, state, 0);
    #####: 1126:		      break;
        -: 1127:		    }
    #####: 1128:		  if (j == state->handCount[i])
        -: 1129:		    {
    #####: 1130:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1131:			{
        -: 1132:			  if (DEBUG)
        -: 1133:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1134:			}
    #####: 1135:		      break;
        -: 1136:		    }
        -: 1137:		}
        -: 1138:
        -: 1139:	    }
        -: 1140:
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
    #####: 1146:      return 0;
        -: 1147:
        -: 1148:
        -: 1149:    case embargo:
        -: 1150:      //+2 Coins
    #####: 1151:      state->coins = state->coins + 2;
        -: 1152:
        -: 1153:      //see if selected pile is in play
    #####: 1154:      if ( state->supplyCount[choice1] == -1 )
        -: 1155:	{
    #####: 1156:	  return -1;
        -: 1157:	}
        -: 1158:
        -: 1159:      //add embargo token to selected supply pile
    #####: 1160:      state->embargoTokens[choice1]++;
        -: 1161:
        -: 1162:      //trash card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1164:      return 0;
        -: 1165:
        -: 1166:    case outpost:
        -: 1167:      //set outpost flag
    #####: 1168:      state->outpostPlayed++;
        -: 1169:
        -: 1170:      //discard card
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1172:      return 0;
        -: 1173:
        -: 1174:    case salvager:
        -: 1175:      //+1 buy
    #####: 1176:      state->numBuys++;
        -: 1177:
    #####: 1178:      if (choice1)
        -: 1179:	{
        -: 1180:	  //gain coins equal to trashed card
    #####: 1181:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1182:	  //trash card
    #####: 1183:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1184:	}
        -: 1185:
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:    case sea_hag:
    #####: 1191:      for (i = 0; i < state->numPlayers; i++){
    #####: 1192:	if (i != currentPlayer){
    #####: 1193:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1194:	  state->discardCount[i]++;
    #####: 1195:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1196:	}
        -: 1197:      }
    #####: 1198:      return 0;
        -: 1199:
        -: 1200:    case treasure_map:
        -: 1201:      //search hand for another treasure_map
    #####: 1202:      index = -1;
    #####: 1203:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1206:	    {
    #####: 1207:	      index = i;
    #####: 1208:	      break;
        -: 1209:	    }
        -: 1210:	}
    #####: 1211:      if (index > -1)
        -: 1212:	{
        -: 1213:	  //trash both treasure cards
    #####: 1214:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1215:	  discardCard(index, currentPlayer, state, 1);
        -: 1216:
        -: 1217:	  //gain 4 Gold cards
    #####: 1218:	  for (i = 0; i < 4; i++)
        -: 1219:	    {
    #####: 1220:	      gainCard(gold, state, 1, currentPlayer);
        -: 1221:	    }
        -: 1222:
        -: 1223:	  //return success
    #####: 1224:	  return 1;
        -: 1225:	}
        -: 1226:
        -: 1227:      //no second treasure_map found in hand
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:  return -1;
        -: 1232:}
        -: 1233:
    60000: 1234:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1235:{
        -: 1236:
        -: 1237:  //if card is not trashed, added to Played pile
    60000: 1238:  if (trashFlag < 1)
        -: 1239:    {
        -: 1240:      //add card to played pile
    60000: 1241:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    60000: 1242:      state->playedCardCount++;
        -: 1243:    }
        -: 1244:
        -: 1245:  //set played card to -1
    60000: 1246:  state->hand[currentPlayer][handPos] = -1;
        -: 1247:
        -: 1248:  //remove card from player's hand
    60000: 1249:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1250:    {
        -: 1251:      //reduce number of cards in hand
       19: 1252:      state->handCount[currentPlayer]--;
        -: 1253:    }
    59981: 1254:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1255:    {
        -: 1256:      //reduce number of cards in hand
    #####: 1257:      state->handCount[currentPlayer]--;
        -: 1258:    }
        -: 1259:  else
        -: 1260:    {
        -: 1261:      //replace discarded card with last card in hand
    59981: 1262:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1263:      //set last card to -1
    59981: 1264:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1265:      //reduce number of cards in hand
    59981: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
        -: 1268:
    60000: 1269:  return 0;
        -: 1270:}
        -: 1271:
    #####: 1272:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1273:{
        -: 1274:  //Note: supplyPos is enum of choosen card
        -: 1275:
        -: 1276:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1277:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1278:    {
    #####: 1279:      return -1;
        -: 1280:    }
        -: 1281:
        -: 1282:  //added card for [whoseTurn] current player:
        -: 1283:  // toFlag = 0 : add to discard
        -: 1284:  // toFlag = 1 : add to deck
        -: 1285:  // toFlag = 2 : add to hand
        -: 1286:
    #####: 1287:  if (toFlag == 1)
        -: 1288:    {
    #####: 1289:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1290:      state->deckCount[player]++;
        -: 1291:    }
    #####: 1292:  else if (toFlag == 2)
        -: 1293:    {
    #####: 1294:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1295:      state->handCount[player]++;
        -: 1296:    }
        -: 1297:  else
        -: 1298:    {
    #####: 1299:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1300:      state->discardCount[player]++;
        -: 1301:    }
        -: 1302:
        -: 1303:  //decrease number in supply pile
    #####: 1304:  state->supplyCount[supplyPos]--;
        -: 1305:
    #####: 1306:  return 0;
        -: 1307:}
        -: 1308:
      121: 1309:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1310:{
        -: 1311:  int i;
        -: 1312:
        -: 1313:  //reset coin count
      121: 1314:  state->coins = 0;
        -: 1315:
        -: 1316:  //add coins for each Treasure card in player's hand
      166: 1317:  for (i = 0; i < state->handCount[player]; i++)
        -: 1318:    {
       45: 1319:      if (state->hand[player][i] == copper)
        -: 1320:	{
       36: 1321:	  state->coins += 1;
        -: 1322:	}
        9: 1323:      else if (state->hand[player][i] == silver)
        -: 1324:	{
    #####: 1325:	  state->coins += 2;
        -: 1326:	}
        9: 1327:      else if (state->hand[player][i] == gold)
        -: 1328:	{
    #####: 1329:	  state->coins += 3;
        -: 1330:	}
        -: 1331:    }
        -: 1332:
        -: 1333:  //add bonus
      121: 1334:  state->coins += bonus;
        -: 1335:
      121: 1336:  return 0;
        -: 1337:}
        -: 1338:
        -: 1339:
        -: 1340://end of dominion.c
cardtest2.c:
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 7
PASS: First card taken was a treasure card
PASS: Second card taken was a treasure card
PASS: Correct deck count after playing adventurer (-2)
PASS: Correct score after playing adventurer (no change)
PASS: Player 2's handcount unchanged after player 1 played adventurer
PASS: Player 2's deckcount unchanged after player 1 played adventurer
PASS: Player 2's score unchanged after player 1 played adventurer
PASS: Number of estate cards the same after playing adventurer
PASS: Number of duchy cards the same after playing adventurer
PASS: Number of province cards the same after playing adventurer
PASS: Kingdom card pile #0 contained the same number of cards as before
PASS: Kingdom card pile #1 contained the same number of cards as before
PASS: Kingdom card pile #2 contained the same number of cards as before
PASS: Kingdom card pile #3 contained the same number of cards as before
PASS: Kingdom card pile #4 contained the same number of cards as before
PASS: Kingdom card pile #5 contained the same number of cards as before
PASS: Kingdom card pile #6 contained the same number of cards as before
PASS: Kingdom card pile #7 contained the same number of cards as before
PASS: Kingdom card pile #8 contained the same number of cards as before
PASS: Kingdom card pile #9 contained the same number of cards as before
File 'dominion.c'
Lines executed:34.94% of 561
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:90
        -:    0:Programs:85
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      300:    8:int compare(const void* a, const void* b) {
      300:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      300:   11:  if (*(int*)a < *(int*)b)
       80:   12:    return -1;
      220:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       10:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       10:   44:  SelectStream(1);
       10:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       10:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       10:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      110:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1100:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       10:   73:  if (numPlayers == 2)
        -:   74:    {
       10:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       10:   87:  if (numPlayers == 2)
        -:   88:    {
       10:   89:      state->supplyCount[estate] = 8;
       10:   90:      state->supplyCount[duchy] = 8;
       10:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       10:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  102:  state->supplyCount[silver] = 40;
       10:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      210:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1650:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1550:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      100:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      100:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      100:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1450:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       30:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       20:  140:      state->deckCount[i] = 0;
       80:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       60:  143:	  state->deck[i][j] = estate;
       60:  144:	  state->deckCount[i]++;
        -:  145:	}
      160:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      140:  148:	  state->deck[i][j] = copper;
      140:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       30:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       20:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       30:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       20:  166:      state->handCount[i] = 0;
       20:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      280:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      270:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       10:  182:  state->outpostPlayed = 0;
       10:  183:  state->phase = 0;
       10:  184:  state->numActions = 1;
       10:  185:  state->numBuys = 1;
       10:  186:  state->playedCardCount = 0;
       10:  187:  state->whoseTurn = 0;
       10:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       60:  192:  for (it = 0; it < 5; it++){
       50:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       10:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       10:  198:  return 0;
        -:  199:}
        -:  200:
       20:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       20:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       20:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       20:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      240:  214:  while (state->deckCount[player] > 0) {
      200:  215:    card = floor(Random() * state->deckCount[player]);
      200:  216:    newDeck[newDeckPos] = state->deck[player][card];
      200:  217:    newDeckPos++;
      720:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      520:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      200:  221:    state->deckCount[player]--;
        -:  222:  }
      220:  223:  for (i = 0; i < newDeckPos; i++) {
      200:  224:    state->deck[player][i] = newDeck[i];
      200:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       20:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
      168:  311:int numHandCards(struct gameState *state) {
      168:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    72178:  346:int whoseTurn(struct gameState *state) {
    72178:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    14028:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    14028:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
     1666:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    12362:  401:  j = 0;
   321412:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
   309050:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    37044:  406:	  j++;
        -:  407:	}
        -:  408:    }
    12362:  409:  if ( j >= 3)
        -:  410:    {
    12348:  411:      return 1;
        -:  412:    }
        -:  413:
       14:  414:  return 0;
        -:  415:}
        -:  416:
       40:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       40:  420:  int score = 0;
        -:  421:  //score from hand
      160:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
      120:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
      120:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
      120:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
      120:  427:      if (state->hand[player][i] == province) { score = score + 6; };
      120:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      120:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       40:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       40:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
       40:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   216070:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   216070:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   216070:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   216070:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   216070:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   216070:  576:    state->deckCount[player]--;
   216070:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   216070:  580:  return 0;
        -:  581:}
        -:  582:
      490:  583:int getCost(int cardNumber)
        -:  584:{
      490:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
       14:  588:      return 0;
        -:  589:    case estate:
       14:  590:      return 2;
        -:  591:    case duchy:
       14:  592:      return 5;
        -:  593:    case province:
       14:  594:      return 8;
        -:  595:    case copper:
       14:  596:      return 0;
        -:  597:    case silver:
       14:  598:      return 3;
        -:  599:    case gold:
       14:  600:      return 6;
        -:  601:    case adventurer:
       14:  602:      return 6;
        -:  603:    case council_room:
       14:  604:      return 5;
        -:  605:    case feast:
       14:  606:      return 4;
        -:  607:    case gardens:
       14:  608:      return 4;
        -:  609:    case mine:
       14:  610:      return 5;
        -:  611:    case remodel:
       14:  612:      return 4;
        -:  613:    case smithy:
       14:  614:      return 4;
        -:  615:    case village:
       14:  616:      return 3;
        -:  617:    case baron:
       14:  618:      return 4;
        -:  619:    case great_hall:
       14:  620:      return 3;
        -:  621:    case minion:
       14:  622:      return 5;
        -:  623:    case steward:
       14:  624:      return 3;
        -:  625:    case tribute:
       14:  626:      return 5;
        -:  627:    case ambassador:
       14:  628:      return 3;
        -:  629:    case cutpurse:
       14:  630:      return 4;
        -:  631:    case embargo:
       14:  632:      return 2;
        -:  633:    case outpost:
       14:  634:      return 5;
        -:  635:    case salvager:
       14:  636:      return 4;
        -:  637:    case sea_hag:
       14:  638:      return 4;
        -:  639:    case treasure_map:
       14:  640:      return 4;
        -:  641:    }
        -:  642:
      112:  643:  return -1;
        -:  644:}
        -:  645:
       10:  646:void adventurer_action (int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z) {
       40:  647:    while(drawntreasure<2){
       20:  648:        if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:            shuffle(currentPlayer, state);
        -:  650:        }
       20:  651:        drawCard(currentPlayer, state);
       20:  652:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       20:  653:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       20:  654:          drawntreasure++;
        -:  655:        else{
    #####:  656:          temphand[z]=cardDrawn;
    #####:  657:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  658:        }
        -:  659:  }
       20:  660:  while(z-1>=0){
    #####:  661:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  662:      z=z-1;
        -:  663:  }
       10:  664:}
        -:  665:
    48000:  666:void smithy_action (int currentPlayer, struct gameState *state, int i, int handPos) {
        -:  667:  //+3 Cards
   192000:  668:  for (i = 0; i < 3; i++) {
   144000:  669:    drawCard(currentPlayer, state);
        -:  670:  }
        -:  671:
        -:  672:  //discard card from hand
    48000:  673:  discardCard(handPos, currentPlayer, state, 0);
    48000:  674:}
        -:  675:
    #####:  676:void village_action (int currentPlayer, struct gameState *state, int handPos) {
        -:  677:  //+1 Card
    #####:  678:  drawCard(currentPlayer, state);
        -:  679:
        -:  680:  //+2 Actions
    #####:  681:  state->numActions = state->numActions + 2;
        -:  682:
        -:  683:  //discard played card from hand
    #####:  684:  discardCard(handPos, currentPlayer, state, 0);
    #####:  685:}
        -:  686:
    12000:  687:void council_room_action (int i, int currentPlayer, struct gameState *state) {
        -:  688:  //+4 Cards
    60000:  689:  for (i = 0; i < 4; i++) {
    48000:  690:      drawCard(currentPlayer, state);
        -:  691:  }
        -:  692:
        -:  693:  //+1 Buy
    12000:  694:  state->numBuys++;
        -:  695:
        -:  696:  //Each other player draws a card
    60000:  697:  for (i = 0; i < state->numPlayers; i++) {
    48000:  698:      if ( i == currentPlayer ) {
    12000:  699:          drawCard(i, state);
        -:  700:      }
        -:  701:  }
    12000:  702:}
        -:  703:
    #####:  704:int mine_action (int j, struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos, int i) {
    #####:  705:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  706:
    #####:  707:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
    #####:  708:      return -1;
        -:  709:  }
        -:  710:
    #####:  711:  if (choice2 > treasure_map || choice2 < curse) {
    #####:  712:      return -1;
        -:  713:  }
        -:  714:
    #####:  715:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
    #####:  716:      return -1;
        -:  717:  }
        -:  718:
    #####:  719:  gainCard(choice2, state, 2, currentPlayer);
        -:  720:
        -:  721:  //discard card from hand
    #####:  722:  discardCard(handPos, currentPlayer, state, 0);
        -:  723:
        -:  724:  //discard trashed card
    #####:  725:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  726:      if (state->hand[currentPlayer][i] == j) {
    #####:  727:        discardCard(i, currentPlayer, state, 0);
    #####:  728:        break;
        -:  729:      }
        -:  730:  }
        -:  731:
    #####:  732:  return -1;
        -:  733:}
        -:  734:
    72010:  735:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  736:{
        -:  737:  int i;
        -:  738:  int j;
        -:  739:  int k;
        -:  740:  int x;
        -:  741:  int m;
        -:  742:  int index;
    72010:  743:  int currentPlayer = whoseTurn(state);
    72010:  744:  int nextPlayer = currentPlayer + 1;
        -:  745:
    72010:  746:  int tributeRevealedCards[2] = {-1, -1};
        -:  747:  int temphand[MAX_HAND];// moved above the if statement
    72010:  748:  int drawntreasure=0;
        -:  749:  int cardDrawn;
    72010:  750:  int z = 0;// this is the counter for the temp hand
    72010:  751:  if (nextPlayer > (state->numPlayers - 1)){
    51000:  752:    nextPlayer = 0;
        -:  753:  }
        -:  754:
        -:  755:
        -:  756:  //uses switch to select card and perform actions
    72010:  757:  switch( card )
        -:  758:    {
        -:  759:    case adventurer:
       10:  760:      adventurer_action (drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
       10:  761:      return 0;
        -:  762:
        -:  763:    case council_room:
    12000:  764:      council_room_action (i, currentPlayer, state);
    12000:  765:      return 0;
        -:  766:
        -:  767:    case feast:
        -:  768:      //gain card with cost up to 5
        -:  769:      //Backup hand
    #####:  770:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  771:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  772:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  773:      }
        -:  774:      //Backup hand
        -:  775:
        -:  776:      //Update Coins for Buy
    #####:  777:      updateCoins(currentPlayer, state, 5);
    #####:  778:      x = 1;//Condition to loop on
    #####:  779:      while( x == 1) {//Buy one card
    #####:  780:	if (supplyCount(choice1, state) <= 0){
        -:  781:	  if (DEBUG)
        -:  782:	    printf("None of that card left, sorry!\n");
        -:  783:
        -:  784:	  if (DEBUG){
        -:  785:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  786:	  }
        -:  787:	}
    #####:  788:	else if (state->coins < getCost(choice1)){
    #####:  789:	  printf("That card is too expensive!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  793:	  }
        -:  794:	}
        -:  795:	else{
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  799:	  }
        -:  800:
    #####:  801:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  802:	  x = 0;//No more buying cards
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
        -:  808:	}
        -:  809:      }
        -:  810:
        -:  811:      //Reset Hand
    #####:  812:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  813:	state->hand[currentPlayer][i] = temphand[i];
    #####:  814:	temphand[i] = -1;
        -:  815:      }
        -:  816:      //Reset Hand
        -:  817:
    #####:  818:      return 0;
        -:  819:
        -:  820:    case gardens:
    #####:  821:      return -1;
        -:  822:
        -:  823:    case mine:
    #####:  824:      m = mine_action (j, state, currentPlayer, choice1, choice2, handPos, i);
    #####:  825:      return m;
        -:  826:
        -:  827:    case remodel:
    #####:  828:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  829:
    #####:  830:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  831:	{
    #####:  832:	  return -1;
        -:  833:	}
        -:  834:
    #####:  835:      gainCard(choice2, state, 0, currentPlayer);
        -:  836:
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:
        -:  840:      //discard trashed card
    #####:  841:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  842:	{
    #####:  843:	  if (state->hand[currentPlayer][i] == j)
        -:  844:	    {
    #####:  845:	      discardCard(i, currentPlayer, state, 0);
    #####:  846:	      break;
        -:  847:	    }
        -:  848:	}
        -:  849:
        -:  850:
    #####:  851:      return 0;
        -:  852:
        -:  853:    case smithy:
    48000:  854:      smithy_action (currentPlayer, state, i, handPos);
    48000:  855:      return 0;
        -:  856:
        -:  857:    case village:
    #####:  858:      village_action (currentPlayer, state, handPos);
    #####:  859:      return 0;
        -:  860:
        -:  861:    case baron:
    #####:  862:      state->numBuys++;//Increase buys by 1!
    #####:  863:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  864:	int p = 0;//Iterator for hand!
    #####:  865:	int card_not_discarded = 1;//Flag for discard set!
    #####:  866:	while(card_not_discarded){
    #####:  867:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  868:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  869:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  870:	    state->discardCount[currentPlayer]++;
    #####:  871:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  872:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  873:	    }
    #####:  874:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  875:	    state->handCount[currentPlayer]--;
    #####:  876:	    card_not_discarded = 0;//Exit the loop
        -:  877:	  }
    #####:  878:	  else if (p > state->handCount[currentPlayer]){
        -:  879:	    if(DEBUG) {
        -:  880:	      printf("No estate cards in your hand, invalid choice\n");
        -:  881:	      printf("Must gain an estate if there are any\n");
        -:  882:	    }
    #####:  883:	    if (supplyCount(estate, state) > 0){
    #####:  884:	      gainCard(estate, state, 0, currentPlayer);
    #####:  885:	      state->supplyCount[estate]--;//Decrement estates
    #####:  886:	      if (supplyCount(estate, state) == 0){
    #####:  887:		isGameOver(state);
        -:  888:	      }
        -:  889:	    }
    #####:  890:	    card_not_discarded = 0;//Exit the loop
        -:  891:	  }
        -:  892:
        -:  893:	  else{
    #####:  894:	    p++;//Next card
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:
        -:  899:      else{
    #####:  900:	if (supplyCount(estate, state) > 0){
    #####:  901:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  902:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  903:	  if (supplyCount(estate, state) == 0){
    #####:  904:	    isGameOver(state);
        -:  905:	  }
        -:  906:	}
        -:  907:      }
        -:  908:
        -:  909:
    #####:  910:      return 0;
        -:  911:
        -:  912:    case great_hall:
        -:  913:      //+1 Card
    12000:  914:      drawCard(currentPlayer, state);
        -:  915:
        -:  916:      //+1 Actions
    12000:  917:      state->numActions++;
        -:  918:
        -:  919:      //discard card from hand
    12000:  920:      discardCard(handPos, currentPlayer, state, 0);
    12000:  921:      return 0;
        -:  922:
        -:  923:    case minion:
        -:  924:      //+1 action
    #####:  925:      state->numActions++;
        -:  926:
        -:  927:      //discard card from hand
    #####:  928:      discardCard(handPos, currentPlayer, state, 0);
        -:  929:
    #####:  930:      if (choice1)		//+2 coins
        -:  931:	{
    #####:  932:	  state->coins = state->coins + 2;
        -:  933:	}
        -:  934:
    #####:  935:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  936:	{
        -:  937:	  //discard hand
    #####:  938:	  while(numHandCards(state) > 0)
        -:  939:	    {
    #####:  940:	      discardCard(handPos, currentPlayer, state, 0);
        -:  941:	    }
        -:  942:
        -:  943:	  //draw 4
    #####:  944:	  for (i = 0; i < 4; i++)
        -:  945:	    {
    #####:  946:	      drawCard(currentPlayer, state);
        -:  947:	    }
        -:  948:
        -:  949:	  //other players discard hand and redraw if hand size > 4
    #####:  950:	  for (i = 0; i < state->numPlayers; i++)
        -:  951:	    {
    #####:  952:	      if (i != currentPlayer)
        -:  953:		{
    #####:  954:		  if ( state->handCount[i] > 4 )
        -:  955:		    {
        -:  956:		      //discard hand
    #####:  957:		      while( state->handCount[i] > 0 )
        -:  958:			{
    #####:  959:			  discardCard(handPos, i, state, 0);
        -:  960:			}
        -:  961:
        -:  962:		      //draw 4
    #####:  963:		      for (j = 0; j < 4; j++)
        -:  964:			{
    #####:  965:			  drawCard(i, state);
        -:  966:			}
        -:  967:		    }
        -:  968:		}
        -:  969:	    }
        -:  970:
        -:  971:	}
    #####:  972:      return 0;
        -:  973:
        -:  974:    case steward:
    #####:  975:      if (choice1 == 1)
        -:  976:	{
        -:  977:	  //+2 cards
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
    #####:  981:      else if (choice1 == 2)
        -:  982:	{
        -:  983:	  //+2 coins
    #####:  984:	  state->coins = state->coins + 2;
        -:  985:	}
        -:  986:      else
        -:  987:	{
        -:  988:	  //trash 2 cards in hand
    #####:  989:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  990:	  discardCard(choice3, currentPlayer, state, 1);
        -:  991:	}
        -:  992:
        -:  993:      //discard card from hand
    #####:  994:      discardCard(handPos, currentPlayer, state, 0);
    #####:  995:      return 0;
        -:  996:
        -:  997:    case tribute:
    #####:  998:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  999:	if (state->deckCount[nextPlayer] > 0){
    #####: 1000:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1001:	  state->deckCount[nextPlayer]--;
        -: 1002:	}
    #####: 1003:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1004:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1005:	  state->discardCount[nextPlayer]--;
        -: 1006:	}
        -: 1007:	else{
        -: 1008:	  //No Card to Reveal
        -: 1009:	  if (DEBUG){
        -: 1010:	    printf("No cards to reveal\n");
        -: 1011:	  }
        -: 1012:	}
        -: 1013:      }
        -: 1014:
        -: 1015:      else{
    #####: 1016:	if (state->deckCount[nextPlayer] == 0){
    #####: 1017:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1018:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1019:	    state->deckCount[nextPlayer]++;
    #####: 1020:	    state->discard[nextPlayer][i] = -1;
    #####: 1021:	    state->discardCount[nextPlayer]--;
        -: 1022:	  }
        -: 1023:
    #####: 1024:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1025:	}
    #####: 1026:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1028:	state->deckCount[nextPlayer]--;
    #####: 1029:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1030:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1031:	state->deckCount[nextPlayer]--;
        -: 1032:      }
        -: 1033:
    #####: 1034:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1035:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1036:	state->playedCardCount++;
    #####: 1037:	tributeRevealedCards[1] = -1;
        -: 1038:      }
        -: 1039:
    #####: 1040:      for (i = 0; i <= 2; i ++){
    #####: 1041:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1042:	  state->coins += 2;
        -: 1043:	}
        -: 1044:
    #####: 1045:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1046:	  drawCard(currentPlayer, state);
    #####: 1047:	  drawCard(currentPlayer, state);
        -: 1048:	}
        -: 1049:	else{//Action Card
    #####: 1050:	  state->numActions = state->numActions + 2;
        -: 1051:	}
        -: 1052:      }
        -: 1053:
    #####: 1054:      return 0;
        -: 1055:
        -: 1056:    case ambassador:
    #####: 1057:      j = 0;		//used to check if player has enough cards to discard
        -: 1058:
    #####: 1059:      if (choice2 > 2 || choice2 < 0)
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:
    #####: 1064:      if (choice1 == handPos)
        -: 1065:	{
    #####: 1066:	  return -1;
        -: 1067:	}
        -: 1068:
    #####: 1069:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1070:	{
    #####: 1071:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1072:	    {
    #####: 1073:	      j++;
        -: 1074:	    }
        -: 1075:	}
    #####: 1076:      if (j < choice2)
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
        -: 1081:      if (DEBUG)
        -: 1082:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1083:
        -: 1084:      //increase supply count for choosen card by amount being discarded
    #####: 1085:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1086:
        -: 1087:      //each other player gains a copy of revealed card
    #####: 1088:      for (i = 0; i < state->numPlayers; i++)
        -: 1089:	{
    #####: 1090:	  if (i != currentPlayer)
        -: 1091:	    {
    #####: 1092:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1093:	    }
        -: 1094:	}
        -: 1095:
        -: 1096:      //discard played card from hand
    #####: 1097:      discardCard(handPos, currentPlayer, state, 0);
        -: 1098:
        -: 1099:      //trash copies of cards returned to supply
    #####: 1100:      for (j = 0; j < choice2; j++)
        -: 1101:	{
    #####: 1102:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1103:	    {
    #####: 1104:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1105:		{
    #####: 1106:		  discardCard(i, currentPlayer, state, 1);
    #####: 1107:		  break;
        -: 1108:		}
        -: 1109:	    }
        -: 1110:	}
        -: 1111:
    #####: 1112:      return 0;
        -: 1113:
        -: 1114:    case cutpurse:
        -: 1115:
    #####: 1116:      updateCoins(currentPlayer, state, 2);
    #####: 1117:      for (i = 0; i < state->numPlayers; i++)
        -: 1118:	{
    #####: 1119:	  if (i != currentPlayer)
        -: 1120:	    {
    #####: 1121:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1122:		{
    #####: 1123:		  if (state->hand[i][j] == copper)
        -: 1124:		    {
    #####: 1125:		      discardCard(j, i, state, 0);
    #####: 1126:		      break;
        -: 1127:		    }
    #####: 1128:		  if (j == state->handCount[i])
        -: 1129:		    {
    #####: 1130:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1131:			{
        -: 1132:			  if (DEBUG)
        -: 1133:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1134:			}
    #####: 1135:		      break;
        -: 1136:		    }
        -: 1137:		}
        -: 1138:
        -: 1139:	    }
        -: 1140:
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
    #####: 1146:      return 0;
        -: 1147:
        -: 1148:
        -: 1149:    case embargo:
        -: 1150:      //+2 Coins
    #####: 1151:      state->coins = state->coins + 2;
        -: 1152:
        -: 1153:      //see if selected pile is in play
    #####: 1154:      if ( state->supplyCount[choice1] == -1 )
        -: 1155:	{
    #####: 1156:	  return -1;
        -: 1157:	}
        -: 1158:
        -: 1159:      //add embargo token to selected supply pile
    #####: 1160:      state->embargoTokens[choice1]++;
        -: 1161:
        -: 1162:      //trash card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1164:      return 0;
        -: 1165:
        -: 1166:    case outpost:
        -: 1167:      //set outpost flag
    #####: 1168:      state->outpostPlayed++;
        -: 1169:
        -: 1170:      //discard card
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1172:      return 0;
        -: 1173:
        -: 1174:    case salvager:
        -: 1175:      //+1 buy
    #####: 1176:      state->numBuys++;
        -: 1177:
    #####: 1178:      if (choice1)
        -: 1179:	{
        -: 1180:	  //gain coins equal to trashed card
    #####: 1181:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1182:	  //trash card
    #####: 1183:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1184:	}
        -: 1185:
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:    case sea_hag:
    #####: 1191:      for (i = 0; i < state->numPlayers; i++){
    #####: 1192:	if (i != currentPlayer){
    #####: 1193:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1194:	  state->discardCount[i]++;
    #####: 1195:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1196:	}
        -: 1197:      }
    #####: 1198:      return 0;
        -: 1199:
        -: 1200:    case treasure_map:
        -: 1201:      //search hand for another treasure_map
    #####: 1202:      index = -1;
    #####: 1203:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1206:	    {
    #####: 1207:	      index = i;
    #####: 1208:	      break;
        -: 1209:	    }
        -: 1210:	}
    #####: 1211:      if (index > -1)
        -: 1212:	{
        -: 1213:	  //trash both treasure cards
    #####: 1214:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1215:	  discardCard(index, currentPlayer, state, 1);
        -: 1216:
        -: 1217:	  //gain 4 Gold cards
    #####: 1218:	  for (i = 0; i < 4; i++)
        -: 1219:	    {
    #####: 1220:	      gainCard(gold, state, 1, currentPlayer);
        -: 1221:	    }
        -: 1222:
        -: 1223:	  //return success
    #####: 1224:	  return 1;
        -: 1225:	}
        -: 1226:
        -: 1227:      //no second treasure_map found in hand
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:  return -1;
        -: 1232:}
        -: 1233:
    60000: 1234:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1235:{
        -: 1236:
        -: 1237:  //if card is not trashed, added to Played pile
    60000: 1238:  if (trashFlag < 1)
        -: 1239:    {
        -: 1240:      //add card to played pile
    60000: 1241:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    60000: 1242:      state->playedCardCount++;
        -: 1243:    }
        -: 1244:
        -: 1245:  //set played card to -1
    60000: 1246:  state->hand[currentPlayer][handPos] = -1;
        -: 1247:
        -: 1248:  //remove card from player's hand
    60000: 1249:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1250:    {
        -: 1251:      //reduce number of cards in hand
       19: 1252:      state->handCount[currentPlayer]--;
        -: 1253:    }
    59981: 1254:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1255:    {
        -: 1256:      //reduce number of cards in hand
    #####: 1257:      state->handCount[currentPlayer]--;
        -: 1258:    }
        -: 1259:  else
        -: 1260:    {
        -: 1261:      //replace discarded card with last card in hand
    59981: 1262:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1263:      //set last card to -1
    59981: 1264:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1265:      //reduce number of cards in hand
    59981: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
        -: 1268:
    60000: 1269:  return 0;
        -: 1270:}
        -: 1271:
    #####: 1272:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1273:{
        -: 1274:  //Note: supplyPos is enum of choosen card
        -: 1275:
        -: 1276:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1277:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1278:    {
    #####: 1279:      return -1;
        -: 1280:    }
        -: 1281:
        -: 1282:  //added card for [whoseTurn] current player:
        -: 1283:  // toFlag = 0 : add to discard
        -: 1284:  // toFlag = 1 : add to deck
        -: 1285:  // toFlag = 2 : add to hand
        -: 1286:
    #####: 1287:  if (toFlag == 1)
        -: 1288:    {
    #####: 1289:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1290:      state->deckCount[player]++;
        -: 1291:    }
    #####: 1292:  else if (toFlag == 2)
        -: 1293:    {
    #####: 1294:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1295:      state->handCount[player]++;
        -: 1296:    }
        -: 1297:  else
        -: 1298:    {
    #####: 1299:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1300:      state->discardCount[player]++;
        -: 1301:    }
        -: 1302:
        -: 1303:  //decrease number in supply pile
    #####: 1304:  state->supplyCount[supplyPos]--;
        -: 1305:
    #####: 1306:  return 0;
        -: 1307:}
        -: 1308:
      122: 1309:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1310:{
        -: 1311:  int i;
        -: 1312:
        -: 1313:  //reset coin count
      122: 1314:  state->coins = 0;
        -: 1315:
        -: 1316:  //add coins for each Treasure card in player's hand
      172: 1317:  for (i = 0; i < state->handCount[player]; i++)
        -: 1318:    {
       50: 1319:      if (state->hand[player][i] == copper)
        -: 1320:	{
       40: 1321:	  state->coins += 1;
        -: 1322:	}
       10: 1323:      else if (state->hand[player][i] == silver)
        -: 1324:	{
    #####: 1325:	  state->coins += 2;
        -: 1326:	}
       10: 1327:      else if (state->hand[player][i] == gold)
        -: 1328:	{
    #####: 1329:	  state->coins += 3;
        -: 1330:	}
        -: 1331:    }
        -: 1332:
        -: 1333:  //add bonus
      122: 1334:  state->coins += bonus;
        -: 1335:
      122: 1336:  return 0;
        -: 1337:}
        -: 1338:
        -: 1339:
        -: 1340://end of dominion.c
cardtest3.c:
FAIL: Hand count after playing council_room was not correct. Expected 147, got 149
FAIL: Hand count after playing council_room was not correct. Expected 149, got 493
FAIL: Hand count after playing council_room was not correct. Expected 149, got 333
FAIL: Hand count after playing council_room was not correct. Expected 149, got 252
FAIL: Hand count after playing council_room was not correct. Expected 469, got 471
FAIL: Hand count after playing council_room was not correct. Expected 471, got 178
FAIL: Hand count after playing council_room was not correct. Expected 471, got 256
FAIL: Hand count after playing council_room was not correct. Expected 471, got 328
FAIL: Hand count after playing council_room was not correct. Expected 318, got 320
FAIL: Hand count after playing council_room was not correct. Expected 320, got 310
FAIL: Hand count after playing council_room was not correct. Expected 320, got 287
FAIL: Hand count after playing council_room was not correct. Expected 320, got 2
FAIL: Hand count after playing council_room was not correct. Expected 107, got 109
FAIL: Hand count after playing council_room was not correct. Expected 109, got 402
FAIL: Hand count after playing council_room was not correct. Expected 109, got 122
FAIL: Hand count after playing council_room was not correct. Expected 109, got 110
FAIL: Hand count after playing council_room was not correct. Expected 321, got 323
FAIL: Hand count after playing council_room was not correct. Expected 323, got 68
FAIL: Hand count after playing council_room was not correct. Expected 323, got 171
FAIL: Hand count after playing council_room was not correct. Expected 323, got 262
FAIL: Hand count after playing council_room was not correct. Expected 76, got 78
FAIL: Hand count after playing council_room was not correct. Expected 78, got 125
FAIL: Hand count after playing council_room was not correct. Expected 78, got 49
FAIL: Hand count after playing council_room was not correct. Expected 78, got 368
FAIL: Hand count after playing council_room was not correct. Expected 21, got 23
FAIL: Hand count after playing council_room was not correct. Expected 23, got 450
FAIL: Hand count after playing council_room was not correct. Expected 23, got 410
FAIL: Hand count after playing council_room was not correct. Expected 23, got 476
FAIL: Hand count after playing council_room was not correct. Expected 276, got 278
FAIL: Hand count after playing council_room was not correct. Expected 278, got 104
FAIL: Hand count after playing council_room was not correct. Expected 278, got 372
FAIL: Hand count after playing council_room was not correct. Expected 278, got 357
FAIL: Hand count after playing council_room was not correct. Expected 200, got 202
FAIL: Hand count after playing council_room was not correct. Expected 202, got 500
FAIL: Hand count after playing council_room was not correct. Expected 202, got 232
FAIL: Hand count after playing council_room was not correct. Expected 202, got 464
FAIL: Hand count after playing council_room was not correct. Expected 136, got 138
FAIL: Hand count after playing council_room was not correct. Expected 138, got 93
FAIL: Hand count after playing council_room was not correct. Expected 138, got 293
FAIL: Hand count after playing council_room was not correct. Expected 138, got 289
FAIL: Hand count after playing council_room was not correct. Expected 385, got 387
FAIL: Hand count after playing council_room was not correct. Expected 387, got 43
FAIL: Hand count after playing council_room was not correct. Expected 387, got 252
FAIL: Hand count after playing council_room was not correct. Expected 387, got 227
FAIL: Hand count after playing council_room was not correct. Expected 346, got 348
FAIL: Hand count after playing council_room was not correct. Expected 348, got 117
FAIL: Hand count after playing council_room was not correct. Expected 348, got 343
FAIL: Hand count after playing council_room was not correct. Expected 348, got 140
FAIL: Hand count after playing council_room was not correct. Expected 153, got 155
FAIL: Hand count after playing council_room was not correct. Expected 155, got 275
FAIL: Hand count after playing council_room was not correct. Expected 155, got 374
FAIL: Hand count after playing council_room was not correct. Expected 155, got 483
FAIL: Hand count after playing council_room was not correct. Expected 44, got 46
FAIL: Hand count after playing council_room was not correct. Expected 46, got 6
FAIL: Hand count after playing council_room was not correct. Expected 46, got 457
FAIL: Hand count after playing council_room was not correct. Expected 46, got 67
FAIL: Hand count after playing council_room was not correct. Expected 335, got 337
FAIL: Hand count after playing council_room was not correct. Expected 337, got 92
FAIL: Hand count after playing council_room was not correct. Expected 337, got 27
FAIL: Hand count after playing council_room was not correct. Expected 337, got 76
FAIL: Hand count after playing council_room was not correct. Expected 235, got 237
FAIL: Hand count after playing council_room was not correct. Expected 237, got 489
FAIL: Hand count after playing council_room was not correct. Expected 237, got 299
FAIL: Hand count after playing council_room was not correct. Expected 237, got 419
FAIL: Hand count after playing council_room was not correct. Expected 62, got 64
FAIL: Hand count after playing council_room was not correct. Expected 64, got 313
FAIL: Hand count after playing council_room was not correct. Expected 64, got 4
FAIL: Hand count after playing council_room was not correct. Expected 64, got 192
FAIL: Hand count after playing council_room was not correct. Expected 347, got 349
FAIL: Hand count after playing council_room was not correct. Expected 349, got 310
FAIL: Hand count after playing council_room was not correct. Expected 349, got 49
FAIL: Hand count after playing council_room was not correct. Expected 349, got 195
FAIL: Hand count after playing council_room was not correct. Expected 224, got 226
FAIL: Hand count after playing council_room was not correct. Expected 226, got 452
FAIL: Hand count after playing council_room was not correct. Expected 226, got 153
FAIL: Hand count after playing council_room was not correct. Expected 226, got 196
FAIL: Hand count after playing council_room was not correct. Expected 91, got 93
FAIL: Hand count after playing council_room was not correct. Expected 93, got 197
FAIL: Hand count after playing council_room was not correct. Expected 93, got 375
FAIL: Hand count after playing council_room was not correct. Expected 93, got 500
FAIL: Hand count after playing council_room was not correct. Expected 284, got 286
FAIL: Hand count after playing council_room was not correct. Expected 286, got 2
FAIL: Hand count after playing council_room was not correct. Expected 286, got 309
FAIL: Hand count after playing council_room was not correct. Expected 286, got 395
FAIL: Hand count after playing council_room was not correct. Expected 312, got 314
FAIL: Hand count after playing council_room was not correct. Expected 314, got 3
FAIL: Hand count after playing council_room was not correct. Expected 314, got 230
FAIL: Hand count after playing council_room was not correct. Expected 314, got 259
FAIL: Hand count after playing council_room was not correct. Expected 95, got 97
FAIL: Hand count after playing council_room was not correct. Expected 97, got 339
FAIL: Hand count after playing council_room was not correct. Expected 97, got 487
FAIL: Hand count after playing council_room was not correct. Expected 97, got 461
FAIL: Hand count after playing council_room was not correct. Expected 486, got 488
FAIL: Hand count after playing council_room was not correct. Expected 488, got 125
FAIL: Hand count after playing council_room was not correct. Expected 488, got 103
FAIL: Hand count after playing council_room was not correct. Expected 488, got 271
FAIL: Hand count after playing council_room was not correct. Expected 31, got 33
FAIL: Hand count after playing council_room was not correct. Expected 33, got 302
FAIL: Hand count after playing council_room was not correct. Expected 33, got 194
FAIL: Hand count after playing council_room was not correct. Expected 33, got 430
FAIL: Hand count after playing council_room was not correct. Expected 104, got 106
FAIL: Hand count after playing council_room was not correct. Expected 106, got 141
FAIL: Hand count after playing council_room was not correct. Expected 106, got 180
FAIL: Hand count after playing council_room was not correct. Expected 106, got 356
FAIL: Hand count after playing council_room was not correct. Expected 101, got 103
FAIL: Hand count after playing council_room was not correct. Expected 103, got 88
FAIL: Hand count after playing council_room was not correct. Expected 103, got 152
FAIL: Hand count after playing council_room was not correct. Expected 103, got 67
FAIL: Hand count after playing council_room was not correct. Expected 416, got 418
FAIL: Hand count after playing council_room was not correct. Expected 418, got 362
FAIL: Hand count after playing council_room was not correct. Expected 418, got 492
FAIL: Hand count after playing council_room was not correct. Expected 418, got 336
FAIL: Hand count after playing council_room was not correct. Expected 65, got 67
FAIL: Hand count after playing council_room was not correct. Expected 67, got 222
FAIL: Hand count after playing council_room was not correct. Expected 67, got 42
FAIL: Hand count after playing council_room was not correct. Expected 67, got 317
FAIL: Hand count after playing council_room was not correct. Expected 257, got 259
FAIL: Hand count after playing council_room was not correct. Expected 259, got 265
FAIL: Hand count after playing council_room was not correct. Expected 259, got 103
FAIL: Hand count after playing council_room was not correct. Expected 259, got 193
FAIL: Hand count after playing council_room was not correct. Expected 31, got 33
FAIL: Hand count after playing council_room was not correct. Expected 33, got 365
FAIL: Hand count after playing council_room was not correct. Expected 33, got 493
FAIL: Hand count after playing council_room was not correct. Expected 33, got 133
FAIL: Hand count after playing council_room was not correct. Expected 149, got 151
FAIL: Hand count after playing council_room was not correct. Expected 151, got 480
FAIL: Hand count after playing council_room was not correct. Expected 151, got 190
FAIL: Hand count after playing council_room was not correct. Expected 151, got 450
FAIL: Hand count after playing council_room was not correct. Expected 463, got 465
FAIL: Hand count after playing council_room was not correct. Expected 465, got 84
FAIL: Hand count after playing council_room was not correct. Expected 465, got 133
FAIL: Hand count after playing council_room was not correct. Expected 465, got 466
FAIL: Hand count after playing council_room was not correct. Expected 307, got 309
FAIL: Hand count after playing council_room was not correct. Expected 309, got 116
FAIL: Hand count after playing council_room was not correct. Expected 309, got 343
FAIL: Hand count after playing council_room was not correct. Expected 309, got 426
FAIL: Hand count after playing council_room was not correct. Expected 157, got 159
FAIL: Hand count after playing council_room was not correct. Expected 159, got 243
FAIL: Hand count after playing council_room was not correct. Expected 159, got 299
FAIL: Hand count after playing council_room was not correct. Expected 159, got 172
FAIL: Hand count after playing council_room was not correct. Expected 447, got 449
FAIL: Hand count after playing council_room was not correct. Expected 449, got 491
FAIL: Hand count after playing council_room was not correct. Expected 449, got 372
FAIL: Hand count after playing council_room was not correct. Expected 449, got 405
FAIL: Hand count after playing council_room was not correct. Expected 32, got 34
FAIL: Hand count after playing council_room was not correct. Expected 34, got 56
FAIL: Hand count after playing council_room was not correct. Expected 34, got 283
FAIL: Hand count after playing council_room was not correct. Expected 34, got 485
FAIL: Hand count after playing council_room was not correct. Expected 11, got 13
FAIL: Hand count after playing council_room was not correct. Expected 13, got 439
FAIL: Hand count after playing council_room was not correct. Expected 13, got 16
FAIL: Hand count after playing council_room was not correct. Expected 13, got 5
FAIL: Hand count after playing council_room was not correct. Expected 302, got 304
FAIL: Hand count after playing council_room was not correct. Expected 304, got 230
FAIL: Hand count after playing council_room was not correct. Expected 304, got 184
FAIL: Hand count after playing council_room was not correct. Expected 304, got 238
FAIL: Hand count after playing council_room was not correct. Expected 438, got 440
FAIL: Hand count after playing council_room was not correct. Expected 440, got 203
FAIL: Hand count after playing council_room was not correct. Expected 440, got 141
FAIL: Hand count after playing council_room was not correct. Expected 440, got 27
FAIL: Hand count after playing council_room was not correct. Expected 414, got 416
FAIL: Hand count after playing council_room was not correct. Expected 416, got 48
FAIL: Hand count after playing council_room was not correct. Expected 416, got 244
FAIL: Hand count after playing council_room was not correct. Expected 416, got 161
FAIL: Hand count after playing council_room was not correct. Expected 31, got 33
FAIL: Hand count after playing council_room was not correct. Expected 33, got 189
FAIL: Hand count after playing council_room was not correct. Expected 33, got 448
FAIL: Hand count after playing council_room was not correct. Expected 33, got 257
FAIL: Hand count after playing council_room was not correct. Expected 199, got 201
FAIL: Hand count after playing council_room was not correct. Expected 201, got 92
FAIL: Hand count after playing council_room was not correct. Expected 201, got 111
FAIL: Hand count after playing council_room was not correct. Expected 201, got 276
FAIL: Hand count after playing council_room was not correct. Expected 385, got 387
FAIL: Hand count after playing council_room was not correct. Expected 387, got 161
FAIL: Hand count after playing council_room was not correct. Expected 387, got 273
FAIL: Hand count after playing council_room was not correct. Expected 387, got 306
FAIL: Hand count after playing council_room was not correct. Expected 221, got 223
FAIL: Hand count after playing council_room was not correct. Expected 223, got 163
FAIL: Hand count after playing council_room was not correct. Expected 223, got 40
FAIL: Hand count after playing council_room was not correct. Expected 223, got 9
FAIL: Hand count after playing council_room was not correct. Expected 54, got 56
FAIL: Hand count after playing council_room was not correct. Expected 56, got 220
FAIL: Hand count after playing council_room was not correct. Expected 56, got 169
FAIL: Hand count after playing council_room was not correct. Expected 56, got 347
FAIL: Hand count after playing council_room was not correct. Expected 181, got 183
FAIL: Hand count after playing council_room was not correct. Expected 183, got 476
FAIL: Hand count after playing council_room was not correct. Expected 183, got 159
FAIL: Hand count after playing council_room was not correct. Expected 183, got 104
FAIL: Hand count after playing council_room was not correct. Expected 319, got 321
FAIL: Hand count after playing council_room was not correct. Expected 321, got 374
FAIL: Hand count after playing council_room was not correct. Expected 321, got 321
FAIL: Hand count after playing council_room was not correct. Expected 321, got 1
FAIL: Hand count after playing council_room was not correct. Expected 493, got 495
FAIL: Hand count after playing council_room was not correct. Expected 495, got 365
FAIL: Hand count after playing council_room was not correct. Expected 495, got 9
FAIL: Hand count after playing council_room was not correct. Expected 495, got 387
FAIL: Hand count after playing council_room was not correct. Expected 427, got 429
FAIL: Hand count after playing council_room was not correct. Expected 429, got 55
FAIL: Hand count after playing council_room was not correct. Expected 429, got 348
FAIL: Hand count after playing council_room was not correct. Expected 429, got 445
FAIL: Hand count after playing council_room was not correct. Expected 267, got 269
FAIL: Hand count after playing council_room was not correct. Expected 269, got 185
FAIL: Hand count after playing council_room was not correct. Expected 269, got 412
FAIL: Hand count after playing council_room was not correct. Expected 269, got 423
FAIL: Hand count after playing council_room was not correct. Expected 369, got 371
FAIL: Hand count after playing council_room was not correct. Expected 371, got 393
FAIL: Hand count after playing council_room was not correct. Expected 371, got 281
FAIL: Hand count after playing council_room was not correct. Expected 371, got 287
FAIL: Hand count after playing council_room was not correct. Expected 418, got 420
FAIL: Hand count after playing council_room was not correct. Expected 420, got 77
FAIL: Hand count after playing council_room was not correct. Expected 420, got 110
FAIL: Hand count after playing council_room was not correct. Expected 420, got 116
FAIL: Hand count after playing council_room was not correct. Expected 362, got 364
FAIL: Hand count after playing council_room was not correct. Expected 364, got 144
FAIL: Hand count after playing council_room was not correct. Expected 364, got 232
FAIL: Hand count after playing council_room was not correct. Expected 364, got 83
FAIL: Hand count after playing council_room was not correct. Expected 8, got 10
FAIL: Hand count after playing council_room was not correct. Expected 10, got 64
FAIL: Hand count after playing council_room was not correct. Expected 10, got 272
FAIL: Hand count after playing council_room was not correct. Expected 10, got 36
FAIL: Hand count after playing council_room was not correct. Expected 405, got 407
FAIL: Hand count after playing council_room was not correct. Expected 407, got 13
FAIL: Hand count after playing council_room was not correct. Expected 407, got 194
FAIL: Hand count after playing council_room was not correct. Expected 407, got 52
FAIL: Hand count after playing council_room was not correct. Expected 469, got 471
FAIL: Hand count after playing council_room was not correct. Expected 471, got 319
FAIL: Hand count after playing council_room was not correct. Expected 471, got 42
FAIL: Hand count after playing council_room was not correct. Expected 471, got 408
FAIL: Hand count after playing council_room was not correct. Expected 320, got 322
FAIL: Hand count after playing council_room was not correct. Expected 322, got 34
FAIL: Hand count after playing council_room was not correct. Expected 322, got 154
FAIL: Hand count after playing council_room was not correct. Expected 322, got 130
FAIL: Hand count after playing council_room was not correct. Expected 322, got 324
FAIL: Hand count after playing council_room was not correct. Expected 324, got 295
FAIL: Hand count after playing council_room was not correct. Expected 324, got 489
FAIL: Hand count after playing council_room was not correct. Expected 324, got 51
FAIL: Hand count after playing council_room was not correct. Expected 442, got 444
FAIL: Hand count after playing council_room was not correct. Expected 444, got 369
FAIL: Hand count after playing council_room was not correct. Expected 444, got 366
FAIL: Hand count after playing council_room was not correct. Expected 444, got 150
FAIL: Hand count after playing council_room was not correct. Expected 393, got 395
FAIL: Hand count after playing council_room was not correct. Expected 395, got 271
FAIL: Hand count after playing council_room was not correct. Expected 395, got 233
FAIL: Hand count after playing council_room was not correct. Expected 395, got 74
FAIL: Hand count after playing council_room was not correct. Expected 386, got 388
FAIL: Hand count after playing council_room was not correct. Expected 388, got 417
FAIL: Hand count after playing council_room was not correct. Expected 388, got 314
FAIL: Hand count after playing council_room was not correct. Expected 388, got 463
FAIL: Hand count after playing council_room was not correct. Expected 53, got 55
FAIL: Hand count after playing council_room was not correct. Expected 55, got 97
FAIL: Hand count after playing council_room was not correct. Expected 55, got 58
FAIL: Hand count after playing council_room was not correct. Expected 55, got 211
FAIL: Hand count after playing council_room was not correct. Expected 446, got 448
FAIL: Hand count after playing council_room was not correct. Expected 448, got 135
FAIL: Hand count after playing council_room was not correct. Expected 448, got 119
FAIL: Hand count after playing council_room was not correct. Expected 448, got 18
FAIL: Hand count after playing council_room was not correct. Expected 424, got 426
FAIL: Hand count after playing council_room was not correct. Expected 426, got 142
FAIL: Hand count after playing council_room was not correct. Expected 426, got 377
FAIL: Hand count after playing council_room was not correct. Expected 426, got 477
FAIL: Hand count after playing council_room was not correct. Expected 386, got 388
FAIL: Hand count after playing council_room was not correct. Expected 388, got 54
FAIL: Hand count after playing council_room was not correct. Expected 388, got 303
FAIL: Hand count after playing council_room was not correct. Expected 388, got 91
FAIL: Hand count after playing council_room was not correct. Expected 404, got 406
FAIL: Hand count after playing council_room was not correct. Expected 406, got 468
FAIL: Hand count after playing council_room was not correct. Expected 406, got 69
FAIL: Hand count after playing council_room was not correct. Expected 406, got 421
FAIL: Hand count after playing council_room was not correct. Expected 236, got 238
FAIL: Hand count after playing council_room was not correct. Expected 238, got 276
FAIL: Hand count after playing council_room was not correct. Expected 238, got 230
FAIL: Hand count after playing council_room was not correct. Expected 238, got 398
FAIL: Hand count after playing council_room was not correct. Expected 360, got 362
FAIL: Hand count after playing council_room was not correct. Expected 362, got 449
FAIL: Hand count after playing council_room was not correct. Expected 362, got 448
FAIL: Hand count after playing council_room was not correct. Expected 362, got 263
FAIL: Hand count after playing council_room was not correct. Expected 449, got 451
FAIL: Hand count after playing council_room was not correct. Expected 451, got 429
FAIL: Hand count after playing council_room was not correct. Expected 451, got 274
FAIL: Hand count after playing council_room was not correct. Expected 451, got 229
FAIL: Hand count after playing council_room was not correct. Expected 137, got 139
FAIL: Hand count after playing council_room was not correct. Expected 139, got 274
FAIL: Hand count after playing council_room was not correct. Expected 139, got 335
FAIL: Hand count after playing council_room was not correct. Expected 139, got 338
FAIL: Hand count after playing council_room was not correct. Expected 183, got 185
FAIL: Hand count after playing council_room was not correct. Expected 185, got 401
FAIL: Hand count after playing council_room was not correct. Expected 185, got 210
FAIL: Hand count after playing council_room was not correct. Expected 185, got 94
FAIL: Hand count after playing council_room was not correct. Expected 231, got 233
FAIL: Hand count after playing council_room was not correct. Expected 233, got 74
FAIL: Hand count after playing council_room was not correct. Expected 233, got 171
FAIL: Hand count after playing council_room was not correct. Expected 233, got 188
FAIL: Hand count after playing council_room was not correct. Expected 144, got 146
FAIL: Hand count after playing council_room was not correct. Expected 146, got 258
FAIL: Hand count after playing council_room was not correct. Expected 146, got 388
FAIL: Hand count after playing council_room was not correct. Expected 146, got 497
FAIL: Hand count after playing council_room was not correct. Expected 175, got 177
FAIL: Hand count after playing council_room was not correct. Expected 177, got 355
FAIL: Hand count after playing council_room was not correct. Expected 177, got 21
FAIL: Hand count after playing council_room was not correct. Expected 177, got 477
FAIL: Hand count after playing council_room was not correct. Expected 421, got 423
FAIL: Hand count after playing council_room was not correct. Expected 423, got 268
FAIL: Hand count after playing council_room was not correct. Expected 423, got 111
FAIL: Hand count after playing council_room was not correct. Expected 423, got 123
FAIL: Hand count after playing council_room was not correct. Expected 99, got 101
FAIL: Hand count after playing council_room was not correct. Expected 101, got 156
FAIL: Hand count after playing council_room was not correct. Expected 101, got 499
FAIL: Hand count after playing council_room was not correct. Expected 101, got 330
FAIL: Hand count after playing council_room was not correct. Expected 415, got 417
FAIL: Hand count after playing council_room was not correct. Expected 417, got 443
FAIL: Hand count after playing council_room was not correct. Expected 417, got 442
FAIL: Hand count after playing council_room was not correct. Expected 417, got 18
FAIL: Hand count after playing council_room was not correct. Expected 407, got 409
FAIL: Hand count after playing council_room was not correct. Expected 409, got 355
FAIL: Hand count after playing council_room was not correct. Expected 409, got 323
FAIL: Hand count after playing council_room was not correct. Expected 409, got 99
FAIL: Hand count after playing council_room was not correct. Expected 260, got 262
FAIL: Hand count after playing council_room was not correct. Expected 262, got 379
FAIL: Hand count after playing council_room was not correct. Expected 262, got 63
FAIL: Hand count after playing council_room was not correct. Expected 262, got 5
FAIL: Hand count after playing council_room was not correct. Expected 39, got 41
FAIL: Hand count after playing council_room was not correct. Expected 41, got 182
FAIL: Hand count after playing council_room was not correct. Expected 41, got 481
FAIL: Hand count after playing council_room was not correct. Expected 41, got 407
FAIL: Hand count after playing council_room was not correct. Expected 483, got 485
FAIL: Hand count after playing council_room was not correct. Expected 485, got 487
FAIL: Hand count after playing council_room was not correct. Expected 485, got 497
FAIL: Hand count after playing council_room was not correct. Expected 485, got 339
FAIL: Hand count after playing council_room was not correct. Expected 260, got 262
FAIL: Hand count after playing council_room was not correct. Expected 262, got 66
FAIL: Hand count after playing council_room was not correct. Expected 262, got 420
FAIL: Hand count after playing council_room was not correct. Expected 262, got 218
FAIL: Hand count after playing council_room was not correct. Expected 426, got 428
FAIL: Hand count after playing council_room was not correct. Expected 428, got 182
FAIL: Hand count after playing council_room was not correct. Expected 428, got 368
FAIL: Hand count after playing council_room was not correct. Expected 428, got 146
FAIL: Hand count after playing council_room was not correct. Expected 297, got 299
FAIL: Hand count after playing council_room was not correct. Expected 299, got 194
FAIL: Hand count after playing council_room was not correct. Expected 299, got 168
FAIL: Hand count after playing council_room was not correct. Expected 299, got 231
FAIL: Hand count after playing council_room was not correct. Expected 179, got 181
FAIL: Hand count after playing council_room was not correct. Expected 181, got 396
FAIL: Hand count after playing council_room was not correct. Expected 181, got 296
FAIL: Hand count after playing council_room was not correct. Expected 181, got 348
FAIL: Hand count after playing council_room was not correct. Expected 318, got 320
FAIL: Hand count after playing council_room was not correct. Expected 320, got 271
FAIL: Hand count after playing council_room was not correct. Expected 320, got 294
FAIL: Hand count after playing council_room was not correct. Expected 320, got 48
FAIL: Hand count after playing council_room was not correct. Expected 113, got 115
FAIL: Hand count after playing council_room was not correct. Expected 115, got 461
FAIL: Hand count after playing council_room was not correct. Expected 115, got 313
FAIL: Hand count after playing council_room was not correct. Expected 115, got 74
FAIL: Hand count after playing council_room was not correct. Expected 48, got 50
FAIL: Hand count after playing council_room was not correct. Expected 50, got 39
FAIL: Hand count after playing council_room was not correct. Expected 50, got 497
FAIL: Hand count after playing council_room was not correct. Expected 50, got 396
FAIL: Hand count after playing council_room was not correct. Expected 377, got 379
FAIL: Hand count after playing council_room was not correct. Expected 379, got 10
FAIL: Hand count after playing council_room was not correct. Expected 379, got 280
FAIL: Hand count after playing council_room was not correct. Expected 379, got 485
FAIL: Hand count after playing council_room was not correct. Expected 373, got 375
FAIL: Hand count after playing council_room was not correct. Expected 375, got 417
FAIL: Hand count after playing council_room was not correct. Expected 375, got 396
FAIL: Hand count after playing council_room was not correct. Expected 375, got 181
FAIL: Hand count after playing council_room was not correct. Expected 496, got 498
FAIL: Hand count after playing council_room was not correct. Expected 498, got 108
FAIL: Hand count after playing council_room was not correct. Expected 498, got 50
FAIL: Hand count after playing council_room was not correct. Expected 498, got 273
FAIL: Hand count after playing council_room was not correct. Expected 99, got 101
FAIL: Hand count after playing council_room was not correct. Expected 101, got 389
FAIL: Hand count after playing council_room was not correct. Expected 101, got 331
FAIL: Hand count after playing council_room was not correct. Expected 101, got 346
FAIL: Hand count after playing council_room was not correct. Expected 334, got 336
FAIL: Hand count after playing council_room was not correct. Expected 336, got 49
FAIL: Hand count after playing council_room was not correct. Expected 336, got 398
FAIL: Hand count after playing council_room was not correct. Expected 336, got 241
FAIL: Hand count after playing council_room was not correct. Expected 156, got 158
FAIL: Hand count after playing council_room was not correct. Expected 158, got 347
FAIL: Hand count after playing council_room was not correct. Expected 158, got 440
FAIL: Hand count after playing council_room was not correct. Expected 158, got 30
FAIL: Hand count after playing council_room was not correct. Expected 122, got 124
FAIL: Hand count after playing council_room was not correct. Expected 124, got 154
FAIL: Hand count after playing council_room was not correct. Expected 124, got 201
FAIL: Hand count after playing council_room was not correct. Expected 124, got 55
FAIL: Hand count after playing council_room was not correct. Expected 479, got 481
FAIL: Hand count after playing council_room was not correct. Expected 481, got 374
FAIL: Hand count after playing council_room was not correct. Expected 481, got 343
FAIL: Hand count after playing council_room was not correct. Expected 481, got 35
FAIL: Hand count after playing council_room was not correct. Expected 415, got 417
FAIL: Hand count after playing council_room was not correct. Expected 417, got 452
FAIL: Hand count after playing council_room was not correct. Expected 417, got 272
FAIL: Hand count after playing council_room was not correct. Expected 417, got 42
FAIL: Hand count after playing council_room was not correct. Expected 425, got 427
FAIL: Hand count after playing council_room was not correct. Expected 427, got 348
FAIL: Hand count after playing council_room was not correct. Expected 427, got 270
FAIL: Hand count after playing council_room was not correct. Expected 427, got 63
FAIL: Hand count after playing council_room was not correct. Expected 450, got 452
FAIL: Hand count after playing council_room was not correct. Expected 452, got 44
FAIL: Hand count after playing council_room was not correct. Expected 452, got 26
FAIL: Hand count after playing council_room was not correct. Expected 452, got 456
FAIL: Hand count after playing council_room was not correct. Expected 255, got 257
FAIL: Hand count after playing council_room was not correct. Expected 257, got 145
FAIL: Hand count after playing council_room was not correct. Expected 257, got 17
FAIL: Hand count after playing council_room was not correct. Expected 257, got 349
FAIL: Hand count after playing council_room was not correct. Expected 190, got 192
FAIL: Hand count after playing council_room was not correct. Expected 192, got 400
FAIL: Hand count after playing council_room was not correct. Expected 192, got 222
FAIL: Hand count after playing council_room was not correct. Expected 192, got 118
FAIL: Hand count after playing council_room was not correct. Expected 420, got 422
FAIL: Hand count after playing council_room was not correct. Expected 422, got 297
FAIL: Hand count after playing council_room was not correct. Expected 422, got 134
FAIL: Hand count after playing council_room was not correct. Expected 422, got 202
FAIL: Hand count after playing council_room was not correct. Expected 266, got 268
FAIL: Hand count after playing council_room was not correct. Expected 268, got 405
FAIL: Hand count after playing council_room was not correct. Expected 268, got 1
FAIL: Hand count after playing council_room was not correct. Expected 268, got 483
FAIL: Hand count after playing council_room was not correct. Expected 375, got 377
FAIL: Hand count after playing council_room was not correct. Expected 377, got 466
FAIL: Hand count after playing council_room was not correct. Expected 377, got 252
FAIL: Hand count after playing council_room was not correct. Expected 377, got 72
FAIL: Hand count after playing council_room was not correct. Expected 494, got 496
FAIL: Hand count after playing council_room was not correct. Expected 496, got 288
FAIL: Hand count after playing council_room was not correct. Expected 496, got 39
FAIL: Hand count after playing council_room was not correct. Expected 496, got 181
FAIL: Hand count after playing council_room was not correct. Expected 104, got 106
FAIL: Hand count after playing council_room was not correct. Expected 106, got 170
FAIL: Hand count after playing council_room was not correct. Expected 106, got 194
FAIL: Hand count after playing council_room was not correct. Expected 106, got 56
FAIL: Hand count after playing council_room was not correct. Expected 188, got 190
FAIL: Hand count after playing council_room was not correct. Expected 190, got 211
FAIL: Hand count after playing council_room was not correct. Expected 190, got 434
FAIL: Hand count after playing council_room was not correct. Expected 190, got 131
FAIL: Hand count after playing council_room was not correct. Expected 459, got 461
FAIL: Hand count after playing council_room was not correct. Expected 461, got 383
FAIL: Hand count after playing council_room was not correct. Expected 461, got 180
FAIL: Hand count after playing council_room was not correct. Expected 461, got 272
FAIL: Hand count after playing council_room was not correct. Expected 389, got 391
FAIL: Hand count after playing council_room was not correct. Expected 391, got 377
FAIL: Hand count after playing council_room was not correct. Expected 391, got 266
FAIL: Hand count after playing council_room was not correct. Expected 391, got 84
FAIL: Hand count after playing council_room was not correct. Expected 330, got 332
FAIL: Hand count after playing council_room was not correct. Expected 332, got 322
FAIL: Hand count after playing council_room was not correct. Expected 332, got 337
FAIL: Hand count after playing council_room was not correct. Expected 332, got 473
FAIL: Hand count after playing council_room was not correct. Expected 498, got 500
FAIL: Hand count after playing council_room was not correct. Expected 500, got 224
FAIL: Hand count after playing council_room was not correct. Expected 500, got 184
FAIL: Hand count after playing council_room was not correct. Expected 500, got 388
FAIL: Hand count after playing council_room was not correct. Expected 172, got 174
FAIL: Hand count after playing council_room was not correct. Expected 174, got 382
FAIL: Hand count after playing council_room was not correct. Expected 174, got 71
FAIL: Hand count after playing council_room was not correct. Expected 174, got 65
FAIL: Hand count after playing council_room was not correct. Expected 495, got 497
FAIL: Hand count after playing council_room was not correct. Expected 497, got 221
FAIL: Hand count after playing council_room was not correct. Expected 497, got 232
FAIL: Hand count after playing council_room was not correct. Expected 497, got 496
FAIL: Hand count after playing council_room was not correct. Expected 432, got 434
FAIL: Hand count after playing council_room was not correct. Expected 434, got 268
FAIL: Hand count after playing council_room was not correct. Expected 434, got 156
FAIL: Hand count after playing council_room was not correct. Expected 434, got 112
FAIL: Hand count after playing council_room was not correct. Expected 377, got 379
FAIL: Hand count after playing council_room was not correct. Expected 379, got 440
FAIL: Hand count after playing council_room was not correct. Expected 379, got 228
FAIL: Hand count after playing council_room was not correct. Expected 379, got 155
FAIL: Hand count after playing council_room was not correct. Expected 401, got 403
FAIL: Hand count after playing council_room was not correct. Expected 403, got 112
FAIL: Hand count after playing council_room was not correct. Expected 403, got 100
FAIL: Hand count after playing council_room was not correct. Expected 403, got 48
FAIL: Hand count after playing council_room was not correct. Expected 162, got 164
FAIL: Hand count after playing council_room was not correct. Expected 164, got 136
FAIL: Hand count after playing council_room was not correct. Expected 164, got 461
FAIL: Hand count after playing council_room was not correct. Expected 164, got 52
FAIL: Hand count after playing council_room was not correct. Expected 343, got 345
FAIL: Hand count after playing council_room was not correct. Expected 345, got 168
FAIL: Hand count after playing council_room was not correct. Expected 345, got 340
FAIL: Hand count after playing council_room was not correct. Expected 345, got 358
FAIL: Hand count after playing council_room was not correct. Expected 44, got 46
FAIL: Hand count after playing council_room was not correct. Expected 46, got 66
FAIL: Hand count after playing council_room was not correct. Expected 46, got 153
FAIL: Hand count after playing council_room was not correct. Expected 46, got 80
FAIL: Hand count after playing council_room was not correct. Expected 206, got 208
FAIL: Hand count after playing council_room was not correct. Expected 208, got 219
FAIL: Hand count after playing council_room was not correct. Expected 208, got 470
FAIL: Hand count after playing council_room was not correct. Expected 208, got 200
FAIL: Hand count after playing council_room was not correct. Expected 257, got 259
FAIL: Hand count after playing council_room was not correct. Expected 259, got 36
FAIL: Hand count after playing council_room was not correct. Expected 259, got 242
FAIL: Hand count after playing council_room was not correct. Expected 259, got 29
FAIL: Hand count after playing council_room was not correct. Expected 271, got 273
FAIL: Hand count after playing council_room was not correct. Expected 273, got 113
FAIL: Hand count after playing council_room was not correct. Expected 273, got 31
FAIL: Hand count after playing council_room was not correct. Expected 273, got 92
FAIL: Hand count after playing council_room was not correct. Expected 459, got 461
FAIL: Hand count after playing council_room was not correct. Expected 461, got 466
FAIL: Hand count after playing council_room was not correct. Expected 461, got 108
FAIL: Hand count after playing council_room was not correct. Expected 461, got 253
FAIL: Hand count after playing council_room was not correct. Expected 474, got 476
FAIL: Hand count after playing council_room was not correct. Expected 476, got 213
FAIL: Hand count after playing council_room was not correct. Expected 476, got 173
FAIL: Hand count after playing council_room was not correct. Expected 476, got 411
FAIL: Hand count after playing council_room was not correct. Expected 263, got 265
FAIL: Hand count after playing council_room was not correct. Expected 265, got 334
FAIL: Hand count after playing council_room was not correct. Expected 265, got 277
FAIL: Hand count after playing council_room was not correct. Expected 265, got 28
FAIL: Hand count after playing council_room was not correct. Expected 326, got 328
FAIL: Hand count after playing council_room was not correct. Expected 328, got 218
FAIL: Hand count after playing council_room was not correct. Expected 328, got 168
FAIL: Hand count after playing council_room was not correct. Expected 328, got 222
FAIL: Hand count after playing council_room was not correct. Expected 168, got 170
FAIL: Hand count after playing council_room was not correct. Expected 170, got 498
FAIL: Hand count after playing council_room was not correct. Expected 170, got 189
FAIL: Hand count after playing council_room was not correct. Expected 170, got 441
FAIL: Hand count after playing council_room was not correct. Expected 192, got 194
FAIL: Hand count after playing council_room was not correct. Expected 194, got 97
FAIL: Hand count after playing council_room was not correct. Expected 194, got 384
FAIL: Hand count after playing council_room was not correct. Expected 194, got 454
FAIL: Hand count after playing council_room was not correct. Expected 288, got 290
FAIL: Hand count after playing council_room was not correct. Expected 290, got 449
FAIL: Hand count after playing council_room was not correct. Expected 290, got 456
FAIL: Hand count after playing council_room was not correct. Expected 290, got 478
FAIL: Hand count after playing council_room was not correct. Expected 465, got 467
FAIL: Hand count after playing council_room was not correct. Expected 467, got 85
FAIL: Hand count after playing council_room was not correct. Expected 467, got 347
FAIL: Hand count after playing council_room was not correct. Expected 467, got 114
FAIL: Hand count after playing council_room was not correct. Expected 58, got 60
FAIL: Hand count after playing council_room was not correct. Expected 60, got 381
FAIL: Hand count after playing council_room was not correct. Expected 60, got 179
FAIL: Hand count after playing council_room was not correct. Expected 60, got 421
FAIL: Hand count after playing council_room was not correct. Expected 328, got 330
FAIL: Hand count after playing council_room was not correct. Expected 330, got 219
FAIL: Hand count after playing council_room was not correct. Expected 330, got 310
FAIL: Hand count after playing council_room was not correct. Expected 330, got 76
FAIL: Hand count after playing council_room was not correct. Expected 85, got 87
FAIL: Hand count after playing council_room was not correct. Expected 87, got 377
FAIL: Hand count after playing council_room was not correct. Expected 87, got 115
FAIL: Hand count after playing council_room was not correct. Expected 87, got 162
FAIL: Hand count after playing council_room was not correct. Expected 26, got 28
FAIL: Hand count after playing council_room was not correct. Expected 28, got 151
FAIL: Hand count after playing council_room was not correct. Expected 28, got 393
FAIL: Hand count after playing council_room was not correct. Expected 28, got 50
FAIL: Hand count after playing council_room was not correct. Expected 228, got 230
FAIL: Hand count after playing council_room was not correct. Expected 230, got 208
FAIL: Hand count after playing council_room was not correct. Expected 230, got 46
FAIL: Hand count after playing council_room was not correct. Expected 230, got 43
FAIL: Hand count after playing council_room was not correct. Expected 499, got 501
FAIL: Hand count after playing council_room was not correct. Expected 501, got 228
FAIL: Hand count after playing council_room was not correct. Expected 501, got 29
FAIL: Hand count after playing council_room was not correct. Expected 501, got 131
FAIL: Hand count after playing council_room was not correct. Expected 287, got 289
FAIL: Hand count after playing council_room was not correct. Expected 289, got 382
FAIL: Hand count after playing council_room was not correct. Expected 289, got 107
FAIL: Hand count after playing council_room was not correct. Expected 289, got 255
FAIL: Hand count after playing council_room was not correct. Expected 72, got 74
FAIL: Hand count after playing council_room was not correct. Expected 74, got 114
FAIL: Hand count after playing council_room was not correct. Expected 74, got 90
FAIL: Hand count after playing council_room was not correct. Expected 74, got 463
FAIL: Hand count after playing council_room was not correct. Expected 332, got 334
FAIL: Hand count after playing council_room was not correct. Expected 334, got 274
FAIL: Hand count after playing council_room was not correct. Expected 334, got 311
FAIL: Hand count after playing council_room was not correct. Expected 334, got 78
FAIL: Hand count after playing council_room was not correct. Expected 239, got 241
FAIL: Hand count after playing council_room was not correct. Expected 241, got 357
FAIL: Hand count after playing council_room was not correct. Expected 241, got 73
FAIL: Hand count after playing council_room was not correct. Expected 241, got 293
FAIL: Hand count after playing council_room was not correct. Expected 440, got 442
FAIL: Hand count after playing council_room was not correct. Expected 442, got 352
FAIL: Hand count after playing council_room was not correct. Expected 442, got 153
FAIL: Hand count after playing council_room was not correct. Expected 442, got 447
FAIL: Hand count after playing council_room was not correct. Expected 193, got 195
FAIL: Hand count after playing council_room was not correct. Expected 195, got 414
FAIL: Hand count after playing council_room was not correct. Expected 195, got 150
FAIL: Hand count after playing council_room was not correct. Expected 195, got 259
FAIL: Hand count after playing council_room was not correct. Expected 133, got 135
FAIL: Hand count after playing council_room was not correct. Expected 135, got 56
FAIL: Hand count after playing council_room was not correct. Expected 135, got 310
FAIL: Hand count after playing council_room was not correct. Expected 135, got 86
FAIL: Hand count after playing council_room was not correct. Expected 169, got 171
FAIL: Hand count after playing council_room was not correct. Expected 171, got 429
FAIL: Hand count after playing council_room was not correct. Expected 171, got 84
FAIL: Hand count after playing council_room was not correct. Expected 171, got 434
FAIL: Hand count after playing council_room was not correct. Expected 240, got 242
FAIL: Hand count after playing council_room was not correct. Expected 242, got 76
FAIL: Hand count after playing council_room was not correct. Expected 242, got 498
FAIL: Hand count after playing council_room was not correct. Expected 242, got 84
FAIL: Hand count after playing council_room was not correct. Expected 30, got 32
FAIL: Hand count after playing council_room was not correct. Expected 32, got 391
FAIL: Hand count after playing council_room was not correct. Expected 32, got 422
FAIL: Hand count after playing council_room was not correct. Expected 32, got 417
FAIL: Hand count after playing council_room was not correct. Expected 428, got 430
FAIL: Hand count after playing council_room was not correct. Expected 430, got 285
FAIL: Hand count after playing council_room was not correct. Expected 430, got 217
FAIL: Hand count after playing council_room was not correct. Expected 430, got 33
FAIL: Hand count after playing council_room was not correct. Expected 240, got 242
FAIL: Hand count after playing council_room was not correct. Expected 242, got 24
FAIL: Hand count after playing council_room was not correct. Expected 242, got 268
FAIL: Hand count after playing council_room was not correct. Expected 242, got 115
FAIL: Hand count after playing council_room was not correct. Expected 401, got 403
FAIL: Hand count after playing council_room was not correct. Expected 403, got 379
FAIL: Hand count after playing council_room was not correct. Expected 403, got 52
FAIL: Hand count after playing council_room was not correct. Expected 403, got 397
FAIL: Hand count after playing council_room was not correct. Expected 237, got 239
FAIL: Hand count after playing council_room was not correct. Expected 239, got 159
FAIL: Hand count after playing council_room was not correct. Expected 239, got 418
FAIL: Hand count after playing council_room was not correct. Expected 239, got 400
FAIL: Hand count after playing council_room was not correct. Expected 244, got 246
FAIL: Hand count after playing council_room was not correct. Expected 246, got 203
FAIL: Hand count after playing council_room was not correct. Expected 246, got 68
FAIL: Hand count after playing council_room was not correct. Expected 246, got 460
FAIL: Hand count after playing council_room was not correct. Expected 30, got 32
FAIL: Hand count after playing council_room was not correct. Expected 32, got 10
FAIL: Hand count after playing council_room was not correct. Expected 32, got 166
FAIL: Hand count after playing council_room was not correct. Expected 32, got 23
FAIL: Hand count after playing council_room was not correct. Expected 468, got 470
FAIL: Hand count after playing council_room was not correct. Expected 470, got 181
FAIL: Hand count after playing council_room was not correct. Expected 470, got 212
FAIL: Hand count after playing council_room was not correct. Expected 470, got 46
FAIL: Hand count after playing council_room was not correct. Expected 194, got 196
FAIL: Hand count after playing council_room was not correct. Expected 196, got 45
FAIL: Hand count after playing council_room was not correct. Expected 196, got 446
FAIL: Hand count after playing council_room was not correct. Expected 196, got 356
FAIL: Hand count after playing council_room was not correct. Expected 470, got 472
FAIL: Hand count after playing council_room was not correct. Expected 472, got 199
FAIL: Hand count after playing council_room was not correct. Expected 472, got 312
FAIL: Hand count after playing council_room was not correct. Expected 472, got 252
FAIL: Hand count after playing council_room was not correct. Expected 496, got 498
FAIL: Hand count after playing council_room was not correct. Expected 498, got 461
FAIL: Hand count after playing council_room was not correct. Expected 498, got 133
FAIL: Hand count after playing council_room was not correct. Expected 498, got 262
FAIL: Hand count after playing council_room was not correct. Expected 91, got 93
FAIL: Hand count after playing council_room was not correct. Expected 93, got 440
FAIL: Hand count after playing council_room was not correct. Expected 93, got 261
FAIL: Hand count after playing council_room was not correct. Expected 93, got 449
FAIL: Hand count after playing council_room was not correct. Expected 441, got 443
FAIL: Hand count after playing council_room was not correct. Expected 443, got 286
FAIL: Hand count after playing council_room was not correct. Expected 443, got 320
FAIL: Hand count after playing council_room was not correct. Expected 443, got 426
FAIL: Hand count after playing council_room was not correct. Expected 366, got 368
FAIL: Hand count after playing council_room was not correct. Expected 368, got 100
FAIL: Hand count after playing council_room was not correct. Expected 368, got 104
FAIL: Hand count after playing council_room was not correct. Expected 368, got 185
FAIL: Hand count after playing council_room was not correct. Expected 17, got 19
FAIL: Hand count after playing council_room was not correct. Expected 19, got 142
FAIL: Hand count after playing council_room was not correct. Expected 19, got 29
FAIL: Hand count after playing council_room was not correct. Expected 19, got 155
FAIL: Hand count after playing council_room was not correct. Expected 469, got 471
FAIL: Hand count after playing council_room was not correct. Expected 471, got 364
FAIL: Hand count after playing council_room was not correct. Expected 471, got 51
FAIL: Hand count after playing council_room was not correct. Expected 471, got 250
FAIL: Hand count after playing council_room was not correct. Expected 17, got 19
FAIL: Hand count after playing council_room was not correct. Expected 19, got 284
FAIL: Hand count after playing council_room was not correct. Expected 19, got 230
FAIL: Hand count after playing council_room was not correct. Expected 19, got 218
FAIL: Hand count after playing council_room was not correct. Expected 368, got 370
FAIL: Hand count after playing council_room was not correct. Expected 370, got 297
FAIL: Hand count after playing council_room was not correct. Expected 370, got 132
FAIL: Hand count after playing council_room was not correct. Expected 370, got 429
FAIL: Hand count after playing council_room was not correct. Expected 178, got 180
FAIL: Hand count after playing council_room was not correct. Expected 180, got 118
FAIL: Hand count after playing council_room was not correct. Expected 180, got 310
FAIL: Hand count after playing council_room was not correct. Expected 180, got 473
FAIL: Hand count after playing council_room was not correct. Expected 335, got 337
FAIL: Hand count after playing council_room was not correct. Expected 337, got 446
FAIL: Hand count after playing council_room was not correct. Expected 337, got 485
FAIL: Hand count after playing council_room was not correct. Expected 337, got 147
FAIL: Hand count after playing council_room was not correct. Expected 484, got 486
FAIL: Hand count after playing council_room was not correct. Expected 486, got 138
FAIL: Hand count after playing council_room was not correct. Expected 486, got 301
FAIL: Hand count after playing council_room was not correct. Expected 486, got 318
FAIL: Hand count after playing council_room was not correct. Expected 148, got 150
FAIL: Hand count after playing council_room was not correct. Expected 150, got 344
FAIL: Hand count after playing council_room was not correct. Expected 150, got 112
FAIL: Hand count after playing council_room was not correct. Expected 150, got 196
FAIL: Hand count after playing council_room was not correct. Expected 344, got 346
FAIL: Hand count after playing council_room was not correct. Expected 346, got 103
FAIL: Hand count after playing council_room was not correct. Expected 346, got 61
FAIL: Hand count after playing council_room was not correct. Expected 346, got 171
FAIL: Hand count after playing council_room was not correct. Expected 165, got 167
FAIL: Hand count after playing council_room was not correct. Expected 167, got 208
FAIL: Hand count after playing council_room was not correct. Expected 167, got 292
FAIL: Hand count after playing council_room was not correct. Expected 167, got 237
FAIL: Hand count after playing council_room was not correct. Expected 447, got 449
FAIL: Hand count after playing council_room was not correct. Expected 449, got 82
FAIL: Hand count after playing council_room was not correct. Expected 449, got 186
FAIL: Hand count after playing council_room was not correct. Expected 449, got 430
FAIL: Hand count after playing council_room was not correct. Expected 122, got 124
FAIL: Hand count after playing council_room was not correct. Expected 124, got 492
FAIL: Hand count after playing council_room was not correct. Expected 124, got 414
FAIL: Hand count after playing council_room was not correct. Expected 124, got 152
FAIL: Hand count after playing council_room was not correct. Expected 58, got 60
FAIL: Hand count after playing council_room was not correct. Expected 60, got 291
FAIL: Hand count after playing council_room was not correct. Expected 60, got 247
FAIL: Hand count after playing council_room was not correct. Expected 60, got 144
FAIL: Hand count after playing council_room was not correct. Expected 29, got 31
FAIL: Hand count after playing council_room was not correct. Expected 31, got 496
FAIL: Hand count after playing council_room was not correct. Expected 31, got 280
FAIL: Hand count after playing council_room was not correct. Expected 31, got 323
FAIL: Hand count after playing council_room was not correct. Expected 241, got 243
FAIL: Hand count after playing council_room was not correct. Expected 243, got 394
FAIL: Hand count after playing council_room was not correct. Expected 243, got 447
FAIL: Hand count after playing council_room was not correct. Expected 243, got 388
FAIL: Hand count after playing council_room was not correct. Expected 373, got 375
FAIL: Hand count after playing council_room was not correct. Expected 375, got 440
FAIL: Hand count after playing council_room was not correct. Expected 375, got 101
FAIL: Hand count after playing council_room was not correct. Expected 375, got 119
FAIL: Hand count after playing council_room was not correct. Expected 34, got 36
FAIL: Hand count after playing council_room was not correct. Expected 36, got 32
FAIL: Hand count after playing council_room was not correct. Expected 36, got 215
FAIL: Hand count after playing council_room was not correct. Expected 36, got 167
FAIL: Hand count after playing council_room was not correct. Expected 67, got 69
FAIL: Hand count after playing council_room was not correct. Expected 69, got 345
FAIL: Hand count after playing council_room was not correct. Expected 69, got 179
FAIL: Hand count after playing council_room was not correct. Expected 69, got 381
FAIL: Hand count after playing council_room was not correct. Expected 325, got 327
FAIL: Hand count after playing council_room was not correct. Expected 327, got 450
FAIL: Hand count after playing council_room was not correct. Expected 327, got 30
FAIL: Hand count after playing council_room was not correct. Expected 327, got 456
FAIL: Hand count after playing council_room was not correct. Expected 133, got 135
FAIL: Hand count after playing council_room was not correct. Expected 135, got 139
FAIL: Hand count after playing council_room was not correct. Expected 135, got 439
FAIL: Hand count after playing council_room was not correct. Expected 135, got 337
FAIL: Hand count after playing council_room was not correct. Expected 297, got 299
FAIL: Hand count after playing council_room was not correct. Expected 299, got 238
FAIL: Hand count after playing council_room was not correct. Expected 299, got 99
FAIL: Hand count after playing council_room was not correct. Expected 299, got 16
FAIL: Hand count after playing council_room was not correct. Expected 173, got 175
FAIL: Hand count after playing council_room was not correct. Expected 175, got 380
FAIL: Hand count after playing council_room was not correct. Expected 175, got 221
FAIL: Hand count after playing council_room was not correct. Expected 175, got 140
FAIL: Hand count after playing council_room was not correct. Expected 71, got 73
FAIL: Hand count after playing council_room was not correct. Expected 73, got 468
FAIL: Hand count after playing council_room was not correct. Expected 73, got 10
FAIL: Hand count after playing council_room was not correct. Expected 73, got 210
FAIL: Hand count after playing council_room was not correct. Expected 34, got 36
FAIL: Hand count after playing council_room was not correct. Expected 36, got 103
FAIL: Hand count after playing council_room was not correct. Expected 36, got 480
FAIL: Hand count after playing council_room was not correct. Expected 36, got 465
FAIL: Hand count after playing council_room was not correct. Expected 231, got 233
FAIL: Hand count after playing council_room was not correct. Expected 233, got 57
FAIL: Hand count after playing council_room was not correct. Expected 233, got 44
FAIL: Hand count after playing council_room was not correct. Expected 233, got 144
FAIL: Hand count after playing council_room was not correct. Expected 255, got 257
FAIL: Hand count after playing council_room was not correct. Expected 257, got 179
FAIL: Hand count after playing council_room was not correct. Expected 257, got 41
FAIL: Hand count after playing council_room was not correct. Expected 257, got 179
FAIL: Hand count after playing council_room was not correct. Expected 475, got 477
FAIL: Hand count after playing council_room was not correct. Expected 477, got 384
FAIL: Hand count after playing council_room was not correct. Expected 477, got 115
FAIL: Hand count after playing council_room was not correct. Expected 477, got 115
FAIL: Hand count after playing council_room was not correct. Expected 199, got 201
FAIL: Hand count after playing council_room was not correct. Expected 201, got 24
FAIL: Hand count after playing council_room was not correct. Expected 201, got 68
FAIL: Hand count after playing council_room was not correct. Expected 201, got 363
FAIL: Hand count after playing council_room was not correct. Expected 110, got 112
FAIL: Hand count after playing council_room was not correct. Expected 112, got 310
FAIL: Hand count after playing council_room was not correct. Expected 112, got 336
FAIL: Hand count after playing council_room was not correct. Expected 112, got 99
FAIL: Hand count after playing council_room was not correct. Expected 302, got 304
FAIL: Hand count after playing council_room was not correct. Expected 304, got 153
FAIL: Hand count after playing council_room was not correct. Expected 304, got 141
FAIL: Hand count after playing council_room was not correct. Expected 304, got 8
FAIL: Hand count after playing council_room was not correct. Expected 343, got 345
FAIL: Hand count after playing council_room was not correct. Expected 345, got 255
FAIL: Hand count after playing council_room was not correct. Expected 345, got 295
FAIL: Hand count after playing council_room was not correct. Expected 345, got 486
FAIL: Hand count after playing council_room was not correct. Expected 235, got 237
FAIL: Hand count after playing council_room was not correct. Expected 237, got 481
FAIL: Hand count after playing council_room was not correct. Expected 237, got 454
FAIL: Hand count after playing council_room was not correct. Expected 237, got 246
FAIL: Hand count after playing council_room was not correct. Expected 250, got 252
FAIL: Hand count after playing council_room was not correct. Expected 252, got 359
FAIL: Hand count after playing council_room was not correct. Expected 252, got 462
FAIL: Hand count after playing council_room was not correct. Expected 252, got 390
FAIL: Hand count after playing council_room was not correct. Expected 137, got 139
FAIL: Hand count after playing council_room was not correct. Expected 139, got 226
FAIL: Hand count after playing council_room was not correct. Expected 139, got 289
FAIL: Hand count after playing council_room was not correct. Expected 139, got 343
FAIL: Hand count after playing council_room was not correct. Expected 477, got 479
FAIL: Hand count after playing council_room was not correct. Expected 479, got 162
FAIL: Hand count after playing council_room was not correct. Expected 479, got 102
FAIL: Hand count after playing council_room was not correct. Expected 479, got 172
FAIL: Hand count after playing council_room was not correct. Expected 474, got 476
FAIL: Hand count after playing council_room was not correct. Expected 476, got 376
FAIL: Hand count after playing council_room was not correct. Expected 476, got 437
FAIL: Hand count after playing council_room was not correct. Expected 476, got 67
FAIL: Hand count after playing council_room was not correct. Expected 91, got 93
FAIL: Hand count after playing council_room was not correct. Expected 93, got 348
FAIL: Hand count after playing council_room was not correct. Expected 93, got 112
FAIL: Hand count after playing council_room was not correct. Expected 93, got 124
FAIL: Hand count after playing council_room was not correct. Expected 147, got 149
FAIL: Hand count after playing council_room was not correct. Expected 149, got 12
FAIL: Hand count after playing council_room was not correct. Expected 149, got 163
FAIL: Hand count after playing council_room was not correct. Expected 149, got 493
FAIL: Hand count after playing council_room was not correct. Expected 23, got 25
FAIL: Hand count after playing council_room was not correct. Expected 25, got 239
FAIL: Hand count after playing council_room was not correct. Expected 25, got 377
FAIL: Hand count after playing council_room was not correct. Expected 25, got 273
FAIL: Hand count after playing council_room was not correct. Expected 190, got 192
FAIL: Hand count after playing council_room was not correct. Expected 192, got 254
FAIL: Hand count after playing council_room was not correct. Expected 192, got 365
FAIL: Hand count after playing council_room was not correct. Expected 192, got 367
FAIL: Hand count after playing council_room was not correct. Expected 296, got 298
FAIL: Hand count after playing council_room was not correct. Expected 298, got 312
FAIL: Hand count after playing council_room was not correct. Expected 298, got 457
FAIL: Hand count after playing council_room was not correct. Expected 298, got 275
FAIL: Hand count after playing council_room was not correct. Expected 340, got 342
FAIL: Hand count after playing council_room was not correct. Expected 342, got 212
FAIL: Hand count after playing council_room was not correct. Expected 342, got 282
FAIL: Hand count after playing council_room was not correct. Expected 342, got 344
FAIL: Hand count after playing council_room was not correct. Expected 53, got 55
FAIL: Hand count after playing council_room was not correct. Expected 55, got 319
FAIL: Hand count after playing council_room was not correct. Expected 55, got 100
FAIL: Hand count after playing council_room was not correct. Expected 55, got 333
FAIL: Hand count after playing council_room was not correct. Expected 494, got 496
FAIL: Hand count after playing council_room was not correct. Expected 496, got 120
FAIL: Hand count after playing council_room was not correct. Expected 496, got 320
FAIL: Hand count after playing council_room was not correct. Expected 496, got 69
FAIL: Hand count after playing council_room was not correct. Expected 466, got 468
FAIL: Hand count after playing council_room was not correct. Expected 468, got 184
FAIL: Hand count after playing council_room was not correct. Expected 468, got 481
FAIL: Hand count after playing council_room was not correct. Expected 468, got 454
FAIL: Hand count after playing council_room was not correct. Expected 70, got 72
FAIL: Hand count after playing council_room was not correct. Expected 72, got 29
FAIL: Hand count after playing council_room was not correct. Expected 72, got 403
FAIL: Hand count after playing council_room was not correct. Expected 72, got 297
FAIL: Hand count after playing council_room was not correct. Expected 333, got 335
FAIL: Hand count after playing council_room was not correct. Expected 335, got 129
FAIL: Hand count after playing council_room was not correct. Expected 335, got 310
FAIL: Hand count after playing council_room was not correct. Expected 335, got 489
FAIL: Hand count after playing council_room was not correct. Expected 233, got 235
FAIL: Hand count after playing council_room was not correct. Expected 235, got 36
FAIL: Hand count after playing council_room was not correct. Expected 235, got 385
FAIL: Hand count after playing council_room was not correct. Expected 235, got 154
FAIL: Hand count after playing council_room was not correct. Expected 202, got 204
FAIL: Hand count after playing council_room was not correct. Expected 204, got 252
FAIL: Hand count after playing council_room was not correct. Expected 204, got 91
FAIL: Hand count after playing council_room was not correct. Expected 204, got 301
FAIL: Hand count after playing council_room was not correct. Expected 333, got 335
FAIL: Hand count after playing council_room was not correct. Expected 335, got 120
FAIL: Hand count after playing council_room was not correct. Expected 335, got 453
FAIL: Hand count after playing council_room was not correct. Expected 335, got 177
FAIL: Hand count after playing council_room was not correct. Expected 246, got 248
FAIL: Hand count after playing council_room was not correct. Expected 248, got 415
FAIL: Hand count after playing council_room was not correct. Expected 248, got 135
FAIL: Hand count after playing council_room was not correct. Expected 248, got 12
FAIL: Hand count after playing council_room was not correct. Expected 264, got 266
FAIL: Hand count after playing council_room was not correct. Expected 266, got 455
FAIL: Hand count after playing council_room was not correct. Expected 266, got 225
FAIL: Hand count after playing council_room was not correct. Expected 266, got 121
FAIL: Hand count after playing council_room was not correct. Expected 256, got 258
FAIL: Hand count after playing council_room was not correct. Expected 258, got 467
FAIL: Hand count after playing council_room was not correct. Expected 258, got 265
FAIL: Hand count after playing council_room was not correct. Expected 258, got 362
FAIL: Hand count after playing council_room was not correct. Expected 465, got 467
FAIL: Hand count after playing council_room was not correct. Expected 467, got 277
FAIL: Hand count after playing council_room was not correct. Expected 467, got 316
FAIL: Hand count after playing council_room was not correct. Expected 467, got 325
FAIL: Hand count after playing council_room was not correct. Expected 498, got 500
FAIL: Hand count after playing council_room was not correct. Expected 500, got 291
FAIL: Hand count after playing council_room was not correct. Expected 500, got 357
FAIL: Hand count after playing council_room was not correct. Expected 500, got 478
FAIL: Hand count after playing council_room was not correct. Expected 57, got 59
FAIL: Hand count after playing council_room was not correct. Expected 59, got 465
FAIL: Hand count after playing council_room was not correct. Expected 59, got 238
FAIL: Hand count after playing council_room was not correct. Expected 59, got 275
FAIL: Hand count after playing council_room was not correct. Expected 411, got 413
FAIL: Hand count after playing council_room was not correct. Expected 413, got 47
FAIL: Hand count after playing council_room was not correct. Expected 413, got 122
FAIL: Hand count after playing council_room was not correct. Expected 413, got 488
FAIL: Hand count after playing council_room was not correct. Expected 240, got 242
FAIL: Hand count after playing council_room was not correct. Expected 242, got 490
FAIL: Hand count after playing council_room was not correct. Expected 242, got 398
FAIL: Hand count after playing council_room was not correct. Expected 242, got 283
FAIL: Hand count after playing council_room was not correct. Expected 124, got 126
FAIL: Hand count after playing council_room was not correct. Expected 126, got 62
FAIL: Hand count after playing council_room was not correct. Expected 126, got 190
FAIL: Hand count after playing council_room was not correct. Expected 126, got 404
FAIL: Hand count after playing council_room was not correct. Expected 281, got 283
FAIL: Hand count after playing council_room was not correct. Expected 283, got 478
FAIL: Hand count after playing council_room was not correct. Expected 283, got 370
FAIL: Hand count after playing council_room was not correct. Expected 283, got 358
FAIL: Hand count after playing council_room was not correct. Expected 280, got 282
FAIL: Hand count after playing council_room was not correct. Expected 282, got 444
FAIL: Hand count after playing council_room was not correct. Expected 282, got 316
FAIL: Hand count after playing council_room was not correct. Expected 282, got 387
FAIL: Hand count after playing council_room was not correct. Expected 391, got 393
FAIL: Hand count after playing council_room was not correct. Expected 393, got 268
FAIL: Hand count after playing council_room was not correct. Expected 393, got 471
FAIL: Hand count after playing council_room was not correct. Expected 393, got 405
FAIL: Hand count after playing council_room was not correct. Expected 6, got 8
FAIL: Hand count after playing council_room was not correct. Expected 8, got 103
FAIL: Hand count after playing council_room was not correct. Expected 8, got 311
FAIL: Hand count after playing council_room was not correct. Expected 8, got 152
FAIL: Hand count after playing council_room was not correct. Expected 298, got 300
FAIL: Hand count after playing council_room was not correct. Expected 300, got 20
FAIL: Hand count after playing council_room was not correct. Expected 300, got 383
FAIL: Hand count after playing council_room was not correct. Expected 300, got 435
FAIL: Hand count after playing council_room was not correct. Expected 11, got 13
FAIL: Hand count after playing council_room was not correct. Expected 13, got 250
FAIL: Hand count after playing council_room was not correct. Expected 13, got 97
FAIL: Hand count after playing council_room was not correct. Expected 13, got 26
FAIL: Hand count after playing council_room was not correct. Expected 207, got 209
FAIL: Hand count after playing council_room was not correct. Expected 209, got 449
FAIL: Hand count after playing council_room was not correct. Expected 209, got 474
FAIL: Hand count after playing council_room was not correct. Expected 209, got 52
FAIL: Hand count after playing council_room was not correct. Expected 252, got 254
FAIL: Hand count after playing council_room was not correct. Expected 254, got 177
FAIL: Hand count after playing council_room was not correct. Expected 254, got 7
FAIL: Hand count after playing council_room was not correct. Expected 254, got 67
FAIL: Hand count after playing council_room was not correct. Expected 201, got 203
FAIL: Hand count after playing council_room was not correct. Expected 203, got 423
FAIL: Hand count after playing council_room was not correct. Expected 203, got 426
FAIL: Hand count after playing council_room was not correct. Expected 203, got 445
FAIL: Hand count after playing council_room was not correct. Expected 300, got 302
FAIL: Hand count after playing council_room was not correct. Expected 302, got 283
FAIL: Hand count after playing council_room was not correct. Expected 302, got 400
FAIL: Hand count after playing council_room was not correct. Expected 302, got 450
FAIL: Hand count after playing council_room was not correct. Expected 146, got 148
FAIL: Hand count after playing council_room was not correct. Expected 148, got 38
FAIL: Hand count after playing council_room was not correct. Expected 148, got 267
FAIL: Hand count after playing council_room was not correct. Expected 148, got 37
FAIL: Hand count after playing council_room was not correct. Expected 71, got 73
FAIL: Hand count after playing council_room was not correct. Expected 73, got 117
FAIL: Hand count after playing council_room was not correct. Expected 73, got 277
FAIL: Hand count after playing council_room was not correct. Expected 73, got 377
FAIL: Hand count after playing council_room was not correct. Expected 268, got 270
FAIL: Hand count after playing council_room was not correct. Expected 270, got 185
FAIL: Hand count after playing council_room was not correct. Expected 270, got 425
FAIL: Hand count after playing council_room was not correct. Expected 270, got 266
FAIL: Hand count after playing council_room was not correct. Expected 166, got 168
FAIL: Hand count after playing council_room was not correct. Expected 168, got 91
FAIL: Hand count after playing council_room was not correct. Expected 168, got 477
FAIL: Hand count after playing council_room was not correct. Expected 168, got 106
FAIL: Hand count after playing council_room was not correct. Expected 172, got 174
FAIL: Hand count after playing council_room was not correct. Expected 174, got 249
FAIL: Hand count after playing council_room was not correct. Expected 174, got 117
FAIL: Hand count after playing council_room was not correct. Expected 174, got 497
FAIL: Hand count after playing council_room was not correct. Expected 456, got 458
FAIL: Hand count after playing council_room was not correct. Expected 458, got 49
FAIL: Hand count after playing council_room was not correct. Expected 458, got 305
FAIL: Hand count after playing council_room was not correct. Expected 458, got 132
FAIL: Hand count after playing council_room was not correct. Expected 228, got 230
FAIL: Hand count after playing council_room was not correct. Expected 230, got 444
FAIL: Hand count after playing council_room was not correct. Expected 230, got 492
FAIL: Hand count after playing council_room was not correct. Expected 230, got 222
FAIL: Hand count after playing council_room was not correct. Expected 346, got 348
FAIL: Hand count after playing council_room was not correct. Expected 348, got 170
FAIL: Hand count after playing council_room was not correct. Expected 348, got 440
FAIL: Hand count after playing council_room was not correct. Expected 348, got 144
FAIL: Hand count after playing council_room was not correct. Expected 433, got 435
FAIL: Hand count after playing council_room was not correct. Expected 435, got 463
FAIL: Hand count after playing council_room was not correct. Expected 435, got 450
FAIL: Hand count after playing council_room was not correct. Expected 435, got 294
FAIL: Hand count after playing council_room was not correct. Expected 267, got 269
FAIL: Hand count after playing council_room was not correct. Expected 269, got 307
FAIL: Hand count after playing council_room was not correct. Expected 269, got 61
FAIL: Hand count after playing council_room was not correct. Expected 269, got 162
FAIL: Hand count after playing council_room was not correct. Expected 119, got 121
FAIL: Hand count after playing council_room was not correct. Expected 121, got 39
FAIL: Hand count after playing council_room was not correct. Expected 121, got 210
FAIL: Hand count after playing council_room was not correct. Expected 121, got 280
FAIL: Hand count after playing council_room was not correct. Expected 122, got 124
FAIL: Hand count after playing council_room was not correct. Expected 124, got 207
FAIL: Hand count after playing council_room was not correct. Expected 124, got 213
FAIL: Hand count after playing council_room was not correct. Expected 124, got 356
FAIL: Hand count after playing council_room was not correct. Expected 91, got 93
FAIL: Hand count after playing council_room was not correct. Expected 93, got 443
FAIL: Hand count after playing council_room was not correct. Expected 93, got 175
FAIL: Hand count after playing council_room was not correct. Expected 93, got 166
FAIL: Hand count after playing council_room was not correct. Expected 409, got 411
FAIL: Hand count after playing council_room was not correct. Expected 411, got 417
FAIL: Hand count after playing council_room was not correct. Expected 411, got 209
FAIL: Hand count after playing council_room was not correct. Expected 411, got 324
FAIL: Hand count after playing council_room was not correct. Expected 470, got 472
FAIL: Hand count after playing council_room was not correct. Expected 472, got 150
FAIL: Hand count after playing council_room was not correct. Expected 472, got 255
FAIL: Hand count after playing council_room was not correct. Expected 472, got 32
FAIL: Hand count after playing council_room was not correct. Expected 299, got 301
FAIL: Hand count after playing council_room was not correct. Expected 301, got 165
FAIL: Hand count after playing council_room was not correct. Expected 301, got 32
FAIL: Hand count after playing council_room was not correct. Expected 301, got 236
FAIL: Hand count after playing council_room was not correct. Expected 378, got 380
FAIL: Hand count after playing council_room was not correct. Expected 380, got 416
FAIL: Hand count after playing council_room was not correct. Expected 380, got 477
FAIL: Hand count after playing council_room was not correct. Expected 380, got 115
FAIL: Hand count after playing council_room was not correct. Expected 84, got 86
FAIL: Hand count after playing council_room was not correct. Expected 86, got 268
FAIL: Hand count after playing council_room was not correct. Expected 86, got 16
FAIL: Hand count after playing council_room was not correct. Expected 86, got 150
FAIL: Hand count after playing council_room was not correct. Expected 433, got 435
FAIL: Hand count after playing council_room was not correct. Expected 435, got 192
FAIL: Hand count after playing council_room was not correct. Expected 435, got 132
FAIL: Hand count after playing council_room was not correct. Expected 435, got 100
FAIL: Hand count after playing council_room was not correct. Expected 178, got 180
FAIL: Hand count after playing council_room was not correct. Expected 180, got 194
FAIL: Hand count after playing council_room was not correct. Expected 180, got 459
FAIL: Hand count after playing council_room was not correct. Expected 180, got 302
FAIL: Hand count after playing council_room was not correct. Expected 22, got 24
FAIL: Hand count after playing council_room was not correct. Expected 24, got 155
FAIL: Hand count after playing council_room was not correct. Expected 24, got 138
FAIL: Hand count after playing council_room was not correct. Expected 24, got 341
FAIL: Hand count after playing council_room was not correct. Expected 296, got 298
FAIL: Hand count after playing council_room was not correct. Expected 298, got 188
FAIL: Hand count after playing council_room was not correct. Expected 298, got 381
FAIL: Hand count after playing council_room was not correct. Expected 298, got 365
FAIL: Hand count after playing council_room was not correct. Expected 190, got 192
FAIL: Hand count after playing council_room was not correct. Expected 192, got 380
FAIL: Hand count after playing council_room was not correct. Expected 192, got 406
FAIL: Hand count after playing council_room was not correct. Expected 192, got 70
FAIL: Hand count after playing council_room was not correct. Expected 65, got 67
FAIL: Hand count after playing council_room was not correct. Expected 67, got 346
FAIL: Hand count after playing council_room was not correct. Expected 67, got 177
FAIL: Hand count after playing council_room was not correct. Expected 67, got 157
FAIL: Hand count after playing council_room was not correct. Expected 238, got 240
FAIL: Hand count after playing council_room was not correct. Expected 240, got 366
FAIL: Hand count after playing council_room was not correct. Expected 240, got 158
FAIL: Hand count after playing council_room was not correct. Expected 240, got 34
FAIL: Hand count after playing council_room was not correct. Expected 223, got 225
FAIL: Hand count after playing council_room was not correct. Expected 225, got 499
FAIL: Hand count after playing council_room was not correct. Expected 225, got 362
FAIL: Hand count after playing council_room was not correct. Expected 225, got 122
FAIL: Hand count after playing council_room was not correct. Expected 325, got 327
FAIL: Hand count after playing council_room was not correct. Expected 327, got 474
FAIL: Hand count after playing council_room was not correct. Expected 327, got 113
FAIL: Hand count after playing council_room was not correct. Expected 327, got 499
FAIL: Hand count after playing council_room was not correct. Expected 311, got 313
FAIL: Hand count after playing council_room was not correct. Expected 313, got 326
FAIL: Hand count after playing council_room was not correct. Expected 313, got 376
FAIL: Hand count after playing council_room was not correct. Expected 313, got 389
FAIL: Hand count after playing council_room was not correct. Expected 198, got 200
FAIL: Hand count after playing council_room was not correct. Expected 200, got 113
FAIL: Hand count after playing council_room was not correct. Expected 200, got 343
FAIL: Hand count after playing council_room was not correct. Expected 200, got 80
FAIL: Hand count after playing council_room was not correct. Expected 435, got 437
FAIL: Hand count after playing council_room was not correct. Expected 437, got 342
FAIL: Hand count after playing council_room was not correct. Expected 437, got 126
FAIL: Hand count after playing council_room was not correct. Expected 437, got 9
FAIL: Hand count after playing council_room was not correct. Expected 311, got 313
FAIL: Hand count after playing council_room was not correct. Expected 313, got 219
FAIL: Hand count after playing council_room was not correct. Expected 313, got 345
FAIL: Hand count after playing council_room was not correct. Expected 313, got 458
FAIL: Hand count after playing council_room was not correct. Expected 183, got 185
FAIL: Hand count after playing council_room was not correct. Expected 185, got 202
FAIL: Hand count after playing council_room was not correct. Expected 185, got 281
FAIL: Hand count after playing council_room was not correct. Expected 185, got 213
FAIL: Hand count after playing council_room was not correct. Expected 410, got 412
FAIL: Hand count after playing council_room was not correct. Expected 412, got 142
FAIL: Hand count after playing council_room was not correct. Expected 412, got 330
FAIL: Hand count after playing council_room was not correct. Expected 412, got 474
FAIL: Hand count after playing council_room was not correct. Expected 403, got 405
FAIL: Hand count after playing council_room was not correct. Expected 405, got 42
FAIL: Hand count after playing council_room was not correct. Expected 405, got 363
FAIL: Hand count after playing council_room was not correct. Expected 405, got 181
FAIL: Hand count after playing council_room was not correct. Expected 278, got 280
FAIL: Hand count after playing council_room was not correct. Expected 280, got 63
FAIL: Hand count after playing council_room was not correct. Expected 280, got 50
FAIL: Hand count after playing council_room was not correct. Expected 280, got 116
FAIL: Hand count after playing council_room was not correct. Expected 233, got 235
FAIL: Hand count after playing council_room was not correct. Expected 235, got 196
FAIL: Hand count after playing council_room was not correct. Expected 235, got 145
FAIL: Hand count after playing council_room was not correct. Expected 235, got 335
FAIL: Hand count after playing council_room was not correct. Expected 125, got 127
FAIL: Hand count after playing council_room was not correct. Expected 127, got 263
FAIL: Hand count after playing council_room was not correct. Expected 127, got 418
FAIL: Hand count after playing council_room was not correct. Expected 127, got 420
FAIL: Hand count after playing council_room was not correct. Expected 311, got 313
FAIL: Hand count after playing council_room was not correct. Expected 313, got 50
FAIL: Hand count after playing council_room was not correct. Expected 313, got 459
FAIL: Hand count after playing council_room was not correct. Expected 313, got 409
FAIL: Hand count after playing council_room was not correct. Expected 428, got 430
FAIL: Hand count after playing council_room was not correct. Expected 430, got 45
FAIL: Hand count after playing council_room was not correct. Expected 430, got 207
FAIL: Hand count after playing council_room was not correct. Expected 430, got 361
FAIL: Hand count after playing council_room was not correct. Expected 246, got 248
FAIL: Hand count after playing council_room was not correct. Expected 248, got 431
FAIL: Hand count after playing council_room was not correct. Expected 248, got 189
FAIL: Hand count after playing council_room was not correct. Expected 248, got 122
FAIL: Hand count after playing council_room was not correct. Expected 493, got 495
FAIL: Hand count after playing council_room was not correct. Expected 495, got 412
FAIL: Hand count after playing council_room was not correct. Expected 495, got 407
FAIL: Hand count after playing council_room was not correct. Expected 495, got 204
FAIL: Hand count after playing council_room was not correct. Expected 309, got 311
FAIL: Hand count after playing council_room was not correct. Expected 311, got 143
FAIL: Hand count after playing council_room was not correct. Expected 311, got 155
FAIL: Hand count after playing council_room was not correct. Expected 311, got 174
FAIL: Hand count after playing council_room was not correct. Expected 498, got 500
FAIL: Hand count after playing council_room was not correct. Expected 500, got 449
FAIL: Hand count after playing council_room was not correct. Expected 500, got 153
FAIL: Hand count after playing council_room was not correct. Expected 500, got 343
FAIL: Hand count after playing council_room was not correct. Expected 467, got 469
FAIL: Hand count after playing council_room was not correct. Expected 469, got 227
FAIL: Hand count after playing council_room was not correct. Expected 469, got 119
FAIL: Hand count after playing council_room was not correct. Expected 469, got 168
FAIL: Hand count after playing council_room was not correct. Expected 244, got 246
FAIL: Hand count after playing council_room was not correct. Expected 246, got 148
FAIL: Hand count after playing council_room was not correct. Expected 246, got 118
FAIL: Hand count after playing council_room was not correct. Expected 246, got 306
FAIL: Hand count after playing council_room was not correct. Expected 436, got 438
FAIL: Hand count after playing council_room was not correct. Expected 438, got 301
FAIL: Hand count after playing council_room was not correct. Expected 438, got 495
FAIL: Hand count after playing council_room was not correct. Expected 438, got 480
FAIL: Hand count after playing council_room was not correct. Expected 325, got 327
FAIL: Hand count after playing council_room was not correct. Expected 327, got 112
FAIL: Hand count after playing council_room was not correct. Expected 327, got 239
FAIL: Hand count after playing council_room was not correct. Expected 327, got 29
FAIL: Hand count after playing council_room was not correct. Expected 263, got 265
FAIL: Hand count after playing council_room was not correct. Expected 265, got 263
FAIL: Hand count after playing council_room was not correct. Expected 265, got 226
FAIL: Hand count after playing council_room was not correct. Expected 265, got 238
FAIL: Hand count after playing council_room was not correct. Expected 159, got 161
FAIL: Hand count after playing council_room was not correct. Expected 161, got 87
FAIL: Hand count after playing council_room was not correct. Expected 161, got 421
FAIL: Hand count after playing council_room was not correct. Expected 161, got 299
FAIL: Hand count after playing council_room was not correct. Expected 385, got 387
FAIL: Hand count after playing council_room was not correct. Expected 387, got 54
FAIL: Hand count after playing council_room was not correct. Expected 387, got 420
FAIL: Hand count after playing council_room was not correct. Expected 387, got 230
FAIL: Hand count after playing council_room was not correct. Expected 193, got 195
FAIL: Hand count after playing council_room was not correct. Expected 195, got 151
FAIL: Hand count after playing council_room was not correct. Expected 195, got 316
FAIL: Hand count after playing council_room was not correct. Expected 195, got 467
FAIL: Hand count after playing council_room was not correct. Expected 307, got 309
FAIL: Hand count after playing council_room was not correct. Expected 309, got 228
FAIL: Hand count after playing council_room was not correct. Expected 309, got 327
FAIL: Hand count after playing council_room was not correct. Expected 309, got 421
FAIL: Hand count after playing council_room was not correct. Expected 371, got 373
FAIL: Hand count after playing council_room was not correct. Expected 373, got 296
FAIL: Hand count after playing council_room was not correct. Expected 373, got 217
FAIL: Hand count after playing council_room was not correct. Expected 373, got 261
FAIL: Hand count after playing council_room was not correct. Expected 164, got 166
FAIL: Hand count after playing council_room was not correct. Expected 166, got 248
FAIL: Hand count after playing council_room was not correct. Expected 166, got 357
FAIL: Hand count after playing council_room was not correct. Expected 166, got 153
FAIL: Hand count after playing council_room was not correct. Expected 58, got 60
FAIL: Hand count after playing council_room was not correct. Expected 60, got 317
FAIL: Hand count after playing council_room was not correct. Expected 60, got 151
FAIL: Hand count after playing council_room was not correct. Expected 60, got 199
FAIL: Hand count after playing council_room was not correct. Expected 109, got 111
FAIL: Hand count after playing council_room was not correct. Expected 111, got 466
FAIL: Hand count after playing council_room was not correct. Expected 111, got 49
FAIL: Hand count after playing council_room was not correct. Expected 111, got 340
FAIL: Hand count after playing council_room was not correct. Expected 436, got 438
FAIL: Hand count after playing council_room was not correct. Expected 438, got 146
FAIL: Hand count after playing council_room was not correct. Expected 438, got 469
FAIL: Hand count after playing council_room was not correct. Expected 438, got 244
FAIL: Hand count after playing council_room was not correct. Expected 26, got 28
FAIL: Hand count after playing council_room was not correct. Expected 28, got 204
FAIL: Hand count after playing council_room was not correct. Expected 28, got 371
FAIL: Hand count after playing council_room was not correct. Expected 28, got 121
FAIL: Hand count after playing council_room was not correct. Expected 364, got 366
FAIL: Hand count after playing council_room was not correct. Expected 366, got 393
FAIL: Hand count after playing council_room was not correct. Expected 366, got 398
FAIL: Hand count after playing council_room was not correct. Expected 366, got 174
FAIL: Hand count after playing council_room was not correct. Expected 21, got 23
FAIL: Hand count after playing council_room was not correct. Expected 23, got 162
FAIL: Hand count after playing council_room was not correct. Expected 23, got 247
FAIL: Hand count after playing council_room was not correct. Expected 23, got 342
FAIL: Hand count after playing council_room was not correct. Expected 72, got 74
FAIL: Hand count after playing council_room was not correct. Expected 74, got 236
FAIL: Hand count after playing council_room was not correct. Expected 74, got 373
FAIL: Hand count after playing council_room was not correct. Expected 74, got 443
FAIL: Hand count after playing council_room was not correct. Expected 422, got 424
FAIL: Hand count after playing council_room was not correct. Expected 424, got 163
FAIL: Hand count after playing council_room was not correct. Expected 424, got 366
FAIL: Hand count after playing council_room was not correct. Expected 424, got 53
FAIL: Hand count after playing council_room was not correct. Expected 62, got 64
FAIL: Hand count after playing council_room was not correct. Expected 64, got 75
FAIL: Hand count after playing council_room was not correct. Expected 64, got 428
FAIL: Hand count after playing council_room was not correct. Expected 64, got 301
FAIL: Hand count after playing council_room was not correct. Expected 458, got 460
FAIL: Hand count after playing council_room was not correct. Expected 460, got 388
FAIL: Hand count after playing council_room was not correct. Expected 460, got 143
FAIL: Hand count after playing council_room was not correct. Expected 460, got 415
FAIL: Hand count after playing council_room was not correct. Expected 131, got 133
FAIL: Hand count after playing council_room was not correct. Expected 133, got 389
FAIL: Hand count after playing council_room was not correct. Expected 133, got 201
FAIL: Hand count after playing council_room was not correct. Expected 133, got 259
FAIL: Hand count after playing council_room was not correct. Expected 436, got 438
FAIL: Hand count after playing council_room was not correct. Expected 438, got 495
FAIL: Hand count after playing council_room was not correct. Expected 438, got 485
FAIL: Hand count after playing council_room was not correct. Expected 438, got 224
FAIL: Hand count after playing council_room was not correct. Expected 88, got 90
FAIL: Hand count after playing council_room was not correct. Expected 90, got 144
FAIL: Hand count after playing council_room was not correct. Expected 90, got 408
FAIL: Hand count after playing council_room was not correct. Expected 90, got 204
FAIL: Hand count after playing council_room was not correct. Expected 25, got 27
FAIL: Hand count after playing council_room was not correct. Expected 27, got 179
FAIL: Hand count after playing council_room was not correct. Expected 27, got 474
FAIL: Hand count after playing council_room was not correct. Expected 27, got 235
FAIL: Hand count after playing council_room was not correct. Expected 435, got 437
FAIL: Hand count after playing council_room was not correct. Expected 437, got 244
FAIL: Hand count after playing council_room was not correct. Expected 437, got 214
FAIL: Hand count after playing council_room was not correct. Expected 437, got 32
FAIL: Hand count after playing council_room was not correct. Expected 307, got 309
FAIL: Hand count after playing council_room was not correct. Expected 309, got 241
FAIL: Hand count after playing council_room was not correct. Expected 309, got 193
FAIL: Hand count after playing council_room was not correct. Expected 309, got 17
FAIL: Hand count after playing council_room was not correct. Expected 394, got 396
FAIL: Hand count after playing council_room was not correct. Expected 396, got 65
FAIL: Hand count after playing council_room was not correct. Expected 396, got 385
FAIL: Hand count after playing council_room was not correct. Expected 396, got 450
FAIL: Hand count after playing council_room was not correct. Expected 186, got 188
FAIL: Hand count after playing council_room was not correct. Expected 188, got 141
FAIL: Hand count after playing council_room was not correct. Expected 188, got 260
FAIL: Hand count after playing council_room was not correct. Expected 188, got 318
FAIL: Hand count after playing council_room was not correct. Expected 402, got 404
FAIL: Hand count after playing council_room was not correct. Expected 404, got 197
FAIL: Hand count after playing council_room was not correct. Expected 404, got 465
FAIL: Hand count after playing council_room was not correct. Expected 404, got 466
FAIL: Hand count after playing council_room was not correct. Expected 379, got 381
FAIL: Hand count after playing council_room was not correct. Expected 381, got 424
FAIL: Hand count after playing council_room was not correct. Expected 381, got 285
FAIL: Hand count after playing council_room was not correct. Expected 381, got 169
FAIL: Hand count after playing council_room was not correct. Expected 407, got 409
FAIL: Hand count after playing council_room was not correct. Expected 409, got 396
FAIL: Hand count after playing council_room was not correct. Expected 409, got 337
FAIL: Hand count after playing council_room was not correct. Expected 409, got 495
FAIL: Hand count after playing council_room was not correct. Expected 321, got 323
FAIL: Hand count after playing council_room was not correct. Expected 323, got 386
FAIL: Hand count after playing council_room was not correct. Expected 323, got 6
FAIL: Hand count after playing council_room was not correct. Expected 323, got 148
FAIL: Hand count after playing council_room was not correct. Expected 458, got 460
FAIL: Hand count after playing council_room was not correct. Expected 460, got 159
FAIL: Hand count after playing council_room was not correct. Expected 460, got 308
FAIL: Hand count after playing council_room was not correct. Expected 460, got 44
FAIL: Hand count after playing council_room was not correct. Expected 52, got 54
FAIL: Hand count after playing council_room was not correct. Expected 54, got 17
FAIL: Hand count after playing council_room was not correct. Expected 54, got 222
FAIL: Hand count after playing council_room was not correct. Expected 54, got 395
FAIL: Hand count after playing council_room was not correct. Expected 351, got 353
FAIL: Hand count after playing council_room was not correct. Expected 353, got 462
FAIL: Hand count after playing council_room was not correct. Expected 353, got 10
FAIL: Hand count after playing council_room was not correct. Expected 353, got 206
FAIL: Hand count after playing council_room was not correct. Expected 179, got 181
FAIL: Hand count after playing council_room was not correct. Expected 181, got 393
FAIL: Hand count after playing council_room was not correct. Expected 181, got 110
FAIL: Hand count after playing council_room was not correct. Expected 181, got 382
FAIL: Hand count after playing council_room was not correct. Expected 186, got 188
FAIL: Hand count after playing council_room was not correct. Expected 188, got 305
FAIL: Hand count after playing council_room was not correct. Expected 188, got 245
FAIL: Hand count after playing council_room was not correct. Expected 188, got 243
FAIL: Hand count after playing council_room was not correct. Expected 53, got 55
FAIL: Hand count after playing council_room was not correct. Expected 55, got 147
FAIL: Hand count after playing council_room was not correct. Expected 55, got 396
FAIL: Hand count after playing council_room was not correct. Expected 55, got 338
FAIL: Hand count after playing council_room was not correct. Expected 446, got 448
FAIL: Hand count after playing council_room was not correct. Expected 448, got 322
FAIL: Hand count after playing council_room was not correct. Expected 448, got 432
FAIL: Hand count after playing council_room was not correct. Expected 448, got 80
FAIL: Hand count after playing council_room was not correct. Expected 376, got 378
FAIL: Hand count after playing council_room was not correct. Expected 378, got 161
FAIL: Hand count after playing council_room was not correct. Expected 378, got 317
FAIL: Hand count after playing council_room was not correct. Expected 378, got 303
FAIL: Hand count after playing council_room was not correct. Expected 394, got 396
FAIL: Hand count after playing council_room was not correct. Expected 396, got 341
FAIL: Hand count after playing council_room was not correct. Expected 396, got 43
FAIL: Hand count after playing council_room was not correct. Expected 396, got 429
FAIL: Hand count after playing council_room was not correct. Expected 421, got 423
FAIL: Hand count after playing council_room was not correct. Expected 423, got 88
FAIL: Hand count after playing council_room was not correct. Expected 423, got 337
FAIL: Hand count after playing council_room was not correct. Expected 423, got 109
FAIL: Hand count after playing council_room was not correct. Expected 439, got 441
FAIL: Hand count after playing council_room was not correct. Expected 441, got 290
FAIL: Hand count after playing council_room was not correct. Expected 441, got 70
FAIL: Hand count after playing council_room was not correct. Expected 441, got 56
FAIL: Hand count after playing council_room was not correct. Expected 430, got 432
FAIL: Hand count after playing council_room was not correct. Expected 432, got 443
FAIL: Hand count after playing council_room was not correct. Expected 432, got 240
FAIL: Hand count after playing council_room was not correct. Expected 432, got 323
FAIL: Hand count after playing council_room was not correct. Expected 331, got 333
FAIL: Hand count after playing council_room was not correct. Expected 333, got 423
FAIL: Hand count after playing council_room was not correct. Expected 333, got 209
FAIL: Hand count after playing council_room was not correct. Expected 333, got 54
FAIL: Hand count after playing council_room was not correct. Expected 281, got 283
FAIL: Hand count after playing council_room was not correct. Expected 283, got 378
FAIL: Hand count after playing council_room was not correct. Expected 283, got 420
FAIL: Hand count after playing council_room was not correct. Expected 283, got 207
FAIL: Hand count after playing council_room was not correct. Expected 187, got 189
FAIL: Hand count after playing council_room was not correct. Expected 189, got 331
FAIL: Hand count after playing council_room was not correct. Expected 189, got 234
FAIL: Hand count after playing council_room was not correct. Expected 189, got 407
FAIL: Hand count after playing council_room was not correct. Expected 323, got 325
FAIL: Hand count after playing council_room was not correct. Expected 325, got 351
FAIL: Hand count after playing council_room was not correct. Expected 325, got 85
FAIL: Hand count after playing council_room was not correct. Expected 325, got 455
FAIL: Hand count after playing council_room was not correct. Expected 35, got 37
FAIL: Hand count after playing council_room was not correct. Expected 37, got 20
FAIL: Hand count after playing council_room was not correct. Expected 37, got 263
FAIL: Hand count after playing council_room was not correct. Expected 37, got 495
FAIL: Hand count after playing council_room was not correct. Expected 165, got 167
FAIL: Hand count after playing council_room was not correct. Expected 167, got 391
FAIL: Hand count after playing council_room was not correct. Expected 167, got 455
FAIL: Hand count after playing council_room was not correct. Expected 167, got 244
FAIL: Hand count after playing council_room was not correct. Expected 116, got 118
FAIL: Hand count after playing council_room was not correct. Expected 118, got 135
FAIL: Hand count after playing council_room was not correct. Expected 118, got 94
FAIL: Hand count after playing council_room was not correct. Expected 118, got 73
FAIL: Hand count after playing council_room was not correct. Expected 350, got 352
FAIL: Hand count after playing council_room was not correct. Expected 352, got 310
FAIL: Hand count after playing council_room was not correct. Expected 352, got 432
FAIL: Hand count after playing council_room was not correct. Expected 352, got 204
FAIL: Hand count after playing council_room was not correct. Expected 337, got 339
FAIL: Hand count after playing council_room was not correct. Expected 339, got 9
FAIL: Hand count after playing council_room was not correct. Expected 339, got 344
FAIL: Hand count after playing council_room was not correct. Expected 339, got 488
FAIL: Hand count after playing council_room was not correct. Expected 312, got 314
FAIL: Hand count after playing council_room was not correct. Expected 314, got 180
FAIL: Hand count after playing council_room was not correct. Expected 314, got 397
FAIL: Hand count after playing council_room was not correct. Expected 314, got 24
FAIL: Hand count after playing council_room was not correct. Expected 362, got 364
FAIL: Hand count after playing council_room was not correct. Expected 364, got 254
FAIL: Hand count after playing council_room was not correct. Expected 364, got 63
FAIL: Hand count after playing council_room was not correct. Expected 364, got 85
FAIL: Hand count after playing council_room was not correct. Expected 405, got 407
FAIL: Hand count after playing council_room was not correct. Expected 407, got 229
FAIL: Hand count after playing council_room was not correct. Expected 407, got 423
FAIL: Hand count after playing council_room was not correct. Expected 407, got 95
FAIL: Hand count after playing council_room was not correct. Expected 216, got 218
FAIL: Hand count after playing council_room was not correct. Expected 218, got 279
FAIL: Hand count after playing council_room was not correct. Expected 218, got 159
FAIL: Hand count after playing council_room was not correct. Expected 218, got 174
FAIL: Hand count after playing council_room was not correct. Expected 276, got 278
FAIL: Hand count after playing council_room was not correct. Expected 278, got 194
FAIL: Hand count after playing council_room was not correct. Expected 278, got 206
FAIL: Hand count after playing council_room was not correct. Expected 278, got 484
FAIL: Hand count after playing council_room was not correct. Expected 487, got 489
FAIL: Hand count after playing council_room was not correct. Expected 489, got 252
FAIL: Hand count after playing council_room was not correct. Expected 489, got 494
FAIL: Hand count after playing council_room was not correct. Expected 489, got 355
FAIL: Hand count after playing council_room was not correct. Expected 349, got 351
FAIL: Hand count after playing council_room was not correct. Expected 351, got 7
FAIL: Hand count after playing council_room was not correct. Expected 351, got 392
FAIL: Hand count after playing council_room was not correct. Expected 351, got 310
FAIL: Hand count after playing council_room was not correct. Expected 315, got 317
FAIL: Hand count after playing council_room was not correct. Expected 317, got 499
FAIL: Hand count after playing council_room was not correct. Expected 317, got 150
FAIL: Hand count after playing council_room was not correct. Expected 317, got 149
FAIL: Hand count after playing council_room was not correct. Expected 83, got 85
FAIL: Hand count after playing council_room was not correct. Expected 85, got 164
FAIL: Hand count after playing council_room was not correct. Expected 85, got 341
FAIL: Hand count after playing council_room was not correct. Expected 85, got 182
FAIL: Hand count after playing council_room was not correct. Expected 230, got 232
FAIL: Hand count after playing council_room was not correct. Expected 232, got 137
FAIL: Hand count after playing council_room was not correct. Expected 232, got 328
FAIL: Hand count after playing council_room was not correct. Expected 232, got 389
FAIL: Hand count after playing council_room was not correct. Expected 113, got 115
FAIL: Hand count after playing council_room was not correct. Expected 115, got 207
FAIL: Hand count after playing council_room was not correct. Expected 115, got 64
FAIL: Hand count after playing council_room was not correct. Expected 115, got 369
FAIL: Hand count after playing council_room was not correct. Expected 53, got 55
FAIL: Hand count after playing council_room was not correct. Expected 55, got 261
FAIL: Hand count after playing council_room was not correct. Expected 55, got 381
FAIL: Hand count after playing council_room was not correct. Expected 55, got 349
FAIL: Hand count after playing council_room was not correct. Expected 460, got 462
FAIL: Hand count after playing council_room was not correct. Expected 462, got 481
FAIL: Hand count after playing council_room was not correct. Expected 462, got 334
FAIL: Hand count after playing council_room was not correct. Expected 462, got 55
FAIL: Hand count after playing council_room was not correct. Expected 478, got 480
FAIL: Hand count after playing council_room was not correct. Expected 480, got 308
FAIL: Hand count after playing council_room was not correct. Expected 480, got 361
FAIL: Hand count after playing council_room was not correct. Expected 480, got 191
FAIL: Hand count after playing council_room was not correct. Expected 393, got 395
FAIL: Hand count after playing council_room was not correct. Expected 395, got 277
FAIL: Hand count after playing council_room was not correct. Expected 395, got 283
FAIL: Hand count after playing council_room was not correct. Expected 395, got 18
FAIL: Hand count after playing council_room was not correct. Expected 375, got 377
FAIL: Hand count after playing council_room was not correct. Expected 377, got 190
FAIL: Hand count after playing council_room was not correct. Expected 377, got 95
FAIL: Hand count after playing council_room was not correct. Expected 377, got 459
FAIL: Hand count after playing council_room was not correct. Expected 108, got 110
FAIL: Hand count after playing council_room was not correct. Expected 110, got 181
FAIL: Hand count after playing council_room was not correct. Expected 110, got 116
FAIL: Hand count after playing council_room was not correct. Expected 110, got 204
FAIL: Hand count after playing council_room was not correct. Expected 420, got 422
FAIL: Hand count after playing council_room was not correct. Expected 422, got 44
FAIL: Hand count after playing council_room was not correct. Expected 422, got 471
FAIL: Hand count after playing council_room was not correct. Expected 422, got 93
FAIL: Hand count after playing council_room was not correct. Expected 192, got 194
FAIL: Hand count after playing council_room was not correct. Expected 194, got 74
FAIL: Hand count after playing council_room was not correct. Expected 194, got 406
FAIL: Hand count after playing council_room was not correct. Expected 194, got 94
FAIL: Hand count after playing council_room was not correct. Expected 384, got 386
FAIL: Hand count after playing council_room was not correct. Expected 386, got 232
FAIL: Hand count after playing council_room was not correct. Expected 386, got 307
FAIL: Hand count after playing council_room was not correct. Expected 386, got 375
FAIL: Hand count after playing council_room was not correct. Expected 232, got 234
FAIL: Hand count after playing council_room was not correct. Expected 234, got 354
FAIL: Hand count after playing council_room was not correct. Expected 234, got 277
FAIL: Hand count after playing council_room was not correct. Expected 234, got 356
FAIL: Hand count after playing council_room was not correct. Expected 80, got 82
FAIL: Hand count after playing council_room was not correct. Expected 82, got 497
FAIL: Hand count after playing council_room was not correct. Expected 82, got 179
FAIL: Hand count after playing council_room was not correct. Expected 82, got 125
FAIL: Hand count after playing council_room was not correct. Expected 255, got 257
FAIL: Hand count after playing council_room was not correct. Expected 257, got 50
FAIL: Hand count after playing council_room was not correct. Expected 257, got 407
FAIL: Hand count after playing council_room was not correct. Expected 257, got 497
FAIL: Hand count after playing council_room was not correct. Expected 406, got 408
FAIL: Hand count after playing council_room was not correct. Expected 408, got 74
FAIL: Hand count after playing council_room was not correct. Expected 408, got 444
FAIL: Hand count after playing council_room was not correct. Expected 408, got 277
FAIL: Hand count after playing council_room was not correct. Expected 248, got 250
FAIL: Hand count after playing council_room was not correct. Expected 250, got 426
FAIL: Hand count after playing council_room was not correct. Expected 250, got 89
FAIL: Hand count after playing council_room was not correct. Expected 250, got 419
FAIL: Hand count after playing council_room was not correct. Expected 202, got 204
FAIL: Hand count after playing council_room was not correct. Expected 204, got 476
FAIL: Hand count after playing council_room was not correct. Expected 204, got 273
FAIL: Hand count after playing council_room was not correct. Expected 204, got 313
FAIL: Hand count after playing council_room was not correct. Expected 439, got 441
FAIL: Hand count after playing council_room was not correct. Expected 441, got 8
FAIL: Hand count after playing council_room was not correct. Expected 441, got 136
FAIL: Hand count after playing council_room was not correct. Expected 441, got 474
FAIL: Hand count after playing council_room was not correct. Expected 7, got 9
FAIL: Hand count after playing council_room was not correct. Expected 9, got 200
FAIL: Hand count after playing council_room was not correct. Expected 9, got 400
FAIL: Hand count after playing council_room was not correct. Expected 9, got 337
FAIL: Hand count after playing council_room was not correct. Expected 188, got 190
FAIL: Hand count after playing council_room was not correct. Expected 190, got 117
FAIL: Hand count after playing council_room was not correct. Expected 190, got 180
FAIL: Hand count after playing council_room was not correct. Expected 190, got 389
FAIL: Hand count after playing council_room was not correct. Expected 199, got 201
FAIL: Hand count after playing council_room was not correct. Expected 201, got 138
FAIL: Hand count after playing council_room was not correct. Expected 201, got 143
FAIL: Hand count after playing council_room was not correct. Expected 201, got 24
FAIL: Hand count after playing council_room was not correct. Expected 221, got 223
FAIL: Hand count after playing council_room was not correct. Expected 223, got 414
FAIL: Hand count after playing council_room was not correct. Expected 223, got 223
FAIL: Hand count after playing council_room was not correct. Expected 223, got 20
FAIL: Hand count after playing council_room was not correct. Expected 341, got 343
FAIL: Hand count after playing council_room was not correct. Expected 343, got 8
FAIL: Hand count after playing council_room was not correct. Expected 343, got 389
FAIL: Hand count after playing council_room was not correct. Expected 343, got 433
FAIL: Hand count after playing council_room was not correct. Expected 297, got 299
FAIL: Hand count after playing council_room was not correct. Expected 299, got 80
FAIL: Hand count after playing council_room was not correct. Expected 299, got 362
FAIL: Hand count after playing council_room was not correct. Expected 299, got 487
FAIL: Hand count after playing council_room was not correct. Expected 55, got 57
FAIL: Hand count after playing council_room was not correct. Expected 57, got 479
FAIL: Hand count after playing council_room was not correct. Expected 57, got 283
FAIL: Hand count after playing council_room was not correct. Expected 57, got 454
FAIL: Hand count after playing council_room was not correct. Expected 186, got 188
FAIL: Hand count after playing council_room was not correct. Expected 188, got 235
FAIL: Hand count after playing council_room was not correct. Expected 188, got 82
FAIL: Hand count after playing council_room was not correct. Expected 188, got 309
FAIL: Hand count after playing council_room was not correct. Expected 173, got 175
FAIL: Hand count after playing council_room was not correct. Expected 175, got 463
FAIL: Hand count after playing council_room was not correct. Expected 175, got 430
FAIL: Hand count after playing council_room was not correct. Expected 175, got 123
FAIL: Hand count after playing council_room was not correct. Expected 202, got 204
FAIL: Hand count after playing council_room was not correct. Expected 204, got 323
FAIL: Hand count after playing council_room was not correct. Expected 204, got 485
FAIL: Hand count after playing council_room was not correct. Expected 204, got 367
FAIL: Hand count after playing council_room was not correct. Expected 418, got 420
FAIL: Hand count after playing council_room was not correct. Expected 420, got 42
FAIL: Hand count after playing council_room was not correct. Expected 420, got 362
FAIL: Hand count after playing council_room was not correct. Expected 420, got 496
FAIL: Hand count after playing council_room was not correct. Expected 340, got 342
FAIL: Hand count after playing council_room was not correct. Expected 342, got 1
FAIL: Hand count after playing council_room was not correct. Expected 342, got 445
FAIL: Hand count after playing council_room was not correct. Expected 342, got 30
FAIL: Hand count after playing council_room was not correct. Expected 482, got 484
FAIL: Hand count after playing council_room was not correct. Expected 484, got 434
FAIL: Hand count after playing council_room was not correct. Expected 484, got 324
FAIL: Hand count after playing council_room was not correct. Expected 484, got 371
FAIL: Hand count after playing council_room was not correct. Expected 391, got 393
FAIL: Hand count after playing council_room was not correct. Expected 393, got 91
FAIL: Hand count after playing council_room was not correct. Expected 393, got 189
FAIL: Hand count after playing council_room was not correct. Expected 393, got 443
FAIL: Hand count after playing council_room was not correct. Expected 61, got 63
FAIL: Hand count after playing council_room was not correct. Expected 63, got 374
FAIL: Hand count after playing council_room was not correct. Expected 63, got 162
FAIL: Hand count after playing council_room was not correct. Expected 63, got 411
FAIL: Hand count after playing council_room was not correct. Expected 477, got 479
FAIL: Hand count after playing council_room was not correct. Expected 479, got 94
FAIL: Hand count after playing council_room was not correct. Expected 479, got 162
FAIL: Hand count after playing council_room was not correct. Expected 479, got 321
FAIL: Hand count after playing council_room was not correct. Expected 421, got 423
FAIL: Hand count after playing council_room was not correct. Expected 423, got 200
FAIL: Hand count after playing council_room was not correct. Expected 423, got 146
FAIL: Hand count after playing council_room was not correct. Expected 423, got 414
FAIL: Hand count after playing council_room was not correct. Expected 286, got 288
FAIL: Hand count after playing council_room was not correct. Expected 288, got 19
FAIL: Hand count after playing council_room was not correct. Expected 288, got 58
FAIL: Hand count after playing council_room was not correct. Expected 288, got 308
FAIL: Hand count after playing council_room was not correct. Expected 388, got 390
FAIL: Hand count after playing council_room was not correct. Expected 390, got 355
FAIL: Hand count after playing council_room was not correct. Expected 390, got 263
FAIL: Hand count after playing council_room was not correct. Expected 390, got 60
FAIL: Hand count after playing council_room was not correct. Expected 357, got 359
FAIL: Hand count after playing council_room was not correct. Expected 359, got 154
FAIL: Hand count after playing council_room was not correct. Expected 359, got 486
FAIL: Hand count after playing council_room was not correct. Expected 359, got 221
FAIL: Hand count after playing council_room was not correct. Expected 310, got 312
FAIL: Hand count after playing council_room was not correct. Expected 312, got 401
FAIL: Hand count after playing council_room was not correct. Expected 312, got 258
FAIL: Hand count after playing council_room was not correct. Expected 312, got 89
FAIL: Hand count after playing council_room was not correct. Expected 269, got 271
FAIL: Hand count after playing council_room was not correct. Expected 271, got 284
FAIL: Hand count after playing council_room was not correct. Expected 271, got 459
FAIL: Hand count after playing council_room was not correct. Expected 271, got 171
FAIL: Hand count after playing council_room was not correct. Expected 421, got 423
FAIL: Hand count after playing council_room was not correct. Expected 423, got 392
FAIL: Hand count after playing council_room was not correct. Expected 423, got 303
FAIL: Hand count after playing council_room was not correct. Expected 423, got 279
FAIL: Hand count after playing council_room was not correct. Expected 323, got 325
FAIL: Hand count after playing council_room was not correct. Expected 325, got 386
FAIL: Hand count after playing council_room was not correct. Expected 325, got 77
FAIL: Hand count after playing council_room was not correct. Expected 325, got 310
FAIL: Hand count after playing council_room was not correct. Expected 328, got 330
FAIL: Hand count after playing council_room was not correct. Expected 330, got 120
FAIL: Hand count after playing council_room was not correct. Expected 330, got 102
FAIL: Hand count after playing council_room was not correct. Expected 330, got 154
FAIL: Hand count after playing council_room was not correct. Expected 285, got 287
FAIL: Hand count after playing council_room was not correct. Expected 287, got 45
FAIL: Hand count after playing council_room was not correct. Expected 287, got 37
FAIL: Hand count after playing council_room was not correct. Expected 287, got 22
FAIL: Hand count after playing council_room was not correct. Expected 213, got 215
FAIL: Hand count after playing council_room was not correct. Expected 215, got 238
FAIL: Hand count after playing council_room was not correct. Expected 215, got 398
FAIL: Hand count after playing council_room was not correct. Expected 215, got 58
FAIL: Hand count after playing council_room was not correct. Expected 347, got 349
FAIL: Hand count after playing council_room was not correct. Expected 349, got 204
FAIL: Hand count after playing council_room was not correct. Expected 349, got 96
FAIL: Hand count after playing council_room was not correct. Expected 349, got 145
FAIL: Hand count after playing council_room was not correct. Expected 198, got 200
FAIL: Hand count after playing council_room was not correct. Expected 200, got 421
FAIL: Hand count after playing council_room was not correct. Expected 200, got 80
FAIL: Hand count after playing council_room was not correct. Expected 200, got 191
FAIL: Hand count after playing council_room was not correct. Expected 85, got 87
FAIL: Hand count after playing council_room was not correct. Expected 87, got 327
FAIL: Hand count after playing council_room was not correct. Expected 87, got 285
FAIL: Hand count after playing council_room was not correct. Expected 87, got 214
FAIL: Hand count after playing council_room was not correct. Expected 103, got 105
FAIL: Hand count after playing council_room was not correct. Expected 105, got 155
FAIL: Hand count after playing council_room was not correct. Expected 105, got 339
FAIL: Hand count after playing council_room was not correct. Expected 105, got 465
FAIL: Hand count after playing council_room was not correct. Expected 204, got 206
FAIL: Hand count after playing council_room was not correct. Expected 206, got 260
FAIL: Hand count after playing council_room was not correct. Expected 206, got 465
FAIL: Hand count after playing council_room was not correct. Expected 206, got 163
FAIL: Hand count after playing council_room was not correct. Expected 18, got 20
FAIL: Hand count after playing council_room was not correct. Expected 20, got 208
FAIL: Hand count after playing council_room was not correct. Expected 20, got 404
FAIL: Hand count after playing council_room was not correct. Expected 20, got 354
FAIL: Hand count after playing council_room was not correct. Expected 304, got 306
FAIL: Hand count after playing council_room was not correct. Expected 306, got 20
FAIL: Hand count after playing council_room was not correct. Expected 306, got 37
FAIL: Hand count after playing council_room was not correct. Expected 306, got 226
FAIL: Hand count after playing council_room was not correct. Expected 403, got 405
FAIL: Hand count after playing council_room was not correct. Expected 405, got 365
FAIL: Hand count after playing council_room was not correct. Expected 405, got 184
FAIL: Hand count after playing council_room was not correct. Expected 405, got 133
FAIL: Hand count after playing council_room was not correct. Expected 164, got 166
FAIL: Hand count after playing council_room was not correct. Expected 166, got 136
FAIL: Hand count after playing council_room was not correct. Expected 166, got 77
FAIL: Hand count after playing council_room was not correct. Expected 166, got 432
FAIL: Hand count after playing council_room was not correct. Expected 155, got 157
FAIL: Hand count after playing council_room was not correct. Expected 157, got 374
FAIL: Hand count after playing council_room was not correct. Expected 157, got 489
FAIL: Hand count after playing council_room was not correct. Expected 157, got 492
FAIL: Hand count after playing council_room was not correct. Expected 135, got 137
FAIL: Hand count after playing council_room was not correct. Expected 137, got 42
FAIL: Hand count after playing council_room was not correct. Expected 137, got 405
FAIL: Hand count after playing council_room was not correct. Expected 137, got 47
FAIL: Hand count after playing council_room was not correct. Expected 491, got 493
FAIL: Hand count after playing council_room was not correct. Expected 493, got 77
FAIL: Hand count after playing council_room was not correct. Expected 493, got 10
FAIL: Hand count after playing council_room was not correct. Expected 493, got 200
FAIL: Hand count after playing council_room was not correct. Expected 290, got 292
FAIL: Hand count after playing council_room was not correct. Expected 292, got 310
FAIL: Hand count after playing council_room was not correct. Expected 292, got 490
FAIL: Hand count after playing council_room was not correct. Expected 292, got 405
FAIL: Hand count after playing council_room was not correct. Expected 401, got 403
FAIL: Hand count after playing council_room was not correct. Expected 403, got 441
FAIL: Hand count after playing council_room was not correct. Expected 403, got 333
FAIL: Hand count after playing council_room was not correct. Expected 403, got 245
FAIL: Hand count after playing council_room was not correct. Expected 396, got 398
FAIL: Hand count after playing council_room was not correct. Expected 398, got 341
FAIL: Hand count after playing council_room was not correct. Expected 398, got 164
FAIL: Hand count after playing council_room was not correct. Expected 398, got 331
FAIL: Hand count after playing council_room was not correct. Expected 308, got 310
FAIL: Hand count after playing council_room was not correct. Expected 310, got 196
FAIL: Hand count after playing council_room was not correct. Expected 310, got 383
FAIL: Hand count after playing council_room was not correct. Expected 310, got 128
FAIL: Hand count after playing council_room was not correct. Expected 259, got 261
FAIL: Hand count after playing council_room was not correct. Expected 261, got 268
FAIL: Hand count after playing council_room was not correct. Expected 261, got 444
FAIL: Hand count after playing council_room was not correct. Expected 261, got 88
FAIL: Hand count after playing council_room was not correct. Expected 264, got 266
FAIL: Hand count after playing council_room was not correct. Expected 266, got 167
FAIL: Hand count after playing council_room was not correct. Expected 266, got 320
FAIL: Hand count after playing council_room was not correct. Expected 266, got 210
FAIL: Hand count after playing council_room was not correct. Expected 389, got 391
FAIL: Hand count after playing council_room was not correct. Expected 391, got 262
FAIL: Hand count after playing council_room was not correct. Expected 391, got 401
FAIL: Hand count after playing council_room was not correct. Expected 391, got 330
FAIL: Hand count after playing council_room was not correct. Expected 298, got 300
FAIL: Hand count after playing council_room was not correct. Expected 300, got 422
FAIL: Hand count after playing council_room was not correct. Expected 300, got 68
FAIL: Hand count after playing council_room was not correct. Expected 300, got 286
FAIL: Hand count after playing council_room was not correct. Expected 479, got 481
FAIL: Hand count after playing council_room was not correct. Expected 481, got 8
FAIL: Hand count after playing council_room was not correct. Expected 481, got 307
FAIL: Hand count after playing council_room was not correct. Expected 481, got 86
FAIL: Hand count after playing council_room was not correct. Expected 422, got 424
FAIL: Hand count after playing council_room was not correct. Expected 424, got 45
FAIL: Hand count after playing council_room was not correct. Expected 424, got 357
FAIL: Hand count after playing council_room was not correct. Expected 424, got 388
FAIL: Hand count after playing council_room was not correct. Expected 329, got 331
FAIL: Hand count after playing council_room was not correct. Expected 331, got 327
FAIL: Hand count after playing council_room was not correct. Expected 331, got 390
FAIL: Hand count after playing council_room was not correct. Expected 331, got 146
FAIL: Hand count after playing council_room was not correct. Expected 74, got 76
FAIL: Hand count after playing council_room was not correct. Expected 76, got 357
FAIL: Hand count after playing council_room was not correct. Expected 76, got 100
FAIL: Hand count after playing council_room was not correct. Expected 76, got 153
FAIL: Hand count after playing council_room was not correct. Expected 412, got 414
FAIL: Hand count after playing council_room was not correct. Expected 414, got 436
FAIL: Hand count after playing council_room was not correct. Expected 414, got 245
FAIL: Hand count after playing council_room was not correct. Expected 414, got 207
FAIL: Hand count after playing council_room was not correct. Expected 358, got 360
FAIL: Hand count after playing council_room was not correct. Expected 360, got 231
FAIL: Hand count after playing council_room was not correct. Expected 360, got 31
FAIL: Hand count after playing council_room was not correct. Expected 360, got 231
FAIL: Hand count after playing council_room was not correct. Expected 301, got 303
FAIL: Hand count after playing council_room was not correct. Expected 303, got 295
FAIL: Hand count after playing council_room was not correct. Expected 303, got 147
FAIL: Hand count after playing council_room was not correct. Expected 303, got 329
FAIL: Hand count after playing council_room was not correct. Expected 382, got 384
FAIL: Hand count after playing council_room was not correct. Expected 384, got 100
FAIL: Hand count after playing council_room was not correct. Expected 384, got 408
FAIL: Hand count after playing council_room was not correct. Expected 384, got 239
FAIL: Hand count after playing council_room was not correct. Expected 231, got 233
FAIL: Hand count after playing council_room was not correct. Expected 233, got 477
FAIL: Hand count after playing council_room was not correct. Expected 233, got 301
FAIL: Hand count after playing council_room was not correct. Expected 233, got 42
FAIL: Hand count after playing council_room was not correct. Expected 22, got 24
FAIL: Hand count after playing council_room was not correct. Expected 24, got 497
FAIL: Hand count after playing council_room was not correct. Expected 24, got 249
FAIL: Hand count after playing council_room was not correct. Expected 24, got 440
FAIL: Hand count after playing council_room was not correct. Expected 7, got 9
FAIL: Hand count after playing council_room was not correct. Expected 9, got 153
FAIL: Hand count after playing council_room was not correct. Expected 9, got 341
FAIL: Hand count after playing council_room was not correct. Expected 9, got 239
FAIL: Hand count after playing council_room was not correct. Expected 114, got 116
FAIL: Hand count after playing council_room was not correct. Expected 116, got 87
FAIL: Hand count after playing council_room was not correct. Expected 116, got 75
FAIL: Hand count after playing council_room was not correct. Expected 116, got 385
FAIL: Hand count after playing council_room was not correct. Expected 88, got 90
FAIL: Hand count after playing council_room was not correct. Expected 90, got 250
FAIL: Hand count after playing council_room was not correct. Expected 90, got 469
FAIL: Hand count after playing council_room was not correct. Expected 90, got 337
FAIL: Hand count after playing council_room was not correct. Expected 36, got 38
FAIL: Hand count after playing council_room was not correct. Expected 38, got 293
FAIL: Hand count after playing council_room was not correct. Expected 38, got 110
FAIL: Hand count after playing council_room was not correct. Expected 38, got 11
FAIL: Hand count after playing council_room was not correct. Expected 388, got 390
FAIL: Hand count after playing council_room was not correct. Expected 390, got 370
FAIL: Hand count after playing council_room was not correct. Expected 390, got 488
FAIL: Hand count after playing council_room was not correct. Expected 390, got 26
FAIL: Hand count after playing council_room was not correct. Expected 443, got 445
FAIL: Hand count after playing council_room was not correct. Expected 445, got 336
FAIL: Hand count after playing council_room was not correct. Expected 445, got 479
FAIL: Hand count after playing council_room was not correct. Expected 445, got 238
FAIL: Hand count after playing council_room was not correct. Expected 432, got 434
FAIL: Hand count after playing council_room was not correct. Expected 434, got 239
FAIL: Hand count after playing council_room was not correct. Expected 434, got 218
FAIL: Hand count after playing council_room was not correct. Expected 434, got 273
FAIL: Hand count after playing council_room was not correct. Expected 296, got 298
FAIL: Hand count after playing council_room was not correct. Expected 298, got 80
FAIL: Hand count after playing council_room was not correct. Expected 298, got 170
FAIL: Hand count after playing council_room was not correct. Expected 298, got 284
FAIL: Hand count after playing council_room was not correct. Expected 107, got 109
FAIL: Hand count after playing council_room was not correct. Expected 109, got 54
FAIL: Hand count after playing council_room was not correct. Expected 109, got 164
FAIL: Hand count after playing council_room was not correct. Expected 109, got 87
FAIL: Hand count after playing council_room was not correct. Expected 449, got 451
FAIL: Hand count after playing council_room was not correct. Expected 451, got 70
FAIL: Hand count after playing council_room was not correct. Expected 451, got 103
FAIL: Hand count after playing council_room was not correct. Expected 451, got 436
FAIL: Hand count after playing council_room was not correct. Expected 66, got 68
FAIL: Hand count after playing council_room was not correct. Expected 68, got 371
FAIL: Hand count after playing council_room was not correct. Expected 68, got 233
FAIL: Hand count after playing council_room was not correct. Expected 68, got 148
FAIL: Hand count after playing council_room was not correct. Expected 157, got 159
FAIL: Hand count after playing council_room was not correct. Expected 159, got 320
FAIL: Hand count after playing council_room was not correct. Expected 159, got 132
FAIL: Hand count after playing council_room was not correct. Expected 159, got 276
FAIL: Hand count after playing council_room was not correct. Expected 285, got 287
FAIL: Hand count after playing council_room was not correct. Expected 287, got 395
FAIL: Hand count after playing council_room was not correct. Expected 287, got 211
FAIL: Hand count after playing council_room was not correct. Expected 287, got 266
FAIL: Hand count after playing council_room was not correct. Expected 25, got 27
FAIL: Hand count after playing council_room was not correct. Expected 27, got 463
FAIL: Hand count after playing council_room was not correct. Expected 27, got 296
FAIL: Hand count after playing council_room was not correct. Expected 27, got 293
FAIL: Hand count after playing council_room was not correct. Expected 351, got 353
FAIL: Hand count after playing council_room was not correct. Expected 353, got 71
FAIL: Hand count after playing council_room was not correct. Expected 353, got 290
FAIL: Hand count after playing council_room was not correct. Expected 353, got 165
FAIL: Hand count after playing council_room was not correct. Expected 100, got 102
FAIL: Hand count after playing council_room was not correct. Expected 102, got 50
FAIL: Hand count after playing council_room was not correct. Expected 102, got 16
FAIL: Hand count after playing council_room was not correct. Expected 102, got 275
FAIL: Hand count after playing council_room was not correct. Expected 272, got 274
FAIL: Hand count after playing council_room was not correct. Expected 274, got 72
FAIL: Hand count after playing council_room was not correct. Expected 274, got 354
FAIL: Hand count after playing council_room was not correct. Expected 274, got 408
FAIL: Hand count after playing council_room was not correct. Expected 241, got 243
FAIL: Hand count after playing council_room was not correct. Expected 243, got 255
FAIL: Hand count after playing council_room was not correct. Expected 243, got 199
FAIL: Hand count after playing council_room was not correct. Expected 243, got 225
FAIL: Hand count after playing council_room was not correct. Expected 279, got 281
FAIL: Hand count after playing council_room was not correct. Expected 281, got 403
FAIL: Hand count after playing council_room was not correct. Expected 281, got 408
FAIL: Hand count after playing council_room was not correct. Expected 281, got 201
FAIL: Hand count after playing council_room was not correct. Expected 311, got 313
FAIL: Hand count after playing council_room was not correct. Expected 313, got 457
FAIL: Hand count after playing council_room was not correct. Expected 313, got 247
FAIL: Hand count after playing council_room was not correct. Expected 313, got 339
FAIL: Hand count after playing council_room was not correct. Expected 350, got 352
FAIL: Hand count after playing council_room was not correct. Expected 352, got 257
FAIL: Hand count after playing council_room was not correct. Expected 352, got 387
FAIL: Hand count after playing council_room was not correct. Expected 352, got 345
FAIL: Hand count after playing council_room was not correct. Expected 85, got 87
FAIL: Hand count after playing council_room was not correct. Expected 87, got 22
FAIL: Hand count after playing council_room was not correct. Expected 87, got 82
FAIL: Hand count after playing council_room was not correct. Expected 87, got 306
FAIL: Hand count after playing council_room was not correct. Expected 312, got 314
FAIL: Hand count after playing council_room was not correct. Expected 314, got 484
FAIL: Hand count after playing council_room was not correct. Expected 314, got 93
FAIL: Hand count after playing council_room was not correct. Expected 314, got 300
FAIL: Hand count after playing council_room was not correct. Expected 199, got 201
FAIL: Hand count after playing council_room was not correct. Expected 201, got 342
FAIL: Hand count after playing council_room was not correct. Expected 201, got 252
FAIL: Hand count after playing council_room was not correct. Expected 201, got 242
FAIL: Hand count after playing council_room was not correct. Expected 425, got 427
FAIL: Hand count after playing council_room was not correct. Expected 427, got 328
FAIL: Hand count after playing council_room was not correct. Expected 427, got 64
FAIL: Hand count after playing council_room was not correct. Expected 427, got 352
FAIL: Hand count after playing council_room was not correct. Expected 498, got 500
FAIL: Hand count after playing council_room was not correct. Expected 500, got 84
FAIL: Hand count after playing council_room was not correct. Expected 500, got 263
FAIL: Hand count after playing council_room was not correct. Expected 500, got 16
FAIL: Hand count after playing council_room was not correct. Expected 40, got 42
FAIL: Hand count after playing council_room was not correct. Expected 42, got 125
FAIL: Hand count after playing council_room was not correct. Expected 42, got 389
FAIL: Hand count after playing council_room was not correct. Expected 42, got 209
FAIL: Hand count after playing council_room was not correct. Expected 253, got 255
FAIL: Hand count after playing council_room was not correct. Expected 255, got 302
FAIL: Hand count after playing council_room was not correct. Expected 255, got 37
FAIL: Hand count after playing council_room was not correct. Expected 255, got 476
FAIL: Hand count after playing council_room was not correct. Expected 253, got 255
FAIL: Hand count after playing council_room was not correct. Expected 255, got 97
FAIL: Hand count after playing council_room was not correct. Expected 255, got 118
FAIL: Hand count after playing council_room was not correct. Expected 255, got 279
FAIL: Hand count after playing council_room was not correct. Expected 11, got 13
FAIL: Hand count after playing council_room was not correct. Expected 13, got 481
FAIL: Hand count after playing council_room was not correct. Expected 13, got 360
FAIL: Hand count after playing council_room was not correct. Expected 13, got 278
FAIL: Hand count after playing council_room was not correct. Expected 420, got 422
FAIL: Hand count after playing council_room was not correct. Expected 422, got 483
FAIL: Hand count after playing council_room was not correct. Expected 422, got 267
FAIL: Hand count after playing council_room was not correct. Expected 422, got 454
FAIL: Hand count after playing council_room was not correct. Expected 34, got 36
FAIL: Hand count after playing council_room was not correct. Expected 36, got 464
FAIL: Hand count after playing council_room was not correct. Expected 36, got 316
FAIL: Hand count after playing council_room was not correct. Expected 36, got 31
FAIL: Hand count after playing council_room was not correct. Expected 334, got 336
FAIL: Hand count after playing council_room was not correct. Expected 336, got 315
FAIL: Hand count after playing council_room was not correct. Expected 336, got 67
FAIL: Hand count after playing council_room was not correct. Expected 336, got 430
FAIL: Hand count after playing council_room was not correct. Expected 36, got 38
FAIL: Hand count after playing council_room was not correct. Expected 38, got 65
FAIL: Hand count after playing council_room was not correct. Expected 38, got 156
FAIL: Hand count after playing council_room was not correct. Expected 38, got 338
FAIL: Hand count after playing council_room was not correct. Expected 285, got 287
FAIL: Hand count after playing council_room was not correct. Expected 287, got 29
FAIL: Hand count after playing council_room was not correct. Expected 287, got 5
FAIL: Hand count after playing council_room was not correct. Expected 287, got 321
FAIL: Hand count after playing council_room was not correct. Expected 438, got 440
FAIL: Hand count after playing council_room was not correct. Expected 440, got 259
FAIL: Hand count after playing council_room was not correct. Expected 440, got 204
FAIL: Hand count after playing council_room was not correct. Expected 440, got 292
FAIL: Hand count after playing council_room was not correct. Expected 257, got 259
FAIL: Hand count after playing council_room was not correct. Expected 259, got 389
FAIL: Hand count after playing council_room was not correct. Expected 259, got 412
FAIL: Hand count after playing council_room was not correct. Expected 259, got 32
FAIL: Hand count after playing council_room was not correct. Expected 72, got 74
FAIL: Hand count after playing council_room was not correct. Expected 74, got 315
FAIL: Hand count after playing council_room was not correct. Expected 74, got 142
FAIL: Hand count after playing council_room was not correct. Expected 74, got 205
FAIL: Hand count after playing council_room was not correct. Expected 187, got 189
FAIL: Hand count after playing council_room was not correct. Expected 189, got 376
FAIL: Hand count after playing council_room was not correct. Expected 189, got 34
FAIL: Hand count after playing council_room was not correct. Expected 189, got 445
FAIL: Hand count after playing council_room was not correct. Expected 406, got 408
FAIL: Hand count after playing council_room was not correct. Expected 408, got 196
FAIL: Hand count after playing council_room was not correct. Expected 408, got 35
FAIL: Hand count after playing council_room was not correct. Expected 408, got 414
FAIL: Hand count after playing council_room was not correct. Expected 405, got 407
FAIL: Hand count after playing council_room was not correct. Expected 407, got 298
FAIL: Hand count after playing council_room was not correct. Expected 407, got 438
FAIL: Hand count after playing council_room was not correct. Expected 407, got 368
FAIL: Hand count after playing council_room was not correct. Expected 169, got 171
FAIL: Hand count after playing council_room was not correct. Expected 171, got 376
FAIL: Hand count after playing council_room was not correct. Expected 171, got 396
FAIL: Hand count after playing council_room was not correct. Expected 171, got 106
FAIL: Hand count after playing council_room was not correct. Expected 35, got 37
FAIL: Hand count after playing council_room was not correct. Expected 37, got 82
FAIL: Hand count after playing council_room was not correct. Expected 37, got 356
FAIL: Hand count after playing council_room was not correct. Expected 37, got 78
FAIL: Hand count after playing council_room was not correct. Expected 166, got 168
FAIL: Hand count after playing council_room was not correct. Expected 168, got 310
FAIL: Hand count after playing council_room was not correct. Expected 168, got 255
FAIL: Hand count after playing council_room was not correct. Expected 168, got 62
FAIL: Hand count after playing council_room was not correct. Expected 175, got 177
FAIL: Hand count after playing council_room was not correct. Expected 177, got 460
FAIL: Hand count after playing council_room was not correct. Expected 177, got 10
FAIL: Hand count after playing council_room was not correct. Expected 177, got 407
FAIL: Hand count after playing council_room was not correct. Expected 115, got 117
FAIL: Hand count after playing council_room was not correct. Expected 117, got 208
FAIL: Hand count after playing council_room was not correct. Expected 117, got 82
FAIL: Hand count after playing council_room was not correct. Expected 117, got 468
FAIL: Hand count after playing council_room was not correct. Expected 346, got 348
FAIL: Hand count after playing council_room was not correct. Expected 348, got 96
FAIL: Hand count after playing council_room was not correct. Expected 348, got 64
FAIL: Hand count after playing council_room was not correct. Expected 348, got 291
FAIL: Hand count after playing council_room was not correct. Expected 18, got 20
FAIL: Hand count after playing council_room was not correct. Expected 20, got 201
FAIL: Hand count after playing council_room was not correct. Expected 20, got 15
FAIL: Hand count after playing council_room was not correct. Expected 20, got 317
FAIL: Hand count after playing council_room was not correct. Expected 91, got 93
FAIL: Hand count after playing council_room was not correct. Expected 93, got 257
FAIL: Hand count after playing council_room was not correct. Expected 93, got 130
FAIL: Hand count after playing council_room was not correct. Expected 93, got 181
FAIL: Hand count after playing council_room was not correct. Expected 420, got 422
FAIL: Hand count after playing council_room was not correct. Expected 422, got 366
FAIL: Hand count after playing council_room was not correct. Expected 422, got 456
FAIL: Hand count after playing council_room was not correct. Expected 422, got 296
FAIL: Hand count after playing council_room was not correct. Expected 23, got 25
FAIL: Hand count after playing council_room was not correct. Expected 25, got 392
FAIL: Hand count after playing council_room was not correct. Expected 25, got 500
FAIL: Hand count after playing council_room was not correct. Expected 25, got 258
FAIL: Hand count after playing council_room was not correct. Expected 398, got 400
FAIL: Hand count after playing council_room was not correct. Expected 400, got 93
FAIL: Hand count after playing council_room was not correct. Expected 400, got 136
FAIL: Hand count after playing council_room was not correct. Expected 400, got 4
FAIL: Hand count after playing council_room was not correct. Expected 305, got 307
FAIL: Hand count after playing council_room was not correct. Expected 307, got 283
FAIL: Hand count after playing council_room was not correct. Expected 307, got 341
FAIL: Hand count after playing council_room was not correct. Expected 307, got 349
FAIL: Hand count after playing council_room was not correct. Expected 200, got 202
FAIL: Hand count after playing council_room was not correct. Expected 202, got 405
FAIL: Hand count after playing council_room was not correct. Expected 202, got 125
FAIL: Hand count after playing council_room was not correct. Expected 202, got 133
FAIL: Hand count after playing council_room was not correct. Expected 170, got 172
FAIL: Hand count after playing council_room was not correct. Expected 172, got 307
FAIL: Hand count after playing council_room was not correct. Expected 172, got 89
FAIL: Hand count after playing council_room was not correct. Expected 172, got 423
FAIL: Hand count after playing council_room was not correct. Expected 371, got 373
FAIL: Hand count after playing council_room was not correct. Expected 373, got 229
FAIL: Hand count after playing council_room was not correct. Expected 373, got 194
FAIL: Hand count after playing council_room was not correct. Expected 373, got 18
FAIL: Hand count after playing council_room was not correct. Expected 301, got 303
FAIL: Hand count after playing council_room was not correct. Expected 303, got 41
FAIL: Hand count after playing council_room was not correct. Expected 303, got 393
FAIL: Hand count after playing council_room was not correct. Expected 303, got 279
FAIL: Hand count after playing council_room was not correct. Expected 11, got 13
FAIL: Hand count after playing council_room was not correct. Expected 13, got 433
FAIL: Hand count after playing council_room was not correct. Expected 13, got 94
FAIL: Hand count after playing council_room was not correct. Expected 13, got 406
FAIL: Hand count after playing council_room was not correct. Expected 43, got 45
FAIL: Hand count after playing council_room was not correct. Expected 45, got 123
FAIL: Hand count after playing council_room was not correct. Expected 45, got 298
FAIL: Hand count after playing council_room was not correct. Expected 45, got 195
FAIL: Hand count after playing council_room was not correct. Expected 57, got 59
FAIL: Hand count after playing council_room was not correct. Expected 59, got 285
FAIL: Hand count after playing council_room was not correct. Expected 59, got 483
FAIL: Hand count after playing council_room was not correct. Expected 59, got 499
FAIL: Hand count after playing council_room was not correct. Expected 291, got 293
FAIL: Hand count after playing council_room was not correct. Expected 293, got 212
FAIL: Hand count after playing council_room was not correct. Expected 293, got 457
FAIL: Hand count after playing council_room was not correct. Expected 293, got 116
FAIL: Hand count after playing council_room was not correct. Expected 28, got 30
FAIL: Hand count after playing council_room was not correct. Expected 30, got 218
FAIL: Hand count after playing council_room was not correct. Expected 30, got 105
FAIL: Hand count after playing council_room was not correct. Expected 30, got 385
FAIL: Hand count after playing council_room was not correct. Expected 171, got 173
FAIL: Hand count after playing council_room was not correct. Expected 173, got 205
FAIL: Hand count after playing council_room was not correct. Expected 173, got 14
FAIL: Hand count after playing council_room was not correct. Expected 173, got 249
FAIL: Hand count after playing council_room was not correct. Expected 259, got 261
FAIL: Hand count after playing council_room was not correct. Expected 261, got 82
FAIL: Hand count after playing council_room was not correct. Expected 261, got 229
FAIL: Hand count after playing council_room was not correct. Expected 261, got 106
FAIL: Hand count after playing council_room was not correct. Expected 410, got 412
FAIL: Hand count after playing council_room was not correct. Expected 412, got 79
FAIL: Hand count after playing council_room was not correct. Expected 412, got 361
FAIL: Hand count after playing council_room was not correct. Expected 412, got 140
FAIL: Hand count after playing council_room was not correct. Expected 367, got 369
FAIL: Hand count after playing council_room was not correct. Expected 369, got 448
FAIL: Hand count after playing council_room was not correct. Expected 369, got 474
FAIL: Hand count after playing council_room was not correct. Expected 369, got 295
FAIL: Hand count after playing council_room was not correct. Expected 284, got 286
FAIL: Hand count after playing council_room was not correct. Expected 286, got 36
FAIL: Hand count after playing council_room was not correct. Expected 286, got 476
FAIL: Hand count after playing council_room was not correct. Expected 286, got 375
FAIL: Hand count after playing council_room was not correct. Expected 30, got 32
FAIL: Hand count after playing council_room was not correct. Expected 32, got 52
FAIL: Hand count after playing council_room was not correct. Expected 32, got 291
FAIL: Hand count after playing council_room was not correct. Expected 32, got 494
FAIL: Hand count after playing council_room was not correct. Expected 208, got 210
FAIL: Hand count after playing council_room was not correct. Expected 210, got 112
FAIL: Hand count after playing council_room was not correct. Expected 210, got 48
FAIL: Hand count after playing council_room was not correct. Expected 210, got 488
FAIL: Hand count after playing council_room was not correct. Expected 436, got 438
FAIL: Hand count after playing council_room was not correct. Expected 438, got 82
FAIL: Hand count after playing council_room was not correct. Expected 438, got 238
FAIL: Hand count after playing council_room was not correct. Expected 438, got 476
FAIL: Hand count after playing council_room was not correct. Expected 159, got 161
FAIL: Hand count after playing council_room was not correct. Expected 161, got 109
FAIL: Hand count after playing council_room was not correct. Expected 161, got 496
FAIL: Hand count after playing council_room was not correct. Expected 161, got 79
FAIL: Hand count after playing council_room was not correct. Expected 13, got 15
FAIL: Hand count after playing council_room was not correct. Expected 15, got 126
FAIL: Hand count after playing council_room was not correct. Expected 15, got 116
FAIL: Hand count after playing council_room was not correct. Expected 15, got 475
FAIL: Hand count after playing council_room was not correct. Expected 225, got 227
FAIL: Hand count after playing council_room was not correct. Expected 227, got 79
FAIL: Hand count after playing council_room was not correct. Expected 227, got 446
FAIL: Hand count after playing council_room was not correct. Expected 227, got 137
FAIL: Hand count after playing council_room was not correct. Expected 144, got 146
FAIL: Hand count after playing council_room was not correct. Expected 146, got 298
FAIL: Hand count after playing council_room was not correct. Expected 146, got 152
FAIL: Hand count after playing council_room was not correct. Expected 146, got 158
FAIL: Hand count after playing council_room was not correct. Expected 278, got 280
FAIL: Hand count after playing council_room was not correct. Expected 280, got 80
FAIL: Hand count after playing council_room was not correct. Expected 280, got 419
FAIL: Hand count after playing council_room was not correct. Expected 280, got 239
FAIL: Hand count after playing council_room was not correct. Expected 481, got 483
FAIL: Hand count after playing council_room was not correct. Expected 483, got 380
FAIL: Hand count after playing council_room was not correct. Expected 483, got 491
FAIL: Hand count after playing council_room was not correct. Expected 483, got 86
FAIL: Hand count after playing council_room was not correct. Expected 400, got 402
FAIL: Hand count after playing council_room was not correct. Expected 402, got 486
FAIL: Hand count after playing council_room was not correct. Expected 402, got 491
FAIL: Hand count after playing council_room was not correct. Expected 402, got 494
FAIL: Hand count after playing council_room was not correct. Expected 166, got 168
FAIL: Hand count after playing council_room was not correct. Expected 168, got 241
FAIL: Hand count after playing council_room was not correct. Expected 168, got 444
FAIL: Hand count after playing council_room was not correct. Expected 168, got 186
FAIL: Hand count after playing council_room was not correct. Expected 266, got 268
FAIL: Hand count after playing council_room was not correct. Expected 268, got 340
FAIL: Hand count after playing council_room was not correct. Expected 268, got 295
FAIL: Hand count after playing council_room was not correct. Expected 268, got 159
FAIL: Hand count after playing council_room was not correct. Expected 16, got 18
FAIL: Hand count after playing council_room was not correct. Expected 18, got 101
FAIL: Hand count after playing council_room was not correct. Expected 18, got 212
FAIL: Hand count after playing council_room was not correct. Expected 18, got 348
FAIL: Hand count after playing council_room was not correct. Expected 144, got 146
FAIL: Hand count after playing council_room was not correct. Expected 146, got 217
FAIL: Hand count after playing council_room was not correct. Expected 146, got 246
FAIL: Hand count after playing council_room was not correct. Expected 146, got 387
FAIL: Hand count after playing council_room was not correct. Expected 190, got 192
FAIL: Hand count after playing council_room was not correct. Expected 192, got 157
FAIL: Hand count after playing council_room was not correct. Expected 192, got 392
FAIL: Hand count after playing council_room was not correct. Expected 192, got 62
FAIL: Hand count after playing council_room was not correct. Expected 213, got 215
FAIL: Hand count after playing council_room was not correct. Expected 215, got 244
FAIL: Hand count after playing council_room was not correct. Expected 215, got 316
FAIL: Hand count after playing council_room was not correct. Expected 215, got 23
FAIL: Hand count after playing council_room was not correct. Expected 415, got 417
FAIL: Hand count after playing council_room was not correct. Expected 417, got 8
FAIL: Hand count after playing council_room was not correct. Expected 417, got 71
FAIL: Hand count after playing council_room was not correct. Expected 417, got 384
FAIL: Hand count after playing council_room was not correct. Expected 129, got 131
FAIL: Hand count after playing council_room was not correct. Expected 131, got 23
FAIL: Hand count after playing council_room was not correct. Expected 131, got 331
FAIL: Hand count after playing council_room was not correct. Expected 131, got 193
FAIL: Hand count after playing council_room was not correct. Expected 220, got 222
FAIL: Hand count after playing council_room was not correct. Expected 222, got 172
FAIL: Hand count after playing council_room was not correct. Expected 222, got 472
FAIL: Hand count after playing council_room was not correct. Expected 222, got 211
FAIL: Hand count after playing council_room was not correct. Expected 375, got 377
FAIL: Hand count after playing council_room was not correct. Expected 377, got 169
FAIL: Hand count after playing council_room was not correct. Expected 377, got 391
FAIL: Hand count after playing council_room was not correct. Expected 377, got 65
FAIL: Hand count after playing council_room was not correct. Expected 256, got 258
FAIL: Hand count after playing council_room was not correct. Expected 258, got 210
FAIL: Hand count after playing council_room was not correct. Expected 258, got 84
FAIL: Hand count after playing council_room was not correct. Expected 258, got 98
FAIL: Hand count after playing council_room was not correct. Expected 167, got 169
FAIL: Hand count after playing council_room was not correct. Expected 169, got 200
FAIL: Hand count after playing council_room was not correct. Expected 169, got 282
FAIL: Hand count after playing council_room was not correct. Expected 169, got 165
FAIL: Hand count after playing council_room was not correct. Expected 454, got 456
FAIL: Hand count after playing council_room was not correct. Expected 456, got 182
FAIL: Hand count after playing council_room was not correct. Expected 456, got 151
FAIL: Hand count after playing council_room was not correct. Expected 456, got 12
FAIL: Hand count after playing council_room was not correct. Expected 157, got 159
FAIL: Hand count after playing council_room was not correct. Expected 159, got 150
FAIL: Hand count after playing council_room was not correct. Expected 159, got 329
FAIL: Hand count after playing council_room was not correct. Expected 159, got 7
FAIL: Hand count after playing council_room was not correct. Expected 414, got 416
FAIL: Hand count after playing council_room was not correct. Expected 416, got 49
FAIL: Hand count after playing council_room was not correct. Expected 416, got 348
FAIL: Hand count after playing council_room was not correct. Expected 416, got 371
FAIL: Hand count after playing council_room was not correct. Expected 415, got 417
FAIL: Hand count after playing council_room was not correct. Expected 417, got 245
FAIL: Hand count after playing council_room was not correct. Expected 417, got 428
FAIL: Hand count after playing council_room was not correct. Expected 417, got 166
FAIL: Hand count after playing council_room was not correct. Expected 449, got 451
FAIL: Hand count after playing council_room was not correct. Expected 451, got 261
FAIL: Hand count after playing council_room was not correct. Expected 451, got 17
FAIL: Hand count after playing council_room was not correct. Expected 451, got 3
FAIL: Hand count after playing council_room was not correct. Expected 24, got 26
FAIL: Hand count after playing council_room was not correct. Expected 26, got 49
FAIL: Hand count after playing council_room was not correct. Expected 26, got 75
FAIL: Hand count after playing council_room was not correct. Expected 26, got 11
FAIL: Hand count after playing council_room was not correct. Expected 495, got 497
FAIL: Hand count after playing council_room was not correct. Expected 497, got 497
FAIL: Hand count after playing council_room was not correct. Expected 497, got 339
FAIL: Hand count after playing council_room was not correct. Expected 497, got 263
FAIL: Hand count after playing council_room was not correct. Expected 111, got 113
FAIL: Hand count after playing council_room was not correct. Expected 113, got 402
FAIL: Hand count after playing council_room was not correct. Expected 113, got 120
FAIL: Hand count after playing council_room was not correct. Expected 113, got 497
FAIL: Hand count after playing council_room was not correct. Expected 258, got 260
FAIL: Hand count after playing council_room was not correct. Expected 260, got 255
FAIL: Hand count after playing council_room was not correct. Expected 260, got 444
FAIL: Hand count after playing council_room was not correct. Expected 260, got 284
FAIL: Hand count after playing council_room was not correct. Expected 91, got 93
FAIL: Hand count after playing council_room was not correct. Expected 93, got 413
FAIL: Hand count after playing council_room was not correct. Expected 93, got 372
FAIL: Hand count after playing council_room was not correct. Expected 93, got 75
FAIL: Hand count after playing council_room was not correct. Expected 346, got 348
FAIL: Hand count after playing council_room was not correct. Expected 348, got 126
FAIL: Hand count after playing council_room was not correct. Expected 348, got 100
FAIL: Hand count after playing council_room was not correct. Expected 348, got 104
FAIL: Hand count after playing council_room was not correct. Expected 382, got 384
FAIL: Hand count after playing council_room was not correct. Expected 384, got 247
FAIL: Hand count after playing council_room was not correct. Expected 384, got 479
FAIL: Hand count after playing council_room was not correct. Expected 384, got 473
FAIL: Hand count after playing council_room was not correct. Expected 477, got 479
FAIL: Hand count after playing council_room was not correct. Expected 479, got 178
FAIL: Hand count after playing council_room was not correct. Expected 479, got 434
FAIL: Hand count after playing council_room was not correct. Expected 479, got 410
FAIL: Hand count after playing council_room was not correct. Expected 431, got 433
FAIL: Hand count after playing council_room was not correct. Expected 433, got 370
FAIL: Hand count after playing council_room was not correct. Expected 433, got 84
FAIL: Hand count after playing council_room was not correct. Expected 433, got 208
FAIL: Hand count after playing council_room was not correct. Expected 222, got 224
FAIL: Hand count after playing council_room was not correct. Expected 224, got 280
FAIL: Hand count after playing council_room was not correct. Expected 224, got 79
FAIL: Hand count after playing council_room was not correct. Expected 224, got 400
FAIL: Hand count after playing council_room was not correct. Expected 387, got 389
FAIL: Hand count after playing council_room was not correct. Expected 389, got 187
FAIL: Hand count after playing council_room was not correct. Expected 389, got 141
FAIL: Hand count after playing council_room was not correct. Expected 389, got 460
FAIL: Hand count after playing council_room was not correct. Expected 417, got 419
FAIL: Hand count after playing council_room was not correct. Expected 419, got 14
FAIL: Hand count after playing council_room was not correct. Expected 419, got 466
FAIL: Hand count after playing council_room was not correct. Expected 419, got 243
FAIL: Hand count after playing council_room was not correct. Expected 11, got 13
FAIL: Hand count after playing council_room was not correct. Expected 13, got 43
FAIL: Hand count after playing council_room was not correct. Expected 13, got 144
FAIL: Hand count after playing council_room was not correct. Expected 13, got 162
FAIL: Hand count after playing council_room was not correct. Expected 124, got 126
FAIL: Hand count after playing council_room was not correct. Expected 126, got 115
FAIL: Hand count after playing council_room was not correct. Expected 126, got 193
FAIL: Hand count after playing council_room was not correct. Expected 126, got 226
FAIL: Hand count after playing council_room was not correct. Expected 359, got 361
FAIL: Hand count after playing council_room was not correct. Expected 361, got 167
FAIL: Hand count after playing council_room was not correct. Expected 361, got 274
FAIL: Hand count after playing council_room was not correct. Expected 361, got 224
FAIL: Hand count after playing council_room was not correct. Expected 352, got 354
FAIL: Hand count after playing council_room was not correct. Expected 354, got 384
FAIL: Hand count after playing council_room was not correct. Expected 354, got 172
FAIL: Hand count after playing council_room was not correct. Expected 354, got 42
FAIL: Hand count after playing council_room was not correct. Expected 455, got 457
FAIL: Hand count after playing council_room was not correct. Expected 457, got 21
FAIL: Hand count after playing council_room was not correct. Expected 457, got 391
FAIL: Hand count after playing council_room was not correct. Expected 457, got 272
FAIL: Hand count after playing council_room was not correct. Expected 369, got 371
FAIL: Hand count after playing council_room was not correct. Expected 371, got 25
FAIL: Hand count after playing council_room was not correct. Expected 371, got 25
FAIL: Hand count after playing council_room was not correct. Expected 371, got 418
FAIL: Hand count after playing council_room was not correct. Expected 46, got 48
FAIL: Hand count after playing council_room was not correct. Expected 48, got 217
FAIL: Hand count after playing council_room was not correct. Expected 48, got 430
FAIL: Hand count after playing council_room was not correct. Expected 48, got 188
FAIL: Hand count after playing council_room was not correct. Expected 179, got 181
FAIL: Hand count after playing council_room was not correct. Expected 181, got 278
FAIL: Hand count after playing council_room was not correct. Expected 181, got 63
FAIL: Hand count after playing council_room was not correct. Expected 181, got 483
FAIL: Hand count after playing council_room was not correct. Expected 299, got 301
FAIL: Hand count after playing council_room was not correct. Expected 301, got 384
FAIL: Hand count after playing council_room was not correct. Expected 301, got 442
FAIL: Hand count after playing council_room was not correct. Expected 301, got 375
FAIL: Hand count after playing council_room was not correct. Expected 235, got 237
FAIL: Hand count after playing council_room was not correct. Expected 237, got 75
FAIL: Hand count after playing council_room was not correct. Expected 237, got 216
FAIL: Hand count after playing council_room was not correct. Expected 237, got 181
FAIL: Hand count after playing council_room was not correct. Expected 237, got 239
FAIL: Hand count after playing council_room was not correct. Expected 239, got 298
FAIL: Hand count after playing council_room was not correct. Expected 239, got 308
FAIL: Hand count after playing council_room was not correct. Expected 239, got 16
FAIL: Hand count after playing council_room was not correct. Expected 47, got 49
FAIL: Hand count after playing council_room was not correct. Expected 49, got 346
FAIL: Hand count after playing council_room was not correct. Expected 49, got 461
FAIL: Hand count after playing council_room was not correct. Expected 49, got 142
FAIL: Hand count after playing council_room was not correct. Expected 482, got 484
FAIL: Hand count after playing council_room was not correct. Expected 484, got 132
FAIL: Hand count after playing council_room was not correct. Expected 484, got 209
FAIL: Hand count after playing council_room was not correct. Expected 484, got 345
FAIL: Hand count after playing council_room was not correct. Expected 336, got 338
FAIL: Hand count after playing council_room was not correct. Expected 338, got 115
FAIL: Hand count after playing council_room was not correct. Expected 338, got 384
FAIL: Hand count after playing council_room was not correct. Expected 338, got 228
FAIL: Hand count after playing council_room was not correct. Expected 442, got 444
FAIL: Hand count after playing council_room was not correct. Expected 444, got 415
FAIL: Hand count after playing council_room was not correct. Expected 444, got 136
FAIL: Hand count after playing council_room was not correct. Expected 444, got 466
FAIL: Hand count after playing council_room was not correct. Expected 12, got 14
FAIL: Hand count after playing council_room was not correct. Expected 14, got 395
FAIL: Hand count after playing council_room was not correct. Expected 14, got 50
FAIL: Hand count after playing council_room was not correct. Expected 14, got 452
FAIL: Hand count after playing council_room was not correct. Expected 45, got 47
FAIL: Hand count after playing council_room was not correct. Expected 47, got 250
FAIL: Hand count after playing council_room was not correct. Expected 47, got 6
FAIL: Hand count after playing council_room was not correct. Expected 47, got 50
FAIL: Hand count after playing council_room was not correct. Expected 477, got 479
FAIL: Hand count after playing council_room was not correct. Expected 479, got 433
FAIL: Hand count after playing council_room was not correct. Expected 479, got 363
FAIL: Hand count after playing council_room was not correct. Expected 479, got 440
FAIL: Hand count after playing council_room was not correct. Expected 53, got 55
FAIL: Hand count after playing council_room was not correct. Expected 55, got 314
FAIL: Hand count after playing council_room was not correct. Expected 55, got 55
FAIL: Hand count after playing council_room was not correct. Expected 55, got 227
FAIL: Hand count after playing council_room was not correct. Expected 329, got 331
FAIL: Hand count after playing council_room was not correct. Expected 331, got 283
FAIL: Hand count after playing council_room was not correct. Expected 331, got 129
FAIL: Hand count after playing council_room was not correct. Expected 331, got 85
FAIL: Hand count after playing council_room was not correct. Expected 246, got 248
FAIL: Hand count after playing council_room was not correct. Expected 248, got 100
FAIL: Hand count after playing council_room was not correct. Expected 248, got 366
FAIL: Hand count after playing council_room was not correct. Expected 248, got 282
FAIL: Hand count after playing council_room was not correct. Expected 392, got 394
FAIL: Hand count after playing council_room was not correct. Expected 394, got 466
FAIL: Hand count after playing council_room was not correct. Expected 394, got 57
FAIL: Hand count after playing council_room was not correct. Expected 394, got 101
FAIL: Hand count after playing council_room was not correct. Expected 371, got 373
FAIL: Hand count after playing council_room was not correct. Expected 373, got 140
FAIL: Hand count after playing council_room was not correct. Expected 373, got 221
FAIL: Hand count after playing council_room was not correct. Expected 373, got 406
FAIL: Hand count after playing council_room was not correct. Expected 478, got 480
FAIL: Hand count after playing council_room was not correct. Expected 480, got 50
FAIL: Hand count after playing council_room was not correct. Expected 480, got 314
FAIL: Hand count after playing council_room was not correct. Expected 480, got 440
FAIL: Hand count after playing council_room was not correct. Expected 62, got 64
FAIL: Hand count after playing council_room was not correct. Expected 64, got 400
FAIL: Hand count after playing council_room was not correct. Expected 64, got 137
FAIL: Hand count after playing council_room was not correct. Expected 64, got 165
FAIL: Hand count after playing council_room was not correct. Expected 185, got 187
FAIL: Hand count after playing council_room was not correct. Expected 187, got 279
FAIL: Hand count after playing council_room was not correct. Expected 187, got 232
FAIL: Hand count after playing council_room was not correct. Expected 187, got 46
FAIL: Hand count after playing council_room was not correct. Expected 465, got 467
FAIL: Hand count after playing council_room was not correct. Expected 467, got 484
FAIL: Hand count after playing council_room was not correct. Expected 467, got 156
FAIL: Hand count after playing council_room was not correct. Expected 467, got 441
FAIL: Hand count after playing council_room was not correct. Expected 295, got 297
FAIL: Hand count after playing council_room was not correct. Expected 297, got 40
FAIL: Hand count after playing council_room was not correct. Expected 297, got 193
FAIL: Hand count after playing council_room was not correct. Expected 297, got 329
FAIL: Hand count after playing council_room was not correct. Expected 105, got 107
FAIL: Hand count after playing council_room was not correct. Expected 107, got 145
FAIL: Hand count after playing council_room was not correct. Expected 107, got 131
FAIL: Hand count after playing council_room was not correct. Expected 107, got 7
FAIL: Hand count after playing council_room was not correct. Expected 452, got 454
FAIL: Hand count after playing council_room was not correct. Expected 454, got 17
FAIL: Hand count after playing council_room was not correct. Expected 454, got 26
FAIL: Hand count after playing council_room was not correct. Expected 454, got 419
FAIL: Hand count after playing council_room was not correct. Expected 397, got 399
FAIL: Hand count after playing council_room was not correct. Expected 399, got 43
FAIL: Hand count after playing council_room was not correct. Expected 399, got 487
FAIL: Hand count after playing council_room was not correct. Expected 399, got 353
FAIL: Hand count after playing council_room was not correct. Expected 256, got 258
FAIL: Hand count after playing council_room was not correct. Expected 258, got 237
FAIL: Hand count after playing council_room was not correct. Expected 258, got 7
FAIL: Hand count after playing council_room was not correct. Expected 258, got 355
FAIL: Hand count after playing council_room was not correct. Expected 135, got 137
FAIL: Hand count after playing council_room was not correct. Expected 137, got 303
FAIL: Hand count after playing council_room was not correct. Expected 137, got 96
FAIL: Hand count after playing council_room was not correct. Expected 137, got 174
FAIL: Hand count after playing council_room was not correct. Expected 422, got 424
FAIL: Hand count after playing council_room was not correct. Expected 424, got 55
FAIL: Hand count after playing council_room was not correct. Expected 424, got 375
FAIL: Hand count after playing council_room was not correct. Expected 424, got 113
FAIL: Hand count after playing council_room was not correct. Expected 330, got 332
FAIL: Hand count after playing council_room was not correct. Expected 332, got 134
FAIL: Hand count after playing council_room was not correct. Expected 332, got 276
FAIL: Hand count after playing council_room was not correct. Expected 332, got 30
FAIL: Hand count after playing council_room was not correct. Expected 432, got 434
FAIL: Hand count after playing council_room was not correct. Expected 434, got 122
FAIL: Hand count after playing council_room was not correct. Expected 434, got 192
FAIL: Hand count after playing council_room was not correct. Expected 434, got 257
FAIL: Hand count after playing council_room was not correct. Expected 464, got 466
FAIL: Hand count after playing council_room was not correct. Expected 466, got 197
FAIL: Hand count after playing council_room was not correct. Expected 466, got 153
FAIL: Hand count after playing council_room was not correct. Expected 466, got 314
FAIL: Hand count after playing council_room was not correct. Expected 344, got 346
FAIL: Hand count after playing council_room was not correct. Expected 346, got 299
FAIL: Hand count after playing council_room was not correct. Expected 346, got 402
FAIL: Hand count after playing council_room was not correct. Expected 346, got 286
FAIL: Hand count after playing council_room was not correct. Expected 491, got 493
FAIL: Hand count after playing council_room was not correct. Expected 493, got 188
FAIL: Hand count after playing council_room was not correct. Expected 493, got 235
FAIL: Hand count after playing council_room was not correct. Expected 493, got 454
FAIL: Hand count after playing council_room was not correct. Expected 40, got 42
FAIL: Hand count after playing council_room was not correct. Expected 42, got 1
FAIL: Hand count after playing council_room was not correct. Expected 42, got 178
FAIL: Hand count after playing council_room was not correct. Expected 42, got 19
FAIL: Hand count after playing council_room was not correct. Expected 249, got 251
FAIL: Hand count after playing council_room was not correct. Expected 251, got 82
FAIL: Hand count after playing council_room was not correct. Expected 251, got 145
FAIL: Hand count after playing council_room was not correct. Expected 251, got 326
FAIL: Hand count after playing council_room was not correct. Expected 49, got 51
FAIL: Hand count after playing council_room was not correct. Expected 51, got 456
FAIL: Hand count after playing council_room was not correct. Expected 51, got 309
FAIL: Hand count after playing council_room was not correct. Expected 51, got 481
FAIL: Hand count after playing council_room was not correct. Expected 494, got 496
FAIL: Hand count after playing council_room was not correct. Expected 496, got 252
FAIL: Hand count after playing council_room was not correct. Expected 496, got 93
FAIL: Hand count after playing council_room was not correct. Expected 496, got 40
FAIL: Hand count after playing council_room was not correct. Expected 60, got 62
FAIL: Hand count after playing council_room was not correct. Expected 62, got 154
FAIL: Hand count after playing council_room was not correct. Expected 62, got 31
FAIL: Hand count after playing council_room was not correct. Expected 62, got 439
FAIL: Hand count after playing council_room was not correct. Expected 381, got 383
FAIL: Hand count after playing council_room was not correct. Expected 383, got 246
FAIL: Hand count after playing council_room was not correct. Expected 383, got 76
FAIL: Hand count after playing council_room was not correct. Expected 383, got 368
FAIL: Hand count after playing council_room was not correct. Expected 230, got 232
FAIL: Hand count after playing council_room was not correct. Expected 232, got 17
FAIL: Hand count after playing council_room was not correct. Expected 232, got 422
FAIL: Hand count after playing council_room was not correct. Expected 232, got 470
FAIL: Hand count after playing council_room was not correct. Expected 229, got 231
FAIL: Hand count after playing council_room was not correct. Expected 231, got 34
FAIL: Hand count after playing council_room was not correct. Expected 231, got 261
FAIL: Hand count after playing council_room was not correct. Expected 231, got 357
FAIL: Hand count after playing council_room was not correct. Expected 6, got 8
FAIL: Hand count after playing council_room was not correct. Expected 8, got 475
FAIL: Hand count after playing council_room was not correct. Expected 8, got 77
FAIL: Hand count after playing council_room was not correct. Expected 8, got 482
FAIL: Hand count after playing council_room was not correct. Expected 486, got 488
FAIL: Hand count after playing council_room was not correct. Expected 488, got 322
FAIL: Hand count after playing council_room was not correct. Expected 488, got 286
FAIL: Hand count after playing council_room was not correct. Expected 488, got 331
FAIL: Hand count after playing council_room was not correct. Expected 48, got 50
FAIL: Hand count after playing council_room was not correct. Expected 50, got 467
FAIL: Hand count after playing council_room was not correct. Expected 50, got 352
FAIL: Hand count after playing council_room was not correct. Expected 50, got 488
FAIL: Hand count after playing council_room was not correct. Expected 366, got 368
FAIL: Hand count after playing council_room was not correct. Expected 368, got 89
FAIL: Hand count after playing council_room was not correct. Expected 368, got 414
FAIL: Hand count after playing council_room was not correct. Expected 368, got 417
FAIL: Hand count after playing council_room was not correct. Expected 25, got 27
FAIL: Hand count after playing council_room was not correct. Expected 27, got 303
FAIL: Hand count after playing council_room was not correct. Expected 27, got 19
FAIL: Hand count after playing council_room was not correct. Expected 27, got 444
FAIL: Hand count after playing council_room was not correct. Expected 153, got 155
FAIL: Hand count after playing council_room was not correct. Expected 155, got 273
FAIL: Hand count after playing council_room was not correct. Expected 155, got 171
FAIL: Hand count after playing council_room was not correct. Expected 155, got 90
FAIL: Hand count after playing council_room was not correct. Expected 135, got 137
FAIL: Hand count after playing council_room was not correct. Expected 137, got 327
FAIL: Hand count after playing council_room was not correct. Expected 137, got 298
FAIL: Hand count after playing council_room was not correct. Expected 137, got 35
FAIL: Hand count after playing council_room was not correct. Expected 129, got 131
FAIL: Hand count after playing council_room was not correct. Expected 131, got 162
FAIL: Hand count after playing council_room was not correct. Expected 131, got 262
FAIL: Hand count after playing council_room was not correct. Expected 131, got 319
FAIL: Hand count after playing council_room was not correct. Expected 325, got 327
FAIL: Hand count after playing council_room was not correct. Expected 327, got 412
FAIL: Hand count after playing council_room was not correct. Expected 327, got 310
FAIL: Hand count after playing council_room was not correct. Expected 327, got 358
FAIL: Hand count after playing council_room was not correct. Expected 266, got 268
FAIL: Hand count after playing council_room was not correct. Expected 268, got 312
FAIL: Hand count after playing council_room was not correct. Expected 268, got 56
FAIL: Hand count after playing council_room was not correct. Expected 268, got 436
FAIL: Hand count after playing council_room was not correct. Expected 26, got 28
FAIL: Hand count after playing council_room was not correct. Expected 28, got 385
FAIL: Hand count after playing council_room was not correct. Expected 28, got 93
FAIL: Hand count after playing council_room was not correct. Expected 28, got 213
FAIL: Hand count after playing council_room was not correct. Expected 303, got 305
FAIL: Hand count after playing council_room was not correct. Expected 305, got 317
FAIL: Hand count after playing council_room was not correct. Expected 305, got 427
FAIL: Hand count after playing council_room was not correct. Expected 305, got 228
FAIL: Hand count after playing council_room was not correct. Expected 375, got 377
FAIL: Hand count after playing council_room was not correct. Expected 377, got 325
FAIL: Hand count after playing council_room was not correct. Expected 377, got 356
FAIL: Hand count after playing council_room was not correct. Expected 377, got 351
FAIL: Hand count after playing council_room was not correct. Expected 36, got 38
FAIL: Hand count after playing council_room was not correct. Expected 38, got 85
FAIL: Hand count after playing council_room was not correct. Expected 38, got 92
FAIL: Hand count after playing council_room was not correct. Expected 38, got 351
FAIL: Hand count after playing council_room was not correct. Expected 414, got 416
FAIL: Hand count after playing council_room was not correct. Expected 416, got 357
FAIL: Hand count after playing council_room was not correct. Expected 416, got 343
FAIL: Hand count after playing council_room was not correct. Expected 416, got 118
FAIL: Hand count after playing council_room was not correct. Expected 390, got 392
FAIL: Hand count after playing council_room was not correct. Expected 392, got 364
FAIL: Hand count after playing council_room was not correct. Expected 392, got 18
FAIL: Hand count after playing council_room was not correct. Expected 392, got 401
FAIL: Hand count after playing council_room was not correct. Expected 80, got 82
FAIL: Hand count after playing council_room was not correct. Expected 82, got 251
FAIL: Hand count after playing council_room was not correct. Expected 82, got 271
FAIL: Hand count after playing council_room was not correct. Expected 82, got 63
FAIL: Hand count after playing council_room was not correct. Expected 207, got 209
FAIL: Hand count after playing council_room was not correct. Expected 209, got 331
FAIL: Hand count after playing council_room was not correct. Expected 209, got 99
FAIL: Hand count after playing council_room was not correct. Expected 209, got 353
FAIL: Hand count after playing council_room was not correct. Expected 46, got 48
FAIL: Hand count after playing council_room was not correct. Expected 48, got 496
FAIL: Hand count after playing council_room was not correct. Expected 48, got 234
FAIL: Hand count after playing council_room was not correct. Expected 48, got 120
FAIL: Hand count after playing council_room was not correct. Expected 151, got 153
FAIL: Hand count after playing council_room was not correct. Expected 153, got 85
FAIL: Hand count after playing council_room was not correct. Expected 153, got 191
FAIL: Hand count after playing council_room was not correct. Expected 153, got 193
FAIL: Hand count after playing council_room was not correct. Expected 121, got 123
FAIL: Hand count after playing council_room was not correct. Expected 123, got 371
FAIL: Hand count after playing council_room was not correct. Expected 123, got 85
FAIL: Hand count after playing council_room was not correct. Expected 123, got 363
FAIL: Hand count after playing council_room was not correct. Expected 126, got 128
FAIL: Hand count after playing council_room was not correct. Expected 128, got 21
FAIL: Hand count after playing council_room was not correct. Expected 128, got 356
FAIL: Hand count after playing council_room was not correct. Expected 128, got 70
FAIL: Hand count after playing council_room was not correct. Expected 276, got 278
FAIL: Hand count after playing council_room was not correct. Expected 278, got 137
FAIL: Hand count after playing council_room was not correct. Expected 278, got 291
FAIL: Hand count after playing council_room was not correct. Expected 278, got 425
FAIL: Hand count after playing council_room was not correct. Expected 49, got 51
FAIL: Hand count after playing council_room was not correct. Expected 51, got 490
FAIL: Hand count after playing council_room was not correct. Expected 51, got 34
FAIL: Hand count after playing council_room was not correct. Expected 51, got 147
FAIL: Hand count after playing council_room was not correct. Expected 239, got 241
FAIL: Hand count after playing council_room was not correct. Expected 241, got 158
FAIL: Hand count after playing council_room was not correct. Expected 241, got 392
FAIL: Hand count after playing council_room was not correct. Expected 241, got 109
FAIL: Hand count after playing council_room was not correct. Expected 431, got 433
FAIL: Hand count after playing council_room was not correct. Expected 433, got 469
FAIL: Hand count after playing council_room was not correct. Expected 433, got 83
FAIL: Hand count after playing council_room was not correct. Expected 433, got 419
FAIL: Hand count after playing council_room was not correct. Expected 350, got 352
FAIL: Hand count after playing council_room was not correct. Expected 352, got 149
FAIL: Hand count after playing council_room was not correct. Expected 352, got 185
FAIL: Hand count after playing council_room was not correct. Expected 352, got 468
FAIL: Hand count after playing council_room was not correct. Expected 318, got 320
FAIL: Hand count after playing council_room was not correct. Expected 320, got 72
FAIL: Hand count after playing council_room was not correct. Expected 320, got 160
FAIL: Hand count after playing council_room was not correct. Expected 320, got 277
FAIL: Hand count after playing council_room was not correct. Expected 241, got 243
FAIL: Hand count after playing council_room was not correct. Expected 243, got 58
FAIL: Hand count after playing council_room was not correct. Expected 243, got 132
FAIL: Hand count after playing council_room was not correct. Expected 243, got 89
FAIL: Hand count after playing council_room was not correct. Expected 112, got 114
FAIL: Hand count after playing council_room was not correct. Expected 114, got 436
FAIL: Hand count after playing council_room was not correct. Expected 114, got 70
FAIL: Hand count after playing council_room was not correct. Expected 114, got 58
FAIL: Hand count after playing council_room was not correct. Expected 195, got 197
FAIL: Hand count after playing council_room was not correct. Expected 197, got 328
FAIL: Hand count after playing council_room was not correct. Expected 197, got 112
FAIL: Hand count after playing council_room was not correct. Expected 197, got 58
FAIL: Hand count after playing council_room was not correct. Expected 130, got 132
FAIL: Hand count after playing council_room was not correct. Expected 132, got 298
FAIL: Hand count after playing council_room was not correct. Expected 132, got 426
FAIL: Hand count after playing council_room was not correct. Expected 132, got 152
FAIL: Hand count after playing council_room was not correct. Expected 331, got 333
FAIL: Hand count after playing council_room was not correct. Expected 333, got 407
FAIL: Hand count after playing council_room was not correct. Expected 333, got 380
FAIL: Hand count after playing council_room was not correct. Expected 333, got 492
FAIL: Hand count after playing council_room was not correct. Expected 138, got 140
FAIL: Hand count after playing council_room was not correct. Expected 140, got 417
FAIL: Hand count after playing council_room was not correct. Expected 140, got 419
FAIL: Hand count after playing council_room was not correct. Expected 140, got 354
FAIL: Hand count after playing council_room was not correct. Expected 234, got 236
FAIL: Hand count after playing council_room was not correct. Expected 236, got 262
FAIL: Hand count after playing council_room was not correct. Expected 236, got 473
FAIL: Hand count after playing council_room was not correct. Expected 236, got 171
FAIL: Hand count after playing council_room was not correct. Expected 443, got 445
FAIL: Hand count after playing council_room was not correct. Expected 445, got 341
FAIL: Hand count after playing council_room was not correct. Expected 445, got 223
FAIL: Hand count after playing council_room was not correct. Expected 445, got 114
FAIL: Hand count after playing council_room was not correct. Expected 305, got 307
FAIL: Hand count after playing council_room was not correct. Expected 307, got 355
FAIL: Hand count after playing council_room was not correct. Expected 307, got 109
FAIL: Hand count after playing council_room was not correct. Expected 307, got 298
FAIL: Hand count after playing council_room was not correct. Expected 49, got 51
FAIL: Hand count after playing council_room was not correct. Expected 51, got 157
FAIL: Hand count after playing council_room was not correct. Expected 51, got 282
FAIL: Hand count after playing council_room was not correct. Expected 51, got 60
FAIL: Hand count after playing council_room was not correct. Expected 236, got 238
FAIL: Hand count after playing council_room was not correct. Expected 238, got 170
FAIL: Hand count after playing council_room was not correct. Expected 238, got 74
FAIL: Hand count after playing council_room was not correct. Expected 238, got 93
FAIL: Hand count after playing council_room was not correct. Expected 209, got 211
FAIL: Hand count after playing council_room was not correct. Expected 211, got 340
FAIL: Hand count after playing council_room was not correct. Expected 211, got 113
FAIL: Hand count after playing council_room was not correct. Expected 211, got 362
FAIL: Hand count after playing council_room was not correct. Expected 211, got 213
FAIL: Hand count after playing council_room was not correct. Expected 213, got 350
FAIL: Hand count after playing council_room was not correct. Expected 213, got 204
FAIL: Hand count after playing council_room was not correct. Expected 213, got 264
FAIL: Hand count after playing council_room was not correct. Expected 474, got 476
FAIL: Hand count after playing council_room was not correct. Expected 476, got 450
FAIL: Hand count after playing council_room was not correct. Expected 476, got 289
FAIL: Hand count after playing council_room was not correct. Expected 476, got 476
FAIL: Hand count after playing council_room was not correct. Expected 51, got 53
FAIL: Hand count after playing council_room was not correct. Expected 53, got 337
FAIL: Hand count after playing council_room was not correct. Expected 53, got 485
FAIL: Hand count after playing council_room was not correct. Expected 53, got 201
FAIL: Hand count after playing council_room was not correct. Expected 186, got 188
FAIL: Hand count after playing council_room was not correct. Expected 188, got 272
FAIL: Hand count after playing council_room was not correct. Expected 188, got 390
FAIL: Hand count after playing council_room was not correct. Expected 188, got 288
FAIL: Hand count after playing council_room was not correct. Expected 436, got 438
FAIL: Hand count after playing council_room was not correct. Expected 438, got 328
FAIL: Hand count after playing council_room was not correct. Expected 438, got 273
FAIL: Hand count after playing council_room was not correct. Expected 438, got 108
FAIL: Hand count after playing council_room was not correct. Expected 109, got 111
FAIL: Hand count after playing council_room was not correct. Expected 111, got 492
FAIL: Hand count after playing council_room was not correct. Expected 111, got 448
FAIL: Hand count after playing council_room was not correct. Expected 111, got 248
FAIL: Hand count after playing council_room was not correct. Expected 30, got 32
FAIL: Hand count after playing council_room was not correct. Expected 32, got 57
FAIL: Hand count after playing council_room was not correct. Expected 32, got 371
FAIL: Hand count after playing council_room was not correct. Expected 32, got 5
FAIL: Hand count after playing council_room was not correct. Expected 457, got 459
FAIL: Hand count after playing council_room was not correct. Expected 459, got 453
FAIL: Hand count after playing council_room was not correct. Expected 459, got 292
FAIL: Hand count after playing council_room was not correct. Expected 459, got 222
FAIL: Hand count after playing council_room was not correct. Expected 331, got 333
FAIL: Hand count after playing council_room was not correct. Expected 333, got 138
FAIL: Hand count after playing council_room was not correct. Expected 333, got 240
FAIL: Hand count after playing council_room was not correct. Expected 333, got 75
FAIL: Hand count after playing council_room was not correct. Expected 276, got 278
FAIL: Hand count after playing council_room was not correct. Expected 278, got 201
FAIL: Hand count after playing council_room was not correct. Expected 278, got 33
FAIL: Hand count after playing council_room was not correct. Expected 278, got 245
FAIL: Hand count after playing council_room was not correct. Expected 381, got 383
FAIL: Hand count after playing council_room was not correct. Expected 383, got 8
FAIL: Hand count after playing council_room was not correct. Expected 383, got 412
FAIL: Hand count after playing council_room was not correct. Expected 383, got 366
FAIL: Hand count after playing council_room was not correct. Expected 269, got 271
FAIL: Hand count after playing council_room was not correct. Expected 271, got 129
FAIL: Hand count after playing council_room was not correct. Expected 271, got 89
FAIL: Hand count after playing council_room was not correct. Expected 271, got 342
FAIL: Hand count after playing council_room was not correct. Expected 194, got 196
FAIL: Hand count after playing council_room was not correct. Expected 196, got 157
FAIL: Hand count after playing council_room was not correct. Expected 196, got 449
FAIL: Hand count after playing council_room was not correct. Expected 196, got 179
FAIL: Hand count after playing council_room was not correct. Expected 52, got 54
FAIL: Hand count after playing council_room was not correct. Expected 54, got 278
FAIL: Hand count after playing council_room was not correct. Expected 54, got 256
FAIL: Hand count after playing council_room was not correct. Expected 54, got 330
FAIL: Hand count after playing council_room was not correct. Expected 461, got 463
FAIL: Hand count after playing council_room was not correct. Expected 463, got 244
FAIL: Hand count after playing council_room was not correct. Expected 463, got 161
FAIL: Hand count after playing council_room was not correct. Expected 463, got 44
FAIL: Hand count after playing council_room was not correct. Expected 430, got 432
FAIL: Hand count after playing council_room was not correct. Expected 432, got 111
FAIL: Hand count after playing council_room was not correct. Expected 432, got 410
FAIL: Hand count after playing council_room was not correct. Expected 432, got 13
FAIL: Hand count after playing council_room was not correct. Expected 468, got 470
FAIL: Hand count after playing council_room was not correct. Expected 470, got 451
FAIL: Hand count after playing council_room was not correct. Expected 470, got 272
FAIL: Hand count after playing council_room was not correct. Expected 470, got 243
FAIL: Hand count after playing council_room was not correct. Expected 145, got 147
FAIL: Hand count after playing council_room was not correct. Expected 147, got 486
FAIL: Hand count after playing council_room was not correct. Expected 147, got 207
FAIL: Hand count after playing council_room was not correct. Expected 147, got 375
FAIL: Hand count after playing council_room was not correct. Expected 416, got 418
FAIL: Hand count after playing council_room was not correct. Expected 418, got 110
FAIL: Hand count after playing council_room was not correct. Expected 418, got 82
FAIL: Hand count after playing council_room was not correct. Expected 418, got 328
FAIL: Hand count after playing council_room was not correct. Expected 281, got 283
FAIL: Hand count after playing council_room was not correct. Expected 283, got 181
FAIL: Hand count after playing council_room was not correct. Expected 283, got 254
FAIL: Hand count after playing council_room was not correct. Expected 283, got 476
FAIL: Hand count after playing council_room was not correct. Expected 284, got 286
FAIL: Hand count after playing council_room was not correct. Expected 286, got 244
FAIL: Hand count after playing council_room was not correct. Expected 286, got 395
FAIL: Hand count after playing council_room was not correct. Expected 286, got 220
FAIL: Hand count after playing council_room was not correct. Expected 51, got 53
FAIL: Hand count after playing council_room was not correct. Expected 53, got 367
FAIL: Hand count after playing council_room was not correct. Expected 53, got 64
FAIL: Hand count after playing council_room was not correct. Expected 53, got 481
FAIL: Hand count after playing council_room was not correct. Expected 259, got 261
FAIL: Hand count after playing council_room was not correct. Expected 261, got 312
FAIL: Hand count after playing council_room was not correct. Expected 261, got 2
FAIL: Hand count after playing council_room was not correct. Expected 261, got 355
FAIL: Hand count after playing council_room was not correct. Expected 54, got 56
FAIL: Hand count after playing council_room was not correct. Expected 56, got 500
FAIL: Hand count after playing council_room was not correct. Expected 56, got 30
FAIL: Hand count after playing council_room was not correct. Expected 56, got 57
FAIL: Hand count after playing council_room was not correct. Expected 166, got 168
FAIL: Hand count after playing council_room was not correct. Expected 168, got 229
FAIL: Hand count after playing council_room was not correct. Expected 168, got 291
FAIL: Hand count after playing council_room was not correct. Expected 168, got 494
FAIL: Hand count after playing council_room was not correct. Expected 292, got 294
FAIL: Hand count after playing council_room was not correct. Expected 294, got 495
FAIL: Hand count after playing council_room was not correct. Expected 294, got 449
FAIL: Hand count after playing council_room was not correct. Expected 294, got 134
FAIL: Hand count after playing council_room was not correct. Expected 391, got 393
FAIL: Hand count after playing council_room was not correct. Expected 393, got 238
FAIL: Hand count after playing council_room was not correct. Expected 393, got 150
FAIL: Hand count after playing council_room was not correct. Expected 393, got 120
FAIL: Hand count after playing council_room was not correct. Expected 497, got 499
FAIL: Hand count after playing council_room was not correct. Expected 499, got 206
FAIL: Hand count after playing council_room was not correct. Expected 499, got 215
FAIL: Hand count after playing council_room was not correct. Expected 499, got 147
FAIL: Hand count after playing council_room was not correct. Expected 464, got 466
FAIL: Hand count after playing council_room was not correct. Expected 466, got 68
FAIL: Hand count after playing council_room was not correct. Expected 466, got 328
FAIL: Hand count after playing council_room was not correct. Expected 466, got 255
FAIL: Hand count after playing council_room was not correct. Expected 410, got 412
FAIL: Hand count after playing council_room was not correct. Expected 412, got 474
FAIL: Hand count after playing council_room was not correct. Expected 412, got 167
FAIL: Hand count after playing council_room was not correct. Expected 412, got 406
FAIL: Hand count after playing council_room was not correct. Expected 75, got 77
FAIL: Hand count after playing council_room was not correct. Expected 77, got 58
FAIL: Hand count after playing council_room was not correct. Expected 77, got 283
FAIL: Hand count after playing council_room was not correct. Expected 77, got 355
FAIL: Hand count after playing council_room was not correct. Expected 46, got 48
FAIL: Hand count after playing council_room was not correct. Expected 48, got 201
FAIL: Hand count after playing council_room was not correct. Expected 48, got 392
FAIL: Hand count after playing council_room was not correct. Expected 48, got 340
FAIL: Hand count after playing council_room was not correct. Expected 265, got 267
FAIL: Hand count after playing council_room was not correct. Expected 267, got 5
FAIL: Hand count after playing council_room was not correct. Expected 267, got 382
FAIL: Hand count after playing council_room was not correct. Expected 267, got 43
FAIL: Hand count after playing council_room was not correct. Expected 454, got 456
FAIL: Hand count after playing council_room was not correct. Expected 456, got 274
FAIL: Hand count after playing council_room was not correct. Expected 456, got 125
FAIL: Hand count after playing council_room was not correct. Expected 456, got 393
FAIL: Hand count after playing council_room was not correct. Expected 390, got 392
FAIL: Hand count after playing council_room was not correct. Expected 392, got 99
FAIL: Hand count after playing council_room was not correct. Expected 392, got 435
FAIL: Hand count after playing council_room was not correct. Expected 392, got 35
FAIL: Hand count after playing council_room was not correct. Expected 158, got 160
FAIL: Hand count after playing council_room was not correct. Expected 160, got 36
FAIL: Hand count after playing council_room was not correct. Expected 160, got 246
FAIL: Hand count after playing council_room was not correct. Expected 160, got 263
FAIL: Hand count after playing council_room was not correct. Expected 229, got 231
FAIL: Hand count after playing council_room was not correct. Expected 231, got 349
FAIL: Hand count after playing council_room was not correct. Expected 231, got 439
FAIL: Hand count after playing council_room was not correct. Expected 231, got 454
FAIL: Hand count after playing council_room was not correct. Expected 382, got 384
FAIL: Hand count after playing council_room was not correct. Expected 384, got 455
FAIL: Hand count after playing council_room was not correct. Expected 384, got 331
FAIL: Hand count after playing council_room was not correct. Expected 384, got 252
FAIL: Hand count after playing council_room was not correct. Expected 468, got 470
FAIL: Hand count after playing council_room was not correct. Expected 470, got 454
FAIL: Hand count after playing council_room was not correct. Expected 470, got 425
FAIL: Hand count after playing council_room was not correct. Expected 470, got 471
FAIL: Hand count after playing council_room was not correct. Expected 195, got 197
FAIL: Hand count after playing council_room was not correct. Expected 197, got 362
FAIL: Hand count after playing council_room was not correct. Expected 197, got 450
FAIL: Hand count after playing council_room was not correct. Expected 197, got 431
FAIL: Hand count after playing council_room was not correct. Expected 381, got 383
FAIL: Hand count after playing council_room was not correct. Expected 383, got 62
FAIL: Hand count after playing council_room was not correct. Expected 383, got 412
FAIL: Hand count after playing council_room was not correct. Expected 383, got 155
FAIL: Hand count after playing council_room was not correct. Expected 156, got 158
FAIL: Hand count after playing council_room was not correct. Expected 158, got 449
FAIL: Hand count after playing council_room was not correct. Expected 158, got 263
FAIL: Hand count after playing council_room was not correct. Expected 158, got 159
FAIL: Hand count after playing council_room was not correct. Expected 177, got 179
FAIL: Hand count after playing council_room was not correct. Expected 179, got 335
FAIL: Hand count after playing council_room was not correct. Expected 179, got 268
FAIL: Hand count after playing council_room was not correct. Expected 179, got 75
FAIL: Hand count after playing council_room was not correct. Expected 220, got 222
FAIL: Hand count after playing council_room was not correct. Expected 222, got 222
FAIL: Hand count after playing council_room was not correct. Expected 222, got 58
FAIL: Hand count after playing council_room was not correct. Expected 222, got 8
FAIL: Hand count after playing council_room was not correct. Expected 477, got 479
FAIL: Hand count after playing council_room was not correct. Expected 479, got 420
FAIL: Hand count after playing council_room was not correct. Expected 479, got 173
FAIL: Hand count after playing council_room was not correct. Expected 479, got 117
FAIL: Hand count after playing council_room was not correct. Expected 39, got 41
FAIL: Hand count after playing council_room was not correct. Expected 41, got 254
FAIL: Hand count after playing council_room was not correct. Expected 41, got 34
FAIL: Hand count after playing council_room was not correct. Expected 41, got 207
FAIL: Hand count after playing council_room was not correct. Expected 39, got 41
FAIL: Hand count after playing council_room was not correct. Expected 41, got 68
FAIL: Hand count after playing council_room was not correct. Expected 41, got 488
FAIL: Hand count after playing council_room was not correct. Expected 41, got 401
FAIL: Hand count after playing council_room was not correct. Expected 269, got 271
FAIL: Hand count after playing council_room was not correct. Expected 271, got 281
FAIL: Hand count after playing council_room was not correct. Expected 271, got 359
FAIL: Hand count after playing council_room was not correct. Expected 271, got 235
FAIL: Hand count after playing council_room was not correct. Expected 473, got 475
FAIL: Hand count after playing council_room was not correct. Expected 475, got 107
FAIL: Hand count after playing council_room was not correct. Expected 475, got 466
FAIL: Hand count after playing council_room was not correct. Expected 475, got 83
FAIL: Hand count after playing council_room was not correct. Expected 22, got 24
FAIL: Hand count after playing council_room was not correct. Expected 24, got 46
FAIL: Hand count after playing council_room was not correct. Expected 24, got 214
FAIL: Hand count after playing council_room was not correct. Expected 24, got 428
FAIL: Hand count after playing council_room was not correct. Expected 36, got 38
FAIL: Hand count after playing council_room was not correct. Expected 38, got 384
FAIL: Hand count after playing council_room was not correct. Expected 38, got 209
FAIL: Hand count after playing council_room was not correct. Expected 38, got 137
FAIL: Hand count after playing council_room was not correct. Expected 195, got 197
FAIL: Hand count after playing council_room was not correct. Expected 197, got 284
FAIL: Hand count after playing council_room was not correct. Expected 197, got 436
FAIL: Hand count after playing council_room was not correct. Expected 197, got 437
FAIL: Hand count after playing council_room was not correct. Expected 465, got 467
FAIL: Hand count after playing council_room was not correct. Expected 467, got 257
FAIL: Hand count after playing council_room was not correct. Expected 467, got 196
FAIL: Hand count after playing council_room was not correct. Expected 467, got 153
FAIL: Hand count after playing council_room was not correct. Expected 498, got 500
FAIL: Hand count after playing council_room was not correct. Expected 500, got 44
FAIL: Hand count after playing council_room was not correct. Expected 500, got 147
FAIL: Hand count after playing council_room was not correct. Expected 500, got 276
FAIL: Hand count after playing council_room was not correct. Expected 21, got 23
FAIL: Hand count after playing council_room was not correct. Expected 23, got 408
FAIL: Hand count after playing council_room was not correct. Expected 23, got 44
FAIL: Hand count after playing council_room was not correct. Expected 23, got 328
FAIL: Hand count after playing council_room was not correct. Expected 323, got 325
FAIL: Hand count after playing council_room was not correct. Expected 325, got 181
FAIL: Hand count after playing council_room was not correct. Expected 325, got 42
FAIL: Hand count after playing council_room was not correct. Expected 325, got 476
FAIL: Hand count after playing council_room was not correct. Expected 412, got 414
FAIL: Hand count after playing council_room was not correct. Expected 414, got 487
FAIL: Hand count after playing council_room was not correct. Expected 414, got 338
FAIL: Hand count after playing council_room was not correct. Expected 414, got 86
FAIL: Hand count after playing council_room was not correct. Expected 330, got 332
FAIL: Hand count after playing council_room was not correct. Expected 332, got 393
FAIL: Hand count after playing council_room was not correct. Expected 332, got 106
FAIL: Hand count after playing council_room was not correct. Expected 332, got 256
FAIL: Hand count after playing council_room was not correct. Expected 38, got 40
FAIL: Hand count after playing council_room was not correct. Expected 40, got 400
FAIL: Hand count after playing council_room was not correct. Expected 40, got 277
FAIL: Hand count after playing council_room was not correct. Expected 40, got 144
FAIL: Hand count after playing council_room was not correct. Expected 466, got 468
FAIL: Hand count after playing council_room was not correct. Expected 468, got 41
FAIL: Hand count after playing council_room was not correct. Expected 468, got 387
FAIL: Hand count after playing council_room was not correct. Expected 468, got 442
FAIL: Hand count after playing council_room was not correct. Expected 95, got 97
FAIL: Hand count after playing council_room was not correct. Expected 97, got 165
FAIL: Hand count after playing council_room was not correct. Expected 97, got 117
FAIL: Hand count after playing council_room was not correct. Expected 97, got 88
FAIL: Hand count after playing council_room was not correct. Expected 154, got 156
FAIL: Hand count after playing council_room was not correct. Expected 156, got 185
FAIL: Hand count after playing council_room was not correct. Expected 156, got 198
FAIL: Hand count after playing council_room was not correct. Expected 156, got 291
FAIL: Hand count after playing council_room was not correct. Expected 111, got 113
FAIL: Hand count after playing council_room was not correct. Expected 113, got 399
FAIL: Hand count after playing council_room was not correct. Expected 113, got 331
FAIL: Hand count after playing council_room was not correct. Expected 113, got 286
FAIL: Hand count after playing council_room was not correct. Expected 477, got 479
FAIL: Hand count after playing council_room was not correct. Expected 479, got 101
FAIL: Hand count after playing council_room was not correct. Expected 479, got 148
FAIL: Hand count after playing council_room was not correct. Expected 479, got 15
FAIL: Hand count after playing council_room was not correct. Expected 317, got 319
FAIL: Hand count after playing council_room was not correct. Expected 319, got 44
FAIL: Hand count after playing council_room was not correct. Expected 319, got 213
FAIL: Hand count after playing council_room was not correct. Expected 319, got 381
FAIL: Hand count after playing council_room was not correct. Expected 161, got 163
FAIL: Hand count after playing council_room was not correct. Expected 163, got 92
FAIL: Hand count after playing council_room was not correct. Expected 163, got 182
FAIL: Hand count after playing council_room was not correct. Expected 163, got 272
FAIL: Hand count after playing council_room was not correct. Expected 364, got 366
FAIL: Hand count after playing council_room was not correct. Expected 366, got 380
FAIL: Hand count after playing council_room was not correct. Expected 366, got 441
FAIL: Hand count after playing council_room was not correct. Expected 366, got 355
FAIL: Hand count after playing council_room was not correct. Expected 186, got 188
FAIL: Hand count after playing council_room was not correct. Expected 188, got 429
FAIL: Hand count after playing council_room was not correct. Expected 188, got 429
FAIL: Hand count after playing council_room was not correct. Expected 188, got 205
FAIL: Hand count after playing council_room was not correct. Expected 494, got 496
FAIL: Hand count after playing council_room was not correct. Expected 496, got 101
FAIL: Hand count after playing council_room was not correct. Expected 496, got 217
FAIL: Hand count after playing council_room was not correct. Expected 496, got 360
FAIL: Hand count after playing council_room was not correct. Expected 476, got 478
FAIL: Hand count after playing council_room was not correct. Expected 478, got 495
FAIL: Hand count after playing council_room was not correct. Expected 478, got 26
FAIL: Hand count after playing council_room was not correct. Expected 478, got 290
FAIL: Hand count after playing council_room was not correct. Expected 463, got 465
FAIL: Hand count after playing council_room was not correct. Expected 465, got 314
FAIL: Hand count after playing council_room was not correct. Expected 465, got 316
FAIL: Hand count after playing council_room was not correct. Expected 465, got 94
FAIL: Hand count after playing council_room was not correct. Expected 475, got 477
FAIL: Hand count after playing council_room was not correct. Expected 477, got 113
FAIL: Hand count after playing council_room was not correct. Expected 477, got 214
FAIL: Hand count after playing council_room was not correct. Expected 477, got 115
FAIL: Hand count after playing council_room was not correct. Expected 417, got 419
FAIL: Hand count after playing council_room was not correct. Expected 419, got 11
FAIL: Hand count after playing council_room was not correct. Expected 419, got 132
FAIL: Hand count after playing council_room was not correct. Expected 419, got 91
FAIL: Hand count after playing council_room was not correct. Expected 394, got 396
FAIL: Hand count after playing council_room was not correct. Expected 396, got 59
FAIL: Hand count after playing council_room was not correct. Expected 396, got 71
FAIL: Hand count after playing council_room was not correct. Expected 396, got 385
FAIL: Hand count after playing council_room was not correct. Expected 422, got 424
FAIL: Hand count after playing council_room was not correct. Expected 424, got 399
FAIL: Hand count after playing council_room was not correct. Expected 424, got 424
FAIL: Hand count after playing council_room was not correct. Expected 424, got 32
FAIL: Hand count after playing council_room was not correct. Expected 33, got 35
FAIL: Hand count after playing council_room was not correct. Expected 35, got 333
FAIL: Hand count after playing council_room was not correct. Expected 35, got 314
FAIL: Hand count after playing council_room was not correct. Expected 35, got 407
FAIL: Hand count after playing council_room was not correct. Expected 336, got 338
FAIL: Hand count after playing council_room was not correct. Expected 338, got 404
FAIL: Hand count after playing council_room was not correct. Expected 338, got 155
FAIL: Hand count after playing council_room was not correct. Expected 338, got 412
FAIL: Hand count after playing council_room was not correct. Expected 25, got 27
FAIL: Hand count after playing council_room was not correct. Expected 27, got 1
FAIL: Hand count after playing council_room was not correct. Expected 27, got 135
FAIL: Hand count after playing council_room was not correct. Expected 27, got 364
FAIL: Hand count after playing council_room was not correct. Expected 84, got 86
FAIL: Hand count after playing council_room was not correct. Expected 86, got 365
FAIL: Hand count after playing council_room was not correct. Expected 86, got 488
FAIL: Hand count after playing council_room was not correct. Expected 86, got 324
FAIL: Hand count after playing council_room was not correct. Expected 469, got 471
FAIL: Hand count after playing council_room was not correct. Expected 471, got 316
FAIL: Hand count after playing council_room was not correct. Expected 471, got 470
FAIL: Hand count after playing council_room was not correct. Expected 471, got 440
FAIL: Hand count after playing council_room was not correct. Expected 278, got 280
FAIL: Hand count after playing council_room was not correct. Expected 280, got 363
FAIL: Hand count after playing council_room was not correct. Expected 280, got 413
FAIL: Hand count after playing council_room was not correct. Expected 280, got 224
FAIL: Hand count after playing council_room was not correct. Expected 278, got 280
FAIL: Hand count after playing council_room was not correct. Expected 280, got 41
FAIL: Hand count after playing council_room was not correct. Expected 280, got 157
FAIL: Hand count after playing council_room was not correct. Expected 280, got 352
FAIL: Hand count after playing council_room was not correct. Expected 160, got 162
FAIL: Hand count after playing council_room was not correct. Expected 162, got 262
FAIL: Hand count after playing council_room was not correct. Expected 162, got 329
FAIL: Hand count after playing council_room was not correct. Expected 162, got 97
FAIL: Hand count after playing council_room was not correct. Expected 45, got 47
FAIL: Hand count after playing council_room was not correct. Expected 47, got 316
FAIL: Hand count after playing council_room was not correct. Expected 47, got 390
FAIL: Hand count after playing council_room was not correct. Expected 47, got 230
FAIL: Hand count after playing council_room was not correct. Expected 444, got 446
FAIL: Hand count after playing council_room was not correct. Expected 446, got 445
FAIL: Hand count after playing council_room was not correct. Expected 446, got 489
FAIL: Hand count after playing council_room was not correct. Expected 446, got 477
FAIL: Hand count after playing council_room was not correct. Expected 393, got 395
FAIL: Hand count after playing council_room was not correct. Expected 395, got 400
FAIL: Hand count after playing council_room was not correct. Expected 395, got 372
FAIL: Hand count after playing council_room was not correct. Expected 395, got 14
FAIL: Hand count after playing council_room was not correct. Expected 232, got 234
FAIL: Hand count after playing council_room was not correct. Expected 234, got 191
FAIL: Hand count after playing council_room was not correct. Expected 234, got 213
FAIL: Hand count after playing council_room was not correct. Expected 234, got 117
FAIL: Hand count after playing council_room was not correct. Expected 490, got 492
FAIL: Hand count after playing council_room was not correct. Expected 492, got 176
FAIL: Hand count after playing council_room was not correct. Expected 492, got 458
FAIL: Hand count after playing council_room was not correct. Expected 492, got 349
FAIL: Hand count after playing council_room was not correct. Expected 436, got 438
FAIL: Hand count after playing council_room was not correct. Expected 438, got 96
FAIL: Hand count after playing council_room was not correct. Expected 438, got 96
FAIL: Hand count after playing council_room was not correct. Expected 438, got 459
FAIL: Hand count after playing council_room was not correct. Expected 404, got 406
FAIL: Hand count after playing council_room was not correct. Expected 406, got 368
FAIL: Hand count after playing council_room was not correct. Expected 406, got 194
FAIL: Hand count after playing council_room was not correct. Expected 406, got 254
FAIL: Hand count after playing council_room was not correct. Expected 368, got 370
FAIL: Hand count after playing council_room was not correct. Expected 370, got 454
FAIL: Hand count after playing council_room was not correct. Expected 370, got 390
FAIL: Hand count after playing council_room was not correct. Expected 370, got 322
FAIL: Hand count after playing council_room was not correct. Expected 442, got 444
FAIL: Hand count after playing council_room was not correct. Expected 444, got 492
FAIL: Hand count after playing council_room was not correct. Expected 444, got 419
FAIL: Hand count after playing council_room was not correct. Expected 444, got 106
FAIL: Hand count after playing council_room was not correct. Expected 428, got 430
FAIL: Hand count after playing council_room was not correct. Expected 430, got 265
FAIL: Hand count after playing council_room was not correct. Expected 430, got 30
FAIL: Hand count after playing council_room was not correct. Expected 430, got 79
FAIL: Hand count after playing council_room was not correct. Expected 471, got 473
FAIL: Hand count after playing council_room was not correct. Expected 473, got 177
FAIL: Hand count after playing council_room was not correct. Expected 473, got 343
FAIL: Hand count after playing council_room was not correct. Expected 473, got 430
FAIL: Hand count after playing council_room was not correct. Expected 141, got 143
FAIL: Hand count after playing council_room was not correct. Expected 143, got 189
FAIL: Hand count after playing council_room was not correct. Expected 143, got 59
FAIL: Hand count after playing council_room was not correct. Expected 143, got 160
FAIL: Hand count after playing council_room was not correct. Expected 499, got 501
FAIL: Hand count after playing council_room was not correct. Expected 501, got 88
FAIL: Hand count after playing council_room was not correct. Expected 501, got 10
FAIL: Hand count after playing council_room was not correct. Expected 501, got 303
FAIL: Hand count after playing council_room was not correct. Expected 126, got 128
FAIL: Hand count after playing council_room was not correct. Expected 128, got 137
FAIL: Hand count after playing council_room was not correct. Expected 128, got 371
FAIL: Hand count after playing council_room was not correct. Expected 128, got 154
FAIL: Hand count after playing council_room was not correct. Expected 422, got 424
FAIL: Hand count after playing council_room was not correct. Expected 424, got 372
FAIL: Hand count after playing council_room was not correct. Expected 424, got 281
FAIL: Hand count after playing council_room was not correct. Expected 424, got 244
FAIL: Hand count after playing council_room was not correct. Expected 191, got 193
FAIL: Hand count after playing council_room was not correct. Expected 193, got 110
FAIL: Hand count after playing council_room was not correct. Expected 193, got 142
FAIL: Hand count after playing council_room was not correct. Expected 193, got 414
FAIL: Hand count after playing council_room was not correct. Expected 274, got 276
FAIL: Hand count after playing council_room was not correct. Expected 276, got 51
FAIL: Hand count after playing council_room was not correct. Expected 276, got 460
FAIL: Hand count after playing council_room was not correct. Expected 276, got 428
FAIL: Hand count after playing council_room was not correct. Expected 460, got 462
FAIL: Hand count after playing council_room was not correct. Expected 462, got 248
FAIL: Hand count after playing council_room was not correct. Expected 462, got 294
FAIL: Hand count after playing council_room was not correct. Expected 462, got 122
FAIL: Hand count after playing council_room was not correct. Expected 120, got 122
FAIL: Hand count after playing council_room was not correct. Expected 122, got 459
FAIL: Hand count after playing council_room was not correct. Expected 122, got 414
FAIL: Hand count after playing council_room was not correct. Expected 122, got 218
FAIL: Hand count after playing council_room was not correct. Expected 499, got 501
FAIL: Hand count after playing council_room was not correct. Expected 501, got 277
FAIL: Hand count after playing council_room was not correct. Expected 501, got 414
FAIL: Hand count after playing council_room was not correct. Expected 501, got 413
FAIL: Hand count after playing council_room was not correct. Expected 254, got 256
FAIL: Hand count after playing council_room was not correct. Expected 256, got 75
FAIL: Hand count after playing council_room was not correct. Expected 256, got 218
FAIL: Hand count after playing council_room was not correct. Expected 256, got 37
FAIL: Hand count after playing council_room was not correct. Expected 384, got 386
FAIL: Hand count after playing council_room was not correct. Expected 386, got 450
FAIL: Hand count after playing council_room was not correct. Expected 386, got 78
FAIL: Hand count after playing council_room was not correct. Expected 386, got 145
FAIL: Hand count after playing council_room was not correct. Expected 489, got 491
FAIL: Hand count after playing council_room was not correct. Expected 491, got 355
FAIL: Hand count after playing council_room was not correct. Expected 491, got 87
FAIL: Hand count after playing council_room was not correct. Expected 491, got 103
FAIL: Hand count after playing council_room was not correct. Expected 48, got 50
FAIL: Hand count after playing council_room was not correct. Expected 50, got 349
FAIL: Hand count after playing council_room was not correct. Expected 50, got 25
FAIL: Hand count after playing council_room was not correct. Expected 50, got 404
FAIL: Hand count after playing council_room was not correct. Expected 316, got 318
FAIL: Hand count after playing council_room was not correct. Expected 318, got 349
FAIL: Hand count after playing council_room was not correct. Expected 318, got 87
FAIL: Hand count after playing council_room was not correct. Expected 318, got 256
FAIL: Hand count after playing council_room was not correct. Expected 136, got 138
FAIL: Hand count after playing council_room was not correct. Expected 138, got 444
FAIL: Hand count after playing council_room was not correct. Expected 138, got 308
FAIL: Hand count after playing council_room was not correct. Expected 138, got 387
FAIL: Hand count after playing council_room was not correct. Expected 305, got 307
FAIL: Hand count after playing council_room was not correct. Expected 307, got 83
FAIL: Hand count after playing council_room was not correct. Expected 307, got 290
FAIL: Hand count after playing council_room was not correct. Expected 307, got 355
FAIL: Hand count after playing council_room was not correct. Expected 222, got 224
FAIL: Hand count after playing council_room was not correct. Expected 224, got 493
FAIL: Hand count after playing council_room was not correct. Expected 224, got 75
FAIL: Hand count after playing council_room was not correct. Expected 224, got 463
FAIL: Hand count after playing council_room was not correct. Expected 470, got 472
FAIL: Hand count after playing council_room was not correct. Expected 472, got 456
FAIL: Hand count after playing council_room was not correct. Expected 472, got 89
FAIL: Hand count after playing council_room was not correct. Expected 472, got 76
FAIL: Hand count after playing council_room was not correct. Expected 331, got 333
FAIL: Hand count after playing council_room was not correct. Expected 333, got 498
FAIL: Hand count after playing council_room was not correct. Expected 333, got 327
FAIL: Hand count after playing council_room was not correct. Expected 333, got 196
FAIL: Hand count after playing council_room was not correct. Expected 466, got 468
FAIL: Hand count after playing council_room was not correct. Expected 468, got 398
FAIL: Hand count after playing council_room was not correct. Expected 468, got 347
FAIL: Hand count after playing council_room was not correct. Expected 468, got 318
FAIL: Hand count after playing council_room was not correct. Expected 298, got 300
FAIL: Hand count after playing council_room was not correct. Expected 300, got 318
FAIL: Hand count after playing council_room was not correct. Expected 300, got 56
FAIL: Hand count after playing council_room was not correct. Expected 300, got 410
FAIL: Hand count after playing council_room was not correct. Expected 278, got 280
FAIL: Hand count after playing council_room was not correct. Expected 280, got 346
FAIL: Hand count after playing council_room was not correct. Expected 280, got 53
FAIL: Hand count after playing council_room was not correct. Expected 280, got 132
FAIL: Hand count after playing council_room was not correct. Expected 410, got 412
FAIL: Hand count after playing council_room was not correct. Expected 412, got 314
FAIL: Hand count after playing council_room was not correct. Expected 412, got 362
FAIL: Hand count after playing council_room was not correct. Expected 412, got 341
FAIL: Hand count after playing council_room was not correct. Expected 478, got 480
FAIL: Hand count after playing council_room was not correct. Expected 480, got 417
FAIL: Hand count after playing council_room was not correct. Expected 480, got 490
FAIL: Hand count after playing council_room was not correct. Expected 480, got 53
FAIL: Hand count after playing council_room was not correct. Expected 359, got 361
FAIL: Hand count after playing council_room was not correct. Expected 361, got 264
FAIL: Hand count after playing council_room was not correct. Expected 361, got 196
FAIL: Hand count after playing council_room was not correct. Expected 361, got 361
FAIL: Hand count after playing council_room was not correct. Expected 222, got 224
FAIL: Hand count after playing council_room was not correct. Expected 224, got 367
FAIL: Hand count after playing council_room was not correct. Expected 224, got 163
FAIL: Hand count after playing council_room was not correct. Expected 224, got 403
FAIL: Hand count after playing council_room was not correct. Expected 407, got 409
FAIL: Hand count after playing council_room was not correct. Expected 409, got 462
FAIL: Hand count after playing council_room was not correct. Expected 409, got 191
FAIL: Hand count after playing council_room was not correct. Expected 409, got 405
FAIL: Hand count after playing council_room was not correct. Expected 370, got 372
FAIL: Hand count after playing council_room was not correct. Expected 372, got 269
FAIL: Hand count after playing council_room was not correct. Expected 372, got 333
FAIL: Hand count after playing council_room was not correct. Expected 372, got 69
FAIL: Hand count after playing council_room was not correct. Expected 305, got 307
FAIL: Hand count after playing council_room was not correct. Expected 307, got 488
FAIL: Hand count after playing council_room was not correct. Expected 307, got 444
FAIL: Hand count after playing council_room was not correct. Expected 307, got 296
FAIL: Hand count after playing council_room was not correct. Expected 206, got 208
FAIL: Hand count after playing council_room was not correct. Expected 208, got 431
FAIL: Hand count after playing council_room was not correct. Expected 208, got 273
FAIL: Hand count after playing council_room was not correct. Expected 208, got 89
FAIL: Hand count after playing council_room was not correct. Expected 457, got 459
FAIL: Hand count after playing council_room was not correct. Expected 459, got 425
FAIL: Hand count after playing council_room was not correct. Expected 459, got 277
FAIL: Hand count after playing council_room was not correct. Expected 459, got 286
FAIL: Hand count after playing council_room was not correct. Expected 135, got 137
FAIL: Hand count after playing council_room was not correct. Expected 137, got 448
FAIL: Hand count after playing council_room was not correct. Expected 137, got 146
FAIL: Hand count after playing council_room was not correct. Expected 137, got 380
FAIL: Hand count after playing council_room was not correct. Expected 64, got 66
FAIL: Hand count after playing council_room was not correct. Expected 66, got 423
FAIL: Hand count after playing council_room was not correct. Expected 66, got 170
FAIL: Hand count after playing council_room was not correct. Expected 66, got 153
FAIL: Hand count after playing council_room was not correct. Expected 224, got 226
FAIL: Hand count after playing council_room was not correct. Expected 226, got 233
FAIL: Hand count after playing council_room was not correct. Expected 226, got 285
FAIL: Hand count after playing council_room was not correct. Expected 226, got 418
FAIL: Hand count after playing council_room was not correct. Expected 113, got 115
FAIL: Hand count after playing council_room was not correct. Expected 115, got 377
FAIL: Hand count after playing council_room was not correct. Expected 115, got 482
FAIL: Hand count after playing council_room was not correct. Expected 115, got 81
FAIL: Hand count after playing council_room was not correct. Expected 217, got 219
FAIL: Hand count after playing council_room was not correct. Expected 219, got 112
FAIL: Hand count after playing council_room was not correct. Expected 219, got 50
FAIL: Hand count after playing council_room was not correct. Expected 219, got 102
FAIL: Hand count after playing council_room was not correct. Expected 176, got 178
FAIL: Hand count after playing council_room was not correct. Expected 178, got 183
FAIL: Hand count after playing council_room was not correct. Expected 178, got 336
FAIL: Hand count after playing council_room was not correct. Expected 178, got 295
FAIL: Hand count after playing council_room was not correct. Expected 321, got 323
FAIL: Hand count after playing council_room was not correct. Expected 323, got 473
FAIL: Hand count after playing council_room was not correct. Expected 323, got 492
FAIL: Hand count after playing council_room was not correct. Expected 323, got 474
FAIL: Hand count after playing council_room was not correct. Expected 291, got 293
FAIL: Hand count after playing council_room was not correct. Expected 293, got 186
FAIL: Hand count after playing council_room was not correct. Expected 293, got 125
FAIL: Hand count after playing council_room was not correct. Expected 293, got 430
FAIL: Hand count after playing council_room was not correct. Expected 424, got 426
FAIL: Hand count after playing council_room was not correct. Expected 426, got 191
FAIL: Hand count after playing council_room was not correct. Expected 426, got 48
FAIL: Hand count after playing council_room was not correct. Expected 426, got 493
FAIL: Hand count after playing council_room was not correct. Expected 201, got 203
FAIL: Hand count after playing council_room was not correct. Expected 203, got 225
FAIL: Hand count after playing council_room was not correct. Expected 203, got 236
FAIL: Hand count after playing council_room was not correct. Expected 203, got 439
FAIL: Hand count after playing council_room was not correct. Expected 25, got 27
FAIL: Hand count after playing council_room was not correct. Expected 27, got 447
FAIL: Hand count after playing council_room was not correct. Expected 27, got 363
FAIL: Hand count after playing council_room was not correct. Expected 27, got 326
FAIL: Hand count after playing council_room was not correct. Expected 214, got 216
FAIL: Hand count after playing council_room was not correct. Expected 216, got 324
FAIL: Hand count after playing council_room was not correct. Expected 216, got 436
FAIL: Hand count after playing council_room was not correct. Expected 216, got 488
FAIL: Hand count after playing council_room was not correct. Expected 58, got 60
FAIL: Hand count after playing council_room was not correct. Expected 60, got 202
FAIL: Hand count after playing council_room was not correct. Expected 60, got 288
FAIL: Hand count after playing council_room was not correct. Expected 60, got 271
FAIL: Hand count after playing council_room was not correct. Expected 29, got 31
FAIL: Hand count after playing council_room was not correct. Expected 31, got 1
FAIL: Hand count after playing council_room was not correct. Expected 31, got 148
FAIL: Hand count after playing council_room was not correct. Expected 31, got 103
FAIL: Hand count after playing council_room was not correct. Expected 216, got 218
FAIL: Hand count after playing council_room was not correct. Expected 218, got 35
FAIL: Hand count after playing council_room was not correct. Expected 218, got 362
FAIL: Hand count after playing council_room was not correct. Expected 218, got 260
FAIL: Hand count after playing council_room was not correct. Expected 216, got 218
FAIL: Hand count after playing council_room was not correct. Expected 218, got 54
FAIL: Hand count after playing council_room was not correct. Expected 218, got 434
FAIL: Hand count after playing council_room was not correct. Expected 218, got 383
FAIL: Hand count after playing council_room was not correct. Expected 485, got 487
FAIL: Hand count after playing council_room was not correct. Expected 487, got 381
FAIL: Hand count after playing council_room was not correct. Expected 487, got 122
FAIL: Hand count after playing council_room was not correct. Expected 487, got 68
FAIL: Hand count after playing council_room was not correct. Expected 233, got 235
FAIL: Hand count after playing council_room was not correct. Expected 235, got 447
FAIL: Hand count after playing council_room was not correct. Expected 235, got 204
FAIL: Hand count after playing council_room was not correct. Expected 235, got 287
FAIL: Hand count after playing council_room was not correct. Expected 274, got 276
FAIL: Hand count after playing council_room was not correct. Expected 276, got 379
FAIL: Hand count after playing council_room was not correct. Expected 276, got 319
FAIL: Hand count after playing council_room was not correct. Expected 276, got 324
FAIL: Hand count after playing council_room was not correct. Expected 401, got 403
FAIL: Hand count after playing council_room was not correct. Expected 403, got 456
FAIL: Hand count after playing council_room was not correct. Expected 403, got 159
FAIL: Hand count after playing council_room was not correct. Expected 403, got 225
FAIL: Hand count after playing council_room was not correct. Expected 4, got 6
FAIL: Hand count after playing council_room was not correct. Expected 6, got 432
FAIL: Hand count after playing council_room was not correct. Expected 6, got 98
FAIL: Hand count after playing council_room was not correct. Expected 6, got 307
FAIL: Hand count after playing council_room was not correct. Expected 301, got 303
FAIL: Hand count after playing council_room was not correct. Expected 303, got 239
FAIL: Hand count after playing council_room was not correct. Expected 303, got 130
FAIL: Hand count after playing council_room was not correct. Expected 303, got 178
FAIL: Hand count after playing council_room was not correct. Expected 40, got 42
FAIL: Hand count after playing council_room was not correct. Expected 42, got 478
FAIL: Hand count after playing council_room was not correct. Expected 42, got 9
FAIL: Hand count after playing council_room was not correct. Expected 42, got 60
FAIL: Hand count after playing council_room was not correct. Expected 282, got 284
FAIL: Hand count after playing council_room was not correct. Expected 284, got 146
FAIL: Hand count after playing council_room was not correct. Expected 284, got 303
FAIL: Hand count after playing council_room was not correct. Expected 284, got 427
FAIL: Hand count after playing council_room was not correct. Expected 12, got 14
FAIL: Hand count after playing council_room was not correct. Expected 14, got 222
FAIL: Hand count after playing council_room was not correct. Expected 14, got 426
FAIL: Hand count after playing council_room was not correct. Expected 14, got 144
FAIL: Hand count after playing council_room was not correct. Expected 248, got 250
FAIL: Hand count after playing council_room was not correct. Expected 250, got 397
FAIL: Hand count after playing council_room was not correct. Expected 250, got 405
FAIL: Hand count after playing council_room was not correct. Expected 250, got 236
FAIL: Hand count after playing council_room was not correct. Expected 86, got 88
FAIL: Hand count after playing council_room was not correct. Expected 88, got 70
FAIL: Hand count after playing council_room was not correct. Expected 88, got 140
FAIL: Hand count after playing council_room was not correct. Expected 88, got 26
FAIL: Hand count after playing council_room was not correct. Expected 298, got 300
FAIL: Hand count after playing council_room was not correct. Expected 300, got 109
FAIL: Hand count after playing council_room was not correct. Expected 300, got 441
FAIL: Hand count after playing council_room was not correct. Expected 300, got 188
FAIL: Hand count after playing council_room was not correct. Expected 483, got 485
FAIL: Hand count after playing council_room was not correct. Expected 485, got 171
FAIL: Hand count after playing council_room was not correct. Expected 485, got 37
FAIL: Hand count after playing council_room was not correct. Expected 485, got 353
FAIL: Hand count after playing council_room was not correct. Expected 219, got 221
FAIL: Hand count after playing council_room was not correct. Expected 221, got 169
FAIL: Hand count after playing council_room was not correct. Expected 221, got 83
FAIL: Hand count after playing council_room was not correct. Expected 221, got 444
FAIL: Hand count after playing council_room was not correct. Expected 328, got 330
FAIL: Hand count after playing council_room was not correct. Expected 330, got 189
FAIL: Hand count after playing council_room was not correct. Expected 330, got 346
FAIL: Hand count after playing council_room was not correct. Expected 330, got 94
FAIL: Hand count after playing council_room was not correct. Expected 113, got 115
FAIL: Hand count after playing council_room was not correct. Expected 115, got 433
FAIL: Hand count after playing council_room was not correct. Expected 115, got 403
FAIL: Hand count after playing council_room was not correct. Expected 115, got 255
FAIL: Hand count after playing council_room was not correct. Expected 86, got 88
FAIL: Hand count after playing council_room was not correct. Expected 88, got 490
FAIL: Hand count after playing council_room was not correct. Expected 88, got 95
FAIL: Hand count after playing council_room was not correct. Expected 88, got 358
FAIL: Hand count after playing council_room was not correct. Expected 8, got 10
FAIL: Hand count after playing council_room was not correct. Expected 10, got 50
FAIL: Hand count after playing council_room was not correct. Expected 10, got 297
FAIL: Hand count after playing council_room was not correct. Expected 10, got 123
FAIL: Hand count after playing council_room was not correct. Expected 335, got 337
FAIL: Hand count after playing council_room was not correct. Expected 337, got 244
FAIL: Hand count after playing council_room was not correct. Expected 337, got 471
FAIL: Hand count after playing council_room was not correct. Expected 337, got 66
FAIL: Hand count after playing council_room was not correct. Expected 444, got 446
FAIL: Hand count after playing council_room was not correct. Expected 446, got 330
FAIL: Hand count after playing council_room was not correct. Expected 446, got 303
FAIL: Hand count after playing council_room was not correct. Expected 446, got 26
FAIL: Hand count after playing council_room was not correct. Expected 111, got 113
FAIL: Hand count after playing council_room was not correct. Expected 113, got 70
FAIL: Hand count after playing council_room was not correct. Expected 113, got 364
FAIL: Hand count after playing council_room was not correct. Expected 113, got 157
FAIL: Hand count after playing council_room was not correct. Expected 408, got 410
FAIL: Hand count after playing council_room was not correct. Expected 410, got 367
FAIL: Hand count after playing council_room was not correct. Expected 410, got 431
FAIL: Hand count after playing council_room was not correct. Expected 410, got 323
FAIL: Hand count after playing council_room was not correct. Expected 293, got 295
FAIL: Hand count after playing council_room was not correct. Expected 295, got 111
FAIL: Hand count after playing council_room was not correct. Expected 295, got 286
FAIL: Hand count after playing council_room was not correct. Expected 295, got 433
FAIL: Hand count after playing council_room was not correct. Expected 22, got 24
FAIL: Hand count after playing council_room was not correct. Expected 24, got 236
FAIL: Hand count after playing council_room was not correct. Expected 24, got 49
FAIL: Hand count after playing council_room was not correct. Expected 24, got 282
FAIL: Hand count after playing council_room was not correct. Expected 484, got 486
FAIL: Hand count after playing council_room was not correct. Expected 486, got 338
FAIL: Hand count after playing council_room was not correct. Expected 486, got 296
FAIL: Hand count after playing council_room was not correct. Expected 486, got 269
FAIL: Hand count after playing council_room was not correct. Expected 492, got 494
FAIL: Hand count after playing council_room was not correct. Expected 494, got 46
FAIL: Hand count after playing council_room was not correct. Expected 494, got 307
FAIL: Hand count after playing council_room was not correct. Expected 494, got 281
FAIL: Hand count after playing council_room was not correct. Expected 345, got 347
FAIL: Hand count after playing council_room was not correct. Expected 347, got 367
FAIL: Hand count after playing council_room was not correct. Expected 347, got 297
FAIL: Hand count after playing council_room was not correct. Expected 347, got 449
FAIL: Hand count after playing council_room was not correct. Expected 338, got 340
FAIL: Hand count after playing council_room was not correct. Expected 340, got 124
FAIL: Hand count after playing council_room was not correct. Expected 340, got 209
FAIL: Hand count after playing council_room was not correct. Expected 340, got 281
FAIL: Hand count after playing council_room was not correct. Expected 229, got 231
FAIL: Hand count after playing council_room was not correct. Expected 231, got 277
FAIL: Hand count after playing council_room was not correct. Expected 231, got 418
FAIL: Hand count after playing council_room was not correct. Expected 231, got 101
FAIL: Hand count after playing council_room was not correct. Expected 241, got 243
FAIL: Hand count after playing council_room was not correct. Expected 243, got 90
FAIL: Hand count after playing council_room was not correct. Expected 243, got 33
FAIL: Hand count after playing council_room was not correct. Expected 243, got 230
FAIL: Hand count after playing council_room was not correct. Expected 175, got 177
FAIL: Hand count after playing council_room was not correct. Expected 177, got 403
FAIL: Hand count after playing council_room was not correct. Expected 177, got 482
FAIL: Hand count after playing council_room was not correct. Expected 177, got 444
FAIL: Hand count after playing council_room was not correct. Expected 80, got 82
FAIL: Hand count after playing council_room was not correct. Expected 82, got 399
FAIL: Hand count after playing council_room was not correct. Expected 82, got 482
FAIL: Hand count after playing council_room was not correct. Expected 82, got 244
FAIL: Hand count after playing council_room was not correct. Expected 14, got 16
FAIL: Hand count after playing council_room was not correct. Expected 16, got 271
FAIL: Hand count after playing council_room was not correct. Expected 16, got 479
FAIL: Hand count after playing council_room was not correct. Expected 16, got 5
FAIL: Hand count after playing council_room was not correct. Expected 76, got 78
FAIL: Hand count after playing council_room was not correct. Expected 78, got 233
FAIL: Hand count after playing council_room was not correct. Expected 78, got 138
FAIL: Hand count after playing council_room was not correct. Expected 78, got 446
FAIL: Hand count after playing council_room was not correct. Expected 157, got 159
FAIL: Hand count after playing council_room was not correct. Expected 159, got 178
FAIL: Hand count after playing council_room was not correct. Expected 159, got 278
FAIL: Hand count after playing council_room was not correct. Expected 159, got 32
FAIL: Hand count after playing council_room was not correct. Expected 249, got 251
FAIL: Hand count after playing council_room was not correct. Expected 251, got 379
FAIL: Hand count after playing council_room was not correct. Expected 251, got 136
FAIL: Hand count after playing council_room was not correct. Expected 251, got 284
FAIL: Hand count after playing council_room was not correct. Expected 182, got 184
FAIL: Hand count after playing council_room was not correct. Expected 184, got 2
FAIL: Hand count after playing council_room was not correct. Expected 184, got 280
FAIL: Hand count after playing council_room was not correct. Expected 184, got 433
FAIL: Hand count after playing council_room was not correct. Expected 179, got 181
FAIL: Hand count after playing council_room was not correct. Expected 181, got 43
FAIL: Hand count after playing council_room was not correct. Expected 181, got 295
FAIL: Hand count after playing council_room was not correct. Expected 181, got 295
FAIL: Hand count after playing council_room was not correct. Expected 193, got 195
FAIL: Hand count after playing council_room was not correct. Expected 195, got 255
FAIL: Hand count after playing council_room was not correct. Expected 195, got 62
FAIL: Hand count after playing council_room was not correct. Expected 195, got 356
FAIL: Hand count after playing council_room was not correct. Expected 353, got 355
FAIL: Hand count after playing council_room was not correct. Expected 355, got 247
FAIL: Hand count after playing council_room was not correct. Expected 355, got 474
FAIL: Hand count after playing council_room was not correct. Expected 355, got 488
FAIL: Hand count after playing council_room was not correct. Expected 427, got 429
FAIL: Hand count after playing council_room was not correct. Expected 429, got 274
FAIL: Hand count after playing council_room was not correct. Expected 429, got 360
FAIL: Hand count after playing council_room was not correct. Expected 429, got 144
FAIL: Hand count after playing council_room was not correct. Expected 299, got 301
FAIL: Hand count after playing council_room was not correct. Expected 301, got 499
FAIL: Hand count after playing council_room was not correct. Expected 301, got 326
FAIL: Hand count after playing council_room was not correct. Expected 301, got 54
FAIL: Hand count after playing council_room was not correct. Expected 478, got 480
FAIL: Hand count after playing council_room was not correct. Expected 480, got 422
FAIL: Hand count after playing council_room was not correct. Expected 480, got 115
FAIL: Hand count after playing council_room was not correct. Expected 480, got 237
FAIL: Hand count after playing council_room was not correct. Expected 367, got 369
FAIL: Hand count after playing council_room was not correct. Expected 369, got 146
FAIL: Hand count after playing council_room was not correct. Expected 369, got 473
FAIL: Hand count after playing council_room was not correct. Expected 369, got 98
FAIL: Hand count after playing council_room was not correct. Expected 300, got 302
FAIL: Hand count after playing council_room was not correct. Expected 302, got 274
FAIL: Hand count after playing council_room was not correct. Expected 302, got 377
FAIL: Hand count after playing council_room was not correct. Expected 302, got 296
FAIL: Hand count after playing council_room was not correct. Expected 175, got 177
FAIL: Hand count after playing council_room was not correct. Expected 177, got 233
FAIL: Hand count after playing council_room was not correct. Expected 177, got 85
FAIL: Hand count after playing council_room was not correct. Expected 177, got 179
FAIL: Hand count after playing council_room was not correct. Expected 359, got 361
FAIL: Hand count after playing council_room was not correct. Expected 361, got 290
FAIL: Hand count after playing council_room was not correct. Expected 361, got 30
FAIL: Hand count after playing council_room was not correct. Expected 361, got 282
FAIL: Hand count after playing council_room was not correct. Expected 249, got 251
FAIL: Hand count after playing council_room was not correct. Expected 251, got 434
FAIL: Hand count after playing council_room was not correct. Expected 251, got 331
FAIL: Hand count after playing council_room was not correct. Expected 251, got 448
FAIL: Hand count after playing council_room was not correct. Expected 43, got 45
FAIL: Hand count after playing council_room was not correct. Expected 45, got 25
FAIL: Hand count after playing council_room was not correct. Expected 45, got 177
FAIL: Hand count after playing council_room was not correct. Expected 45, got 388
FAIL: Hand count after playing council_room was not correct. Expected 239, got 241
FAIL: Hand count after playing council_room was not correct. Expected 241, got 415
FAIL: Hand count after playing council_room was not correct. Expected 241, got 374
FAIL: Hand count after playing council_room was not correct. Expected 241, got 488
FAIL: Hand count after playing council_room was not correct. Expected 426, got 428
FAIL: Hand count after playing council_room was not correct. Expected 428, got 328
FAIL: Hand count after playing council_room was not correct. Expected 428, got 321
FAIL: Hand count after playing council_room was not correct. Expected 428, got 482
FAIL: Hand count after playing council_room was not correct. Expected 397, got 399
FAIL: Hand count after playing council_room was not correct. Expected 399, got 142
FAIL: Hand count after playing council_room was not correct. Expected 399, got 403
FAIL: Hand count after playing council_room was not correct. Expected 399, got 462
FAIL: Hand count after playing council_room was not correct. Expected 324, got 326
FAIL: Hand count after playing council_room was not correct. Expected 326, got 271
FAIL: Hand count after playing council_room was not correct. Expected 326, got 251
FAIL: Hand count after playing council_room was not correct. Expected 326, got 318
FAIL: Hand count after playing council_room was not correct. Expected 169, got 171
FAIL: Hand count after playing council_room was not correct. Expected 171, got 336
FAIL: Hand count after playing council_room was not correct. Expected 171, got 281
FAIL: Hand count after playing council_room was not correct. Expected 171, got 228
FAIL: Hand count after playing council_room was not correct. Expected 269, got 271
FAIL: Hand count after playing council_room was not correct. Expected 271, got 318
FAIL: Hand count after playing council_room was not correct. Expected 271, got 328
FAIL: Hand count after playing council_room was not correct. Expected 271, got 221
FAIL: Hand count after playing council_room was not correct. Expected 254, got 256
FAIL: Hand count after playing council_room was not correct. Expected 256, got 411
FAIL: Hand count after playing council_room was not correct. Expected 256, got 135
FAIL: Hand count after playing council_room was not correct. Expected 256, got 357
FAIL: Hand count after playing council_room was not correct. Expected 497, got 499
FAIL: Hand count after playing council_room was not correct. Expected 499, got 120
FAIL: Hand count after playing council_room was not correct. Expected 499, got 421
FAIL: Hand count after playing council_room was not correct. Expected 499, got 464
FAIL: Hand count after playing council_room was not correct. Expected 495, got 497
FAIL: Hand count after playing council_room was not correct. Expected 497, got 53
FAIL: Hand count after playing council_room was not correct. Expected 497, got 70
FAIL: Hand count after playing council_room was not correct. Expected 497, got 319
FAIL: Hand count after playing council_room was not correct. Expected 483, got 485
FAIL: Hand count after playing council_room was not correct. Expected 485, got 70
FAIL: Hand count after playing council_room was not correct. Expected 485, got 50
FAIL: Hand count after playing council_room was not correct. Expected 485, got 392
FAIL: Hand count after playing council_room was not correct. Expected 162, got 164
FAIL: Hand count after playing council_room was not correct. Expected 164, got 198
FAIL: Hand count after playing council_room was not correct. Expected 164, got 432
FAIL: Hand count after playing council_room was not correct. Expected 164, got 344
FAIL: Hand count after playing council_room was not correct. Expected 291, got 293
FAIL: Hand count after playing council_room was not correct. Expected 293, got 118
FAIL: Hand count after playing council_room was not correct. Expected 293, got 101
FAIL: Hand count after playing council_room was not correct. Expected 293, got 259
FAIL: Hand count after playing council_room was not correct. Expected 12, got 14
FAIL: Hand count after playing council_room was not correct. Expected 14, got 345
FAIL: Hand count after playing council_room was not correct. Expected 14, got 106
FAIL: Hand count after playing council_room was not correct. Expected 14, got 67
FAIL: Hand count after playing council_room was not correct. Expected 76, got 78
FAIL: Hand count after playing council_room was not correct. Expected 78, got 440
FAIL: Hand count after playing council_room was not correct. Expected 78, got 90
FAIL: Hand count after playing council_room was not correct. Expected 78, got 172
FAIL: Hand count after playing council_room was not correct. Expected 136, got 138
FAIL: Hand count after playing council_room was not correct. Expected 138, got 410
FAIL: Hand count after playing council_room was not correct. Expected 138, got 276
FAIL: Hand count after playing council_room was not correct. Expected 138, got 345
FAIL: Hand count after playing council_room was not correct. Expected 145, got 147
FAIL: Hand count after playing council_room was not correct. Expected 147, got 62
FAIL: Hand count after playing council_room was not correct. Expected 147, got 341
FAIL: Hand count after playing council_room was not correct. Expected 147, got 226
FAIL: Hand count after playing council_room was not correct. Expected 121, got 123
FAIL: Hand count after playing council_room was not correct. Expected 123, got 454
FAIL: Hand count after playing council_room was not correct. Expected 123, got 425
FAIL: Hand count after playing council_room was not correct. Expected 123, got 201
FAIL: Hand count after playing council_room was not correct. Expected 22, got 24
FAIL: Hand count after playing council_room was not correct. Expected 24, got 112
FAIL: Hand count after playing council_room was not correct. Expected 24, got 70
FAIL: Hand count after playing council_room was not correct. Expected 24, got 322
FAIL: Hand count after playing council_room was not correct. Expected 21, got 23
FAIL: Hand count after playing council_room was not correct. Expected 23, got 179
FAIL: Hand count after playing council_room was not correct. Expected 23, got 353
FAIL: Hand count after playing council_room was not correct. Expected 23, got 122
FAIL: Hand count after playing council_room was not correct. Expected 348, got 350
FAIL: Hand count after playing council_room was not correct. Expected 350, got 348
FAIL: Hand count after playing council_room was not correct. Expected 350, got 196
FAIL: Hand count after playing council_room was not correct. Expected 350, got 420
FAIL: Hand count after playing council_room was not correct. Expected 214, got 216
FAIL: Hand count after playing council_room was not correct. Expected 216, got 179
FAIL: Hand count after playing council_room was not correct. Expected 216, got 160
FAIL: Hand count after playing council_room was not correct. Expected 216, got 209
FAIL: Hand count after playing council_room was not correct. Expected 438, got 440
FAIL: Hand count after playing council_room was not correct. Expected 440, got 182
FAIL: Hand count after playing council_room was not correct. Expected 440, got 98
FAIL: Hand count after playing council_room was not correct. Expected 440, got 86
FAIL: Hand count after playing council_room was not correct. Expected 176, got 178
FAIL: Hand count after playing council_room was not correct. Expected 178, got 434
FAIL: Hand count after playing council_room was not correct. Expected 178, got 317
FAIL: Hand count after playing council_room was not correct. Expected 178, got 464
FAIL: Hand count after playing council_room was not correct. Expected 355, got 357
FAIL: Hand count after playing council_room was not correct. Expected 357, got 319
FAIL: Hand count after playing council_room was not correct. Expected 357, got 92
FAIL: Hand count after playing council_room was not correct. Expected 357, got 419
FAIL: Hand count after playing council_room was not correct. Expected 146, got 148
FAIL: Hand count after playing council_room was not correct. Expected 148, got 453
FAIL: Hand count after playing council_room was not correct. Expected 148, got 465
FAIL: Hand count after playing council_room was not correct. Expected 148, got 202
FAIL: Hand count after playing council_room was not correct. Expected 475, got 477
FAIL: Hand count after playing council_room was not correct. Expected 477, got 486
FAIL: Hand count after playing council_room was not correct. Expected 477, got 479
FAIL: Hand count after playing council_room was not correct. Expected 477, got 385
FAIL: Hand count after playing council_room was not correct. Expected 156, got 158
FAIL: Hand count after playing council_room was not correct. Expected 158, got 258
FAIL: Hand count after playing council_room was not correct. Expected 158, got 268
FAIL: Hand count after playing council_room was not correct. Expected 158, got 461
FAIL: Hand count after playing council_room was not correct. Expected 43, got 45
FAIL: Hand count after playing council_room was not correct. Expected 45, got 351
FAIL: Hand count after playing council_room was not correct. Expected 45, got 284
FAIL: Hand count after playing council_room was not correct. Expected 45, got 242
FAIL: Hand count after playing council_room was not correct. Expected 417, got 419
FAIL: Hand count after playing council_room was not correct. Expected 419, got 431
FAIL: Hand count after playing council_room was not correct. Expected 419, got 122
FAIL: Hand count after playing council_room was not correct. Expected 419, got 97
FAIL: Hand count after playing council_room was not correct. Expected 335, got 337
FAIL: Hand count after playing council_room was not correct. Expected 337, got 418
FAIL: Hand count after playing council_room was not correct. Expected 337, got 316
FAIL: Hand count after playing council_room was not correct. Expected 337, got 88
FAIL: Hand count after playing council_room was not correct. Expected 28, got 30
FAIL: Hand count after playing council_room was not correct. Expected 30, got 250
FAIL: Hand count after playing council_room was not correct. Expected 30, got 225
FAIL: Hand count after playing council_room was not correct. Expected 30, got 252
FAIL: Hand count after playing council_room was not correct. Expected 51, got 53
FAIL: Hand count after playing council_room was not correct. Expected 53, got 8
FAIL: Hand count after playing council_room was not correct. Expected 53, got 322
FAIL: Hand count after playing council_room was not correct. Expected 53, got 454
FAIL: Hand count after playing council_room was not correct. Expected 171, got 173
FAIL: Hand count after playing council_room was not correct. Expected 173, got 257
FAIL: Hand count after playing council_room was not correct. Expected 173, got 291
FAIL: Hand count after playing council_room was not correct. Expected 173, got 134
FAIL: Hand count after playing council_room was not correct. Expected 24, got 26
FAIL: Hand count after playing council_room was not correct. Expected 26, got 458
FAIL: Hand count after playing council_room was not correct. Expected 26, got 230
FAIL: Hand count after playing council_room was not correct. Expected 26, got 223
FAIL: Hand count after playing council_room was not correct. Expected 230, got 232
FAIL: Hand count after playing council_room was not correct. Expected 232, got 442
FAIL: Hand count after playing council_room was not correct. Expected 232, got 58
FAIL: Hand count after playing council_room was not correct. Expected 232, got 96
FAIL: Hand count after playing council_room was not correct. Expected 385, got 387
FAIL: Hand count after playing council_room was not correct. Expected 387, got 449
FAIL: Hand count after playing council_room was not correct. Expected 387, got 291
FAIL: Hand count after playing council_room was not correct. Expected 387, got 445
FAIL: Hand count after playing council_room was not correct. Expected 253, got 255
FAIL: Hand count after playing council_room was not correct. Expected 255, got 352
FAIL: Hand count after playing council_room was not correct. Expected 255, got 378
FAIL: Hand count after playing council_room was not correct. Expected 255, got 134
FAIL: Hand count after playing council_room was not correct. Expected 286, got 288
FAIL: Hand count after playing council_room was not correct. Expected 288, got 53
FAIL: Hand count after playing council_room was not correct. Expected 288, got 208
FAIL: Hand count after playing council_room was not correct. Expected 288, got 103
FAIL: Hand count after playing council_room was not correct. Expected 41, got 43
FAIL: Hand count after playing council_room was not correct. Expected 43, got 369
FAIL: Hand count after playing council_room was not correct. Expected 43, got 111
FAIL: Hand count after playing council_room was not correct. Expected 43, got 352
FAIL: Hand count after playing council_room was not correct. Expected 487, got 489
FAIL: Hand count after playing council_room was not correct. Expected 489, got 418
FAIL: Hand count after playing council_room was not correct. Expected 489, got 474
FAIL: Hand count after playing council_room was not correct. Expected 489, got 326
FAIL: Hand count after playing council_room was not correct. Expected 259, got 261
FAIL: Hand count after playing council_room was not correct. Expected 261, got 76
FAIL: Hand count after playing council_room was not correct. Expected 261, got 295
FAIL: Hand count after playing council_room was not correct. Expected 261, got 74
FAIL: Hand count after playing council_room was not correct. Expected 226, got 228
FAIL: Hand count after playing council_room was not correct. Expected 228, got 59
FAIL: Hand count after playing council_room was not correct. Expected 228, got 59
FAIL: Hand count after playing council_room was not correct. Expected 228, got 66
FAIL: Hand count after playing council_room was not correct. Expected 137, got 139
FAIL: Hand count after playing council_room was not correct. Expected 139, got 331
FAIL: Hand count after playing council_room was not correct. Expected 139, got 364
FAIL: Hand count after playing council_room was not correct. Expected 139, got 80
FAIL: Hand count after playing council_room was not correct. Expected 260, got 262
FAIL: Hand count after playing council_room was not correct. Expected 262, got 197
FAIL: Hand count after playing council_room was not correct. Expected 262, got 314
FAIL: Hand count after playing council_room was not correct. Expected 262, got 169
FAIL: Hand count after playing council_room was not correct. Expected 347, got 349
FAIL: Hand count after playing council_room was not correct. Expected 349, got 148
FAIL: Hand count after playing council_room was not correct. Expected 349, got 438
FAIL: Hand count after playing council_room was not correct. Expected 349, got 213
FAIL: Hand count after playing council_room was not correct. Expected 215, got 217
FAIL: Hand count after playing council_room was not correct. Expected 217, got 269
FAIL: Hand count after playing council_room was not correct. Expected 217, got 214
FAIL: Hand count after playing council_room was not correct. Expected 217, got 468
FAIL: Hand count after playing council_room was not correct. Expected 23, got 25
FAIL: Hand count after playing council_room was not correct. Expected 25, got 28
FAIL: Hand count after playing council_room was not correct. Expected 25, got 200
FAIL: Hand count after playing council_room was not correct. Expected 25, got 385
FAIL: Hand count after playing council_room was not correct. Expected 322, got 324
FAIL: Hand count after playing council_room was not correct. Expected 324, got 283
FAIL: Hand count after playing council_room was not correct. Expected 324, got 172
FAIL: Hand count after playing council_room was not correct. Expected 324, got 112
FAIL: Hand count after playing council_room was not correct. Expected 427, got 429
FAIL: Hand count after playing council_room was not correct. Expected 429, got 440
FAIL: Hand count after playing council_room was not correct. Expected 429, got 466
FAIL: Hand count after playing council_room was not correct. Expected 429, got 198
FAIL: Hand count after playing council_room was not correct. Expected 177, got 179
FAIL: Hand count after playing council_room was not correct. Expected 179, got 413
FAIL: Hand count after playing council_room was not correct. Expected 179, got 122
FAIL: Hand count after playing council_room was not correct. Expected 179, got 460
FAIL: Hand count after playing council_room was not correct. Expected 50, got 52
FAIL: Hand count after playing council_room was not correct. Expected 52, got 463
FAIL: Hand count after playing council_room was not correct. Expected 52, got 214
FAIL: Hand count after playing council_room was not correct. Expected 52, got 311
FAIL: Hand count after playing council_room was not correct. Expected 324, got 326
FAIL: Hand count after playing council_room was not correct. Expected 326, got 38
FAIL: Hand count after playing council_room was not correct. Expected 326, got 368
FAIL: Hand count after playing council_room was not correct. Expected 326, got 98
FAIL: Hand count after playing council_room was not correct. Expected 480, got 482
FAIL: Hand count after playing council_room was not correct. Expected 482, got 471
FAIL: Hand count after playing council_room was not correct. Expected 482, got 115
FAIL: Hand count after playing council_room was not correct. Expected 482, got 489
FAIL: Hand count after playing council_room was not correct. Expected 329, got 331
FAIL: Hand count after playing council_room was not correct. Expected 331, got 439
FAIL: Hand count after playing council_room was not correct. Expected 331, got 264
FAIL: Hand count after playing council_room was not correct. Expected 331, got 228
FAIL: Hand count after playing council_room was not correct. Expected 471, got 473
FAIL: Hand count after playing council_room was not correct. Expected 473, got 388
FAIL: Hand count after playing council_room was not correct. Expected 473, got 154
FAIL: Hand count after playing council_room was not correct. Expected 473, got 155
FAIL: Hand count after playing council_room was not correct. Expected 160, got 162
FAIL: Hand count after playing council_room was not correct. Expected 162, got 159
FAIL: Hand count after playing council_room was not correct. Expected 162, got 433
FAIL: Hand count after playing council_room was not correct. Expected 162, got 178
FAIL: Hand count after playing council_room was not correct. Expected 66, got 68
FAIL: Hand count after playing council_room was not correct. Expected 68, got 107
FAIL: Hand count after playing council_room was not correct. Expected 68, got 26
FAIL: Hand count after playing council_room was not correct. Expected 68, got 35
FAIL: Hand count after playing council_room was not correct. Expected 233, got 235
FAIL: Hand count after playing council_room was not correct. Expected 235, got 14
FAIL: Hand count after playing council_room was not correct. Expected 235, got 246
FAIL: Hand count after playing council_room was not correct. Expected 235, got 443
FAIL: Hand count after playing council_room was not correct. Expected 188, got 190
FAIL: Hand count after playing council_room was not correct. Expected 190, got 289
FAIL: Hand count after playing council_room was not correct. Expected 190, got 207
FAIL: Hand count after playing council_room was not correct. Expected 190, got 492
FAIL: Hand count after playing council_room was not correct. Expected 317, got 319
FAIL: Hand count after playing council_room was not correct. Expected 319, got 469
FAIL: Hand count after playing council_room was not correct. Expected 319, got 242
FAIL: Hand count after playing council_room was not correct. Expected 319, got 330
FAIL: Hand count after playing council_room was not correct. Expected 360, got 362
FAIL: Hand count after playing council_room was not correct. Expected 362, got 48
FAIL: Hand count after playing council_room was not correct. Expected 362, got 251
FAIL: Hand count after playing council_room was not correct. Expected 362, got 369
FAIL: Hand count after playing council_room was not correct. Expected 248, got 250
FAIL: Hand count after playing council_room was not correct. Expected 250, got 320
FAIL: Hand count after playing council_room was not correct. Expected 250, got 428
FAIL: Hand count after playing council_room was not correct. Expected 250, got 355
FAIL: Hand count after playing council_room was not correct. Expected 337, got 339
FAIL: Hand count after playing council_room was not correct. Expected 339, got 406
FAIL: Hand count after playing council_room was not correct. Expected 339, got 209
FAIL: Hand count after playing council_room was not correct. Expected 339, got 284
FAIL: Hand count after playing council_room was not correct. Expected 25, got 27
FAIL: Hand count after playing council_room was not correct. Expected 27, got 88
FAIL: Hand count after playing council_room was not correct. Expected 27, got 463
FAIL: Hand count after playing council_room was not correct. Expected 27, got 231
FAIL: Hand count after playing council_room was not correct. Expected 253, got 255
FAIL: Hand count after playing council_room was not correct. Expected 255, got 87
FAIL: Hand count after playing council_room was not correct. Expected 255, got 467
FAIL: Hand count after playing council_room was not correct. Expected 255, got 128
FAIL: Hand count after playing council_room was not correct. Expected 419, got 421
FAIL: Hand count after playing council_room was not correct. Expected 421, got 155
FAIL: Hand count after playing council_room was not correct. Expected 421, got 402
FAIL: Hand count after playing council_room was not correct. Expected 421, got 147
FAIL: Hand count after playing council_room was not correct. Expected 426, got 428
FAIL: Hand count after playing council_room was not correct. Expected 428, got 403
FAIL: Hand count after playing council_room was not correct. Expected 428, got 17
FAIL: Hand count after playing council_room was not correct. Expected 428, got 294
FAIL: Hand count after playing council_room was not correct. Expected 176, got 178
FAIL: Hand count after playing council_room was not correct. Expected 178, got 79
FAIL: Hand count after playing council_room was not correct. Expected 178, got 459
FAIL: Hand count after playing council_room was not correct. Expected 178, got 422
FAIL: Hand count after playing council_room was not correct. Expected 116, got 118
FAIL: Hand count after playing council_room was not correct. Expected 118, got 270
FAIL: Hand count after playing council_room was not correct. Expected 118, got 52
FAIL: Hand count after playing council_room was not correct. Expected 118, got 157
FAIL: Hand count after playing council_room was not correct. Expected 292, got 294
FAIL: Hand count after playing council_room was not correct. Expected 294, got 427
FAIL: Hand count after playing council_room was not correct. Expected 294, got 162
FAIL: Hand count after playing council_room was not correct. Expected 294, got 387
FAIL: Hand count after playing council_room was not correct. Expected 392, got 394
FAIL: Hand count after playing council_room was not correct. Expected 394, got 415
FAIL: Hand count after playing council_room was not correct. Expected 394, got 112
FAIL: Hand count after playing council_room was not correct. Expected 394, got 258
FAIL: Hand count after playing council_room was not correct. Expected 449, got 451
FAIL: Hand count after playing council_room was not correct. Expected 451, got 437
FAIL: Hand count after playing council_room was not correct. Expected 451, got 85
FAIL: Hand count after playing council_room was not correct. Expected 451, got 430
FAIL: Hand count after playing council_room was not correct. Expected 93, got 95
FAIL: Hand count after playing council_room was not correct. Expected 95, got 49
FAIL: Hand count after playing council_room was not correct. Expected 95, got 417
FAIL: Hand count after playing council_room was not correct. Expected 95, got 133
FAIL: Hand count after playing council_room was not correct. Expected 111, got 113
FAIL: Hand count after playing council_room was not correct. Expected 113, got 163
FAIL: Hand count after playing council_room was not correct. Expected 113, got 14
FAIL: Hand count after playing council_room was not correct. Expected 113, got 144
FAIL: Hand count after playing council_room was not correct. Expected 399, got 401
FAIL: Hand count after playing council_room was not correct. Expected 401, got 82
FAIL: Hand count after playing council_room was not correct. Expected 401, got 184
FAIL: Hand count after playing council_room was not correct. Expected 401, got 369
FAIL: Hand count after playing council_room was not correct. Expected 445, got 447
FAIL: Hand count after playing council_room was not correct. Expected 447, got 53
FAIL: Hand count after playing council_room was not correct. Expected 447, got 93
FAIL: Hand count after playing council_room was not correct. Expected 447, got 198
FAIL: Hand count after playing council_room was not correct. Expected 316, got 318
FAIL: Hand count after playing council_room was not correct. Expected 318, got 347
FAIL: Hand count after playing council_room was not correct. Expected 318, got 184
FAIL: Hand count after playing council_room was not correct. Expected 318, got 244
FAIL: Hand count after playing council_room was not correct. Expected 445, got 447
FAIL: Hand count after playing council_room was not correct. Expected 447, got 150
FAIL: Hand count after playing council_room was not correct. Expected 447, got 198
FAIL: Hand count after playing council_room was not correct. Expected 447, got 360
FAIL: Hand count after playing council_room was not correct. Expected 97, got 99
FAIL: Hand count after playing council_room was not correct. Expected 99, got 311
FAIL: Hand count after playing council_room was not correct. Expected 99, got 377
FAIL: Hand count after playing council_room was not correct. Expected 99, got 128
FAIL: Hand count after playing council_room was not correct. Expected 196, got 198
FAIL: Hand count after playing council_room was not correct. Expected 198, got 75
FAIL: Hand count after playing council_room was not correct. Expected 198, got 177
FAIL: Hand count after playing council_room was not correct. Expected 198, got 476
FAIL: Hand count after playing council_room was not correct. Expected 489, got 491
FAIL: Hand count after playing council_room was not correct. Expected 491, got 251
FAIL: Hand count after playing council_room was not correct. Expected 491, got 401
FAIL: Hand count after playing council_room was not correct. Expected 491, got 141
FAIL: Hand count after playing council_room was not correct. Expected 429, got 431
FAIL: Hand count after playing council_room was not correct. Expected 431, got 391
FAIL: Hand count after playing council_room was not correct. Expected 431, got 374
FAIL: Hand count after playing council_room was not correct. Expected 431, got 145
FAIL: Hand count after playing council_room was not correct. Expected 411, got 413
FAIL: Hand count after playing council_room was not correct. Expected 413, got 171
FAIL: Hand count after playing council_room was not correct. Expected 413, got 482
FAIL: Hand count after playing council_room was not correct. Expected 413, got 123
FAIL: Hand count after playing council_room was not correct. Expected 464, got 466
FAIL: Hand count after playing council_room was not correct. Expected 466, got 129
FAIL: Hand count after playing council_room was not correct. Expected 466, got 287
FAIL: Hand count after playing council_room was not correct. Expected 466, got 215
FAIL: Hand count after playing council_room was not correct. Expected 19, got 21
FAIL: Hand count after playing council_room was not correct. Expected 21, got 105
FAIL: Hand count after playing council_room was not correct. Expected 21, got 414
FAIL: Hand count after playing council_room was not correct. Expected 21, got 316
FAIL: Hand count after playing council_room was not correct. Expected 353, got 355
FAIL: Hand count after playing council_room was not correct. Expected 355, got 431
FAIL: Hand count after playing council_room was not correct. Expected 355, got 343
FAIL: Hand count after playing council_room was not correct. Expected 355, got 157
FAIL: Hand count after playing council_room was not correct. Expected 370, got 372
FAIL: Hand count after playing council_room was not correct. Expected 372, got 133
FAIL: Hand count after playing council_room was not correct. Expected 372, got 413
FAIL: Hand count after playing council_room was not correct. Expected 372, got 2
FAIL: Hand count after playing council_room was not correct. Expected 374, got 376
FAIL: Hand count after playing council_room was not correct. Expected 376, got 18
FAIL: Hand count after playing council_room was not correct. Expected 376, got 467
FAIL: Hand count after playing council_room was not correct. Expected 376, got 277
FAIL: Hand count after playing council_room was not correct. Expected 22, got 24
FAIL: Hand count after playing council_room was not correct. Expected 24, got 275
FAIL: Hand count after playing council_room was not correct. Expected 24, got 4
FAIL: Hand count after playing council_room was not correct. Expected 24, got 347
FAIL: Hand count after playing council_room was not correct. Expected 374, got 376
FAIL: Hand count after playing council_room was not correct. Expected 376, got 290
FAIL: Hand count after playing council_room was not correct. Expected 376, got 313
FAIL: Hand count after playing council_room was not correct. Expected 376, got 158
FAIL: Hand count after playing council_room was not correct. Expected 276, got 278
FAIL: Hand count after playing council_room was not correct. Expected 278, got 335
FAIL: Hand count after playing council_room was not correct. Expected 278, got 189
FAIL: Hand count after playing council_room was not correct. Expected 278, got 326
FAIL: Hand count after playing council_room was not correct. Expected 482, got 484
FAIL: Hand count after playing council_room was not correct. Expected 484, got 99
FAIL: Hand count after playing council_room was not correct. Expected 484, got 216
FAIL: Hand count after playing council_room was not correct. Expected 484, got 177
FAIL: Hand count after playing council_room was not correct. Expected 107, got 109
FAIL: Hand count after playing council_room was not correct. Expected 109, got 437
FAIL: Hand count after playing council_room was not correct. Expected 109, got 164
FAIL: Hand count after playing council_room was not correct. Expected 109, got 243
FAIL: Hand count after playing council_room was not correct. Expected 121, got 123
FAIL: Hand count after playing council_room was not correct. Expected 123, got 81
FAIL: Hand count after playing council_room was not correct. Expected 123, got 206
FAIL: Hand count after playing council_room was not correct. Expected 123, got 165
FAIL: Hand count after playing council_room was not correct. Expected 230, got 232
FAIL: Hand count after playing council_room was not correct. Expected 232, got 110
FAIL: Hand count after playing council_room was not correct. Expected 232, got 472
FAIL: Hand count after playing council_room was not correct. Expected 232, got 295
FAIL: Hand count after playing council_room was not correct. Expected 6, got 8
FAIL: Hand count after playing council_room was not correct. Expected 8, got 281
FAIL: Hand count after playing council_room was not correct. Expected 8, got 72
FAIL: Hand count after playing council_room was not correct. Expected 8, got 296
FAIL: Hand count after playing council_room was not correct. Expected 172, got 174
FAIL: Hand count after playing council_room was not correct. Expected 174, got 276
FAIL: Hand count after playing council_room was not correct. Expected 174, got 458
FAIL: Hand count after playing council_room was not correct. Expected 174, got 105
FAIL: Hand count after playing council_room was not correct. Expected 333, got 335
FAIL: Hand count after playing council_room was not correct. Expected 335, got 340
FAIL: Hand count after playing council_room was not correct. Expected 335, got 415
FAIL: Hand count after playing council_room was not correct. Expected 335, got 208
FAIL: Hand count after playing council_room was not correct. Expected 416, got 418
FAIL: Hand count after playing council_room was not correct. Expected 418, got 141
FAIL: Hand count after playing council_room was not correct. Expected 418, got 183
FAIL: Hand count after playing council_room was not correct. Expected 418, got 467
FAIL: Hand count after playing council_room was not correct. Expected 389, got 391
FAIL: Hand count after playing council_room was not correct. Expected 391, got 306
FAIL: Hand count after playing council_room was not correct. Expected 391, got 235
FAIL: Hand count after playing council_room was not correct. Expected 391, got 54
FAIL: Hand count after playing council_room was not correct. Expected 339, got 341
FAIL: Hand count after playing council_room was not correct. Expected 341, got 323
FAIL: Hand count after playing council_room was not correct. Expected 341, got 198
FAIL: Hand count after playing council_room was not correct. Expected 341, got 281
FAIL: Hand count after playing council_room was not correct. Expected 101, got 103
FAIL: Hand count after playing council_room was not correct. Expected 103, got 133
FAIL: Hand count after playing council_room was not correct. Expected 103, got 131
FAIL: Hand count after playing council_room was not correct. Expected 103, got 332
FAIL: Hand count after playing council_room was not correct. Expected 429, got 431
FAIL: Hand count after playing council_room was not correct. Expected 431, got 370
FAIL: Hand count after playing council_room was not correct. Expected 431, got 362
FAIL: Hand count after playing council_room was not correct. Expected 431, got 342
FAIL: Hand count after playing council_room was not correct. Expected 5, got 7
FAIL: Hand count after playing council_room was not correct. Expected 7, got 478
FAIL: Hand count after playing council_room was not correct. Expected 7, got 473
FAIL: Hand count after playing council_room was not correct. Expected 7, got 57
FAIL: Hand count after playing council_room was not correct. Expected 373, got 375
FAIL: Hand count after playing council_room was not correct. Expected 375, got 291
FAIL: Hand count after playing council_room was not correct. Expected 375, got 423
FAIL: Hand count after playing council_room was not correct. Expected 375, got 16
FAIL: Hand count after playing council_room was not correct. Expected 158, got 160
FAIL: Hand count after playing council_room was not correct. Expected 160, got 170
FAIL: Hand count after playing council_room was not correct. Expected 160, got 383
FAIL: Hand count after playing council_room was not correct. Expected 160, got 359
FAIL: Hand count after playing council_room was not correct. Expected 29, got 31
FAIL: Hand count after playing council_room was not correct. Expected 31, got 344
FAIL: Hand count after playing council_room was not correct. Expected 31, got 444
FAIL: Hand count after playing council_room was not correct. Expected 31, got 170
FAIL: Hand count after playing council_room was not correct. Expected 145, got 147
FAIL: Hand count after playing council_room was not correct. Expected 147, got 32
FAIL: Hand count after playing council_room was not correct. Expected 147, got 22
FAIL: Hand count after playing council_room was not correct. Expected 147, got 189
FAIL: Hand count after playing council_room was not correct. Expected 217, got 219
FAIL: Hand count after playing council_room was not correct. Expected 219, got 471
FAIL: Hand count after playing council_room was not correct. Expected 219, got 148
FAIL: Hand count after playing council_room was not correct. Expected 219, got 374
FAIL: Hand count after playing council_room was not correct. Expected 154, got 156
FAIL: Hand count after playing council_room was not correct. Expected 156, got 433
FAIL: Hand count after playing council_room was not correct. Expected 156, got 19
FAIL: Hand count after playing council_room was not correct. Expected 156, got 352
FAIL: Hand count after playing council_room was not correct. Expected 325, got 327
FAIL: Hand count after playing council_room was not correct. Expected 327, got 419
FAIL: Hand count after playing council_room was not correct. Expected 327, got 15
FAIL: Hand count after playing council_room was not correct. Expected 327, got 438
FAIL: Hand count after playing council_room was not correct. Expected 314, got 316
FAIL: Hand count after playing council_room was not correct. Expected 316, got 170
FAIL: Hand count after playing council_room was not correct. Expected 316, got 393
FAIL: Hand count after playing council_room was not correct. Expected 316, got 381
FAIL: Hand count after playing council_room was not correct. Expected 232, got 234
FAIL: Hand count after playing council_room was not correct. Expected 234, got 349
FAIL: Hand count after playing council_room was not correct. Expected 234, got 259
FAIL: Hand count after playing council_room was not correct. Expected 234, got 59
FAIL: Hand count after playing council_room was not correct. Expected 496, got 498
FAIL: Hand count after playing council_room was not correct. Expected 498, got 345
FAIL: Hand count after playing council_room was not correct. Expected 498, got 463
FAIL: Hand count after playing council_room was not correct. Expected 498, got 339
FAIL: Hand count after playing council_room was not correct. Expected 431, got 433
FAIL: Hand count after playing council_room was not correct. Expected 433, got 293
FAIL: Hand count after playing council_room was not correct. Expected 433, got 394
FAIL: Hand count after playing council_room was not correct. Expected 433, got 299
FAIL: Hand count after playing council_room was not correct. Expected 212, got 214
FAIL: Hand count after playing council_room was not correct. Expected 214, got 293
FAIL: Hand count after playing council_room was not correct. Expected 214, got 422
FAIL: Hand count after playing council_room was not correct. Expected 214, got 43
FAIL: Hand count after playing council_room was not correct. Expected 63, got 65
FAIL: Hand count after playing council_room was not correct. Expected 65, got 245
FAIL: Hand count after playing council_room was not correct. Expected 65, got 473
FAIL: Hand count after playing council_room was not correct. Expected 65, got 487
FAIL: Hand count after playing council_room was not correct. Expected 421, got 423
FAIL: Hand count after playing council_room was not correct. Expected 423, got 299
FAIL: Hand count after playing council_room was not correct. Expected 423, got 36
FAIL: Hand count after playing council_room was not correct. Expected 423, got 358
FAIL: Hand count after playing council_room was not correct. Expected 280, got 282
FAIL: Hand count after playing council_room was not correct. Expected 282, got 45
FAIL: Hand count after playing council_room was not correct. Expected 282, got 150
FAIL: Hand count after playing council_room was not correct. Expected 282, got 416
FAIL: Hand count after playing council_room was not correct. Expected 311, got 313
FAIL: Hand count after playing council_room was not correct. Expected 313, got 379
FAIL: Hand count after playing council_room was not correct. Expected 313, got 251
FAIL: Hand count after playing council_room was not correct. Expected 313, got 7
FAIL: Hand count after playing council_room was not correct. Expected 334, got 336
FAIL: Hand count after playing council_room was not correct. Expected 336, got 103
FAIL: Hand count after playing council_room was not correct. Expected 336, got 374
FAIL: Hand count after playing council_room was not correct. Expected 336, got 267
FAIL: Hand count after playing council_room was not correct. Expected 93, got 95
FAIL: Hand count after playing council_room was not correct. Expected 95, got 325
FAIL: Hand count after playing council_room was not correct. Expected 95, got 177
FAIL: Hand count after playing council_room was not correct. Expected 95, got 285
FAIL: Hand count after playing council_room was not correct. Expected 144, got 146
FAIL: Hand count after playing council_room was not correct. Expected 146, got 56
FAIL: Hand count after playing council_room was not correct. Expected 146, got 55
FAIL: Hand count after playing council_room was not correct. Expected 146, got 216
FAIL: Hand count after playing council_room was not correct. Expected 498, got 500
FAIL: Hand count after playing council_room was not correct. Expected 500, got 54
FAIL: Hand count after playing council_room was not correct. Expected 500, got 305
FAIL: Hand count after playing council_room was not correct. Expected 500, got 235
FAIL: Hand count after playing council_room was not correct. Expected 460, got 462
FAIL: Hand count after playing council_room was not correct. Expected 462, got 357
FAIL: Hand count after playing council_room was not correct. Expected 462, got 42
FAIL: Hand count after playing council_room was not correct. Expected 462, got 35
FAIL: Hand count after playing council_room was not correct. Expected 252, got 254
FAIL: Hand count after playing council_room was not correct. Expected 254, got 333
FAIL: Hand count after playing council_room was not correct. Expected 254, got 335
FAIL: Hand count after playing council_room was not correct. Expected 254, got 267
FAIL: Hand count after playing council_room was not correct. Expected 171, got 173
FAIL: Hand count after playing council_room was not correct. Expected 173, got 208
FAIL: Hand count after playing council_room was not correct. Expected 173, got 363
FAIL: Hand count after playing council_room was not correct. Expected 173, got 496
FAIL: Hand count after playing council_room was not correct. Expected 246, got 248
FAIL: Hand count after playing council_room was not correct. Expected 248, got 177
FAIL: Hand count after playing council_room was not correct. Expected 248, got 193
FAIL: Hand count after playing council_room was not correct. Expected 248, got 396
FAIL: Hand count after playing council_room was not correct. Expected 483, got 485
FAIL: Hand count after playing council_room was not correct. Expected 485, got 486
FAIL: Hand count after playing council_room was not correct. Expected 485, got 173
FAIL: Hand count after playing council_room was not correct. Expected 485, got 291
FAIL: Hand count after playing council_room was not correct. Expected 44, got 46
FAIL: Hand count after playing council_room was not correct. Expected 46, got 395
FAIL: Hand count after playing council_room was not correct. Expected 46, got 312
FAIL: Hand count after playing council_room was not correct. Expected 46, got 112
FAIL: Hand count after playing council_room was not correct. Expected 209, got 211
FAIL: Hand count after playing council_room was not correct. Expected 211, got 345
FAIL: Hand count after playing council_room was not correct. Expected 211, got 94
FAIL: Hand count after playing council_room was not correct. Expected 211, got 309
FAIL: Hand count after playing council_room was not correct. Expected 343, got 345
FAIL: Hand count after playing council_room was not correct. Expected 345, got 418
FAIL: Hand count after playing council_room was not correct. Expected 345, got 60
FAIL: Hand count after playing council_room was not correct. Expected 345, got 345
FAIL: Hand count after playing council_room was not correct. Expected 290, got 292
FAIL: Hand count after playing council_room was not correct. Expected 292, got 364
FAIL: Hand count after playing council_room was not correct. Expected 292, got 11
FAIL: Hand count after playing council_room was not correct. Expected 292, got 267
FAIL: Hand count after playing council_room was not correct. Expected 27, got 29
FAIL: Hand count after playing council_room was not correct. Expected 29, got 47
FAIL: Hand count after playing council_room was not correct. Expected 29, got 47
FAIL: Hand count after playing council_room was not correct. Expected 29, got 89
FAIL: Hand count after playing council_room was not correct. Expected 381, got 383
FAIL: Hand count after playing council_room was not correct. Expected 383, got 269
FAIL: Hand count after playing council_room was not correct. Expected 383, got 203
FAIL: Hand count after playing council_room was not correct. Expected 383, got 204
FAIL: Hand count after playing council_room was not correct. Expected 7, got 9
FAIL: Hand count after playing council_room was not correct. Expected 9, got 166
FAIL: Hand count after playing council_room was not correct. Expected 9, got 264
FAIL: Hand count after playing council_room was not correct. Expected 9, got 265
FAIL: Hand count after playing council_room was not correct. Expected 325, got 327
FAIL: Hand count after playing council_room was not correct. Expected 327, got 22
FAIL: Hand count after playing council_room was not correct. Expected 327, got 238
FAIL: Hand count after playing council_room was not correct. Expected 327, got 243
FAIL: Hand count after playing council_room was not correct. Expected 124, got 126
FAIL: Hand count after playing council_room was not correct. Expected 126, got 166
FAIL: Hand count after playing council_room was not correct. Expected 126, got 205
FAIL: Hand count after playing council_room was not correct. Expected 126, got 94
FAIL: Hand count after playing council_room was not correct. Expected 321, got 323
FAIL: Hand count after playing council_room was not correct. Expected 323, got 66
FAIL: Hand count after playing council_room was not correct. Expected 323, got 164
FAIL: Hand count after playing council_room was not correct. Expected 323, got 335
FAIL: Hand count after playing council_room was not correct. Expected 235, got 237
FAIL: Hand count after playing council_room was not correct. Expected 237, got 8
FAIL: Hand count after playing council_room was not correct. Expected 237, got 389
FAIL: Hand count after playing council_room was not correct. Expected 237, got 344
FAIL: Hand count after playing council_room was not correct. Expected 325, got 327
FAIL: Hand count after playing council_room was not correct. Expected 327, got 107
FAIL: Hand count after playing council_room was not correct. Expected 327, got 480
FAIL: Hand count after playing council_room was not correct. Expected 327, got 441
FAIL: Hand count after playing council_room was not correct. Expected 289, got 291
FAIL: Hand count after playing council_room was not correct. Expected 291, got 425
FAIL: Hand count after playing council_room was not correct. Expected 291, got 17
FAIL: Hand count after playing council_room was not correct. Expected 291, got 226
FAIL: Hand count after playing council_room was not correct. Expected 276, got 278
FAIL: Hand count after playing council_room was not correct. Expected 278, got 272
FAIL: Hand count after playing council_room was not correct. Expected 278, got 499
FAIL: Hand count after playing council_room was not correct. Expected 278, got 434
FAIL: Hand count after playing council_room was not correct. Expected 9, got 11
FAIL: Hand count after playing council_room was not correct. Expected 11, got 445
FAIL: Hand count after playing council_room was not correct. Expected 11, got 281
FAIL: Hand count after playing council_room was not correct. Expected 11, got 388
FAIL: Hand count after playing council_room was not correct. Expected 309, got 311
FAIL: Hand count after playing council_room was not correct. Expected 311, got 128
FAIL: Hand count after playing council_room was not correct. Expected 311, got 443
FAIL: Hand count after playing council_room was not correct. Expected 311, got 418
FAIL: Hand count after playing council_room was not correct. Expected 20, got 22
FAIL: Hand count after playing council_room was not correct. Expected 22, got 244
FAIL: Hand count after playing council_room was not correct. Expected 22, got 88
FAIL: Hand count after playing council_room was not correct. Expected 22, got 119
FAIL: Hand count after playing council_room was not correct. Expected 29, got 31
FAIL: Hand count after playing council_room was not correct. Expected 31, got 392
FAIL: Hand count after playing council_room was not correct. Expected 31, got 337
FAIL: Hand count after playing council_room was not correct. Expected 31, got 273
FAIL: Hand count after playing council_room was not correct. Expected 473, got 475
FAIL: Hand count after playing council_room was not correct. Expected 475, got 372
FAIL: Hand count after playing council_room was not correct. Expected 475, got 21
FAIL: Hand count after playing council_room was not correct. Expected 475, got 357
FAIL: Hand count after playing council_room was not correct. Expected 463, got 465
FAIL: Hand count after playing council_room was not correct. Expected 465, got 30
FAIL: Hand count after playing council_room was not correct. Expected 465, got 240
FAIL: Hand count after playing council_room was not correct. Expected 465, got 401
FAIL: Hand count after playing council_room was not correct. Expected 352, got 354
FAIL: Hand count after playing council_room was not correct. Expected 354, got 334
FAIL: Hand count after playing council_room was not correct. Expected 354, got 80
FAIL: Hand count after playing council_room was not correct. Expected 354, got 110
FAIL: Hand count after playing council_room was not correct. Expected 468, got 470
FAIL: Hand count after playing council_room was not correct. Expected 470, got 451
FAIL: Hand count after playing council_room was not correct. Expected 470, got 5
FAIL: Hand count after playing council_room was not correct. Expected 470, got 116
FAIL: Hand count after playing council_room was not correct. Expected 167, got 169
FAIL: Hand count after playing council_room was not correct. Expected 169, got 412
FAIL: Hand count after playing council_room was not correct. Expected 169, got 40
FAIL: Hand count after playing council_room was not correct. Expected 169, got 207
FAIL: Hand count after playing council_room was not correct. Expected 410, got 412
FAIL: Hand count after playing council_room was not correct. Expected 412, got 309
FAIL: Hand count after playing council_room was not correct. Expected 412, got 19
FAIL: Hand count after playing council_room was not correct. Expected 412, got 33
FAIL: Hand count after playing council_room was not correct. Expected 384, got 386
FAIL: Hand count after playing council_room was not correct. Expected 386, got 188
FAIL: Hand count after playing council_room was not correct. Expected 386, got 496
FAIL: Hand count after playing council_room was not correct. Expected 386, got 24
FAIL: Hand count after playing council_room was not correct. Expected 254, got 256
FAIL: Hand count after playing council_room was not correct. Expected 256, got 142
FAIL: Hand count after playing council_room was not correct. Expected 256, got 409
FAIL: Hand count after playing council_room was not correct. Expected 256, got 399
FAIL: Hand count after playing council_room was not correct. Expected 40, got 42
FAIL: Hand count after playing council_room was not correct. Expected 42, got 26
FAIL: Hand count after playing council_room was not correct. Expected 42, got 474
FAIL: Hand count after playing council_room was not correct. Expected 42, got 374
FAIL: Hand count after playing council_room was not correct. Expected 107, got 109
FAIL: Hand count after playing council_room was not correct. Expected 109, got 302
FAIL: Hand count after playing council_room was not correct. Expected 109, got 475
FAIL: Hand count after playing council_room was not correct. Expected 109, got 82
FAIL: Hand count after playing council_room was not correct. Expected 441, got 443
FAIL: Hand count after playing council_room was not correct. Expected 443, got 239
FAIL: Hand count after playing council_room was not correct. Expected 443, got 177
FAIL: Hand count after playing council_room was not correct. Expected 443, got 497
FAIL: Hand count after playing council_room was not correct. Expected 384, got 386
FAIL: Hand count after playing council_room was not correct. Expected 386, got 112
FAIL: Hand count after playing council_room was not correct. Expected 386, got 137
FAIL: Hand count after playing council_room was not correct. Expected 386, got 127
FAIL: Hand count after playing council_room was not correct. Expected 52, got 54
FAIL: Hand count after playing council_room was not correct. Expected 54, got 31
FAIL: Hand count after playing council_room was not correct. Expected 54, got 354
FAIL: Hand count after playing council_room was not correct. Expected 54, got 436
FAIL: Hand count after playing council_room was not correct. Expected 105, got 107
FAIL: Hand count after playing council_room was not correct. Expected 107, got 323
FAIL: Hand count after playing council_room was not correct. Expected 107, got 88
FAIL: Hand count after playing council_room was not correct. Expected 107, got 149
FAIL: Hand count after playing council_room was not correct. Expected 281, got 283
FAIL: Hand count after playing council_room was not correct. Expected 283, got 216
FAIL: Hand count after playing council_room was not correct. Expected 283, got 499
FAIL: Hand count after playing council_room was not correct. Expected 283, got 123
FAIL: Hand count after playing council_room was not correct. Expected 156, got 158
FAIL: Hand count after playing council_room was not correct. Expected 158, got 160
FAIL: Hand count after playing council_room was not correct. Expected 158, got 23
FAIL: Hand count after playing council_room was not correct. Expected 158, got 248
FAIL: Hand count after playing council_room was not correct. Expected 211, got 213
FAIL: Hand count after playing council_room was not correct. Expected 213, got 223
FAIL: Hand count after playing council_room was not correct. Expected 213, got 291
FAIL: Hand count after playing council_room was not correct. Expected 213, got 217
FAIL: Hand count after playing council_room was not correct. Expected 286, got 288
FAIL: Hand count after playing council_room was not correct. Expected 288, got 379
FAIL: Hand count after playing council_room was not correct. Expected 288, got 485
FAIL: Hand count after playing council_room was not correct. Expected 288, got 324
FAIL: Hand count after playing council_room was not correct. Expected 143, got 145
FAIL: Hand count after playing council_room was not correct. Expected 145, got 265
FAIL: Hand count after playing council_room was not correct. Expected 145, got 135
FAIL: Hand count after playing council_room was not correct. Expected 145, got 343
FAIL: Hand count after playing council_room was not correct. Expected 207, got 209
FAIL: Hand count after playing council_room was not correct. Expected 209, got 491
FAIL: Hand count after playing council_room was not correct. Expected 209, got 128
FAIL: Hand count after playing council_room was not correct. Expected 209, got 21
FAIL: Hand count after playing council_room was not correct. Expected 44, got 46
FAIL: Hand count after playing council_room was not correct. Expected 46, got 234
FAIL: Hand count after playing council_room was not correct. Expected 46, got 96
FAIL: Hand count after playing council_room was not correct. Expected 46, got 9
FAIL: Hand count after playing council_room was not correct. Expected 493, got 495
FAIL: Hand count after playing council_room was not correct. Expected 495, got 79
FAIL: Hand count after playing council_room was not correct. Expected 495, got 326
FAIL: Hand count after playing council_room was not correct. Expected 495, got 11
FAIL: Hand count after playing council_room was not correct. Expected 185, got 187
FAIL: Hand count after playing council_room was not correct. Expected 187, got 85
FAIL: Hand count after playing council_room was not correct. Expected 187, got 463
FAIL: Hand count after playing council_room was not correct. Expected 187, got 238
FAIL: Hand count after playing council_room was not correct. Expected 111, got 113
FAIL: Hand count after playing council_room was not correct. Expected 113, got 396
FAIL: Hand count after playing council_room was not correct. Expected 113, got 305
FAIL: Hand count after playing council_room was not correct. Expected 113, got 139
FAIL: Hand count after playing council_room was not correct. Expected 235, got 237
FAIL: Hand count after playing council_room was not correct. Expected 237, got 241
FAIL: Hand count after playing council_room was not correct. Expected 237, got 496
FAIL: Hand count after playing council_room was not correct. Expected 237, got 94
FAIL: Hand count after playing council_room was not correct. Expected 51, got 53
FAIL: Hand count after playing council_room was not correct. Expected 53, got 337
FAIL: Hand count after playing council_room was not correct. Expected 53, got 17
FAIL: Hand count after playing council_room was not correct. Expected 53, got 178
FAIL: Hand count after playing council_room was not correct. Expected 357, got 359
FAIL: Hand count after playing council_room was not correct. Expected 359, got 302
FAIL: Hand count after playing council_room was not correct. Expected 359, got 374
FAIL: Hand count after playing council_room was not correct. Expected 359, got 370
FAIL: Hand count after playing council_room was not correct. Expected 119, got 121
FAIL: Hand count after playing council_room was not correct. Expected 121, got 41
FAIL: Hand count after playing council_room was not correct. Expected 121, got 300
FAIL: Hand count after playing council_room was not correct. Expected 121, got 151
FAIL: Hand count after playing council_room was not correct. Expected 233, got 235
FAIL: Hand count after playing council_room was not correct. Expected 235, got 64
FAIL: Hand count after playing council_room was not correct. Expected 235, got 179
FAIL: Hand count after playing council_room was not correct. Expected 235, got 104
FAIL: Hand count after playing council_room was not correct. Expected 229, got 231
FAIL: Hand count after playing council_room was not correct. Expected 231, got 246
FAIL: Hand count after playing council_room was not correct. Expected 231, got 197
FAIL: Hand count after playing council_room was not correct. Expected 231, got 104
FAIL: Hand count after playing council_room was not correct. Expected 402, got 404
FAIL: Hand count after playing council_room was not correct. Expected 404, got 151
FAIL: Hand count after playing council_room was not correct. Expected 404, got 186
FAIL: Hand count after playing council_room was not correct. Expected 404, got 253
FAIL: Hand count after playing council_room was not correct. Expected 491, got 493
FAIL: Hand count after playing council_room was not correct. Expected 493, got 286
FAIL: Hand count after playing council_room was not correct. Expected 493, got 393
FAIL: Hand count after playing council_room was not correct. Expected 493, got 413
FAIL: Hand count after playing council_room was not correct. Expected 122, got 124
FAIL: Hand count after playing council_room was not correct. Expected 124, got 434
FAIL: Hand count after playing council_room was not correct. Expected 124, got 482
FAIL: Hand count after playing council_room was not correct. Expected 124, got 142
FAIL: Hand count after playing council_room was not correct. Expected 105, got 107
FAIL: Hand count after playing council_room was not correct. Expected 107, got 205
FAIL: Hand count after playing council_room was not correct. Expected 107, got 210
FAIL: Hand count after playing council_room was not correct. Expected 107, got 247
FAIL: Hand count after playing council_room was not correct. Expected 199, got 201
FAIL: Hand count after playing council_room was not correct. Expected 201, got 38
FAIL: Hand count after playing council_room was not correct. Expected 201, got 190
FAIL: Hand count after playing council_room was not correct. Expected 201, got 386
FAIL: Hand count after playing council_room was not correct. Expected 34, got 36
FAIL: Hand count after playing council_room was not correct. Expected 36, got 270
FAIL: Hand count after playing council_room was not correct. Expected 36, got 471
FAIL: Hand count after playing council_room was not correct. Expected 36, got 361
FAIL: Hand count after playing council_room was not correct. Expected 206, got 208
FAIL: Hand count after playing council_room was not correct. Expected 208, got 371
FAIL: Hand count after playing council_room was not correct. Expected 208, got 316
FAIL: Hand count after playing council_room was not correct. Expected 208, got 9
FAIL: Hand count after playing council_room was not correct. Expected 413, got 415
FAIL: Hand count after playing council_room was not correct. Expected 415, got 65
FAIL: Hand count after playing council_room was not correct. Expected 415, got 254
FAIL: Hand count after playing council_room was not correct. Expected 415, got 38
FAIL: Hand count after playing council_room was not correct. Expected 454, got 456
FAIL: Hand count after playing council_room was not correct. Expected 456, got 404
FAIL: Hand count after playing council_room was not correct. Expected 456, got 58
FAIL: Hand count after playing council_room was not correct. Expected 456, got 144
FAIL: Hand count after playing council_room was not correct. Expected 315, got 317
FAIL: Hand count after playing council_room was not correct. Expected 317, got 494
FAIL: Hand count after playing council_room was not correct. Expected 317, got 92
FAIL: Hand count after playing council_room was not correct. Expected 317, got 112
FAIL: Hand count after playing council_room was not correct. Expected 345, got 347
FAIL: Hand count after playing council_room was not correct. Expected 347, got 45
FAIL: Hand count after playing council_room was not correct. Expected 347, got 362
FAIL: Hand count after playing council_room was not correct. Expected 347, got 496
FAIL: Hand count after playing council_room was not correct. Expected 267, got 269
FAIL: Hand count after playing council_room was not correct. Expected 269, got 315
FAIL: Hand count after playing council_room was not correct. Expected 269, got 342
FAIL: Hand count after playing council_room was not correct. Expected 269, got 414
FAIL: Hand count after playing council_room was not correct. Expected 111, got 113
FAIL: Hand count after playing council_room was not correct. Expected 113, got 62
FAIL: Hand count after playing council_room was not correct. Expected 113, got 270
FAIL: Hand count after playing council_room was not correct. Expected 113, got 388
FAIL: Hand count after playing council_room was not correct. Expected 114, got 116
FAIL: Hand count after playing council_room was not correct. Expected 116, got 64
FAIL: Hand count after playing council_room was not correct. Expected 116, got 100
FAIL: Hand count after playing council_room was not correct. Expected 116, got 428
FAIL: Hand count after playing council_room was not correct. Expected 429, got 431
FAIL: Hand count after playing council_room was not correct. Expected 431, got 52
FAIL: Hand count after playing council_room was not correct. Expected 431, got 407
FAIL: Hand count after playing council_room was not correct. Expected 431, got 318
FAIL: Hand count after playing council_room was not correct. Expected 365, got 367
FAIL: Hand count after playing council_room was not correct. Expected 367, got 25
FAIL: Hand count after playing council_room was not correct. Expected 367, got 401
FAIL: Hand count after playing council_room was not correct. Expected 367, got 460
FAIL: Hand count after playing council_room was not correct. Expected 294, got 296
FAIL: Hand count after playing council_room was not correct. Expected 296, got 210
FAIL: Hand count after playing council_room was not correct. Expected 296, got 138
FAIL: Hand count after playing council_room was not correct. Expected 296, got 45
FAIL: Hand count after playing council_room was not correct. Expected 85, got 87
FAIL: Hand count after playing council_room was not correct. Expected 87, got 187
FAIL: Hand count after playing council_room was not correct. Expected 87, got 306
FAIL: Hand count after playing council_room was not correct. Expected 87, got 364
FAIL: Hand count after playing council_room was not correct. Expected 201, got 203
FAIL: Hand count after playing council_room was not correct. Expected 203, got 92
FAIL: Hand count after playing council_room was not correct. Expected 203, got 87
FAIL: Hand count after playing council_room was not correct. Expected 203, got 91
FAIL: Hand count after playing council_room was not correct. Expected 244, got 246
FAIL: Hand count after playing council_room was not correct. Expected 246, got 356
FAIL: Hand count after playing council_room was not correct. Expected 246, got 185
FAIL: Hand count after playing council_room was not correct. Expected 246, got 378
FAIL: Hand count after playing council_room was not correct. Expected 72, got 74
FAIL: Hand count after playing council_room was not correct. Expected 74, got 279
FAIL: Hand count after playing council_room was not correct. Expected 74, got 237
FAIL: Hand count after playing council_room was not correct. Expected 74, got 45
FAIL: Hand count after playing council_room was not correct. Expected 395, got 397
FAIL: Hand count after playing council_room was not correct. Expected 397, got 147
FAIL: Hand count after playing council_room was not correct. Expected 397, got 56
FAIL: Hand count after playing council_room was not correct. Expected 397, got 287
FAIL: Hand count after playing council_room was not correct. Expected 342, got 344
FAIL: Hand count after playing council_room was not correct. Expected 344, got 64
FAIL: Hand count after playing council_room was not correct. Expected 344, got 318
FAIL: Hand count after playing council_room was not correct. Expected 344, got 459
FAIL: Hand count after playing council_room was not correct. Expected 62, got 64
FAIL: Hand count after playing council_room was not correct. Expected 64, got 36
FAIL: Hand count after playing council_room was not correct. Expected 64, got 120
FAIL: Hand count after playing council_room was not correct. Expected 64, got 31
FAIL: Hand count after playing council_room was not correct. Expected 107, got 109
FAIL: Hand count after playing council_room was not correct. Expected 109, got 451
FAIL: Hand count after playing council_room was not correct. Expected 109, got 389
FAIL: Hand count after playing council_room was not correct. Expected 109, got 78
FAIL: Hand count after playing council_room was not correct. Expected 182, got 184
FAIL: Hand count after playing council_room was not correct. Expected 184, got 28
FAIL: Hand count after playing council_room was not correct. Expected 184, got 214
FAIL: Hand count after playing council_room was not correct. Expected 184, got 1
FAIL: Hand count after playing council_room was not correct. Expected 43, got 45
FAIL: Hand count after playing council_room was not correct. Expected 45, got 459
FAIL: Hand count after playing council_room was not correct. Expected 45, got 4
FAIL: Hand count after playing council_room was not correct. Expected 45, got 187
FAIL: Hand count after playing council_room was not correct. Expected 119, got 121
FAIL: Hand count after playing council_room was not correct. Expected 121, got 19
FAIL: Hand count after playing council_room was not correct. Expected 121, got 55
FAIL: Hand count after playing council_room was not correct. Expected 121, got 80
FAIL: Hand count after playing council_room was not correct. Expected 241, got 243
FAIL: Hand count after playing council_room was not correct. Expected 243, got 122
FAIL: Hand count after playing council_room was not correct. Expected 243, got 51
FAIL: Hand count after playing council_room was not correct. Expected 243, got 52
FAIL: Hand count after playing council_room was not correct. Expected 180, got 182
FAIL: Hand count after playing council_room was not correct. Expected 182, got 72
FAIL: Hand count after playing council_room was not correct. Expected 182, got 355
FAIL: Hand count after playing council_room was not correct. Expected 182, got 248
FAIL: Hand count after playing council_room was not correct. Expected 416, got 418
FAIL: Hand count after playing council_room was not correct. Expected 418, got 317
FAIL: Hand count after playing council_room was not correct. Expected 418, got 121
FAIL: Hand count after playing council_room was not correct. Expected 418, got 133
FAIL: Hand count after playing council_room was not correct. Expected 275, got 277
FAIL: Hand count after playing council_room was not correct. Expected 277, got 96
FAIL: Hand count after playing council_room was not correct. Expected 277, got 249
FAIL: Hand count after playing council_room was not correct. Expected 277, got 132
FAIL: Hand count after playing council_room was not correct. Expected 168, got 170
FAIL: Hand count after playing council_room was not correct. Expected 170, got 204
FAIL: Hand count after playing council_room was not correct. Expected 170, got 351
FAIL: Hand count after playing council_room was not correct. Expected 170, got 382
FAIL: Hand count after playing council_room was not correct. Expected 125, got 127
FAIL: Hand count after playing council_room was not correct. Expected 127, got 242
FAIL: Hand count after playing council_room was not correct. Expected 127, got 436
FAIL: Hand count after playing council_room was not correct. Expected 127, got 290
FAIL: Hand count after playing council_room was not correct. Expected 108, got 110
FAIL: Hand count after playing council_room was not correct. Expected 110, got 471
FAIL: Hand count after playing council_room was not correct. Expected 110, got 382
FAIL: Hand count after playing council_room was not correct. Expected 110, got 241
FAIL: Hand count after playing council_room was not correct. Expected 102, got 104
FAIL: Hand count after playing council_room was not correct. Expected 104, got 468
FAIL: Hand count after playing council_room was not correct. Expected 104, got 1
FAIL: Hand count after playing council_room was not correct. Expected 104, got 50
FAIL: Hand count after playing council_room was not correct. Expected 378, got 380
FAIL: Hand count after playing council_room was not correct. Expected 380, got 250
FAIL: Hand count after playing council_room was not correct. Expected 380, got 231
FAIL: Hand count after playing council_room was not correct. Expected 380, got 399
FAIL: Hand count after playing council_room was not correct. Expected 400, got 402
FAIL: Hand count after playing council_room was not correct. Expected 402, got 472
FAIL: Hand count after playing council_room was not correct. Expected 402, got 110
FAIL: Hand count after playing council_room was not correct. Expected 402, got 215
FAIL: Hand count after playing council_room was not correct. Expected 112, got 114
FAIL: Hand count after playing council_room was not correct. Expected 114, got 304
FAIL: Hand count after playing council_room was not correct. Expected 114, got 188
FAIL: Hand count after playing council_room was not correct. Expected 114, got 230
FAIL: Hand count after playing council_room was not correct. Expected 257, got 259
FAIL: Hand count after playing council_room was not correct. Expected 259, got 97
FAIL: Hand count after playing council_room was not correct. Expected 259, got 252
FAIL: Hand count after playing council_room was not correct. Expected 259, got 216
FAIL: Hand count after playing council_room was not correct. Expected 127, got 129
FAIL: Hand count after playing council_room was not correct. Expected 129, got 298
FAIL: Hand count after playing council_room was not correct. Expected 129, got 395
FAIL: Hand count after playing council_room was not correct. Expected 129, got 28
FAIL: Hand count after playing council_room was not correct. Expected 254, got 256
FAIL: Hand count after playing council_room was not correct. Expected 256, got 471
FAIL: Hand count after playing council_room was not correct. Expected 256, got 417
FAIL: Hand count after playing council_room was not correct. Expected 256, got 471
FAIL: Hand count after playing council_room was not correct. Expected 218, got 220
FAIL: Hand count after playing council_room was not correct. Expected 220, got 108
FAIL: Hand count after playing council_room was not correct. Expected 220, got 37
FAIL: Hand count after playing council_room was not correct. Expected 220, got 341
FAIL: Hand count after playing council_room was not correct. Expected 326, got 328
FAIL: Hand count after playing council_room was not correct. Expected 328, got 284
FAIL: Hand count after playing council_room was not correct. Expected 328, got 479
FAIL: Hand count after playing council_room was not correct. Expected 328, got 228
FAIL: Hand count after playing council_room was not correct. Expected 410, got 412
FAIL: Hand count after playing council_room was not correct. Expected 412, got 78
FAIL: Hand count after playing council_room was not correct. Expected 412, got 234
FAIL: Hand count after playing council_room was not correct. Expected 412, got 235
FAIL: Hand count after playing council_room was not correct. Expected 287, got 289
FAIL: Hand count after playing council_room was not correct. Expected 289, got 351
FAIL: Hand count after playing council_room was not correct. Expected 289, got 400
FAIL: Hand count after playing council_room was not correct. Expected 289, got 273
FAIL: Hand count after playing council_room was not correct. Expected 335, got 337
FAIL: Hand count after playing council_room was not correct. Expected 337, got 97
FAIL: Hand count after playing council_room was not correct. Expected 337, got 284
FAIL: Hand count after playing council_room was not correct. Expected 337, got 107
FAIL: Hand count after playing council_room was not correct. Expected 225, got 227
FAIL: Hand count after playing council_room was not correct. Expected 227, got 221
FAIL: Hand count after playing council_room was not correct. Expected 227, got 458
FAIL: Hand count after playing council_room was not correct. Expected 227, got 369
FAIL: Hand count after playing council_room was not correct. Expected 491, got 493
FAIL: Hand count after playing council_room was not correct. Expected 493, got 37
FAIL: Hand count after playing council_room was not correct. Expected 493, got 149
FAIL: Hand count after playing council_room was not correct. Expected 493, got 157
FAIL: Hand count after playing council_room was not correct. Expected 262, got 264
FAIL: Hand count after playing council_room was not correct. Expected 264, got 104
FAIL: Hand count after playing council_room was not correct. Expected 264, got 498
FAIL: Hand count after playing council_room was not correct. Expected 264, got 183
FAIL: Hand count after playing council_room was not correct. Expected 193, got 195
FAIL: Hand count after playing council_room was not correct. Expected 195, got 235
FAIL: Hand count after playing council_room was not correct. Expected 195, got 103
FAIL: Hand count after playing council_room was not correct. Expected 195, got 324
FAIL: Hand count after playing council_room was not correct. Expected 41, got 43
FAIL: Hand count after playing council_room was not correct. Expected 43, got 61
FAIL: Hand count after playing council_room was not correct. Expected 43, got 185
FAIL: Hand count after playing council_room was not correct. Expected 43, got 336
FAIL: Hand count after playing council_room was not correct. Expected 198, got 200
FAIL: Hand count after playing council_room was not correct. Expected 200, got 410
FAIL: Hand count after playing council_room was not correct. Expected 200, got 109
FAIL: Hand count after playing council_room was not correct. Expected 200, got 302
FAIL: Hand count after playing council_room was not correct. Expected 96, got 98
FAIL: Hand count after playing council_room was not correct. Expected 98, got 319
FAIL: Hand count after playing council_room was not correct. Expected 98, got 287
FAIL: Hand count after playing council_room was not correct. Expected 98, got 268
FAIL: Hand count after playing council_room was not correct. Expected 403, got 405
FAIL: Hand count after playing council_room was not correct. Expected 405, got 457
FAIL: Hand count after playing council_room was not correct. Expected 405, got 98
FAIL: Hand count after playing council_room was not correct. Expected 405, got 168
FAIL: Hand count after playing council_room was not correct. Expected 316, got 318
FAIL: Hand count after playing council_room was not correct. Expected 318, got 71
FAIL: Hand count after playing council_room was not correct. Expected 318, got 337
FAIL: Hand count after playing council_room was not correct. Expected 318, got 482
FAIL: Hand count after playing council_room was not correct. Expected 180, got 182
FAIL: Hand count after playing council_room was not correct. Expected 182, got 306
FAIL: Hand count after playing council_room was not correct. Expected 182, got 456
FAIL: Hand count after playing council_room was not correct. Expected 182, got 179
FAIL: Hand count after playing council_room was not correct. Expected 258, got 260
FAIL: Hand count after playing council_room was not correct. Expected 260, got 99
FAIL: Hand count after playing council_room was not correct. Expected 260, got 500
FAIL: Hand count after playing council_room was not correct. Expected 260, got 20
FAIL: Hand count after playing council_room was not correct. Expected 200, got 202
FAIL: Hand count after playing council_room was not correct. Expected 202, got 165
FAIL: Hand count after playing council_room was not correct. Expected 202, got 104
FAIL: Hand count after playing council_room was not correct. Expected 202, got 110
FAIL: Hand count after playing council_room was not correct. Expected 187, got 189
FAIL: Hand count after playing council_room was not correct. Expected 189, got 187
FAIL: Hand count after playing council_room was not correct. Expected 189, got 497
FAIL: Hand count after playing council_room was not correct. Expected 189, got 488
FAIL: Hand count after playing council_room was not correct. Expected 165, got 167
FAIL: Hand count after playing council_room was not correct. Expected 167, got 365
FAIL: Hand count after playing council_room was not correct. Expected 167, got 327
FAIL: Hand count after playing council_room was not correct. Expected 167, got 321
FAIL: Hand count after playing council_room was not correct. Expected 165, got 167
FAIL: Hand count after playing council_room was not correct. Expected 167, got 26
FAIL: Hand count after playing council_room was not correct. Expected 167, got 162
FAIL: Hand count after playing council_room was not correct. Expected 167, got 121
FAIL: Hand count after playing council_room was not correct. Expected 364, got 366
FAIL: Hand count after playing council_room was not correct. Expected 366, got 426
FAIL: Hand count after playing council_room was not correct. Expected 366, got 499
FAIL: Hand count after playing council_room was not correct. Expected 366, got 111
FAIL: Hand count after playing council_room was not correct. Expected 291, got 293
FAIL: Hand count after playing council_room was not correct. Expected 293, got 404
FAIL: Hand count after playing council_room was not correct. Expected 293, got 431
FAIL: Hand count after playing council_room was not correct. Expected 293, got 5
FAIL: Hand count after playing council_room was not correct. Expected 360, got 362
FAIL: Hand count after playing council_room was not correct. Expected 362, got 484
FAIL: Hand count after playing council_room was not correct. Expected 362, got 248
FAIL: Hand count after playing council_room was not correct. Expected 362, got 259
FAIL: Hand count after playing council_room was not correct. Expected 118, got 120
FAIL: Hand count after playing council_room was not correct. Expected 120, got 119
FAIL: Hand count after playing council_room was not correct. Expected 120, got 122
FAIL: Hand count after playing council_room was not correct. Expected 120, got 45
FAIL: Hand count after playing council_room was not correct. Expected 337, got 339
FAIL: Hand count after playing council_room was not correct. Expected 339, got 209
FAIL: Hand count after playing council_room was not correct. Expected 339, got 473
FAIL: Hand count after playing council_room was not correct. Expected 339, got 207
FAIL: Hand count after playing council_room was not correct. Expected 436, got 438
FAIL: Hand count after playing council_room was not correct. Expected 438, got 208
FAIL: Hand count after playing council_room was not correct. Expected 438, got 237
FAIL: Hand count after playing council_room was not correct. Expected 438, got 271
FAIL: Hand count after playing council_room was not correct. Expected 62, got 64
FAIL: Hand count after playing council_room was not correct. Expected 64, got 42
FAIL: Hand count after playing council_room was not correct. Expected 64, got 96
FAIL: Hand count after playing council_room was not correct. Expected 64, got 9
FAIL: Hand count after playing council_room was not correct. Expected 395, got 397
FAIL: Hand count after playing council_room was not correct. Expected 397, got 244
FAIL: Hand count after playing council_room was not correct. Expected 397, got 76
FAIL: Hand count after playing council_room was not correct. Expected 397, got 168
FAIL: Hand count after playing council_room was not correct. Expected 457, got 459
FAIL: Hand count after playing council_room was not correct. Expected 459, got 215
FAIL: Hand count after playing council_room was not correct. Expected 459, got 261
FAIL: Hand count after playing council_room was not correct. Expected 459, got 265
FAIL: Hand count after playing council_room was not correct. Expected 384, got 386
FAIL: Hand count after playing council_room was not correct. Expected 386, got 253
FAIL: Hand count after playing council_room was not correct. Expected 386, got 240
FAIL: Hand count after playing council_room was not correct. Expected 386, got 214
FAIL: Hand count after playing council_room was not correct. Expected 274, got 276
FAIL: Hand count after playing council_room was not correct. Expected 276, got 99
FAIL: Hand count after playing council_room was not correct. Expected 276, got 308
FAIL: Hand count after playing council_room was not correct. Expected 276, got 354
FAIL: Hand count after playing council_room was not correct. Expected 253, got 255
FAIL: Hand count after playing council_room was not correct. Expected 255, got 117
FAIL: Hand count after playing council_room was not correct. Expected 255, got 242
FAIL: Hand count after playing council_room was not correct. Expected 255, got 86
FAIL: Hand count after playing council_room was not correct. Expected 492, got 494
FAIL: Hand count after playing council_room was not correct. Expected 494, got 261
FAIL: Hand count after playing council_room was not correct. Expected 494, got 19
FAIL: Hand count after playing council_room was not correct. Expected 494, got 298
FAIL: Hand count after playing council_room was not correct. Expected 93, got 95
FAIL: Hand count after playing council_room was not correct. Expected 95, got 38
FAIL: Hand count after playing council_room was not correct. Expected 95, got 175
FAIL: Hand count after playing council_room was not correct. Expected 95, got 74
FAIL: Hand count after playing council_room was not correct. Expected 148, got 150
FAIL: Hand count after playing council_room was not correct. Expected 150, got 316
FAIL: Hand count after playing council_room was not correct. Expected 150, got 316
FAIL: Hand count after playing council_room was not correct. Expected 150, got 460
FAIL: Hand count after playing council_room was not correct. Expected 169, got 171
FAIL: Hand count after playing council_room was not correct. Expected 171, got 235
FAIL: Hand count after playing council_room was not correct. Expected 171, got 472
FAIL: Hand count after playing council_room was not correct. Expected 171, got 324
FAIL: Hand count after playing council_room was not correct. Expected 50, got 52
FAIL: Hand count after playing council_room was not correct. Expected 52, got 12
FAIL: Hand count after playing council_room was not correct. Expected 52, got 277
FAIL: Hand count after playing council_room was not correct. Expected 52, got 481
FAIL: Hand count after playing council_room was not correct. Expected 400, got 402
FAIL: Hand count after playing council_room was not correct. Expected 402, got 241
FAIL: Hand count after playing council_room was not correct. Expected 402, got 340
FAIL: Hand count after playing council_room was not correct. Expected 402, got 204
FAIL: Hand count after playing council_room was not correct. Expected 38, got 40
FAIL: Hand count after playing council_room was not correct. Expected 40, got 298
FAIL: Hand count after playing council_room was not correct. Expected 40, got 11
FAIL: Hand count after playing council_room was not correct. Expected 40, got 117
FAIL: Hand count after playing council_room was not correct. Expected 8, got 10
FAIL: Hand count after playing council_room was not correct. Expected 10, got 109
FAIL: Hand count after playing council_room was not correct. Expected 10, got 139
FAIL: Hand count after playing council_room was not correct. Expected 10, got 386
FAIL: Hand count after playing council_room was not correct. Expected 459, got 461
FAIL: Hand count after playing council_room was not correct. Expected 461, got 485
FAIL: Hand count after playing council_room was not correct. Expected 461, got 422
FAIL: Hand count after playing council_room was not correct. Expected 461, got 129
FAIL: Hand count after playing council_room was not correct. Expected 170, got 172
FAIL: Hand count after playing council_room was not correct. Expected 172, got 488
FAIL: Hand count after playing council_room was not correct. Expected 172, got 288
FAIL: Hand count after playing council_room was not correct. Expected 172, got 494
FAIL: Hand count after playing council_room was not correct. Expected 364, got 366
FAIL: Hand count after playing council_room was not correct. Expected 366, got 145
FAIL: Hand count after playing council_room was not correct. Expected 366, got 277
FAIL: Hand count after playing council_room was not correct. Expected 366, got 479
FAIL: Hand count after playing council_room was not correct. Expected 18, got 20
FAIL: Hand count after playing council_room was not correct. Expected 20, got 360
FAIL: Hand count after playing council_room was not correct. Expected 20, got 179
FAIL: Hand count after playing council_room was not correct. Expected 20, got 96
FAIL: Hand count after playing council_room was not correct. Expected 397, got 399
FAIL: Hand count after playing council_room was not correct. Expected 399, got 186
FAIL: Hand count after playing council_room was not correct. Expected 399, got 214
FAIL: Hand count after playing council_room was not correct. Expected 399, got 118
FAIL: Hand count after playing council_room was not correct. Expected 358, got 360
FAIL: Hand count after playing council_room was not correct. Expected 360, got 264
FAIL: Hand count after playing council_room was not correct. Expected 360, got 196
FAIL: Hand count after playing council_room was not correct. Expected 360, got 481
FAIL: Hand count after playing council_room was not correct. Expected 485, got 487
FAIL: Hand count after playing council_room was not correct. Expected 487, got 421
FAIL: Hand count after playing council_room was not correct. Expected 487, got 480
FAIL: Hand count after playing council_room was not correct. Expected 487, got 26
FAIL: Hand count after playing council_room was not correct. Expected 177, got 179
FAIL: Hand count after playing council_room was not correct. Expected 179, got 206
FAIL: Hand count after playing council_room was not correct. Expected 179, got 124
FAIL: Hand count after playing council_room was not correct. Expected 179, got 310
FAIL: Hand count after playing council_room was not correct. Expected 171, got 173
FAIL: Hand count after playing council_room was not correct. Expected 173, got 23
FAIL: Hand count after playing council_room was not correct. Expected 173, got 492
FAIL: Hand count after playing council_room was not correct. Expected 173, got 30
FAIL: Hand count after playing council_room was not correct. Expected 74, got 76
FAIL: Hand count after playing council_room was not correct. Expected 76, got 229
FAIL: Hand count after playing council_room was not correct. Expected 76, got 403
FAIL: Hand count after playing council_room was not correct. Expected 76, got 363
FAIL: Hand count after playing council_room was not correct. Expected 27, got 29
FAIL: Hand count after playing council_room was not correct. Expected 29, got 178
FAIL: Hand count after playing council_room was not correct. Expected 29, got 358
FAIL: Hand count after playing council_room was not correct. Expected 29, got 113
FAIL: Hand count after playing council_room was not correct. Expected 339, got 341
FAIL: Hand count after playing council_room was not correct. Expected 341, got 309
FAIL: Hand count after playing council_room was not correct. Expected 341, got 444
FAIL: Hand count after playing council_room was not correct. Expected 341, got 26
FAIL: Hand count after playing council_room was not correct. Expected 131, got 133
FAIL: Hand count after playing council_room was not correct. Expected 133, got 53
FAIL: Hand count after playing council_room was not correct. Expected 133, got 337
FAIL: Hand count after playing council_room was not correct. Expected 133, got 235
FAIL: Hand count after playing council_room was not correct. Expected 373, got 375
FAIL: Hand count after playing council_room was not correct. Expected 375, got 159
FAIL: Hand count after playing council_room was not correct. Expected 375, got 215
FAIL: Hand count after playing council_room was not correct. Expected 375, got 350
FAIL: Hand count after playing council_room was not correct. Expected 383, got 385
FAIL: Hand count after playing council_room was not correct. Expected 385, got 402
FAIL: Hand count after playing council_room was not correct. Expected 385, got 13
FAIL: Hand count after playing council_room was not correct. Expected 385, got 217
FAIL: Hand count after playing council_room was not correct. Expected 68, got 70
FAIL: Hand count after playing council_room was not correct. Expected 70, got 372
FAIL: Hand count after playing council_room was not correct. Expected 70, got 213
FAIL: Hand count after playing council_room was not correct. Expected 70, got 476
FAIL: Hand count after playing council_room was not correct. Expected 390, got 392
FAIL: Hand count after playing council_room was not correct. Expected 392, got 333
FAIL: Hand count after playing council_room was not correct. Expected 392, got 209
FAIL: Hand count after playing council_room was not correct. Expected 392, got 405
FAIL: Hand count after playing council_room was not correct. Expected 346, got 348
FAIL: Hand count after playing council_room was not correct. Expected 348, got 305
FAIL: Hand count after playing council_room was not correct. Expected 348, got 339
FAIL: Hand count after playing council_room was not correct. Expected 348, got 117
FAIL: Hand count after playing council_room was not correct. Expected 75, got 77
FAIL: Hand count after playing council_room was not correct. Expected 77, got 129
FAIL: Hand count after playing council_room was not correct. Expected 77, got 167
FAIL: Hand count after playing council_room was not correct. Expected 77, got 94
FAIL: Hand count after playing council_room was not correct. Expected 187, got 189
FAIL: Hand count after playing council_room was not correct. Expected 189, got 187
FAIL: Hand count after playing council_room was not correct. Expected 189, got 45
FAIL: Hand count after playing council_room was not correct. Expected 189, got 163
FAIL: Hand count after playing council_room was not correct. Expected 396, got 398
FAIL: Hand count after playing council_room was not correct. Expected 398, got 376
FAIL: Hand count after playing council_room was not correct. Expected 398, got 406
FAIL: Hand count after playing council_room was not correct. Expected 398, got 300
FAIL: Hand count after playing council_room was not correct. Expected 418, got 420
FAIL: Hand count after playing council_room was not correct. Expected 420, got 457
FAIL: Hand count after playing council_room was not correct. Expected 420, got 100
FAIL: Hand count after playing council_room was not correct. Expected 420, got 293
FAIL: Hand count after playing council_room was not correct. Expected 397, got 399
FAIL: Hand count after playing council_room was not correct. Expected 399, got 139
FAIL: Hand count after playing council_room was not correct. Expected 399, got 69
FAIL: Hand count after playing council_room was not correct. Expected 399, got 46
FAIL: Hand count after playing council_room was not correct. Expected 338, got 340
FAIL: Hand count after playing council_room was not correct. Expected 340, got 17
FAIL: Hand count after playing council_room was not correct. Expected 340, got 449
FAIL: Hand count after playing council_room was not correct. Expected 340, got 303
FAIL: Hand count after playing council_room was not correct. Expected 332, got 334
FAIL: Hand count after playing council_room was not correct. Expected 334, got 138
FAIL: Hand count after playing council_room was not correct. Expected 334, got 107
FAIL: Hand count after playing council_room was not correct. Expected 334, got 245
FAIL: Hand count after playing council_room was not correct. Expected 241, got 243
FAIL: Hand count after playing council_room was not correct. Expected 243, got 449
FAIL: Hand count after playing council_room was not correct. Expected 243, got 385
FAIL: Hand count after playing council_room was not correct. Expected 243, got 221
FAIL: Hand count after playing council_room was not correct. Expected 478, got 480
FAIL: Hand count after playing council_room was not correct. Expected 480, got 311
FAIL: Hand count after playing council_room was not correct. Expected 480, got 479
FAIL: Hand count after playing council_room was not correct. Expected 480, got 240
FAIL: Hand count after playing council_room was not correct. Expected 18, got 20
FAIL: Hand count after playing council_room was not correct. Expected 20, got 86
FAIL: Hand count after playing council_room was not correct. Expected 20, got 319
FAIL: Hand count after playing council_room was not correct. Expected 20, got 91
FAIL: Hand count after playing council_room was not correct. Expected 37, got 39
FAIL: Hand count after playing council_room was not correct. Expected 39, got 417
FAIL: Hand count after playing council_room was not correct. Expected 39, got 296
FAIL: Hand count after playing council_room was not correct. Expected 39, got 197
FAIL: Hand count after playing council_room was not correct. Expected 130, got 132
FAIL: Hand count after playing council_room was not correct. Expected 132, got 463
FAIL: Hand count after playing council_room was not correct. Expected 132, got 199
FAIL: Hand count after playing council_room was not correct. Expected 132, got 340
FAIL: Hand count after playing council_room was not correct. Expected 70, got 72
FAIL: Hand count after playing council_room was not correct. Expected 72, got 45
FAIL: Hand count after playing council_room was not correct. Expected 72, got 142
FAIL: Hand count after playing council_room was not correct. Expected 72, got 182
FAIL: Hand count after playing council_room was not correct. Expected 466, got 468
FAIL: Hand count after playing council_room was not correct. Expected 468, got 247
FAIL: Hand count after playing council_room was not correct. Expected 468, got 40
FAIL: Hand count after playing council_room was not correct. Expected 468, got 280
FAIL: Hand count after playing council_room was not correct. Expected 311, got 313
FAIL: Hand count after playing council_room was not correct. Expected 313, got 111
FAIL: Hand count after playing council_room was not correct. Expected 313, got 101
FAIL: Hand count after playing council_room was not correct. Expected 313, got 130
FAIL: Hand count after playing council_room was not correct. Expected 456, got 458
FAIL: Hand count after playing council_room was not correct. Expected 458, got 28
FAIL: Hand count after playing council_room was not correct. Expected 458, got 85
FAIL: Hand count after playing council_room was not correct. Expected 458, got 468
FAIL: Hand count after playing council_room was not correct. Expected 300, got 302
FAIL: Hand count after playing council_room was not correct. Expected 302, got 300
FAIL: Hand count after playing council_room was not correct. Expected 302, got 229
FAIL: Hand count after playing council_room was not correct. Expected 302, got 77
FAIL: Hand count after playing council_room was not correct. Expected 472, got 474
FAIL: Hand count after playing council_room was not correct. Expected 474, got 213
FAIL: Hand count after playing council_room was not correct. Expected 474, got 289
FAIL: Hand count after playing council_room was not correct. Expected 474, got 176
FAIL: Hand count after playing council_room was not correct. Expected 265, got 267
FAIL: Hand count after playing council_room was not correct. Expected 267, got 468
FAIL: Hand count after playing council_room was not correct. Expected 267, got 434
FAIL: Hand count after playing council_room was not correct. Expected 267, got 44
FAIL: Hand count after playing council_room was not correct. Expected 115, got 117
FAIL: Hand count after playing council_room was not correct. Expected 117, got 289
FAIL: Hand count after playing council_room was not correct. Expected 117, got 320
FAIL: Hand count after playing council_room was not correct. Expected 117, got 310
FAIL: Hand count after playing council_room was not correct. Expected 136, got 138
FAIL: Hand count after playing council_room was not correct. Expected 138, got 98
FAIL: Hand count after playing council_room was not correct. Expected 138, got 79
FAIL: Hand count after playing council_room was not correct. Expected 138, got 167
FAIL: Hand count after playing council_room was not correct. Expected 181, got 183
FAIL: Hand count after playing council_room was not correct. Expected 183, got 196
FAIL: Hand count after playing council_room was not correct. Expected 183, got 184
FAIL: Hand count after playing council_room was not correct. Expected 183, got 146
FAIL: Hand count after playing council_room was not correct. Expected 141, got 143
FAIL: Hand count after playing council_room was not correct. Expected 143, got 247
FAIL: Hand count after playing council_room was not correct. Expected 143, got 417
FAIL: Hand count after playing council_room was not correct. Expected 143, got 443
FAIL: Hand count after playing council_room was not correct. Expected 447, got 449
FAIL: Hand count after playing council_room was not correct. Expected 449, got 111
FAIL: Hand count after playing council_room was not correct. Expected 449, got 22
FAIL: Hand count after playing council_room was not correct. Expected 449, got 401
FAIL: Hand count after playing council_room was not correct. Expected 414, got 416
FAIL: Hand count after playing council_room was not correct. Expected 416, got 497
FAIL: Hand count after playing council_room was not correct. Expected 416, got 382
FAIL: Hand count after playing council_room was not correct. Expected 416, got 426
FAIL: Hand count after playing council_room was not correct. Expected 266, got 268
FAIL: Hand count after playing council_room was not correct. Expected 268, got 239
FAIL: Hand count after playing council_room was not correct. Expected 268, got 180
FAIL: Hand count after playing council_room was not correct. Expected 268, got 152
FAIL: Hand count after playing council_room was not correct. Expected 101, got 103
FAIL: Hand count after playing council_room was not correct. Expected 103, got 201
FAIL: Hand count after playing council_room was not correct. Expected 103, got 39
FAIL: Hand count after playing council_room was not correct. Expected 103, got 44
FAIL: Hand count after playing council_room was not correct. Expected 25, got 27
FAIL: Hand count after playing council_room was not correct. Expected 27, got 141
FAIL: Hand count after playing council_room was not correct. Expected 27, got 251
FAIL: Hand count after playing council_room was not correct. Expected 27, got 282
FAIL: Hand count after playing council_room was not correct. Expected 244, got 246
FAIL: Hand count after playing council_room was not correct. Expected 246, got 281
FAIL: Hand count after playing council_room was not correct. Expected 246, got 441
FAIL: Hand count after playing council_room was not correct. Expected 246, got 117
FAIL: Hand count after playing council_room was not correct. Expected 246, got 248
FAIL: Hand count after playing council_room was not correct. Expected 248, got 138
FAIL: Hand count after playing council_room was not correct. Expected 248, got 45
FAIL: Hand count after playing council_room was not correct. Expected 248, got 152
FAIL: Hand count after playing council_room was not correct. Expected 227, got 229
FAIL: Hand count after playing council_room was not correct. Expected 229, got 449
FAIL: Hand count after playing council_room was not correct. Expected 229, got 379
FAIL: Hand count after playing council_room was not correct. Expected 229, got 95
FAIL: Hand count after playing council_room was not correct. Expected 103, got 105
FAIL: Hand count after playing council_room was not correct. Expected 105, got 408
FAIL: Hand count after playing council_room was not correct. Expected 105, got 223
FAIL: Hand count after playing council_room was not correct. Expected 105, got 290
FAIL: Hand count after playing council_room was not correct. Expected 463, got 465
FAIL: Hand count after playing council_room was not correct. Expected 465, got 419
FAIL: Hand count after playing council_room was not correct. Expected 465, got 365
FAIL: Hand count after playing council_room was not correct. Expected 465, got 428
FAIL: Hand count after playing council_room was not correct. Expected 42, got 44
FAIL: Hand count after playing council_room was not correct. Expected 44, got 131
FAIL: Hand count after playing council_room was not correct. Expected 44, got 102
FAIL: Hand count after playing council_room was not correct. Expected 44, got 5
FAIL: Hand count after playing council_room was not correct. Expected 218, got 220
FAIL: Hand count after playing council_room was not correct. Expected 220, got 117
FAIL: Hand count after playing council_room was not correct. Expected 220, got 88
FAIL: Hand count after playing council_room was not correct. Expected 220, got 384
FAIL: Hand count after playing council_room was not correct. Expected 210, got 212
FAIL: Hand count after playing council_room was not correct. Expected 212, got 161
FAIL: Hand count after playing council_room was not correct. Expected 212, got 285
FAIL: Hand count after playing council_room was not correct. Expected 212, got 86
FAIL: Hand count after playing council_room was not correct. Expected 348, got 350
FAIL: Hand count after playing council_room was not correct. Expected 350, got 441
FAIL: Hand count after playing council_room was not correct. Expected 350, got 156
FAIL: Hand count after playing council_room was not correct. Expected 350, got 372
FAIL: Hand count after playing council_room was not correct. Expected 321, got 323
FAIL: Hand count after playing council_room was not correct. Expected 323, got 158
FAIL: Hand count after playing council_room was not correct. Expected 323, got 275
FAIL: Hand count after playing council_room was not correct. Expected 323, got 288
FAIL: Hand count after playing council_room was not correct. Expected 26, got 28
FAIL: Hand count after playing council_room was not correct. Expected 28, got 187
FAIL: Hand count after playing council_room was not correct. Expected 28, got 404
FAIL: Hand count after playing council_room was not correct. Expected 28, got 14
FAIL: Hand count after playing council_room was not correct. Expected 208, got 210
FAIL: Hand count after playing council_room was not correct. Expected 210, got 155
FAIL: Hand count after playing council_room was not correct. Expected 210, got 162
FAIL: Hand count after playing council_room was not correct. Expected 210, got 57
FAIL: Hand count after playing council_room was not correct. Expected 60, got 62
FAIL: Hand count after playing council_room was not correct. Expected 62, got 463
FAIL: Hand count after playing council_room was not correct. Expected 62, got 351
FAIL: Hand count after playing council_room was not correct. Expected 62, got 31
FAIL: Hand count after playing council_room was not correct. Expected 346, got 348
FAIL: Hand count after playing council_room was not correct. Expected 348, got 337
FAIL: Hand count after playing council_room was not correct. Expected 348, got 105
FAIL: Hand count after playing council_room was not correct. Expected 348, got 487
FAIL: Hand count after playing council_room was not correct. Expected 68, got 70
FAIL: Hand count after playing council_room was not correct. Expected 70, got 282
FAIL: Hand count after playing council_room was not correct. Expected 70, got 394
FAIL: Hand count after playing council_room was not correct. Expected 70, got 221
FAIL: Hand count after playing council_room was not correct. Expected 417, got 419
FAIL: Hand count after playing council_room was not correct. Expected 419, got 51
FAIL: Hand count after playing council_room was not correct. Expected 419, got 475
FAIL: Hand count after playing council_room was not correct. Expected 419, got 387
FAIL: Hand count after playing council_room was not correct. Expected 13, got 15
FAIL: Hand count after playing council_room was not correct. Expected 15, got 336
FAIL: Hand count after playing council_room was not correct. Expected 15, got 214
FAIL: Hand count after playing council_room was not correct. Expected 15, got 85
FAIL: Hand count after playing council_room was not correct. Expected 71, got 73
FAIL: Hand count after playing council_room was not correct. Expected 73, got 500
FAIL: Hand count after playing council_room was not correct. Expected 73, got 112
FAIL: Hand count after playing council_room was not correct. Expected 73, got 150
FAIL: Hand count after playing council_room was not correct. Expected 81, got 83
FAIL: Hand count after playing council_room was not correct. Expected 83, got 484
FAIL: Hand count after playing council_room was not correct. Expected 83, got 432
FAIL: Hand count after playing council_room was not correct. Expected 83, got 89
FAIL: Hand count after playing council_room was not correct. Expected 159, got 161
FAIL: Hand count after playing council_room was not correct. Expected 161, got 41
FAIL: Hand count after playing council_room was not correct. Expected 161, got 113
FAIL: Hand count after playing council_room was not correct. Expected 161, got 192
FAIL: Hand count after playing council_room was not correct. Expected 140, got 142
FAIL: Hand count after playing council_room was not correct. Expected 142, got 184
FAIL: Hand count after playing council_room was not correct. Expected 142, got 497
FAIL: Hand count after playing council_room was not correct. Expected 142, got 160
FAIL: Hand count after playing council_room was not correct. Expected 323, got 325
FAIL: Hand count after playing council_room was not correct. Expected 325, got 244
FAIL: Hand count after playing council_room was not correct. Expected 325, got 463
FAIL: Hand count after playing council_room was not correct. Expected 325, got 324
FAIL: Hand count after playing council_room was not correct. Expected 216, got 218
FAIL: Hand count after playing council_room was not correct. Expected 218, got 331
FAIL: Hand count after playing council_room was not correct. Expected 218, got 221
FAIL: Hand count after playing council_room was not correct. Expected 218, got 10
FAIL: Hand count after playing council_room was not correct. Expected 261, got 263
FAIL: Hand count after playing council_room was not correct. Expected 263, got 362
FAIL: Hand count after playing council_room was not correct. Expected 263, got 32
FAIL: Hand count after playing council_room was not correct. Expected 263, got 434
FAIL: Hand count after playing council_room was not correct. Expected 331, got 333
FAIL: Hand count after playing council_room was not correct. Expected 333, got 492
FAIL: Hand count after playing council_room was not correct. Expected 333, got 122
FAIL: Hand count after playing council_room was not correct. Expected 333, got 306
FAIL: Hand count after playing council_room was not correct. Expected 411, got 413
FAIL: Hand count after playing council_room was not correct. Expected 413, got 55
FAIL: Hand count after playing council_room was not correct. Expected 413, got 63
FAIL: Hand count after playing council_room was not correct. Expected 413, got 187
FAIL: Hand count after playing council_room was not correct. Expected 103, got 105
FAIL: Hand count after playing council_room was not correct. Expected 105, got 183
FAIL: Hand count after playing council_room was not correct. Expected 105, got 473
FAIL: Hand count after playing council_room was not correct. Expected 105, got 342
FAIL: Hand count after playing council_room was not correct. Expected 189, got 191
FAIL: Hand count after playing council_room was not correct. Expected 191, got 298
FAIL: Hand count after playing council_room was not correct. Expected 191, got 468
FAIL: Hand count after playing council_room was not correct. Expected 191, got 344
FAIL: Hand count after playing council_room was not correct. Expected 117, got 119
FAIL: Hand count after playing council_room was not correct. Expected 119, got 7
FAIL: Hand count after playing council_room was not correct. Expected 119, got 221
FAIL: Hand count after playing council_room was not correct. Expected 119, got 234
FAIL: Hand count after playing council_room was not correct. Expected 211, got 213
FAIL: Hand count after playing council_room was not correct. Expected 213, got 198
FAIL: Hand count after playing council_room was not correct. Expected 213, got 130
FAIL: Hand count after playing council_room was not correct. Expected 213, got 184
FAIL: Hand count after playing council_room was not correct. Expected 72, got 74
FAIL: Hand count after playing council_room was not correct. Expected 74, got 60
FAIL: Hand count after playing council_room was not correct. Expected 74, got 143
FAIL: Hand count after playing council_room was not correct. Expected 74, got 54
FAIL: Hand count after playing council_room was not correct. Expected 38, got 40
FAIL: Hand count after playing council_room was not correct. Expected 40, got 165
FAIL: Hand count after playing council_room was not correct. Expected 40, got 23
FAIL: Hand count after playing council_room was not correct. Expected 40, got 105
FAIL: Hand count after playing council_room was not correct. Expected 361, got 363
FAIL: Hand count after playing council_room was not correct. Expected 363, got 289
FAIL: Hand count after playing council_room was not correct. Expected 363, got 351
FAIL: Hand count after playing council_room was not correct. Expected 363, got 165
FAIL: Hand count after playing council_room was not correct. Expected 458, got 460
FAIL: Hand count after playing council_room was not correct. Expected 460, got 222
FAIL: Hand count after playing council_room was not correct. Expected 460, got 289
FAIL: Hand count after playing council_room was not correct. Expected 460, got 162
FAIL: Hand count after playing council_room was not correct. Expected 172, got 174
FAIL: Hand count after playing council_room was not correct. Expected 174, got 284
FAIL: Hand count after playing council_room was not correct. Expected 174, got 227
FAIL: Hand count after playing council_room was not correct. Expected 174, got 485
FAIL: Hand count after playing council_room was not correct. Expected 324, got 326
FAIL: Hand count after playing council_room was not correct. Expected 326, got 231
FAIL: Hand count after playing council_room was not correct. Expected 326, got 97
FAIL: Hand count after playing council_room was not correct. Expected 326, got 375
FAIL: Hand count after playing council_room was not correct. Expected 480, got 482
FAIL: Hand count after playing council_room was not correct. Expected 482, got 163
FAIL: Hand count after playing council_room was not correct. Expected 482, got 37
FAIL: Hand count after playing council_room was not correct. Expected 482, got 134
FAIL: Hand count after playing council_room was not correct. Expected 118, got 120
FAIL: Hand count after playing council_room was not correct. Expected 120, got 284
FAIL: Hand count after playing council_room was not correct. Expected 120, got 297
FAIL: Hand count after playing council_room was not correct. Expected 120, got 106
FAIL: Hand count after playing council_room was not correct. Expected 332, got 334
FAIL: Hand count after playing council_room was not correct. Expected 334, got 176
FAIL: Hand count after playing council_room was not correct. Expected 334, got 423
FAIL: Hand count after playing council_room was not correct. Expected 334, got 220
FAIL: Hand count after playing council_room was not correct. Expected 6, got 8
FAIL: Hand count after playing council_room was not correct. Expected 8, got 200
FAIL: Hand count after playing council_room was not correct. Expected 8, got 491
FAIL: Hand count after playing council_room was not correct. Expected 8, got 252
FAIL: Hand count after playing council_room was not correct. Expected 182, got 184
FAIL: Hand count after playing council_room was not correct. Expected 184, got 279
FAIL: Hand count after playing council_room was not correct. Expected 184, got 22
FAIL: Hand count after playing council_room was not correct. Expected 184, got 113
FAIL: Hand count after playing council_room was not correct. Expected 83, got 85
FAIL: Hand count after playing council_room was not correct. Expected 85, got 144
FAIL: Hand count after playing council_room was not correct. Expected 85, got 254
FAIL: Hand count after playing council_room was not correct. Expected 85, got 276
FAIL: Hand count after playing council_room was not correct. Expected 44, got 46
FAIL: Hand count after playing council_room was not correct. Expected 46, got 497
FAIL: Hand count after playing council_room was not correct. Expected 46, got 65
FAIL: Hand count after playing council_room was not correct. Expected 46, got 59
FAIL: Hand count after playing council_room was not correct. Expected 84, got 86
FAIL: Hand count after playing council_room was not correct. Expected 86, got 418
FAIL: Hand count after playing council_room was not correct. Expected 86, got 406
FAIL: Hand count after playing council_room was not correct. Expected 86, got 446
FAIL: Hand count after playing council_room was not correct. Expected 111, got 113
FAIL: Hand count after playing council_room was not correct. Expected 113, got 444
FAIL: Hand count after playing council_room was not correct. Expected 113, got 332
FAIL: Hand count after playing council_room was not correct. Expected 113, got 398
FAIL: Hand count after playing council_room was not correct. Expected 193, got 195
FAIL: Hand count after playing council_room was not correct. Expected 195, got 363
FAIL: Hand count after playing council_room was not correct. Expected 195, got 189
FAIL: Hand count after playing council_room was not correct. Expected 195, got 90
FAIL: Hand count after playing council_room was not correct. Expected 299, got 301
FAIL: Hand count after playing council_room was not correct. Expected 301, got 84
FAIL: Hand count after playing council_room was not correct. Expected 301, got 217
FAIL: Hand count after playing council_room was not correct. Expected 301, got 477
FAIL: Hand count after playing council_room was not correct. Expected 158, got 160
FAIL: Hand count after playing council_room was not correct. Expected 160, got 439
FAIL: Hand count after playing council_room was not correct. Expected 160, got 103
FAIL: Hand count after playing council_room was not correct. Expected 160, got 487
FAIL: Hand count after playing council_room was not correct. Expected 87, got 89
FAIL: Hand count after playing council_room was not correct. Expected 89, got 418
FAIL: Hand count after playing council_room was not correct. Expected 89, got 51
FAIL: Hand count after playing council_room was not correct. Expected 89, got 253
FAIL: Hand count after playing council_room was not correct. Expected 44, got 46
FAIL: Hand count after playing council_room was not correct. Expected 46, got 85
FAIL: Hand count after playing council_room was not correct. Expected 46, got 280
FAIL: Hand count after playing council_room was not correct. Expected 46, got 457
FAIL: Hand count after playing council_room was not correct. Expected 328, got 330
FAIL: Hand count after playing council_room was not correct. Expected 330, got 118
FAIL: Hand count after playing council_room was not correct. Expected 330, got 422
FAIL: Hand count after playing council_room was not correct. Expected 330, got 407
FAIL: Hand count after playing council_room was not correct. Expected 158, got 160
FAIL: Hand count after playing council_room was not correct. Expected 160, got 368
FAIL: Hand count after playing council_room was not correct. Expected 160, got 265
FAIL: Hand count after playing council_room was not correct. Expected 160, got 322
FAIL: Hand count after playing council_room was not correct. Expected 320, got 322
FAIL: Hand count after playing council_room was not correct. Expected 322, got 259
FAIL: Hand count after playing council_room was not correct. Expected 322, got 410
FAIL: Hand count after playing council_room was not correct. Expected 322, got 9
FAIL: Hand count after playing council_room was not correct. Expected 84, got 86
FAIL: Hand count after playing council_room was not correct. Expected 86, got 332
FAIL: Hand count after playing council_room was not correct. Expected 86, got 369
FAIL: Hand count after playing council_room was not correct. Expected 86, got 415
FAIL: Hand count after playing council_room was not correct. Expected 194, got 196
FAIL: Hand count after playing council_room was not correct. Expected 196, got 210
FAIL: Hand count after playing council_room was not correct. Expected 196, got 235
FAIL: Hand count after playing council_room was not correct. Expected 196, got 282
FAIL: Hand count after playing council_room was not correct. Expected 229, got 231
FAIL: Hand count after playing council_room was not correct. Expected 231, got 305
FAIL: Hand count after playing council_room was not correct. Expected 231, got 60
FAIL: Hand count after playing council_room was not correct. Expected 231, got 292
FAIL: Hand count after playing council_room was not correct. Expected 26, got 28
FAIL: Hand count after playing council_room was not correct. Expected 28, got 93
FAIL: Hand count after playing council_room was not correct. Expected 28, got 152
FAIL: Hand count after playing council_room was not correct. Expected 28, got 258
FAIL: Hand count after playing council_room was not correct. Expected 23, got 25
FAIL: Hand count after playing council_room was not correct. Expected 25, got 55
FAIL: Hand count after playing council_room was not correct. Expected 25, got 80
FAIL: Hand count after playing council_room was not correct. Expected 25, got 316
FAIL: Hand count after playing council_room was not correct. Expected 186, got 188
FAIL: Hand count after playing council_room was not correct. Expected 188, got 144
FAIL: Hand count after playing council_room was not correct. Expected 188, got 418
FAIL: Hand count after playing council_room was not correct. Expected 188, got 249
FAIL: Hand count after playing council_room was not correct. Expected 454, got 456
FAIL: Hand count after playing council_room was not correct. Expected 456, got 178
FAIL: Hand count after playing council_room was not correct. Expected 456, got 215
FAIL: Hand count after playing council_room was not correct. Expected 456, got 215
FAIL: Hand count after playing council_room was not correct. Expected 195, got 197
FAIL: Hand count after playing council_room was not correct. Expected 197, got 294
FAIL: Hand count after playing council_room was not correct. Expected 197, got 94
FAIL: Hand count after playing council_room was not correct. Expected 197, got 272
FAIL: Hand count after playing council_room was not correct. Expected 437, got 439
FAIL: Hand count after playing council_room was not correct. Expected 439, got 242
FAIL: Hand count after playing council_room was not correct. Expected 439, got 3
FAIL: Hand count after playing council_room was not correct. Expected 439, got 460
FAIL: Hand count after playing council_room was not correct. Expected 179, got 181
FAIL: Hand count after playing council_room was not correct. Expected 181, got 279
FAIL: Hand count after playing council_room was not correct. Expected 181, got 219
FAIL: Hand count after playing council_room was not correct. Expected 181, got 393
FAIL: Hand count after playing council_room was not correct. Expected 479, got 481
FAIL: Hand count after playing council_room was not correct. Expected 481, got 167
FAIL: Hand count after playing council_room was not correct. Expected 481, got 54
FAIL: Hand count after playing council_room was not correct. Expected 481, got 398
FAIL: Hand count after playing council_room was not correct. Expected 216, got 218
FAIL: Hand count after playing council_room was not correct. Expected 218, got 389
FAIL: Hand count after playing council_room was not correct. Expected 218, got 479
FAIL: Hand count after playing council_room was not correct. Expected 218, got 395
FAIL: Hand count after playing council_room was not correct. Expected 234, got 236
FAIL: Hand count after playing council_room was not correct. Expected 236, got 224
FAIL: Hand count after playing council_room was not correct. Expected 236, got 321
FAIL: Hand count after playing council_room was not correct. Expected 236, got 2
FAIL: Hand count after playing council_room was not correct. Expected 231, got 233
FAIL: Hand count after playing council_room was not correct. Expected 233, got 223
FAIL: Hand count after playing council_room was not correct. Expected 233, got 204
FAIL: Hand count after playing council_room was not correct. Expected 233, got 240
FAIL: Hand count after playing council_room was not correct. Expected 339, got 341
FAIL: Hand count after playing council_room was not correct. Expected 341, got 136
FAIL: Hand count after playing council_room was not correct. Expected 341, got 322
FAIL: Hand count after playing council_room was not correct. Expected 341, got 61
FAIL: Hand count after playing council_room was not correct. Expected 45, got 47
FAIL: Hand count after playing council_room was not correct. Expected 47, got 47
FAIL: Hand count after playing council_room was not correct. Expected 47, got 14
FAIL: Hand count after playing council_room was not correct. Expected 47, got 304
FAIL: Hand count after playing council_room was not correct. Expected 278, got 280
FAIL: Hand count after playing council_room was not correct. Expected 280, got 254
FAIL: Hand count after playing council_room was not correct. Expected 280, got 270
FAIL: Hand count after playing council_room was not correct. Expected 280, got 35
FAIL: Hand count after playing council_room was not correct. Expected 117, got 119
FAIL: Hand count after playing council_room was not correct. Expected 119, got 169
FAIL: Hand count after playing council_room was not correct. Expected 119, got 491
FAIL: Hand count after playing council_room was not correct. Expected 119, got 86
FAIL: Hand count after playing council_room was not correct. Expected 292, got 294
FAIL: Hand count after playing council_room was not correct. Expected 294, got 125
FAIL: Hand count after playing council_room was not correct. Expected 294, got 344
FAIL: Hand count after playing council_room was not correct. Expected 294, got 6
FAIL: Hand count after playing council_room was not correct. Expected 342, got 344
FAIL: Hand count after playing council_room was not correct. Expected 344, got 287
FAIL: Hand count after playing council_room was not correct. Expected 344, got 464
FAIL: Hand count after playing council_room was not correct. Expected 344, got 172
FAIL: Hand count after playing council_room was not correct. Expected 251, got 253
FAIL: Hand count after playing council_room was not correct. Expected 253, got 294
FAIL: Hand count after playing council_room was not correct. Expected 253, got 375
FAIL: Hand count after playing council_room was not correct. Expected 253, got 247
FAIL: Hand count after playing council_room was not correct. Expected 404, got 406
FAIL: Hand count after playing council_room was not correct. Expected 406, got 411
FAIL: Hand count after playing council_room was not correct. Expected 406, got 196
FAIL: Hand count after playing council_room was not correct. Expected 406, got 24
FAIL: Hand count after playing council_room was not correct. Expected 390, got 392
FAIL: Hand count after playing council_room was not correct. Expected 392, got 430
FAIL: Hand count after playing council_room was not correct. Expected 392, got 244
FAIL: Hand count after playing council_room was not correct. Expected 392, got 391
FAIL: Hand count after playing council_room was not correct. Expected 417, got 419
FAIL: Hand count after playing council_room was not correct. Expected 419, got 265
FAIL: Hand count after playing council_room was not correct. Expected 419, got 270
FAIL: Hand count after playing council_room was not correct. Expected 419, got 341
FAIL: Hand count after playing council_room was not correct. Expected 467, got 469
FAIL: Hand count after playing council_room was not correct. Expected 469, got 108
FAIL: Hand count after playing council_room was not correct. Expected 469, got 407
FAIL: Hand count after playing council_room was not correct. Expected 469, got 462
FAIL: Hand count after playing council_room was not correct. Expected 492, got 494
FAIL: Hand count after playing council_room was not correct. Expected 494, got 57
FAIL: Hand count after playing council_room was not correct. Expected 494, got 240
FAIL: Hand count after playing council_room was not correct. Expected 494, got 399
FAIL: Hand count after playing council_room was not correct. Expected 146, got 148
FAIL: Hand count after playing council_room was not correct. Expected 148, got 370
FAIL: Hand count after playing council_room was not correct. Expected 148, got 315
FAIL: Hand count after playing council_room was not correct. Expected 148, got 473
FAIL: Hand count after playing council_room was not correct. Expected 248, got 250
FAIL: Hand count after playing council_room was not correct. Expected 250, got 185
FAIL: Hand count after playing council_room was not correct. Expected 250, got 273
FAIL: Hand count after playing council_room was not correct. Expected 250, got 276
FAIL: Hand count after playing council_room was not correct. Expected 438, got 440
FAIL: Hand count after playing council_room was not correct. Expected 440, got 391
FAIL: Hand count after playing council_room was not correct. Expected 440, got 424
FAIL: Hand count after playing council_room was not correct. Expected 440, got 15
FAIL: Hand count after playing council_room was not correct. Expected 423, got 425
FAIL: Hand count after playing council_room was not correct. Expected 425, got 378
FAIL: Hand count after playing council_room was not correct. Expected 425, got 182
FAIL: Hand count after playing council_room was not correct. Expected 425, got 422
FAIL: Hand count after playing council_room was not correct. Expected 232, got 234
FAIL: Hand count after playing council_room was not correct. Expected 234, got 338
FAIL: Hand count after playing council_room was not correct. Expected 234, got 498
FAIL: Hand count after playing council_room was not correct. Expected 234, got 431
FAIL: Hand count after playing council_room was not correct. Expected 294, got 296
FAIL: Hand count after playing council_room was not correct. Expected 296, got 394
FAIL: Hand count after playing council_room was not correct. Expected 296, got 362
FAIL: Hand count after playing council_room was not correct. Expected 296, got 199
FAIL: Hand count after playing council_room was not correct. Expected 6, got 8
FAIL: Hand count after playing council_room was not correct. Expected 8, got 379
FAIL: Hand count after playing council_room was not correct. Expected 8, got 159
FAIL: Hand count after playing council_room was not correct. Expected 8, got 328
FAIL: Hand count after playing council_room was not correct. Expected 51, got 53
FAIL: Hand count after playing council_room was not correct. Expected 53, got 29
FAIL: Hand count after playing council_room was not correct. Expected 53, got 283
FAIL: Hand count after playing council_room was not correct. Expected 53, got 7
FAIL: Hand count after playing council_room was not correct. Expected 335, got 337
FAIL: Hand count after playing council_room was not correct. Expected 337, got 24
FAIL: Hand count after playing council_room was not correct. Expected 337, got 35
FAIL: Hand count after playing council_room was not correct. Expected 337, got 401
FAIL: Hand count after playing council_room was not correct. Expected 359, got 361
FAIL: Hand count after playing council_room was not correct. Expected 361, got 474
FAIL: Hand count after playing council_room was not correct. Expected 361, got 182
FAIL: Hand count after playing council_room was not correct. Expected 361, got 233
FAIL: Hand count after playing council_room was not correct. Expected 147, got 149
FAIL: Hand count after playing council_room was not correct. Expected 149, got 113
FAIL: Hand count after playing council_room was not correct. Expected 149, got 203
FAIL: Hand count after playing council_room was not correct. Expected 149, got 339
FAIL: Hand count after playing council_room was not correct. Expected 463, got 465
FAIL: Hand count after playing council_room was not correct. Expected 465, got 107
FAIL: Hand count after playing council_room was not correct. Expected 465, got 421
FAIL: Hand count after playing council_room was not correct. Expected 465, got 494
FAIL: Hand count after playing council_room was not correct. Expected 199, got 201
FAIL: Hand count after playing council_room was not correct. Expected 201, got 174
FAIL: Hand count after playing council_room was not correct. Expected 201, got 395
FAIL: Hand count after playing council_room was not correct. Expected 201, got 307
FAIL: Hand count after playing council_room was not correct. Expected 147, got 149
FAIL: Hand count after playing council_room was not correct. Expected 149, got 100
FAIL: Hand count after playing council_room was not correct. Expected 149, got 124
FAIL: Hand count after playing council_room was not correct. Expected 149, got 273
FAIL: Hand count after playing council_room was not correct. Expected 125, got 127
FAIL: Hand count after playing council_room was not correct. Expected 127, got 72
FAIL: Hand count after playing council_room was not correct. Expected 127, got 189
FAIL: Hand count after playing council_room was not correct. Expected 127, got 424
FAIL: Hand count after playing council_room was not correct. Expected 117, got 119
FAIL: Hand count after playing council_room was not correct. Expected 119, got 361
FAIL: Hand count after playing council_room was not correct. Expected 119, got 98
FAIL: Hand count after playing council_room was not correct. Expected 119, got 80
FAIL: Hand count after playing council_room was not correct. Expected 439, got 441
FAIL: Hand count after playing council_room was not correct. Expected 441, got 302
FAIL: Hand count after playing council_room was not correct. Expected 441, got 284
FAIL: Hand count after playing council_room was not correct. Expected 441, got 485
FAIL: Hand count after playing council_room was not correct. Expected 6, got 8
FAIL: Hand count after playing council_room was not correct. Expected 8, got 280
FAIL: Hand count after playing council_room was not correct. Expected 8, got 177
FAIL: Hand count after playing council_room was not correct. Expected 8, got 175
FAIL: Hand count after playing council_room was not correct. Expected 90, got 92
FAIL: Hand count after playing council_room was not correct. Expected 92, got 388
FAIL: Hand count after playing council_room was not correct. Expected 92, got 417
FAIL: Hand count after playing council_room was not correct. Expected 92, got 464
FAIL: Hand count after playing council_room was not correct. Expected 372, got 374
FAIL: Hand count after playing council_room was not correct. Expected 374, got 56
FAIL: Hand count after playing council_room was not correct. Expected 374, got 140
FAIL: Hand count after playing council_room was not correct. Expected 374, got 348
FAIL: Hand count after playing council_room was not correct. Expected 40, got 42
FAIL: Hand count after playing council_room was not correct. Expected 42, got 63
FAIL: Hand count after playing council_room was not correct. Expected 42, got 185
FAIL: Hand count after playing council_room was not correct. Expected 42, got 55
FAIL: Hand count after playing council_room was not correct. Expected 386, got 388
FAIL: Hand count after playing council_room was not correct. Expected 388, got 315
FAIL: Hand count after playing council_room was not correct. Expected 388, got 326
FAIL: Hand count after playing council_room was not correct. Expected 388, got 178
FAIL: Hand count after playing council_room was not correct. Expected 179, got 181
FAIL: Hand count after playing council_room was not correct. Expected 181, got 315
FAIL: Hand count after playing council_room was not correct. Expected 181, got 48
FAIL: Hand count after playing council_room was not correct. Expected 181, got 36
FAIL: Hand count after playing council_room was not correct. Expected 193, got 195
FAIL: Hand count after playing council_room was not correct. Expected 195, got 225
FAIL: Hand count after playing council_room was not correct. Expected 195, got 292
FAIL: Hand count after playing council_room was not correct. Expected 195, got 166
FAIL: Hand count after playing council_room was not correct. Expected 113, got 115
FAIL: Hand count after playing council_room was not correct. Expected 115, got 23
FAIL: Hand count after playing council_room was not correct. Expected 115, got 321
FAIL: Hand count after playing council_room was not correct. Expected 115, got 441
FAIL: Hand count after playing council_room was not correct. Expected 491, got 493
FAIL: Hand count after playing council_room was not correct. Expected 493, got 194
FAIL: Hand count after playing council_room was not correct. Expected 493, got 308
FAIL: Hand count after playing council_room was not correct. Expected 493, got 206
FAIL: Hand count after playing council_room was not correct. Expected 179, got 181
FAIL: Hand count after playing council_room was not correct. Expected 181, got 282
FAIL: Hand count after playing council_room was not correct. Expected 181, got 368
FAIL: Hand count after playing council_room was not correct. Expected 181, got 120
FAIL: Hand count after playing council_room was not correct. Expected 423, got 425
FAIL: Hand count after playing council_room was not correct. Expected 425, got 223
FAIL: Hand count after playing council_room was not correct. Expected 425, got 199
FAIL: Hand count after playing council_room was not correct. Expected 425, got 175
FAIL: Hand count after playing council_room was not correct. Expected 182, got 184
FAIL: Hand count after playing council_room was not correct. Expected 184, got 341
FAIL: Hand count after playing council_room was not correct. Expected 184, got 240
FAIL: Hand count after playing council_room was not correct. Expected 184, got 296
FAIL: Hand count after playing council_room was not correct. Expected 251, got 253
FAIL: Hand count after playing council_room was not correct. Expected 253, got 414
FAIL: Hand count after playing council_room was not correct. Expected 253, got 85
FAIL: Hand count after playing council_room was not correct. Expected 253, got 424
FAIL: Hand count after playing council_room was not correct. Expected 156, got 158
FAIL: Hand count after playing council_room was not correct. Expected 158, got 391
FAIL: Hand count after playing council_room was not correct. Expected 158, got 231
FAIL: Hand count after playing council_room was not correct. Expected 158, got 397
FAIL: Hand count after playing council_room was not correct. Expected 359, got 361
FAIL: Hand count after playing council_room was not correct. Expected 361, got 401
FAIL: Hand count after playing council_room was not correct. Expected 361, got 337
FAIL: Hand count after playing council_room was not correct. Expected 361, got 154
FAIL: Hand count after playing council_room was not correct. Expected 369, got 371
FAIL: Hand count after playing council_room was not correct. Expected 371, got 438
FAIL: Hand count after playing council_room was not correct. Expected 371, got 242
FAIL: Hand count after playing council_room was not correct. Expected 371, got 479
FAIL: Hand count after playing council_room was not correct. Expected 261, got 263
FAIL: Hand count after playing council_room was not correct. Expected 263, got 284
FAIL: Hand count after playing council_room was not correct. Expected 263, got 50
FAIL: Hand count after playing council_room was not correct. Expected 263, got 312
FAIL: Hand count after playing council_room was not correct. Expected 352, got 354
FAIL: Hand count after playing council_room was not correct. Expected 354, got 467
FAIL: Hand count after playing council_room was not correct. Expected 354, got 49
FAIL: Hand count after playing council_room was not correct. Expected 354, got 298
FAIL: Hand count after playing council_room was not correct. Expected 451, got 453
FAIL: Hand count after playing council_room was not correct. Expected 453, got 495
FAIL: Hand count after playing council_room was not correct. Expected 453, got 398
FAIL: Hand count after playing council_room was not correct. Expected 453, got 228
FAIL: Hand count after playing council_room was not correct. Expected 116, got 118
FAIL: Hand count after playing council_room was not correct. Expected 118, got 413
FAIL: Hand count after playing council_room was not correct. Expected 118, got 476
FAIL: Hand count after playing council_room was not correct. Expected 118, got 246
FAIL: Hand count after playing council_room was not correct. Expected 167, got 169
FAIL: Hand count after playing council_room was not correct. Expected 169, got 47
FAIL: Hand count after playing council_room was not correct. Expected 169, got 224
FAIL: Hand count after playing council_room was not correct. Expected 169, got 236
FAIL: Hand count after playing council_room was not correct. Expected 186, got 188
FAIL: Hand count after playing council_room was not correct. Expected 188, got 45
FAIL: Hand count after playing council_room was not correct. Expected 188, got 273
FAIL: Hand count after playing council_room was not correct. Expected 188, got 329
FAIL: Hand count after playing council_room was not correct. Expected 279, got 281
FAIL: Hand count after playing council_room was not correct. Expected 281, got 408
FAIL: Hand count after playing council_room was not correct. Expected 281, got 33
FAIL: Hand count after playing council_room was not correct. Expected 281, got 100
FAIL: Hand count after playing council_room was not correct. Expected 360, got 362
FAIL: Hand count after playing council_room was not correct. Expected 362, got 136
FAIL: Hand count after playing council_room was not correct. Expected 362, got 301
FAIL: Hand count after playing council_room was not correct. Expected 362, got 419
FAIL: Hand count after playing council_room was not correct. Expected 181, got 183
FAIL: Hand count after playing council_room was not correct. Expected 183, got 177
FAIL: Hand count after playing council_room was not correct. Expected 183, got 102
FAIL: Hand count after playing council_room was not correct. Expected 183, got 313
FAIL: Hand count after playing council_room was not correct. Expected 330, got 332
FAIL: Hand count after playing council_room was not correct. Expected 332, got 403
FAIL: Hand count after playing council_room was not correct. Expected 332, got 295
FAIL: Hand count after playing council_room was not correct. Expected 332, got 102
FAIL: Hand count after playing council_room was not correct. Expected 213, got 215
FAIL: Hand count after playing council_room was not correct. Expected 215, got 146
FAIL: Hand count after playing council_room was not correct. Expected 215, got 472
FAIL: Hand count after playing council_room was not correct. Expected 215, got 67
FAIL: Hand count after playing council_room was not correct. Expected 493, got 495
FAIL: Hand count after playing council_room was not correct. Expected 495, got 298
FAIL: Hand count after playing council_room was not correct. Expected 495, got 88
FAIL: Hand count after playing council_room was not correct. Expected 495, got 1
FAIL: Hand count after playing council_room was not correct. Expected 356, got 358
FAIL: Hand count after playing council_room was not correct. Expected 358, got 440
FAIL: Hand count after playing council_room was not correct. Expected 358, got 38
FAIL: Hand count after playing council_room was not correct. Expected 358, got 160
FAIL: Hand count after playing council_room was not correct. Expected 120, got 122
FAIL: Hand count after playing council_room was not correct. Expected 122, got 61
FAIL: Hand count after playing council_room was not correct. Expected 122, got 436
FAIL: Hand count after playing council_room was not correct. Expected 122, got 185
FAIL: Hand count after playing council_room was not correct. Expected 316, got 318
FAIL: Hand count after playing council_room was not correct. Expected 318, got 410
FAIL: Hand count after playing council_room was not correct. Expected 318, got 56
FAIL: Hand count after playing council_room was not correct. Expected 318, got 43
FAIL: Hand count after playing council_room was not correct. Expected 12, got 14
FAIL: Hand count after playing council_room was not correct. Expected 14, got 65
FAIL: Hand count after playing council_room was not correct. Expected 14, got 272
FAIL: Hand count after playing council_room was not correct. Expected 14, got 192
FAIL: Hand count after playing council_room was not correct. Expected 129, got 131
FAIL: Hand count after playing council_room was not correct. Expected 131, got 32
FAIL: Hand count after playing council_room was not correct. Expected 131, got 69
FAIL: Hand count after playing council_room was not correct. Expected 131, got 62
FAIL: Hand count after playing council_room was not correct. Expected 277, got 279
FAIL: Hand count after playing council_room was not correct. Expected 279, got 177
FAIL: Hand count after playing council_room was not correct. Expected 279, got 45
FAIL: Hand count after playing council_room was not correct. Expected 279, got 269
FAIL: Hand count after playing council_room was not correct. Expected 16, got 18
FAIL: Hand count after playing council_room was not correct. Expected 18, got 131
FAIL: Hand count after playing council_room was not correct. Expected 18, got 456
FAIL: Hand count after playing council_room was not correct. Expected 18, got 141
FAIL: Hand count after playing council_room was not correct. Expected 85, got 87
FAIL: Hand count after playing council_room was not correct. Expected 87, got 55
FAIL: Hand count after playing council_room was not correct. Expected 87, got 277
FAIL: Hand count after playing council_room was not correct. Expected 87, got 434
FAIL: Hand count after playing council_room was not correct. Expected 143, got 145
FAIL: Hand count after playing council_room was not correct. Expected 145, got 17
FAIL: Hand count after playing council_room was not correct. Expected 145, got 87
FAIL: Hand count after playing council_room was not correct. Expected 145, got 387
FAIL: Hand count after playing council_room was not correct. Expected 310, got 312
FAIL: Hand count after playing council_room was not correct. Expected 312, got 498
FAIL: Hand count after playing council_room was not correct. Expected 312, got 56
FAIL: Hand count after playing council_room was not correct. Expected 312, got 55
FAIL: Hand count after playing council_room was not correct. Expected 9, got 11
FAIL: Hand count after playing council_room was not correct. Expected 11, got 31
FAIL: Hand count after playing council_room was not correct. Expected 11, got 281
FAIL: Hand count after playing council_room was not correct. Expected 11, got 96
FAIL: Hand count after playing council_room was not correct. Expected 404, got 406
FAIL: Hand count after playing council_room was not correct. Expected 406, got 74
FAIL: Hand count after playing council_room was not correct. Expected 406, got 279
FAIL: Hand count after playing council_room was not correct. Expected 406, got 481
FAIL: Hand count after playing council_room was not correct. Expected 497, got 499
FAIL: Hand count after playing council_room was not correct. Expected 499, got 312
FAIL: Hand count after playing council_room was not correct. Expected 499, got 227
FAIL: Hand count after playing council_room was not correct. Expected 499, got 42
FAIL: Hand count after playing council_room was not correct. Expected 221, got 223
FAIL: Hand count after playing council_room was not correct. Expected 223, got 257
FAIL: Hand count after playing council_room was not correct. Expected 223, got 339
FAIL: Hand count after playing council_room was not correct. Expected 223, got 35
FAIL: Hand count after playing council_room was not correct. Expected 251, got 253
FAIL: Hand count after playing council_room was not correct. Expected 253, got 493
FAIL: Hand count after playing council_room was not correct. Expected 253, got 344
FAIL: Hand count after playing council_room was not correct. Expected 253, got 296
FAIL: Hand count after playing council_room was not correct. Expected 319, got 321
FAIL: Hand count after playing council_room was not correct. Expected 321, got 68
FAIL: Hand count after playing council_room was not correct. Expected 321, got 301
FAIL: Hand count after playing council_room was not correct. Expected 321, got 370
FAIL: Hand count after playing council_room was not correct. Expected 103, got 105
FAIL: Hand count after playing council_room was not correct. Expected 105, got 456
FAIL: Hand count after playing council_room was not correct. Expected 105, got 90
FAIL: Hand count after playing council_room was not correct. Expected 105, got 352
FAIL: Hand count after playing council_room was not correct. Expected 192, got 194
FAIL: Hand count after playing council_room was not correct. Expected 194, got 142
FAIL: Hand count after playing council_room was not correct. Expected 194, got 441
FAIL: Hand count after playing council_room was not correct. Expected 194, got 238
FAIL: Hand count after playing council_room was not correct. Expected 51, got 53
FAIL: Hand count after playing council_room was not correct. Expected 53, got 141
FAIL: Hand count after playing council_room was not correct. Expected 53, got 24
FAIL: Hand count after playing council_room was not correct. Expected 53, got 231
FAIL: Hand count after playing council_room was not correct. Expected 430, got 432
FAIL: Hand count after playing council_room was not correct. Expected 432, got 17
FAIL: Hand count after playing council_room was not correct. Expected 432, got 223
FAIL: Hand count after playing council_room was not correct. Expected 432, got 227
FAIL: Hand count after playing council_room was not correct. Expected 187, got 189
FAIL: Hand count after playing council_room was not correct. Expected 189, got 467
FAIL: Hand count after playing council_room was not correct. Expected 189, got 31
FAIL: Hand count after playing council_room was not correct. Expected 189, got 297
FAIL: Hand count after playing council_room was not correct. Expected 179, got 181
FAIL: Hand count after playing council_room was not correct. Expected 181, got 194
FAIL: Hand count after playing council_room was not correct. Expected 181, got 218
FAIL: Hand count after playing council_room was not correct. Expected 181, got 24
FAIL: Hand count after playing council_room was not correct. Expected 95, got 97
FAIL: Hand count after playing council_room was not correct. Expected 97, got 181
FAIL: Hand count after playing council_room was not correct. Expected 97, got 299
FAIL: Hand count after playing council_room was not correct. Expected 97, got 223
FAIL: Hand count after playing council_room was not correct. Expected 211, got 213
FAIL: Hand count after playing council_room was not correct. Expected 213, got 436
FAIL: Hand count after playing council_room was not correct. Expected 213, got 214
FAIL: Hand count after playing council_room was not correct. Expected 213, got 1
FAIL: Hand count after playing council_room was not correct. Expected 254, got 256
FAIL: Hand count after playing council_room was not correct. Expected 256, got 296
FAIL: Hand count after playing council_room was not correct. Expected 256, got 334
FAIL: Hand count after playing council_room was not correct. Expected 256, got 360
FAIL: Hand count after playing council_room was not correct. Expected 244, got 246
FAIL: Hand count after playing council_room was not correct. Expected 246, got 59
FAIL: Hand count after playing council_room was not correct. Expected 246, got 499
FAIL: Hand count after playing council_room was not correct. Expected 246, got 448
FAIL: Hand count after playing council_room was not correct. Expected 94, got 96
FAIL: Hand count after playing council_room was not correct. Expected 96, got 220
FAIL: Hand count after playing council_room was not correct. Expected 96, got 456
FAIL: Hand count after playing council_room was not correct. Expected 96, got 336
FAIL: Hand count after playing council_room was not correct. Expected 451, got 453
FAIL: Hand count after playing council_room was not correct. Expected 453, got 419
FAIL: Hand count after playing council_room was not correct. Expected 453, got 163
FAIL: Hand count after playing council_room was not correct. Expected 453, got 388
FAIL: Hand count after playing council_room was not correct. Expected 41, got 43
FAIL: Hand count after playing council_room was not correct. Expected 43, got 277
FAIL: Hand count after playing council_room was not correct. Expected 43, got 410
FAIL: Hand count after playing council_room was not correct. Expected 43, got 350
FAIL: Hand count after playing council_room was not correct. Expected 27, got 29
FAIL: Hand count after playing council_room was not correct. Expected 29, got 429
FAIL: Hand count after playing council_room was not correct. Expected 29, got 272
FAIL: Hand count after playing council_room was not correct. Expected 29, got 409
FAIL: Hand count after playing council_room was not correct. Expected 44, got 46
FAIL: Hand count after playing council_room was not correct. Expected 46, got 368
FAIL: Hand count after playing council_room was not correct. Expected 46, got 38
FAIL: Hand count after playing council_room was not correct. Expected 46, got 275
FAIL: Hand count after playing council_room was not correct. Expected 272, got 274
FAIL: Hand count after playing council_room was not correct. Expected 274, got 247
FAIL: Hand count after playing council_room was not correct. Expected 274, got 464
FAIL: Hand count after playing council_room was not correct. Expected 274, got 396
FAIL: Hand count after playing council_room was not correct. Expected 301, got 303
FAIL: Hand count after playing council_room was not correct. Expected 303, got 236
FAIL: Hand count after playing council_room was not correct. Expected 303, got 18
FAIL: Hand count after playing council_room was not correct. Expected 303, got 120
FAIL: Hand count after playing council_room was not correct. Expected 162, got 164
FAIL: Hand count after playing council_room was not correct. Expected 164, got 482
FAIL: Hand count after playing council_room was not correct. Expected 164, got 400
FAIL: Hand count after playing council_room was not correct. Expected 164, got 261
FAIL: Hand count after playing council_room was not correct. Expected 428, got 430
FAIL: Hand count after playing council_room was not correct. Expected 430, got 468
FAIL: Hand count after playing council_room was not correct. Expected 430, got 425
FAIL: Hand count after playing council_room was not correct. Expected 430, got 106
FAIL: Hand count after playing council_room was not correct. Expected 304, got 306
FAIL: Hand count after playing council_room was not correct. Expected 306, got 77
FAIL: Hand count after playing council_room was not correct. Expected 306, got 35
FAIL: Hand count after playing council_room was not correct. Expected 306, got 367
FAIL: Hand count after playing council_room was not correct. Expected 366, got 368
FAIL: Hand count after playing council_room was not correct. Expected 368, got 410
FAIL: Hand count after playing council_room was not correct. Expected 368, got 302
FAIL: Hand count after playing council_room was not correct. Expected 368, got 452
FAIL: Hand count after playing council_room was not correct. Expected 51, got 53
FAIL: Hand count after playing council_room was not correct. Expected 53, got 405
FAIL: Hand count after playing council_room was not correct. Expected 53, got 155
FAIL: Hand count after playing council_room was not correct. Expected 53, got 192
FAIL: Hand count after playing council_room was not correct. Expected 96, got 98
FAIL: Hand count after playing council_room was not correct. Expected 98, got 3
FAIL: Hand count after playing council_room was not correct. Expected 98, got 264
FAIL: Hand count after playing council_room was not correct. Expected 98, got 208
FAIL: Hand count after playing council_room was not correct. Expected 225, got 227
FAIL: Hand count after playing council_room was not correct. Expected 227, got 237
FAIL: Hand count after playing council_room was not correct. Expected 227, got 352
FAIL: Hand count after playing council_room was not correct. Expected 227, got 268
FAIL: Hand count after playing council_room was not correct. Expected 102, got 104
FAIL: Hand count after playing council_room was not correct. Expected 104, got 368
FAIL: Hand count after playing council_room was not correct. Expected 104, got 371
FAIL: Hand count after playing council_room was not correct. Expected 104, got 225
FAIL: Hand count after playing council_room was not correct. Expected 61, got 63
FAIL: Hand count after playing council_room was not correct. Expected 63, got 306
FAIL: Hand count after playing council_room was not correct. Expected 63, got 267
FAIL: Hand count after playing council_room was not correct. Expected 63, got 226
FAIL: Hand count after playing council_room was not correct. Expected 218, got 220
FAIL: Hand count after playing council_room was not correct. Expected 220, got 473
FAIL: Hand count after playing council_room was not correct. Expected 220, got 449
FAIL: Hand count after playing council_room was not correct. Expected 220, got 204
FAIL: Hand count after playing council_room was not correct. Expected 430, got 432
FAIL: Hand count after playing council_room was not correct. Expected 432, got 182
FAIL: Hand count after playing council_room was not correct. Expected 432, got 483
FAIL: Hand count after playing council_room was not correct. Expected 432, got 66
FAIL: Hand count after playing council_room was not correct. Expected 442, got 444
FAIL: Hand count after playing council_room was not correct. Expected 444, got 332
FAIL: Hand count after playing council_room was not correct. Expected 444, got 394
FAIL: Hand count after playing council_room was not correct. Expected 444, got 385
FAIL: Hand count after playing council_room was not correct. Expected 259, got 261
FAIL: Hand count after playing council_room was not correct. Expected 261, got 493
FAIL: Hand count after playing council_room was not correct. Expected 261, got 449
FAIL: Hand count after playing council_room was not correct. Expected 261, got 162
FAIL: Hand count after playing council_room was not correct. Expected 192, got 194
FAIL: Hand count after playing council_room was not correct. Expected 194, got 123
FAIL: Hand count after playing council_room was not correct. Expected 194, got 107
FAIL: Hand count after playing council_room was not correct. Expected 194, got 163
FAIL: Hand count after playing council_room was not correct. Expected 379, got 381
FAIL: Hand count after playing council_room was not correct. Expected 381, got 376
FAIL: Hand count after playing council_room was not correct. Expected 381, got 89
FAIL: Hand count after playing council_room was not correct. Expected 381, got 55
FAIL: Hand count after playing council_room was not correct. Expected 86, got 88
FAIL: Hand count after playing council_room was not correct. Expected 88, got 208
FAIL: Hand count after playing council_room was not correct. Expected 88, got 344
FAIL: Hand count after playing council_room was not correct. Expected 88, got 241
FAIL: Hand count after playing council_room was not correct. Expected 387, got 389
FAIL: Hand count after playing council_room was not correct. Expected 389, got 299
FAIL: Hand count after playing council_room was not correct. Expected 389, got 413
FAIL: Hand count after playing council_room was not correct. Expected 389, got 460
FAIL: Hand count after playing council_room was not correct. Expected 352, got 354
FAIL: Hand count after playing council_room was not correct. Expected 354, got 450
FAIL: Hand count after playing council_room was not correct. Expected 354, got 389
FAIL: Hand count after playing council_room was not correct. Expected 354, got 122
FAIL: Hand count after playing council_room was not correct. Expected 131, got 133
FAIL: Hand count after playing council_room was not correct. Expected 133, got 252
FAIL: Hand count after playing council_room was not correct. Expected 133, got 37
FAIL: Hand count after playing council_room was not correct. Expected 133, got 361
FAIL: Hand count after playing council_room was not correct. Expected 211, got 213
FAIL: Hand count after playing council_room was not correct. Expected 213, got 74
FAIL: Hand count after playing council_room was not correct. Expected 213, got 474
FAIL: Hand count after playing council_room was not correct. Expected 213, got 487
FAIL: Hand count after playing council_room was not correct. Expected 37, got 39
FAIL: Hand count after playing council_room was not correct. Expected 39, got 191
FAIL: Hand count after playing council_room was not correct. Expected 39, got 252
FAIL: Hand count after playing council_room was not correct. Expected 39, got 430
FAIL: Hand count after playing council_room was not correct. Expected 387, got 389
FAIL: Hand count after playing council_room was not correct. Expected 389, got 220
FAIL: Hand count after playing council_room was not correct. Expected 389, got 490
FAIL: Hand count after playing council_room was not correct. Expected 389, got 185
FAIL: Hand count after playing council_room was not correct. Expected 326, got 328
FAIL: Hand count after playing council_room was not correct. Expected 328, got 180
FAIL: Hand count after playing council_room was not correct. Expected 328, got 484
FAIL: Hand count after playing council_room was not correct. Expected 328, got 113
FAIL: Hand count after playing council_room was not correct. Expected 302, got 304
FAIL: Hand count after playing council_room was not correct. Expected 304, got 377
FAIL: Hand count after playing council_room was not correct. Expected 304, got 372
FAIL: Hand count after playing council_room was not correct. Expected 304, got 131
FAIL: Hand count after playing council_room was not correct. Expected 192, got 194
FAIL: Hand count after playing council_room was not correct. Expected 194, got 478
FAIL: Hand count after playing council_room was not correct. Expected 194, got 66
FAIL: Hand count after playing council_room was not correct. Expected 194, got 212
FAIL: Hand count after playing council_room was not correct. Expected 432, got 434
FAIL: Hand count after playing council_room was not correct. Expected 434, got 22
FAIL: Hand count after playing council_room was not correct. Expected 434, got 338
FAIL: Hand count after playing council_room was not correct. Expected 434, got 495
FAIL: Hand count after playing council_room was not correct. Expected 282, got 284
FAIL: Hand count after playing council_room was not correct. Expected 284, got 27
FAIL: Hand count after playing council_room was not correct. Expected 284, got 38
FAIL: Hand count after playing council_room was not correct. Expected 284, got 326
FAIL: Hand count after playing council_room was not correct. Expected 383, got 385
FAIL: Hand count after playing council_room was not correct. Expected 385, got 458
FAIL: Hand count after playing council_room was not correct. Expected 385, got 398
FAIL: Hand count after playing council_room was not correct. Expected 385, got 347
FAIL: Hand count after playing council_room was not correct. Expected 377, got 379
FAIL: Hand count after playing council_room was not correct. Expected 379, got 146
FAIL: Hand count after playing council_room was not correct. Expected 379, got 164
FAIL: Hand count after playing council_room was not correct. Expected 379, got 238
FAIL: Hand count after playing council_room was not correct. Expected 85, got 87
FAIL: Hand count after playing council_room was not correct. Expected 87, got 234
FAIL: Hand count after playing council_room was not correct. Expected 87, got 40
FAIL: Hand count after playing council_room was not correct. Expected 87, got 137
FAIL: Hand count after playing council_room was not correct. Expected 23, got 25
FAIL: Hand count after playing council_room was not correct. Expected 25, got 21
FAIL: Hand count after playing council_room was not correct. Expected 25, got 169
FAIL: Hand count after playing council_room was not correct. Expected 25, got 52
FAIL: Hand count after playing council_room was not correct. Expected 487, got 489
FAIL: Hand count after playing council_room was not correct. Expected 489, got 449
FAIL: Hand count after playing council_room was not correct. Expected 489, got 282
FAIL: Hand count after playing council_room was not correct. Expected 489, got 280
FAIL: Hand count after playing council_room was not correct. Expected 45, got 47
FAIL: Hand count after playing council_room was not correct. Expected 47, got 205
FAIL: Hand count after playing council_room was not correct. Expected 47, got 415
FAIL: Hand count after playing council_room was not correct. Expected 47, got 338
FAIL: Hand count after playing council_room was not correct. Expected 316, got 318
FAIL: Hand count after playing council_room was not correct. Expected 318, got 272
FAIL: Hand count after playing council_room was not correct. Expected 318, got 398
FAIL: Hand count after playing council_room was not correct. Expected 318, got 83
FAIL: Hand count after playing council_room was not correct. Expected 6, got 8
FAIL: Hand count after playing council_room was not correct. Expected 8, got 446
FAIL: Hand count after playing council_room was not correct. Expected 8, got 493
FAIL: Hand count after playing council_room was not correct. Expected 8, got 199
FAIL: Hand count after playing council_room was not correct. Expected 172, got 174
FAIL: Hand count after playing council_room was not correct. Expected 174, got 406
FAIL: Hand count after playing council_room was not correct. Expected 174, got 367
FAIL: Hand count after playing council_room was not correct. Expected 174, got 145
FAIL: Hand count after playing council_room was not correct. Expected 141, got 143
FAIL: Hand count after playing council_room was not correct. Expected 143, got 364
FAIL: Hand count after playing council_room was not correct. Expected 143, got 79
FAIL: Hand count after playing council_room was not correct. Expected 143, got 22
FAIL: Hand count after playing council_room was not correct. Expected 71, got 73
FAIL: Hand count after playing council_room was not correct. Expected 73, got 212
FAIL: Hand count after playing council_room was not correct. Expected 73, got 238
FAIL: Hand count after playing council_room was not correct. Expected 73, got 429
FAIL: Hand count after playing council_room was not correct. Expected 209, got 211
FAIL: Hand count after playing council_room was not correct. Expected 211, got 400
FAIL: Hand count after playing council_room was not correct. Expected 211, got 357
FAIL: Hand count after playing council_room was not correct. Expected 211, got 310
FAIL: Hand count after playing council_room was not correct. Expected 82, got 84
FAIL: Hand count after playing council_room was not correct. Expected 84, got 300
FAIL: Hand count after playing council_room was not correct. Expected 84, got 43
FAIL: Hand count after playing council_room was not correct. Expected 84, got 90
FAIL: Hand count after playing council_room was not correct. Expected 482, got 484
FAIL: Hand count after playing council_room was not correct. Expected 484, got 350
FAIL: Hand count after playing council_room was not correct. Expected 484, got 12
FAIL: Hand count after playing council_room was not correct. Expected 484, got 407
FAIL: Hand count after playing council_room was not correct. Expected 265, got 267
FAIL: Hand count after playing council_room was not correct. Expected 267, got 241
FAIL: Hand count after playing council_room was not correct. Expected 267, got 468
FAIL: Hand count after playing council_room was not correct. Expected 267, got 229
FAIL: Hand count after playing council_room was not correct. Expected 114, got 116
FAIL: Hand count after playing council_room was not correct. Expected 116, got 209
FAIL: Hand count after playing council_room was not correct. Expected 116, got 451
FAIL: Hand count after playing council_room was not correct. Expected 116, got 51
FAIL: Hand count after playing council_room was not correct. Expected 76, got 78
FAIL: Hand count after playing council_room was not correct. Expected 78, got 386
FAIL: Hand count after playing council_room was not correct. Expected 78, got 132
FAIL: Hand count after playing council_room was not correct. Expected 78, got 102
FAIL: Hand count after playing council_room was not correct. Expected 303, got 305
FAIL: Hand count after playing council_room was not correct. Expected 305, got 122
FAIL: Hand count after playing council_room was not correct. Expected 305, got 265
FAIL: Hand count after playing council_room was not correct. Expected 305, got 393
FAIL: Hand count after playing council_room was not correct. Expected 242, got 244
FAIL: Hand count after playing council_room was not correct. Expected 244, got 91
FAIL: Hand count after playing council_room was not correct. Expected 244, got 231
FAIL: Hand count after playing council_room was not correct. Expected 244, got 409
FAIL: Hand count after playing council_room was not correct. Expected 84, got 86
FAIL: Hand count after playing council_room was not correct. Expected 86, got 184
FAIL: Hand count after playing council_room was not correct. Expected 86, got 346
FAIL: Hand count after playing council_room was not correct. Expected 86, got 270
FAIL: Hand count after playing council_room was not correct. Expected 376, got 378
FAIL: Hand count after playing council_room was not correct. Expected 378, got 58
FAIL: Hand count after playing council_room was not correct. Expected 378, got 497
FAIL: Hand count after playing council_room was not correct. Expected 378, got 38
FAIL: Hand count after playing council_room was not correct. Expected 401, got 403
FAIL: Hand count after playing council_room was not correct. Expected 403, got 104
FAIL: Hand count after playing council_room was not correct. Expected 403, got 299
FAIL: Hand count after playing council_room was not correct. Expected 403, got 217
FAIL: Hand count after playing council_room was not correct. Expected 150, got 152
FAIL: Hand count after playing council_room was not correct. Expected 152, got 454
FAIL: Hand count after playing council_room was not correct. Expected 152, got 339
FAIL: Hand count after playing council_room was not correct. Expected 152, got 462
FAIL: Hand count after playing council_room was not correct. Expected 10, got 12
FAIL: Hand count after playing council_room was not correct. Expected 12, got 278
FAIL: Hand count after playing council_room was not correct. Expected 12, got 439
FAIL: Hand count after playing council_room was not correct. Expected 12, got 383
FAIL: Hand count after playing council_room was not correct. Expected 401, got 403
FAIL: Hand count after playing council_room was not correct. Expected 403, got 282
FAIL: Hand count after playing council_room was not correct. Expected 403, got 89
FAIL: Hand count after playing council_room was not correct. Expected 403, got 241
FAIL: Hand count after playing council_room was not correct. Expected 405, got 407
FAIL: Hand count after playing council_room was not correct. Expected 407, got 136
FAIL: Hand count after playing council_room was not correct. Expected 407, got 208
FAIL: Hand count after playing council_room was not correct. Expected 407, got 130
FAIL: Hand count after playing council_room was not correct. Expected 253, got 255
FAIL: Hand count after playing council_room was not correct. Expected 255, got 118
FAIL: Hand count after playing council_room was not correct. Expected 255, got 81
FAIL: Hand count after playing council_room was not correct. Expected 255, got 220
FAIL: Hand count after playing council_room was not correct. Expected 183, got 185
FAIL: Hand count after playing council_room was not correct. Expected 185, got 399
FAIL: Hand count after playing council_room was not correct. Expected 185, got 61
FAIL: Hand count after playing council_room was not correct. Expected 185, got 356
FAIL: Hand count after playing council_room was not correct. Expected 419, got 421
FAIL: Hand count after playing council_room was not correct. Expected 421, got 271
FAIL: Hand count after playing council_room was not correct. Expected 421, got 461
FAIL: Hand count after playing council_room was not correct. Expected 421, got 195
FAIL: Hand count after playing council_room was not correct. Expected 375, got 377
FAIL: Hand count after playing council_room was not correct. Expected 377, got 70
FAIL: Hand count after playing council_room was not correct. Expected 377, got 494
FAIL: Hand count after playing council_room was not correct. Expected 377, got 393
FAIL: Hand count after playing council_room was not correct. Expected 453, got 455
FAIL: Hand count after playing council_room was not correct. Expected 455, got 229
FAIL: Hand count after playing council_room was not correct. Expected 455, got 367
FAIL: Hand count after playing council_room was not correct. Expected 455, got 288
FAIL: Hand count after playing council_room was not correct. Expected 392, got 394
FAIL: Hand count after playing council_room was not correct. Expected 394, got 35
FAIL: Hand count after playing council_room was not correct. Expected 394, got 467
FAIL: Hand count after playing council_room was not correct. Expected 394, got 18
FAIL: Hand count after playing council_room was not correct. Expected 158, got 160
FAIL: Hand count after playing council_room was not correct. Expected 160, got 420
FAIL: Hand count after playing council_room was not correct. Expected 160, got 233
FAIL: Hand count after playing council_room was not correct. Expected 160, got 393
FAIL: Hand count after playing council_room was not correct. Expected 275, got 277
FAIL: Hand count after playing council_room was not correct. Expected 277, got 67
FAIL: Hand count after playing council_room was not correct. Expected 277, got 218
FAIL: Hand count after playing council_room was not correct. Expected 277, got 218
FAIL: Hand count after playing council_room was not correct. Expected 79, got 81
FAIL: Hand count after playing council_room was not correct. Expected 81, got 48
FAIL: Hand count after playing council_room was not correct. Expected 81, got 439
FAIL: Hand count after playing council_room was not correct. Expected 81, got 230
FAIL: Hand count after playing council_room was not correct. Expected 404, got 406
FAIL: Hand count after playing council_room was not correct. Expected 406, got 109
FAIL: Hand count after playing council_room was not correct. Expected 406, got 143
FAIL: Hand count after playing council_room was not correct. Expected 406, got 446
FAIL: Hand count after playing council_room was not correct. Expected 429, got 431
FAIL: Hand count after playing council_room was not correct. Expected 431, got 435
FAIL: Hand count after playing council_room was not correct. Expected 431, got 185
FAIL: Hand count after playing council_room was not correct. Expected 431, got 286
FAIL: Hand count after playing council_room was not correct. Expected 441, got 443
FAIL: Hand count after playing council_room was not correct. Expected 443, got 352
FAIL: Hand count after playing council_room was not correct. Expected 443, got 357
FAIL: Hand count after playing council_room was not correct. Expected 443, got 145
FAIL: Hand count after playing council_room was not correct. Expected 276, got 278
FAIL: Hand count after playing council_room was not correct. Expected 278, got 233
FAIL: Hand count after playing council_room was not correct. Expected 278, got 385
FAIL: Hand count after playing council_room was not correct. Expected 278, got 304
FAIL: Hand count after playing council_room was not correct. Expected 335, got 337
FAIL: Hand count after playing council_room was not correct. Expected 337, got 68
FAIL: Hand count after playing council_room was not correct. Expected 337, got 212
FAIL: Hand count after playing council_room was not correct. Expected 337, got 431
FAIL: Hand count after playing council_room was not correct. Expected 57, got 59
FAIL: Hand count after playing council_room was not correct. Expected 59, got 137
FAIL: Hand count after playing council_room was not correct. Expected 59, got 476
FAIL: Hand count after playing council_room was not correct. Expected 59, got 164
FAIL: Hand count after playing council_room was not correct. Expected 395, got 397
FAIL: Hand count after playing council_room was not correct. Expected 397, got 70
FAIL: Hand count after playing council_room was not correct. Expected 397, got 180
FAIL: Hand count after playing council_room was not correct. Expected 397, got 140
FAIL: Hand count after playing council_room was not correct. Expected 428, got 430
FAIL: Hand count after playing council_room was not correct. Expected 430, got 458
FAIL: Hand count after playing council_room was not correct. Expected 430, got 330
FAIL: Hand count after playing council_room was not correct. Expected 430, got 263
FAIL: Hand count after playing council_room was not correct. Expected 265, got 267
FAIL: Hand count after playing council_room was not correct. Expected 267, got 310
FAIL: Hand count after playing council_room was not correct. Expected 267, got 470
FAIL: Hand count after playing council_room was not correct. Expected 267, got 16
FAIL: Hand count after playing council_room was not correct. Expected 263, got 265
FAIL: Hand count after playing council_room was not correct. Expected 265, got 100
FAIL: Hand count after playing council_room was not correct. Expected 265, got 156
FAIL: Hand count after playing council_room was not correct. Expected 265, got 35
FAIL: Hand count after playing council_room was not correct. Expected 53, got 55
FAIL: Hand count after playing council_room was not correct. Expected 55, got 133
FAIL: Hand count after playing council_room was not correct. Expected 55, got 39
FAIL: Hand count after playing council_room was not correct. Expected 55, got 397
FAIL: Hand count after playing council_room was not correct. Expected 438, got 440
FAIL: Hand count after playing council_room was not correct. Expected 440, got 218
FAIL: Hand count after playing council_room was not correct. Expected 440, got 217
FAIL: Hand count after playing council_room was not correct. Expected 440, got 330
FAIL: Hand count after playing council_room was not correct. Expected 10, got 12
FAIL: Hand count after playing council_room was not correct. Expected 12, got 440
FAIL: Hand count after playing council_room was not correct. Expected 12, got 86
FAIL: Hand count after playing council_room was not correct. Expected 12, got 146
FAIL: Hand count after playing council_room was not correct. Expected 112, got 114
FAIL: Hand count after playing council_room was not correct. Expected 114, got 12
FAIL: Hand count after playing council_room was not correct. Expected 114, got 64
FAIL: Hand count after playing council_room was not correct. Expected 114, got 59
FAIL: Hand count after playing council_room was not correct. Expected 137, got 139
FAIL: Hand count after playing council_room was not correct. Expected 139, got 357
FAIL: Hand count after playing council_room was not correct. Expected 139, got 303
FAIL: Hand count after playing council_room was not correct. Expected 139, got 459
FAIL: Hand count after playing council_room was not correct. Expected 495, got 497
FAIL: Hand count after playing council_room was not correct. Expected 497, got 355
FAIL: Hand count after playing council_room was not correct. Expected 497, got 35
FAIL: Hand count after playing council_room was not correct. Expected 497, got 397
FAIL: Hand count after playing council_room was not correct. Expected 471, got 473
FAIL: Hand count after playing council_room was not correct. Expected 473, got 292
FAIL: Hand count after playing council_room was not correct. Expected 473, got 55
FAIL: Hand count after playing council_room was not correct. Expected 473, got 47
FAIL: Hand count after playing council_room was not correct. Expected 156, got 158
FAIL: Hand count after playing council_room was not correct. Expected 158, got 432
FAIL: Hand count after playing council_room was not correct. Expected 158, got 376
FAIL: Hand count after playing council_room was not correct. Expected 158, got 95
FAIL: Hand count after playing council_room was not correct. Expected 358, got 360
FAIL: Hand count after playing council_room was not correct. Expected 360, got 229
FAIL: Hand count after playing council_room was not correct. Expected 360, got 491
FAIL: Hand count after playing council_room was not correct. Expected 360, got 46
FAIL: Hand count after playing council_room was not correct. Expected 127, got 129
FAIL: Hand count after playing council_room was not correct. Expected 129, got 297
FAIL: Hand count after playing council_room was not correct. Expected 129, got 196
FAIL: Hand count after playing council_room was not correct. Expected 129, got 47
FAIL: Hand count after playing council_room was not correct. Expected 336, got 338
FAIL: Hand count after playing council_room was not correct. Expected 338, got 396
FAIL: Hand count after playing council_room was not correct. Expected 338, got 480
FAIL: Hand count after playing council_room was not correct. Expected 338, got 32
FAIL: Hand count after playing council_room was not correct. Expected 289, got 291
FAIL: Hand count after playing council_room was not correct. Expected 291, got 4
FAIL: Hand count after playing council_room was not correct. Expected 291, got 248
FAIL: Hand count after playing council_room was not correct. Expected 291, got 248
FAIL: Hand count after playing council_room was not correct. Expected 473, got 475
FAIL: Hand count after playing council_room was not correct. Expected 475, got 2
FAIL: Hand count after playing council_room was not correct. Expected 475, got 137
FAIL: Hand count after playing council_room was not correct. Expected 475, got 44
FAIL: Hand count after playing council_room was not correct. Expected 33, got 35
FAIL: Hand count after playing council_room was not correct. Expected 35, got 408
FAIL: Hand count after playing council_room was not correct. Expected 35, got 88
FAIL: Hand count after playing council_room was not correct. Expected 35, got 185
FAIL: Hand count after playing council_room was not correct. Expected 84, got 86
FAIL: Hand count after playing council_room was not correct. Expected 86, got 39
FAIL: Hand count after playing council_room was not correct. Expected 86, got 91
FAIL: Hand count after playing council_room was not correct. Expected 86, got 378
FAIL: Hand count after playing council_room was not correct. Expected 186, got 188
FAIL: Hand count after playing council_room was not correct. Expected 188, got 364
FAIL: Hand count after playing council_room was not correct. Expected 188, got 499
FAIL: Hand count after playing council_room was not correct. Expected 188, got 176
FAIL: Hand count after playing council_room was not correct. Expected 143, got 145
FAIL: Hand count after playing council_room was not correct. Expected 145, got 191
FAIL: Hand count after playing council_room was not correct. Expected 145, got 372
FAIL: Hand count after playing council_room was not correct. Expected 145, got 389
FAIL: Hand count after playing council_room was not correct. Expected 355, got 357
FAIL: Hand count after playing council_room was not correct. Expected 357, got 356
FAIL: Hand count after playing council_room was not correct. Expected 357, got 212
FAIL: Hand count after playing council_room was not correct. Expected 357, got 357
FAIL: Hand count after playing council_room was not correct. Expected 291, got 293
FAIL: Hand count after playing council_room was not correct. Expected 293, got 106
FAIL: Hand count after playing council_room was not correct. Expected 293, got 82
FAIL: Hand count after playing council_room was not correct. Expected 293, got 454
FAIL: Hand count after playing council_room was not correct. Expected 341, got 343
FAIL: Hand count after playing council_room was not correct. Expected 343, got 444
FAIL: Hand count after playing council_room was not correct. Expected 343, got 414
FAIL: Hand count after playing council_room was not correct. Expected 343, got 315
FAIL: Hand count after playing council_room was not correct. Expected 365, got 367
FAIL: Hand count after playing council_room was not correct. Expected 367, got 284
FAIL: Hand count after playing council_room was not correct. Expected 367, got 365
FAIL: Hand count after playing council_room was not correct. Expected 367, got 131
FAIL: Hand count after playing council_room was not correct. Expected 261, got 263
FAIL: Hand count after playing council_room was not correct. Expected 263, got 394
FAIL: Hand count after playing council_room was not correct. Expected 263, got 127
FAIL: Hand count after playing council_room was not correct. Expected 263, got 64
FAIL: Hand count after playing council_room was not correct. Expected 107, got 109
FAIL: Hand count after playing council_room was not correct. Expected 109, got 435
FAIL: Hand count after playing council_room was not correct. Expected 109, got 28
FAIL: Hand count after playing council_room was not correct. Expected 109, got 252
FAIL: Hand count after playing council_room was not correct. Expected 17, got 19
FAIL: Hand count after playing council_room was not correct. Expected 19, got 155
FAIL: Hand count after playing council_room was not correct. Expected 19, got 34
FAIL: Hand count after playing council_room was not correct. Expected 19, got 315
FAIL: Hand count after playing council_room was not correct. Expected 242, got 244
FAIL: Hand count after playing council_room was not correct. Expected 244, got 119
FAIL: Hand count after playing council_room was not correct. Expected 244, got 254
FAIL: Hand count after playing council_room was not correct. Expected 244, got 50
FAIL: Hand count after playing council_room was not correct. Expected 371, got 373
FAIL: Hand count after playing council_room was not correct. Expected 373, got 254
FAIL: Hand count after playing council_room was not correct. Expected 373, got 391
FAIL: Hand count after playing council_room was not correct. Expected 373, got 487
FAIL: Hand count after playing council_room was not correct. Expected 295, got 297
FAIL: Hand count after playing council_room was not correct. Expected 297, got 371
FAIL: Hand count after playing council_room was not correct. Expected 297, got 373
FAIL: Hand count after playing council_room was not correct. Expected 297, got 42
FAIL: Hand count after playing council_room was not correct. Expected 200, got 202
FAIL: Hand count after playing council_room was not correct. Expected 202, got 128
FAIL: Hand count after playing council_room was not correct. Expected 202, got 191
FAIL: Hand count after playing council_room was not correct. Expected 202, got 204
FAIL: Hand count after playing council_room was not correct. Expected 101, got 103
FAIL: Hand count after playing council_room was not correct. Expected 103, got 318
FAIL: Hand count after playing council_room was not correct. Expected 103, got 24
FAIL: Hand count after playing council_room was not correct. Expected 103, got 57
FAIL: Hand count after playing council_room was not correct. Expected 263, got 265
FAIL: Hand count after playing council_room was not correct. Expected 265, got 278
FAIL: Hand count after playing council_room was not correct. Expected 265, got 466
FAIL: Hand count after playing council_room was not correct. Expected 265, got 142
FAIL: Hand count after playing council_room was not correct. Expected 257, got 259
FAIL: Hand count after playing council_room was not correct. Expected 259, got 122
FAIL: Hand count after playing council_room was not correct. Expected 259, got 150
FAIL: Hand count after playing council_room was not correct. Expected 259, got 278
FAIL: Hand count after playing council_room was not correct. Expected 368, got 370
FAIL: Hand count after playing council_room was not correct. Expected 370, got 435
FAIL: Hand count after playing council_room was not correct. Expected 370, got 434
FAIL: Hand count after playing council_room was not correct. Expected 370, got 280
FAIL: Hand count after playing council_room was not correct. Expected 284, got 286
FAIL: Hand count after playing council_room was not correct. Expected 286, got 145
FAIL: Hand count after playing council_room was not correct. Expected 286, got 376
FAIL: Hand count after playing council_room was not correct. Expected 286, got 232
FAIL: Hand count after playing council_room was not correct. Expected 88, got 90
FAIL: Hand count after playing council_room was not correct. Expected 90, got 438
FAIL: Hand count after playing council_room was not correct. Expected 90, got 349
FAIL: Hand count after playing council_room was not correct. Expected 90, got 495
FAIL: Hand count after playing council_room was not correct. Expected 256, got 258
FAIL: Hand count after playing council_room was not correct. Expected 258, got 122
FAIL: Hand count after playing council_room was not correct. Expected 258, got 295
FAIL: Hand count after playing council_room was not correct. Expected 258, got 106
FAIL: Hand count after playing council_room was not correct. Expected 229, got 231
FAIL: Hand count after playing council_room was not correct. Expected 231, got 434
FAIL: Hand count after playing council_room was not correct. Expected 231, got 441
FAIL: Hand count after playing council_room was not correct. Expected 231, got 328
FAIL: Hand count after playing council_room was not correct. Expected 39, got 41
FAIL: Hand count after playing council_room was not correct. Expected 41, got 257
FAIL: Hand count after playing council_room was not correct. Expected 41, got 404
FAIL: Hand count after playing council_room was not correct. Expected 41, got 157
FAIL: Hand count after playing council_room was not correct. Expected 171, got 173
FAIL: Hand count after playing council_room was not correct. Expected 173, got 420
FAIL: Hand count after playing council_room was not correct. Expected 173, got 3
FAIL: Hand count after playing council_room was not correct. Expected 173, got 383
FAIL: Hand count after playing council_room was not correct. Expected 311, got 313
FAIL: Hand count after playing council_room was not correct. Expected 313, got 257
FAIL: Hand count after playing council_room was not correct. Expected 313, got 499
FAIL: Hand count after playing council_room was not correct. Expected 313, got 222
FAIL: Hand count after playing council_room was not correct. Expected 239, got 241
FAIL: Hand count after playing council_room was not correct. Expected 241, got 55
FAIL: Hand count after playing council_room was not correct. Expected 241, got 457
FAIL: Hand count after playing council_room was not correct. Expected 241, got 74
FAIL: Hand count after playing council_room was not correct. Expected 30, got 32
FAIL: Hand count after playing council_room was not correct. Expected 32, got 162
FAIL: Hand count after playing council_room was not correct. Expected 32, got 287
FAIL: Hand count after playing council_room was not correct. Expected 32, got 146
FAIL: Hand count after playing council_room was not correct. Expected 268, got 270
FAIL: Hand count after playing council_room was not correct. Expected 270, got 275
FAIL: Hand count after playing council_room was not correct. Expected 270, got 294
FAIL: Hand count after playing council_room was not correct. Expected 270, got 344
FAIL: Hand count after playing council_room was not correct. Expected 12, got 14
FAIL: Hand count after playing council_room was not correct. Expected 14, got 26
FAIL: Hand count after playing council_room was not correct. Expected 14, got 136
FAIL: Hand count after playing council_room was not correct. Expected 14, got 397
FAIL: Hand count after playing council_room was not correct. Expected 329, got 331
FAIL: Hand count after playing council_room was not correct. Expected 331, got 233
FAIL: Hand count after playing council_room was not correct. Expected 331, got 417
FAIL: Hand count after playing council_room was not correct. Expected 331, got 96
FAIL: Hand count after playing council_room was not correct. Expected 443, got 445
FAIL: Hand count after playing council_room was not correct. Expected 445, got 410
FAIL: Hand count after playing council_room was not correct. Expected 445, got 249
FAIL: Hand count after playing council_room was not correct. Expected 445, got 201
FAIL: Hand count after playing council_room was not correct. Expected 17, got 19
FAIL: Hand count after playing council_room was not correct. Expected 19, got 488
FAIL: Hand count after playing council_room was not correct. Expected 19, got 409
FAIL: Hand count after playing council_room was not correct. Expected 19, got 320
FAIL: Hand count after playing council_room was not correct. Expected 349, got 351
FAIL: Hand count after playing council_room was not correct. Expected 351, got 41
FAIL: Hand count after playing council_room was not correct. Expected 351, got 264
FAIL: Hand count after playing council_room was not correct. Expected 351, got 468
FAIL: Hand count after playing council_room was not correct. Expected 486, got 488
FAIL: Hand count after playing council_room was not correct. Expected 488, got 419
FAIL: Hand count after playing council_room was not correct. Expected 488, got 426
FAIL: Hand count after playing council_room was not correct. Expected 488, got 325
FAIL: Hand count after playing council_room was not correct. Expected 99, got 101
FAIL: Hand count after playing council_room was not correct. Expected 101, got 112
FAIL: Hand count after playing council_room was not correct. Expected 101, got 218
FAIL: Hand count after playing council_room was not correct. Expected 101, got 151
FAIL: Hand count after playing council_room was not correct. Expected 430, got 432
FAIL: Hand count after playing council_room was not correct. Expected 432, got 434
FAIL: Hand count after playing council_room was not correct. Expected 432, got 200
FAIL: Hand count after playing council_room was not correct. Expected 432, got 420
FAIL: Hand count after playing council_room was not correct. Expected 143, got 145
FAIL: Hand count after playing council_room was not correct. Expected 145, got 439
FAIL: Hand count after playing council_room was not correct. Expected 145, got 157
FAIL: Hand count after playing council_room was not correct. Expected 145, got 106
FAIL: Hand count after playing council_room was not correct. Expected 359, got 361
FAIL: Hand count after playing council_room was not correct. Expected 361, got 344
FAIL: Hand count after playing council_room was not correct. Expected 361, got 216
FAIL: Hand count after playing council_room was not correct. Expected 361, got 328
FAIL: Hand count after playing council_room was not correct. Expected 226, got 228
FAIL: Hand count after playing council_room was not correct. Expected 228, got 25
FAIL: Hand count after playing council_room was not correct. Expected 228, got 489
FAIL: Hand count after playing council_room was not correct. Expected 228, got 36
FAIL: Hand count after playing council_room was not correct. Expected 353, got 355
FAIL: Hand count after playing council_room was not correct. Expected 355, got 495
FAIL: Hand count after playing council_room was not correct. Expected 355, got 295
FAIL: Hand count after playing council_room was not correct. Expected 355, got 407
FAIL: Hand count after playing council_room was not correct. Expected 149, got 151
FAIL: Hand count after playing council_room was not correct. Expected 151, got 207
FAIL: Hand count after playing council_room was not correct. Expected 151, got 229
FAIL: Hand count after playing council_room was not correct. Expected 151, got 400
FAIL: Hand count after playing council_room was not correct. Expected 342, got 344
FAIL: Hand count after playing council_room was not correct. Expected 344, got 217
FAIL: Hand count after playing council_room was not correct. Expected 344, got 210
FAIL: Hand count after playing council_room was not correct. Expected 344, got 274
FAIL: Hand count after playing council_room was not correct. Expected 157, got 159
FAIL: Hand count after playing council_room was not correct. Expected 159, got 50
FAIL: Hand count after playing council_room was not correct. Expected 159, got 156
FAIL: Hand count after playing council_room was not correct. Expected 159, got 269
FAIL: Hand count after playing council_room was not correct. Expected 297, got 299
FAIL: Hand count after playing council_room was not correct. Expected 299, got 29
FAIL: Hand count after playing council_room was not correct. Expected 299, got 2
FAIL: Hand count after playing council_room was not correct. Expected 299, got 74
FAIL: Hand count after playing council_room was not correct. Expected 396, got 398
FAIL: Hand count after playing council_room was not correct. Expected 398, got 120
FAIL: Hand count after playing council_room was not correct. Expected 398, got 6
FAIL: Hand count after playing council_room was not correct. Expected 398, got 461
FAIL: Hand count after playing council_room was not correct. Expected 58, got 60
FAIL: Hand count after playing council_room was not correct. Expected 60, got 460
FAIL: Hand count after playing council_room was not correct. Expected 60, got 176
FAIL: Hand count after playing council_room was not correct. Expected 60, got 239
FAIL: Hand count after playing council_room was not correct. Expected 333, got 335
FAIL: Hand count after playing council_room was not correct. Expected 335, got 117
FAIL: Hand count after playing council_room was not correct. Expected 335, got 82
FAIL: Hand count after playing council_room was not correct. Expected 335, got 493
FAIL: Hand count after playing council_room was not correct. Expected 185, got 187
FAIL: Hand count after playing council_room was not correct. Expected 187, got 186
FAIL: Hand count after playing council_room was not correct. Expected 187, got 441
FAIL: Hand count after playing council_room was not correct. Expected 187, got 48
FAIL: Hand count after playing council_room was not correct. Expected 381, got 383
FAIL: Hand count after playing council_room was not correct. Expected 383, got 253
FAIL: Hand count after playing council_room was not correct. Expected 383, got 393
FAIL: Hand count after playing council_room was not correct. Expected 383, got 100
FAIL: Hand count after playing council_room was not correct. Expected 140, got 142
FAIL: Hand count after playing council_room was not correct. Expected 142, got 411
FAIL: Hand count after playing council_room was not correct. Expected 142, got 263
FAIL: Hand count after playing council_room was not correct. Expected 142, got 94
FAIL: Hand count after playing council_room was not correct. Expected 53, got 55
FAIL: Hand count after playing council_room was not correct. Expected 55, got 499
FAIL: Hand count after playing council_room was not correct. Expected 55, got 448
FAIL: Hand count after playing council_room was not correct. Expected 55, got 349
FAIL: Hand count after playing council_room was not correct. Expected 425, got 427
FAIL: Hand count after playing council_room was not correct. Expected 427, got 148
FAIL: Hand count after playing council_room was not correct. Expected 427, got 67
FAIL: Hand count after playing council_room was not correct. Expected 427, got 17
FAIL: Hand count after playing council_room was not correct. Expected 392, got 394
FAIL: Hand count after playing council_room was not correct. Expected 394, got 69
FAIL: Hand count after playing council_room was not correct. Expected 394, got 224
FAIL: Hand count after playing council_room was not correct. Expected 394, got 175
FAIL: Hand count after playing council_room was not correct. Expected 296, got 298
FAIL: Hand count after playing council_room was not correct. Expected 298, got 378
FAIL: Hand count after playing council_room was not correct. Expected 298, got 418
FAIL: Hand count after playing council_room was not correct. Expected 298, got 95
FAIL: Hand count after playing council_room was not correct. Expected 362, got 364
FAIL: Hand count after playing council_room was not correct. Expected 364, got 341
FAIL: Hand count after playing council_room was not correct. Expected 364, got 375
FAIL: Hand count after playing council_room was not correct. Expected 364, got 32
FAIL: Hand count after playing council_room was not correct. Expected 10, got 12
FAIL: Hand count after playing council_room was not correct. Expected 12, got 4
FAIL: Hand count after playing council_room was not correct. Expected 12, got 292
FAIL: Hand count after playing council_room was not correct. Expected 12, got 98
FAIL: Hand count after playing council_room was not correct. Expected 22, got 24
FAIL: Hand count after playing council_room was not correct. Expected 24, got 176
FAIL: Hand count after playing council_room was not correct. Expected 24, got 452
FAIL: Hand count after playing council_room was not correct. Expected 24, got 476
FAIL: Hand count after playing council_room was not correct. Expected 340, got 342
FAIL: Hand count after playing council_room was not correct. Expected 342, got 353
FAIL: Hand count after playing council_room was not correct. Expected 342, got 490
FAIL: Hand count after playing council_room was not correct. Expected 342, got 92
FAIL: Hand count after playing council_room was not correct. Expected 478, got 480
FAIL: Hand count after playing council_room was not correct. Expected 480, got 16
FAIL: Hand count after playing council_room was not correct. Expected 480, got 209
FAIL: Hand count after playing council_room was not correct. Expected 480, got 415
FAIL: Hand count after playing council_room was not correct. Expected 81, got 83
FAIL: Hand count after playing council_room was not correct. Expected 83, got 459
FAIL: Hand count after playing council_room was not correct. Expected 83, got 333
FAIL: Hand count after playing council_room was not correct. Expected 83, got 458
FAIL: Hand count after playing council_room was not correct. Expected 205, got 207
FAIL: Hand count after playing council_room was not correct. Expected 207, got 351
FAIL: Hand count after playing council_room was not correct. Expected 207, got 325
FAIL: Hand count after playing council_room was not correct. Expected 207, got 98
FAIL: Hand count after playing council_room was not correct. Expected 194, got 196
FAIL: Hand count after playing council_room was not correct. Expected 196, got 115
FAIL: Hand count after playing council_room was not correct. Expected 196, got 262
FAIL: Hand count after playing council_room was not correct. Expected 196, got 487
FAIL: Hand count after playing council_room was not correct. Expected 340, got 342
FAIL: Hand count after playing council_room was not correct. Expected 342, got 210
FAIL: Hand count after playing council_room was not correct. Expected 342, got 332
FAIL: Hand count after playing council_room was not correct. Expected 342, got 369
FAIL: Hand count after playing council_room was not correct. Expected 257, got 259
FAIL: Hand count after playing council_room was not correct. Expected 259, got 327
FAIL: Hand count after playing council_room was not correct. Expected 259, got 158
FAIL: Hand count after playing council_room was not correct. Expected 259, got 388
FAIL: Hand count after playing council_room was not correct. Expected 339, got 341
FAIL: Hand count after playing council_room was not correct. Expected 341, got 261
FAIL: Hand count after playing council_room was not correct. Expected 341, got 481
FAIL: Hand count after playing council_room was not correct. Expected 341, got 258
FAIL: Hand count after playing council_room was not correct. Expected 262, got 264
FAIL: Hand count after playing council_room was not correct. Expected 264, got 291
FAIL: Hand count after playing council_room was not correct. Expected 264, got 279
FAIL: Hand count after playing council_room was not correct. Expected 264, got 51
FAIL: Hand count after playing council_room was not correct. Expected 319, got 321
FAIL: Hand count after playing council_room was not correct. Expected 321, got 282
FAIL: Hand count after playing council_room was not correct. Expected 321, got 336
FAIL: Hand count after playing council_room was not correct. Expected 321, got 376
FAIL: Hand count after playing council_room was not correct. Expected 91, got 93
FAIL: Hand count after playing council_room was not correct. Expected 93, got 169
FAIL: Hand count after playing council_room was not correct. Expected 93, got 149
FAIL: Hand count after playing council_room was not correct. Expected 93, got 61
FAIL: Hand count after playing council_room was not correct. Expected 96, got 98
FAIL: Hand count after playing council_room was not correct. Expected 98, got 328
FAIL: Hand count after playing council_room was not correct. Expected 98, got 86
FAIL: Hand count after playing council_room was not correct. Expected 98, got 74
FAIL: Hand count after playing council_room was not correct. Expected 164, got 166
FAIL: Hand count after playing council_room was not correct. Expected 166, got 337
FAIL: Hand count after playing council_room was not correct. Expected 166, got 138
FAIL: Hand count after playing council_room was not correct. Expected 166, got 86
FAIL: Hand count after playing council_room was not correct. Expected 273, got 275
FAIL: Hand count after playing council_room was not correct. Expected 275, got 46
FAIL: Hand count after playing council_room was not correct. Expected 275, got 361
FAIL: Hand count after playing council_room was not correct. Expected 275, got 394
FAIL: Hand count after playing council_room was not correct. Expected 308, got 310
FAIL: Hand count after playing council_room was not correct. Expected 310, got 438
FAIL: Hand count after playing council_room was not correct. Expected 310, got 309
FAIL: Hand count after playing council_room was not correct. Expected 310, got 32
FAIL: Hand count after playing council_room was not correct. Expected 466, got 468
FAIL: Hand count after playing council_room was not correct. Expected 468, got 131
FAIL: Hand count after playing council_room was not correct. Expected 468, got 193
FAIL: Hand count after playing council_room was not correct. Expected 468, got 28
FAIL: Hand count after playing council_room was not correct. Expected 359, got 361
FAIL: Hand count after playing council_room was not correct. Expected 361, got 139
FAIL: Hand count after playing council_room was not correct. Expected 361, got 158
FAIL: Hand count after playing council_room was not correct. Expected 361, got 393
FAIL: Hand count after playing council_room was not correct. Expected 106, got 108
FAIL: Hand count after playing council_room was not correct. Expected 108, got 128
FAIL: Hand count after playing council_room was not correct. Expected 108, got 53
FAIL: Hand count after playing council_room was not correct. Expected 108, got 96
FAIL: Hand count after playing council_room was not correct. Expected 196, got 198
FAIL: Hand count after playing council_room was not correct. Expected 198, got 135
FAIL: Hand count after playing council_room was not correct. Expected 198, got 223
FAIL: Hand count after playing council_room was not correct. Expected 198, got 13
FAIL: Hand count after playing council_room was not correct. Expected 164, got 166
FAIL: Hand count after playing council_room was not correct. Expected 166, got 314
FAIL: Hand count after playing council_room was not correct. Expected 166, got 231
FAIL: Hand count after playing council_room was not correct. Expected 166, got 112
FAIL: Hand count after playing council_room was not correct. Expected 102, got 104
FAIL: Hand count after playing council_room was not correct. Expected 104, got 492
FAIL: Hand count after playing council_room was not correct. Expected 104, got 111
FAIL: Hand count after playing council_room was not correct. Expected 104, got 316
FAIL: Hand count after playing council_room was not correct. Expected 432, got 434
FAIL: Hand count after playing council_room was not correct. Expected 434, got 367
FAIL: Hand count after playing council_room was not correct. Expected 434, got 477
FAIL: Hand count after playing council_room was not correct. Expected 434, got 340
FAIL: Hand count after playing council_room was not correct. Expected 322, got 324
FAIL: Hand count after playing council_room was not correct. Expected 324, got 161
FAIL: Hand count after playing council_room was not correct. Expected 324, got 491
FAIL: Hand count after playing council_room was not correct. Expected 324, got 226
FAIL: Hand count after playing council_room was not correct. Expected 339, got 341
FAIL: Hand count after playing council_room was not correct. Expected 341, got 265
FAIL: Hand count after playing council_room was not correct. Expected 341, got 208
FAIL: Hand count after playing council_room was not correct. Expected 341, got 170
FAIL: Hand count after playing council_room was not correct. Expected 379, got 381
FAIL: Hand count after playing council_room was not correct. Expected 381, got 256
FAIL: Hand count after playing council_room was not correct. Expected 381, got 226
FAIL: Hand count after playing council_room was not correct. Expected 381, got 408
FAIL: Hand count after playing council_room was not correct. Expected 378, got 380
FAIL: Hand count after playing council_room was not correct. Expected 380, got 76
FAIL: Hand count after playing council_room was not correct. Expected 380, got 164
FAIL: Hand count after playing council_room was not correct. Expected 380, got 100
FAIL: Hand count after playing council_room was not correct. Expected 124, got 126
FAIL: Hand count after playing council_room was not correct. Expected 126, got 83
FAIL: Hand count after playing council_room was not correct. Expected 126, got 173
FAIL: Hand count after playing council_room was not correct. Expected 126, got 478
FAIL: Hand count after playing council_room was not correct. Expected 141, got 143
FAIL: Hand count after playing council_room was not correct. Expected 143, got 383
FAIL: Hand count after playing council_room was not correct. Expected 143, got 65
FAIL: Hand count after playing council_room was not correct. Expected 143, got 410
FAIL: Hand count after playing council_room was not correct. Expected 476, got 478
FAIL: Hand count after playing council_room was not correct. Expected 478, got 476
FAIL: Hand count after playing council_room was not correct. Expected 478, got 53
FAIL: Hand count after playing council_room was not correct. Expected 478, got 135
FAIL: Hand count after playing council_room was not correct. Expected 34, got 36
FAIL: Hand count after playing council_room was not correct. Expected 36, got 320
FAIL: Hand count after playing council_room was not correct. Expected 36, got 387
FAIL: Hand count after playing council_room was not correct. Expected 36, got 498
FAIL: Hand count after playing council_room was not correct. Expected 255, got 257
FAIL: Hand count after playing council_room was not correct. Expected 257, got 320
FAIL: Hand count after playing council_room was not correct. Expected 257, got 48
FAIL: Hand count after playing council_room was not correct. Expected 257, got 458
FAIL: Hand count after playing council_room was not correct. Expected 298, got 300
FAIL: Hand count after playing council_room was not correct. Expected 300, got 86
FAIL: Hand count after playing council_room was not correct. Expected 300, got 254
FAIL: Hand count after playing council_room was not correct. Expected 300, got 106
FAIL: Hand count after playing council_room was not correct. Expected 315, got 317
FAIL: Hand count after playing council_room was not correct. Expected 317, got 113
FAIL: Hand count after playing council_room was not correct. Expected 317, got 118
FAIL: Hand count after playing council_room was not correct. Expected 317, got 242
FAIL: Hand count after playing council_room was not correct. Expected 119, got 121
FAIL: Hand count after playing council_room was not correct. Expected 121, got 281
FAIL: Hand count after playing council_room was not correct. Expected 121, got 13
FAIL: Hand count after playing council_room was not correct. Expected 121, got 399
FAIL: Hand count after playing council_room was not correct. Expected 89, got 91
FAIL: Hand count after playing council_room was not correct. Expected 91, got 47
FAIL: Hand count after playing council_room was not correct. Expected 91, got 62
FAIL: Hand count after playing council_room was not correct. Expected 91, got 286
FAIL: Hand count after playing council_room was not correct. Expected 222, got 224
FAIL: Hand count after playing council_room was not correct. Expected 224, got 217
FAIL: Hand count after playing council_room was not correct. Expected 224, got 335
FAIL: Hand count after playing council_room was not correct. Expected 224, got 266
FAIL: Hand count after playing council_room was not correct. Expected 175, got 177
FAIL: Hand count after playing council_room was not correct. Expected 177, got 105
FAIL: Hand count after playing council_room was not correct. Expected 177, got 222
FAIL: Hand count after playing council_room was not correct. Expected 177, got 189
FAIL: Hand count after playing council_room was not correct. Expected 360, got 362
FAIL: Hand count after playing council_room was not correct. Expected 362, got 322
FAIL: Hand count after playing council_room was not correct. Expected 362, got 398
FAIL: Hand count after playing council_room was not correct. Expected 362, got 400
FAIL: Hand count after playing council_room was not correct. Expected 410, got 412
FAIL: Hand count after playing council_room was not correct. Expected 412, got 158
FAIL: Hand count after playing council_room was not correct. Expected 412, got 264
FAIL: Hand count after playing council_room was not correct. Expected 412, got 88
FAIL: Hand count after playing council_room was not correct. Expected 443, got 445
FAIL: Hand count after playing council_room was not correct. Expected 445, got 493
FAIL: Hand count after playing council_room was not correct. Expected 445, got 304
FAIL: Hand count after playing council_room was not correct. Expected 445, got 123
FAIL: Hand count after playing council_room was not correct. Expected 141, got 143
FAIL: Hand count after playing council_room was not correct. Expected 143, got 150
FAIL: Hand count after playing council_room was not correct. Expected 143, got 131
FAIL: Hand count after playing council_room was not correct. Expected 143, got 198
FAIL: Hand count after playing council_room was not correct. Expected 492, got 494
FAIL: Hand count after playing council_room was not correct. Expected 494, got 381
FAIL: Hand count after playing council_room was not correct. Expected 494, got 397
FAIL: Hand count after playing council_room was not correct. Expected 494, got 7
FAIL: Hand count after playing council_room was not correct. Expected 379, got 381
FAIL: Hand count after playing council_room was not correct. Expected 381, got 403
FAIL: Hand count after playing council_room was not correct. Expected 381, got 123
FAIL: Hand count after playing council_room was not correct. Expected 381, got 231
FAIL: Hand count after playing council_room was not correct. Expected 381, got 383
FAIL: Hand count after playing council_room was not correct. Expected 383, got 186
FAIL: Hand count after playing council_room was not correct. Expected 383, got 164
FAIL: Hand count after playing council_room was not correct. Expected 383, got 259
FAIL: Hand count after playing council_room was not correct. Expected 336, got 338
FAIL: Hand count after playing council_room was not correct. Expected 338, got 9
FAIL: Hand count after playing council_room was not correct. Expected 338, got 362
FAIL: Hand count after playing council_room was not correct. Expected 338, got 465
FAIL: Hand count after playing council_room was not correct. Expected 137, got 139
FAIL: Hand count after playing council_room was not correct. Expected 139, got 144
FAIL: Hand count after playing council_room was not correct. Expected 139, got 56
FAIL: Hand count after playing council_room was not correct. Expected 139, got 315
FAIL: Hand count after playing council_room was not correct. Expected 293, got 295
FAIL: Hand count after playing council_room was not correct. Expected 295, got 492
FAIL: Hand count after playing council_room was not correct. Expected 295, got 493
FAIL: Hand count after playing council_room was not correct. Expected 295, got 312
FAIL: Hand count after playing council_room was not correct. Expected 92, got 94
FAIL: Hand count after playing council_room was not correct. Expected 94, got 442
FAIL: Hand count after playing council_room was not correct. Expected 94, got 471
FAIL: Hand count after playing council_room was not correct. Expected 94, got 453
FAIL: Hand count after playing council_room was not correct. Expected 310, got 312
FAIL: Hand count after playing council_room was not correct. Expected 312, got 447
FAIL: Hand count after playing council_room was not correct. Expected 312, got 425
FAIL: Hand count after playing council_room was not correct. Expected 312, got 406
FAIL: Hand count after playing council_room was not correct. Expected 279, got 281
FAIL: Hand count after playing council_room was not correct. Expected 281, got 217
FAIL: Hand count after playing council_room was not correct. Expected 281, got 486
FAIL: Hand count after playing council_room was not correct. Expected 281, got 466
FAIL: Hand count after playing council_room was not correct. Expected 341, got 343
FAIL: Hand count after playing council_room was not correct. Expected 343, got 252
FAIL: Hand count after playing council_room was not correct. Expected 343, got 147
FAIL: Hand count after playing council_room was not correct. Expected 343, got 11
FAIL: Hand count after playing council_room was not correct. Expected 307, got 309
FAIL: Hand count after playing council_room was not correct. Expected 309, got 392
FAIL: Hand count after playing council_room was not correct. Expected 309, got 497
FAIL: Hand count after playing council_room was not correct. Expected 309, got 122
FAIL: Hand count after playing council_room was not correct. Expected 331, got 333
FAIL: Hand count after playing council_room was not correct. Expected 333, got 461
FAIL: Hand count after playing council_room was not correct. Expected 333, got 255
FAIL: Hand count after playing council_room was not correct. Expected 333, got 333
FAIL: Hand count after playing council_room was not correct. Expected 424, got 426
FAIL: Hand count after playing council_room was not correct. Expected 426, got 453
FAIL: Hand count after playing council_room was not correct. Expected 426, got 291
FAIL: Hand count after playing council_room was not correct. Expected 426, got 223
FAIL: Hand count after playing council_room was not correct. Expected 53, got 55
FAIL: Hand count after playing council_room was not correct. Expected 55, got 265
FAIL: Hand count after playing council_room was not correct. Expected 55, got 457
FAIL: Hand count after playing council_room was not correct. Expected 55, got 279
FAIL: Hand count after playing council_room was not correct. Expected 142, got 144
FAIL: Hand count after playing council_room was not correct. Expected 144, got 217
FAIL: Hand count after playing council_room was not correct. Expected 144, got 113
FAIL: Hand count after playing council_room was not correct. Expected 144, got 285
FAIL: Hand count after playing council_room was not correct. Expected 277, got 279
FAIL: Hand count after playing council_room was not correct. Expected 279, got 255
FAIL: Hand count after playing council_room was not correct. Expected 279, got 80
FAIL: Hand count after playing council_room was not correct. Expected 279, got 295
FAIL: Hand count after playing council_room was not correct. Expected 133, got 135
FAIL: Hand count after playing council_room was not correct. Expected 135, got 176
FAIL: Hand count after playing council_room was not correct. Expected 135, got 361
FAIL: Hand count after playing council_room was not correct. Expected 135, got 325
FAIL: Hand count after playing council_room was not correct. Expected 243, got 245
FAIL: Hand count after playing council_room was not correct. Expected 245, got 90
FAIL: Hand count after playing council_room was not correct. Expected 245, got 454
FAIL: Hand count after playing council_room was not correct. Expected 245, got 255
FAIL: Hand count after playing council_room was not correct. Expected 212, got 214
FAIL: Hand count after playing council_room was not correct. Expected 214, got 293
FAIL: Hand count after playing council_room was not correct. Expected 214, got 247
FAIL: Hand count after playing council_room was not correct. Expected 214, got 438
FAIL: Hand count after playing council_room was not correct. Expected 336, got 338
FAIL: Hand count after playing council_room was not correct. Expected 338, got 211
FAIL: Hand count after playing council_room was not correct. Expected 338, got 359
FAIL: Hand count after playing council_room was not correct. Expected 338, got 397
FAIL: Hand count after playing council_room was not correct. Expected 271, got 273
FAIL: Hand count after playing council_room was not correct. Expected 273, got 154
FAIL: Hand count after playing council_room was not correct. Expected 273, got 56
FAIL: Hand count after playing council_room was not correct. Expected 273, got 303
FAIL: Hand count after playing council_room was not correct. Expected 326, got 328
FAIL: Hand count after playing council_room was not correct. Expected 328, got 177
FAIL: Hand count after playing council_room was not correct. Expected 328, got 291
FAIL: Hand count after playing council_room was not correct. Expected 328, got 162
FAIL: Hand count after playing council_room was not correct. Expected 164, got 166
FAIL: Hand count after playing council_room was not correct. Expected 166, got 306
FAIL: Hand count after playing council_room was not correct. Expected 166, got 128
FAIL: Hand count after playing council_room was not correct. Expected 166, got 155
FAIL: Hand count after playing council_room was not correct. Expected 15, got 17
FAIL: Hand count after playing council_room was not correct. Expected 17, got 320
FAIL: Hand count after playing council_room was not correct. Expected 17, got 333
FAIL: Hand count after playing council_room was not correct. Expected 17, got 50
FAIL: Hand count after playing council_room was not correct. Expected 217, got 219
FAIL: Hand count after playing council_room was not correct. Expected 219, got 327
FAIL: Hand count after playing council_room was not correct. Expected 219, got 400
FAIL: Hand count after playing council_room was not correct. Expected 219, got 210
FAIL: Hand count after playing council_room was not correct. Expected 240, got 242
FAIL: Hand count after playing council_room was not correct. Expected 242, got 403
FAIL: Hand count after playing council_room was not correct. Expected 242, got 335
FAIL: Hand count after playing council_room was not correct. Expected 242, got 290
FAIL: Hand count after playing council_room was not correct. Expected 69, got 71
FAIL: Hand count after playing council_room was not correct. Expected 71, got 117
FAIL: Hand count after playing council_room was not correct. Expected 71, got 217
FAIL: Hand count after playing council_room was not correct. Expected 71, got 371
FAIL: Hand count after playing council_room was not correct. Expected 283, got 285
FAIL: Hand count after playing council_room was not correct. Expected 285, got 441
FAIL: Hand count after playing council_room was not correct. Expected 285, got 22
FAIL: Hand count after playing council_room was not correct. Expected 285, got 305
FAIL: Hand count after playing council_room was not correct. Expected 227, got 229
FAIL: Hand count after playing council_room was not correct. Expected 229, got 9
FAIL: Hand count after playing council_room was not correct. Expected 229, got 490
FAIL: Hand count after playing council_room was not correct. Expected 229, got 346
FAIL: Hand count after playing council_room was not correct. Expected 337, got 339
FAIL: Hand count after playing council_room was not correct. Expected 339, got 125
FAIL: Hand count after playing council_room was not correct. Expected 339, got 157
FAIL: Hand count after playing council_room was not correct. Expected 339, got 70
FAIL: Hand count after playing council_room was not correct. Expected 420, got 422
FAIL: Hand count after playing council_room was not correct. Expected 422, got 319
FAIL: Hand count after playing council_room was not correct. Expected 422, got 138
FAIL: Hand count after playing council_room was not correct. Expected 422, got 410
FAIL: Hand count after playing council_room was not correct. Expected 58, got 60
FAIL: Hand count after playing council_room was not correct. Expected 60, got 384
FAIL: Hand count after playing council_room was not correct. Expected 60, got 211
FAIL: Hand count after playing council_room was not correct. Expected 60, got 454
FAIL: Hand count after playing council_room was not correct. Expected 332, got 334
FAIL: Hand count after playing council_room was not correct. Expected 334, got 234
FAIL: Hand count after playing council_room was not correct. Expected 334, got 46
FAIL: Hand count after playing council_room was not correct. Expected 334, got 435
FAIL: Hand count after playing council_room was not correct. Expected 232, got 234
FAIL: Hand count after playing council_room was not correct. Expected 234, got 57
FAIL: Hand count after playing council_room was not correct. Expected 234, got 295
FAIL: Hand count after playing council_room was not correct. Expected 234, got 471
FAIL: Hand count after playing council_room was not correct. Expected 338, got 340
FAIL: Hand count after playing council_room was not correct. Expected 340, got 219
FAIL: Hand count after playing council_room was not correct. Expected 340, got 298
FAIL: Hand count after playing council_room was not correct. Expected 340, got 272
FAIL: Hand count after playing council_room was not correct. Expected 347, got 349
FAIL: Hand count after playing council_room was not correct. Expected 349, got 105
FAIL: Hand count after playing council_room was not correct. Expected 349, got 27
FAIL: Hand count after playing council_room was not correct. Expected 349, got 453
FAIL: Hand count after playing council_room was not correct. Expected 205, got 207
FAIL: Hand count after playing council_room was not correct. Expected 207, got 240
FAIL: Hand count after playing council_room was not correct. Expected 207, got 242
FAIL: Hand count after playing council_room was not correct. Expected 207, got 248
FAIL: Hand count after playing council_room was not correct. Expected 465, got 467
FAIL: Hand count after playing council_room was not correct. Expected 467, got 396
FAIL: Hand count after playing council_room was not correct. Expected 467, got 1
FAIL: Hand count after playing council_room was not correct. Expected 467, got 155
FAIL: Hand count after playing council_room was not correct. Expected 303, got 305
FAIL: Hand count after playing council_room was not correct. Expected 305, got 181
FAIL: Hand count after playing council_room was not correct. Expected 305, got 418
FAIL: Hand count after playing council_room was not correct. Expected 305, got 122
FAIL: Hand count after playing council_room was not correct. Expected 461, got 463
FAIL: Hand count after playing council_room was not correct. Expected 463, got 147
FAIL: Hand count after playing council_room was not correct. Expected 463, got 74
FAIL: Hand count after playing council_room was not correct. Expected 463, got 335
FAIL: Hand count after playing council_room was not correct. Expected 363, got 365
FAIL: Hand count after playing council_room was not correct. Expected 365, got 220
FAIL: Hand count after playing council_room was not correct. Expected 365, got 63
FAIL: Hand count after playing council_room was not correct. Expected 365, got 297
FAIL: Hand count after playing council_room was not correct. Expected 285, got 287
FAIL: Hand count after playing council_room was not correct. Expected 287, got 109
FAIL: Hand count after playing council_room was not correct. Expected 287, got 67
FAIL: Hand count after playing council_room was not correct. Expected 287, got 168
FAIL: Hand count after playing council_room was not correct. Expected 325, got 327
FAIL: Hand count after playing council_room was not correct. Expected 327, got 29
FAIL: Hand count after playing council_room was not correct. Expected 327, got 193
FAIL: Hand count after playing council_room was not correct. Expected 327, got 126
FAIL: Hand count after playing council_room was not correct. Expected 125, got 127
FAIL: Hand count after playing council_room was not correct. Expected 127, got 417
FAIL: Hand count after playing council_room was not correct. Expected 127, got 256
FAIL: Hand count after playing council_room was not correct. Expected 127, got 152
FAIL: Hand count after playing council_room was not correct. Expected 130, got 132
FAIL: Hand count after playing council_room was not correct. Expected 132, got 38
FAIL: Hand count after playing council_room was not correct. Expected 132, got 312
FAIL: Hand count after playing council_room was not correct. Expected 132, got 74
FAIL: Hand count after playing council_room was not correct. Expected 298, got 300
FAIL: Hand count after playing council_room was not correct. Expected 300, got 275
FAIL: Hand count after playing council_room was not correct. Expected 300, got 163
FAIL: Hand count after playing council_room was not correct. Expected 300, got 232
FAIL: Hand count after playing council_room was not correct. Expected 458, got 460
FAIL: Hand count after playing council_room was not correct. Expected 460, got 227
FAIL: Hand count after playing council_room was not correct. Expected 460, got 149
FAIL: Hand count after playing council_room was not correct. Expected 460, got 316
FAIL: Hand count after playing council_room was not correct. Expected 24, got 26
FAIL: Hand count after playing council_room was not correct. Expected 26, got 477
FAIL: Hand count after playing council_room was not correct. Expected 26, got 448
FAIL: Hand count after playing council_room was not correct. Expected 26, got 90
FAIL: Hand count after playing council_room was not correct. Expected 278, got 280
FAIL: Hand count after playing council_room was not correct. Expected 280, got 48
FAIL: Hand count after playing council_room was not correct. Expected 280, got 69
FAIL: Hand count after playing council_room was not correct. Expected 280, got 172
FAIL: Hand count after playing council_room was not correct. Expected 434, got 436
FAIL: Hand count after playing council_room was not correct. Expected 436, got 152
FAIL: Hand count after playing council_room was not correct. Expected 436, got 307
FAIL: Hand count after playing council_room was not correct. Expected 436, got 255
FAIL: Hand count after playing council_room was not correct. Expected 411, got 413
FAIL: Hand count after playing council_room was not correct. Expected 413, got 460
FAIL: Hand count after playing council_room was not correct. Expected 413, got 309
FAIL: Hand count after playing council_room was not correct. Expected 413, got 381
FAIL: Hand count after playing council_room was not correct. Expected 369, got 371
FAIL: Hand count after playing council_room was not correct. Expected 371, got 57
FAIL: Hand count after playing council_room was not correct. Expected 371, got 60
FAIL: Hand count after playing council_room was not correct. Expected 371, got 155
FAIL: Hand count after playing council_room was not correct. Expected 27, got 29
FAIL: Hand count after playing council_room was not correct. Expected 29, got 335
FAIL: Hand count after playing council_room was not correct. Expected 29, got 397
FAIL: Hand count after playing council_room was not correct. Expected 29, got 326
FAIL: Hand count after playing council_room was not correct. Expected 412, got 414
FAIL: Hand count after playing council_room was not correct. Expected 414, got 271
FAIL: Hand count after playing council_room was not correct. Expected 414, got 197
FAIL: Hand count after playing council_room was not correct. Expected 414, got 483
FAIL: Hand count after playing council_room was not correct. Expected 403, got 405
FAIL: Hand count after playing council_room was not correct. Expected 405, got 171
FAIL: Hand count after playing council_room was not correct. Expected 405, got 452
FAIL: Hand count after playing council_room was not correct. Expected 405, got 113
FAIL: Hand count after playing council_room was not correct. Expected 475, got 477
FAIL: Hand count after playing council_room was not correct. Expected 477, got 213
FAIL: Hand count after playing council_room was not correct. Expected 477, got 483
FAIL: Hand count after playing council_room was not correct. Expected 477, got 322
FAIL: Hand count after playing council_room was not correct. Expected 180, got 182
FAIL: Hand count after playing council_room was not correct. Expected 182, got 83
FAIL: Hand count after playing council_room was not correct. Expected 182, got 150
FAIL: Hand count after playing council_room was not correct. Expected 182, got 199
FAIL: Hand count after playing council_room was not correct. Expected 449, got 451
FAIL: Hand count after playing council_room was not correct. Expected 451, got 211
FAIL: Hand count after playing council_room was not correct. Expected 451, got 390
FAIL: Hand count after playing council_room was not correct. Expected 451, got 243
FAIL: Hand count after playing council_room was not correct. Expected 218, got 220
FAIL: Hand count after playing council_room was not correct. Expected 220, got 109
FAIL: Hand count after playing council_room was not correct. Expected 220, got 25
FAIL: Hand count after playing council_room was not correct. Expected 220, got 383
FAIL: Hand count after playing council_room was not correct. Expected 339, got 341
FAIL: Hand count after playing council_room was not correct. Expected 341, got 198
FAIL: Hand count after playing council_room was not correct. Expected 341, got 289
FAIL: Hand count after playing council_room was not correct. Expected 341, got 185
FAIL: Hand count after playing council_room was not correct. Expected 182, got 184
FAIL: Hand count after playing council_room was not correct. Expected 184, got 40
FAIL: Hand count after playing council_room was not correct. Expected 184, got 340
FAIL: Hand count after playing council_room was not correct. Expected 184, got 61
FAIL: Hand count after playing council_room was not correct. Expected 281, got 283
FAIL: Hand count after playing council_room was not correct. Expected 283, got 105
FAIL: Hand count after playing council_room was not correct. Expected 283, got 232
FAIL: Hand count after playing council_room was not correct. Expected 283, got 33
FAIL: Hand count after playing council_room was not correct. Expected 220, got 222
FAIL: Hand count after playing council_room was not correct. Expected 222, got 301
FAIL: Hand count after playing council_room was not correct. Expected 222, got 349
FAIL: Hand count after playing council_room was not correct. Expected 222, got 322
FAIL: Hand count after playing council_room was not correct. Expected 284, got 286
FAIL: Hand count after playing council_room was not correct. Expected 286, got 348
FAIL: Hand count after playing council_room was not correct. Expected 286, got 138
FAIL: Hand count after playing council_room was not correct. Expected 286, got 387
FAIL: Hand count after playing council_room was not correct. Expected 195, got 197
FAIL: Hand count after playing council_room was not correct. Expected 197, got 99
FAIL: Hand count after playing council_room was not correct. Expected 197, got 237
FAIL: Hand count after playing council_room was not correct. Expected 197, got 347
FAIL: Hand count after playing council_room was not correct. Expected 323, got 325
FAIL: Hand count after playing council_room was not correct. Expected 325, got 371
FAIL: Hand count after playing council_room was not correct. Expected 325, got 242
FAIL: Hand count after playing council_room was not correct. Expected 325, got 471
FAIL: Hand count after playing council_room was not correct. Expected 349, got 351
FAIL: Hand count after playing council_room was not correct. Expected 351, got 385
FAIL: Hand count after playing council_room was not correct. Expected 351, got 290
FAIL: Hand count after playing council_room was not correct. Expected 351, got 162
FAIL: Hand count after playing council_room was not correct. Expected 27, got 29
FAIL: Hand count after playing council_room was not correct. Expected 29, got 200
FAIL: Hand count after playing council_room was not correct. Expected 29, got 90
FAIL: Hand count after playing council_room was not correct. Expected 29, got 417
FAIL: Hand count after playing council_room was not correct. Expected 150, got 152
FAIL: Hand count after playing council_room was not correct. Expected 152, got 458
FAIL: Hand count after playing council_room was not correct. Expected 152, got 320
FAIL: Hand count after playing council_room was not correct. Expected 152, got 13
FAIL: Hand count after playing council_room was not correct. Expected 488, got 490
FAIL: Hand count after playing council_room was not correct. Expected 490, got 447
FAIL: Hand count after playing council_room was not correct. Expected 490, got 1
FAIL: Hand count after playing council_room was not correct. Expected 490, got 5
FAIL: Hand count after playing council_room was not correct. Expected 293, got 295
FAIL: Hand count after playing council_room was not correct. Expected 295, got 294
FAIL: Hand count after playing council_room was not correct. Expected 295, got 424
FAIL: Hand count after playing council_room was not correct. Expected 295, got 335
FAIL: Hand count after playing council_room was not correct. Expected 127, got 129
FAIL: Hand count after playing council_room was not correct. Expected 129, got 354
FAIL: Hand count after playing council_room was not correct. Expected 129, got 305
FAIL: Hand count after playing council_room was not correct. Expected 129, got 202
FAIL: Hand count after playing council_room was not correct. Expected 493, got 495
FAIL: Hand count after playing council_room was not correct. Expected 495, got 296
FAIL: Hand count after playing council_room was not correct. Expected 495, got 339
FAIL: Hand count after playing council_room was not correct. Expected 495, got 133
FAIL: Hand count after playing council_room was not correct. Expected 28, got 30
FAIL: Hand count after playing council_room was not correct. Expected 30, got 280
FAIL: Hand count after playing council_room was not correct. Expected 30, got 83
FAIL: Hand count after playing council_room was not correct. Expected 30, got 352
FAIL: Hand count after playing council_room was not correct. Expected 419, got 421
FAIL: Hand count after playing council_room was not correct. Expected 421, got 265
FAIL: Hand count after playing council_room was not correct. Expected 421, got 148
FAIL: Hand count after playing council_room was not correct. Expected 421, got 316
FAIL: Hand count after playing council_room was not correct. Expected 170, got 172
FAIL: Hand count after playing council_room was not correct. Expected 172, got 492
FAIL: Hand count after playing council_room was not correct. Expected 172, got 117
FAIL: Hand count after playing council_room was not correct. Expected 172, got 12
FAIL: Hand count after playing council_room was not correct. Expected 347, got 349
FAIL: Hand count after playing council_room was not correct. Expected 349, got 219
FAIL: Hand count after playing council_room was not correct. Expected 349, got 341
FAIL: Hand count after playing council_room was not correct. Expected 349, got 138
FAIL: Hand count after playing council_room was not correct. Expected 139, got 141
FAIL: Hand count after playing council_room was not correct. Expected 141, got 395
FAIL: Hand count after playing council_room was not correct. Expected 141, got 374
FAIL: Hand count after playing council_room was not correct. Expected 141, got 355
FAIL: Hand count after playing council_room was not correct. Expected 400, got 402
FAIL: Hand count after playing council_room was not correct. Expected 402, got 450
FAIL: Hand count after playing council_room was not correct. Expected 402, got 326
FAIL: Hand count after playing council_room was not correct. Expected 402, got 314
FAIL: Hand count after playing council_room was not correct. Expected 11, got 13
FAIL: Hand count after playing council_room was not correct. Expected 13, got 375
FAIL: Hand count after playing council_room was not correct. Expected 13, got 387
FAIL: Hand count after playing council_room was not correct. Expected 13, got 355
FAIL: Hand count after playing council_room was not correct. Expected 498, got 500
FAIL: Hand count after playing council_room was not correct. Expected 500, got 354
FAIL: Hand count after playing council_room was not correct. Expected 500, got 351
FAIL: Hand count after playing council_room was not correct. Expected 500, got 475
FAIL: Hand count after playing council_room was not correct. Expected 172, got 174
FAIL: Hand count after playing council_room was not correct. Expected 174, got 183
FAIL: Hand count after playing council_room was not correct. Expected 174, got 396
FAIL: Hand count after playing council_room was not correct. Expected 174, got 336
FAIL: Hand count after playing council_room was not correct. Expected 368, got 370
FAIL: Hand count after playing council_room was not correct. Expected 370, got 247
FAIL: Hand count after playing council_room was not correct. Expected 370, got 337
FAIL: Hand count after playing council_room was not correct. Expected 370, got 243
FAIL: Hand count after playing council_room was not correct. Expected 70, got 72
FAIL: Hand count after playing council_room was not correct. Expected 72, got 69
FAIL: Hand count after playing council_room was not correct. Expected 72, got 498
FAIL: Hand count after playing council_room was not correct. Expected 72, got 143
FAIL: Hand count after playing council_room was not correct. Expected 470, got 472
FAIL: Hand count after playing council_room was not correct. Expected 472, got 361
FAIL: Hand count after playing council_room was not correct. Expected 472, got 280
FAIL: Hand count after playing council_room was not correct. Expected 472, got 330
FAIL: Hand count after playing council_room was not correct. Expected 176, got 178
FAIL: Hand count after playing council_room was not correct. Expected 178, got 111
FAIL: Hand count after playing council_room was not correct. Expected 178, got 148
FAIL: Hand count after playing council_room was not correct. Expected 178, got 258
FAIL: Hand count after playing council_room was not correct. Expected 43, got 45
FAIL: Hand count after playing council_room was not correct. Expected 45, got 106
FAIL: Hand count after playing council_room was not correct. Expected 45, got 217
FAIL: Hand count after playing council_room was not correct. Expected 45, got 361
FAIL: Hand count after playing council_room was not correct. Expected 293, got 295
FAIL: Hand count after playing council_room was not correct. Expected 295, got 61
FAIL: Hand count after playing council_room was not correct. Expected 295, got 460
FAIL: Hand count after playing council_room was not correct. Expected 295, got 15
FAIL: Hand count after playing council_room was not correct. Expected 412, got 414
FAIL: Hand count after playing council_room was not correct. Expected 414, got 73
FAIL: Hand count after playing council_room was not correct. Expected 414, got 125
FAIL: Hand count after playing council_room was not correct. Expected 414, got 287
FAIL: Hand count after playing council_room was not correct. Expected 269, got 271
FAIL: Hand count after playing council_room was not correct. Expected 271, got 168
FAIL: Hand count after playing council_room was not correct. Expected 271, got 16
FAIL: Hand count after playing council_room was not correct. Expected 271, got 206
FAIL: Hand count after playing council_room was not correct. Expected 11, got 13
FAIL: Hand count after playing council_room was not correct. Expected 13, got 418
FAIL: Hand count after playing council_room was not correct. Expected 13, got 125
FAIL: Hand count after playing council_room was not correct. Expected 13, got 378
FAIL: Hand count after playing council_room was not correct. Expected 179, got 181
FAIL: Hand count after playing council_room was not correct. Expected 181, got 57
FAIL: Hand count after playing council_room was not correct. Expected 181, got 48
FAIL: Hand count after playing council_room was not correct. Expected 181, got 431
FAIL: Hand count after playing council_room was not correct. Expected 311, got 313
FAIL: Hand count after playing council_room was not correct. Expected 313, got 19
FAIL: Hand count after playing council_room was not correct. Expected 313, got 385
FAIL: Hand count after playing council_room was not correct. Expected 313, got 240
FAIL: Hand count after playing council_room was not correct. Expected 233, got 235
FAIL: Hand count after playing council_room was not correct. Expected 235, got 366
FAIL: Hand count after playing council_room was not correct. Expected 235, got 376
FAIL: Hand count after playing council_room was not correct. Expected 235, got 386
FAIL: Hand count after playing council_room was not correct. Expected 198, got 200
FAIL: Hand count after playing council_room was not correct. Expected 200, got 40
FAIL: Hand count after playing council_room was not correct. Expected 200, got 192
FAIL: Hand count after playing council_room was not correct. Expected 200, got 453
FAIL: Hand count after playing council_room was not correct. Expected 115, got 117
FAIL: Hand count after playing council_room was not correct. Expected 117, got 366
FAIL: Hand count after playing council_room was not correct. Expected 117, got 235
FAIL: Hand count after playing council_room was not correct. Expected 117, got 163
FAIL: Hand count after playing council_room was not correct. Expected 292, got 294
FAIL: Hand count after playing council_room was not correct. Expected 294, got 400
FAIL: Hand count after playing council_room was not correct. Expected 294, got 478
FAIL: Hand count after playing council_room was not correct. Expected 294, got 165
FAIL: Hand count after playing council_room was not correct. Expected 435, got 437
FAIL: Hand count after playing council_room was not correct. Expected 437, got 481
FAIL: Hand count after playing council_room was not correct. Expected 437, got 485
FAIL: Hand count after playing council_room was not correct. Expected 437, got 147
FAIL: Hand count after playing council_room was not correct. Expected 261, got 263
FAIL: Hand count after playing council_room was not correct. Expected 263, got 492
FAIL: Hand count after playing council_room was not correct. Expected 263, got 361
FAIL: Hand count after playing council_room was not correct. Expected 263, got 360
FAIL: Hand count after playing council_room was not correct. Expected 416, got 418
FAIL: Hand count after playing council_room was not correct. Expected 418, got 269
FAIL: Hand count after playing council_room was not correct. Expected 418, got 486
FAIL: Hand count after playing council_room was not correct. Expected 418, got 402
FAIL: Hand count after playing council_room was not correct. Expected 125, got 127
FAIL: Hand count after playing council_room was not correct. Expected 127, got 290
FAIL: Hand count after playing council_room was not correct. Expected 127, got 172
FAIL: Hand count after playing council_room was not correct. Expected 127, got 14
FAIL: Hand count after playing council_room was not correct. Expected 361, got 363
FAIL: Hand count after playing council_room was not correct. Expected 363, got 187
FAIL: Hand count after playing council_room was not correct. Expected 363, got 219
FAIL: Hand count after playing council_room was not correct. Expected 363, got 192
FAIL: Hand count after playing council_room was not correct. Expected 342, got 344
FAIL: Hand count after playing council_room was not correct. Expected 344, got 172
FAIL: Hand count after playing council_room was not correct. Expected 344, got 139
FAIL: Hand count after playing council_room was not correct. Expected 344, got 185
FAIL: Hand count after playing council_room was not correct. Expected 491, got 493
FAIL: Hand count after playing council_room was not correct. Expected 493, got 163
FAIL: Hand count after playing council_room was not correct. Expected 493, got 474
FAIL: Hand count after playing council_room was not correct. Expected 493, got 357
FAIL: Hand count after playing council_room was not correct. Expected 198, got 200
FAIL: Hand count after playing council_room was not correct. Expected 200, got 39
FAIL: Hand count after playing council_room was not correct. Expected 200, got 355
FAIL: Hand count after playing council_room was not correct. Expected 200, got 43
FAIL: Hand count after playing council_room was not correct. Expected 152, got 154
FAIL: Hand count after playing council_room was not correct. Expected 154, got 345
FAIL: Hand count after playing council_room was not correct. Expected 154, got 338
FAIL: Hand count after playing council_room was not correct. Expected 154, got 149
FAIL: Hand count after playing council_room was not correct. Expected 495, got 497
FAIL: Hand count after playing council_room was not correct. Expected 497, got 241
FAIL: Hand count after playing council_room was not correct. Expected 497, got 37
FAIL: Hand count after playing council_room was not correct. Expected 497, got 191
FAIL: Hand count after playing council_room was not correct. Expected 148, got 150
FAIL: Hand count after playing council_room was not correct. Expected 150, got 135
FAIL: Hand count after playing council_room was not correct. Expected 150, got 192
FAIL: Hand count after playing council_room was not correct. Expected 150, got 411
FAIL: Hand count after playing council_room was not correct. Expected 65, got 67
FAIL: Hand count after playing council_room was not correct. Expected 67, got 100
FAIL: Hand count after playing council_room was not correct. Expected 67, got 1
FAIL: Hand count after playing council_room was not correct. Expected 67, got 18
FAIL: Hand count after playing council_room was not correct. Expected 196, got 198
FAIL: Hand count after playing council_room was not correct. Expected 198, got 75
FAIL: Hand count after playing council_room was not correct. Expected 198, got 272
FAIL: Hand count after playing council_room was not correct. Expected 198, got 301
FAIL: Hand count after playing council_room was not correct. Expected 438, got 440
FAIL: Hand count after playing council_room was not correct. Expected 440, got 296
FAIL: Hand count after playing council_room was not correct. Expected 440, got 252
FAIL: Hand count after playing council_room was not correct. Expected 440, got 363
FAIL: Hand count after playing council_room was not correct. Expected 393, got 395
FAIL: Hand count after playing council_room was not correct. Expected 395, got 171
FAIL: Hand count after playing council_room was not correct. Expected 395, got 206
FAIL: Hand count after playing council_room was not correct. Expected 395, got 44
FAIL: Hand count after playing council_room was not correct. Expected 253, got 255
FAIL: Hand count after playing council_room was not correct. Expected 255, got 329
FAIL: Hand count after playing council_room was not correct. Expected 255, got 13
FAIL: Hand count after playing council_room was not correct. Expected 255, got 354
FAIL: Hand count after playing council_room was not correct. Expected 483, got 485
FAIL: Hand count after playing council_room was not correct. Expected 485, got 298
FAIL: Hand count after playing council_room was not correct. Expected 485, got 77
FAIL: Hand count after playing council_room was not correct. Expected 485, got 451
FAIL: Hand count after playing council_room was not correct. Expected 283, got 285
FAIL: Hand count after playing council_room was not correct. Expected 285, got 390
FAIL: Hand count after playing council_room was not correct. Expected 285, got 157
FAIL: Hand count after playing council_room was not correct. Expected 285, got 182
FAIL: Hand count after playing council_room was not correct. Expected 94, got 96
FAIL: Hand count after playing council_room was not correct. Expected 96, got 422
FAIL: Hand count after playing council_room was not correct. Expected 96, got 289
FAIL: Hand count after playing council_room was not correct. Expected 96, got 111
FAIL: Hand count after playing council_room was not correct. Expected 499, got 501
FAIL: Hand count after playing council_room was not correct. Expected 501, got 414
FAIL: Hand count after playing council_room was not correct. Expected 501, got 222
FAIL: Hand count after playing council_room was not correct. Expected 501, got 416
FAIL: Hand count after playing council_room was not correct. Expected 63, got 65
FAIL: Hand count after playing council_room was not correct. Expected 65, got 195
FAIL: Hand count after playing council_room was not correct. Expected 65, got 149
FAIL: Hand count after playing council_room was not correct. Expected 65, got 301
FAIL: Hand count after playing council_room was not correct. Expected 464, got 466
FAIL: Hand count after playing council_room was not correct. Expected 466, got 40
FAIL: Hand count after playing council_room was not correct. Expected 466, got 305
FAIL: Hand count after playing council_room was not correct. Expected 466, got 95
FAIL: Hand count after playing council_room was not correct. Expected 486, got 488
FAIL: Hand count after playing council_room was not correct. Expected 488, got 376
FAIL: Hand count after playing council_room was not correct. Expected 488, got 196
FAIL: Hand count after playing council_room was not correct. Expected 488, got 394
FAIL: Hand count after playing council_room was not correct. Expected 168, got 170
FAIL: Hand count after playing council_room was not correct. Expected 170, got 135
FAIL: Hand count after playing council_room was not correct. Expected 170, got 83
FAIL: Hand count after playing council_room was not correct. Expected 170, got 434
FAIL: Hand count after playing council_room was not correct. Expected 430, got 432
FAIL: Hand count after playing council_room was not correct. Expected 432, got 438
FAIL: Hand count after playing council_room was not correct. Expected 432, got 49
FAIL: Hand count after playing council_room was not correct. Expected 432, got 4
FAIL: Hand count after playing council_room was not correct. Expected 477, got 479
FAIL: Hand count after playing council_room was not correct. Expected 479, got 465
FAIL: Hand count after playing council_room was not correct. Expected 479, got 254
FAIL: Hand count after playing council_room was not correct. Expected 479, got 458
FAIL: Hand count after playing council_room was not correct. Expected 486, got 488
FAIL: Hand count after playing council_room was not correct. Expected 488, got 498
FAIL: Hand count after playing council_room was not correct. Expected 488, got 408
FAIL: Hand count after playing council_room was not correct. Expected 488, got 66
FAIL: Hand count after playing council_room was not correct. Expected 288, got 290
FAIL: Hand count after playing council_room was not correct. Expected 290, got 270
FAIL: Hand count after playing council_room was not correct. Expected 290, got 142
FAIL: Hand count after playing council_room was not correct. Expected 290, got 98
FAIL: Hand count after playing council_room was not correct. Expected 287, got 289
FAIL: Hand count after playing council_room was not correct. Expected 289, got 26
FAIL: Hand count after playing council_room was not correct. Expected 289, got 467
FAIL: Hand count after playing council_room was not correct. Expected 289, got 82
FAIL: Hand count after playing council_room was not correct. Expected 459, got 461
FAIL: Hand count after playing council_room was not correct. Expected 461, got 172
FAIL: Hand count after playing council_room was not correct. Expected 461, got 439
FAIL: Hand count after playing council_room was not correct. Expected 461, got 375
FAIL: Hand count after playing council_room was not correct. Expected 4, got 6
FAIL: Hand count after playing council_room was not correct. Expected 6, got 401
FAIL: Hand count after playing council_room was not correct. Expected 6, got 465
FAIL: Hand count after playing council_room was not correct. Expected 6, got 110
FAIL: Hand count after playing council_room was not correct. Expected 369, got 371
FAIL: Hand count after playing council_room was not correct. Expected 371, got 431
FAIL: Hand count after playing council_room was not correct. Expected 371, got 6
FAIL: Hand count after playing council_room was not correct. Expected 371, got 141
FAIL: Hand count after playing council_room was not correct. Expected 427, got 429
FAIL: Hand count after playing council_room was not correct. Expected 429, got 370
FAIL: Hand count after playing council_room was not correct. Expected 429, got 173
FAIL: Hand count after playing council_room was not correct. Expected 429, got 153
FAIL: Hand count after playing council_room was not correct. Expected 181, got 183
FAIL: Hand count after playing council_room was not correct. Expected 183, got 43
FAIL: Hand count after playing council_room was not correct. Expected 183, got 435
FAIL: Hand count after playing council_room was not correct. Expected 183, got 122
FAIL: Hand count after playing council_room was not correct. Expected 413, got 415
FAIL: Hand count after playing council_room was not correct. Expected 415, got 280
FAIL: Hand count after playing council_room was not correct. Expected 415, got 74
FAIL: Hand count after playing council_room was not correct. Expected 415, got 175
FAIL: Hand count after playing council_room was not correct. Expected 282, got 284
FAIL: Hand count after playing council_room was not correct. Expected 284, got 87
FAIL: Hand count after playing council_room was not correct. Expected 284, got 18
FAIL: Hand count after playing council_room was not correct. Expected 284, got 445
FAIL: Hand count after playing council_room was not correct. Expected 460, got 462
FAIL: Hand count after playing council_room was not correct. Expected 462, got 159
FAIL: Hand count after playing council_room was not correct. Expected 462, got 291
FAIL: Hand count after playing council_room was not correct. Expected 462, got 42
FAIL: Hand count after playing council_room was not correct. Expected 147, got 149
FAIL: Hand count after playing council_room was not correct. Expected 149, got 93
FAIL: Hand count after playing council_room was not correct. Expected 149, got 171
FAIL: Hand count after playing council_room was not correct. Expected 149, got 323
FAIL: Hand count after playing council_room was not correct. Expected 352, got 354
FAIL: Hand count after playing council_room was not correct. Expected 354, got 193
FAIL: Hand count after playing council_room was not correct. Expected 354, got 475
FAIL: Hand count after playing council_room was not correct. Expected 354, got 397
FAIL: Hand count after playing council_room was not correct. Expected 429, got 431
FAIL: Hand count after playing council_room was not correct. Expected 431, got 256
FAIL: Hand count after playing council_room was not correct. Expected 431, got 463
FAIL: Hand count after playing council_room was not correct. Expected 431, got 328
FAIL: Hand count after playing council_room was not correct. Expected 412, got 414
FAIL: Hand count after playing council_room was not correct. Expected 414, got 51
FAIL: Hand count after playing council_room was not correct. Expected 414, got 269
FAIL: Hand count after playing council_room was not correct. Expected 414, got 335
FAIL: Hand count after playing council_room was not correct. Expected 433, got 435
FAIL: Hand count after playing council_room was not correct. Expected 435, got 172
FAIL: Hand count after playing council_room was not correct. Expected 435, got 427
FAIL: Hand count after playing council_room was not correct. Expected 435, got 301
FAIL: Hand count after playing council_room was not correct. Expected 33, got 35
FAIL: Hand count after playing council_room was not correct. Expected 35, got 247
FAIL: Hand count after playing council_room was not correct. Expected 35, got 193
FAIL: Hand count after playing council_room was not correct. Expected 35, got 168
FAIL: Hand count after playing council_room was not correct. Expected 190, got 192
FAIL: Hand count after playing council_room was not correct. Expected 192, got 277
FAIL: Hand count after playing council_room was not correct. Expected 192, got 321
FAIL: Hand count after playing council_room was not correct. Expected 192, got 450
FAIL: Hand count after playing council_room was not correct. Expected 451, got 453
FAIL: Hand count after playing council_room was not correct. Expected 453, got 374
FAIL: Hand count after playing council_room was not correct. Expected 453, got 109
FAIL: Hand count after playing council_room was not correct. Expected 453, got 271
FAIL: Hand count after playing council_room was not correct. Expected 313, got 315
FAIL: Hand count after playing council_room was not correct. Expected 315, got 179
FAIL: Hand count after playing council_room was not correct. Expected 315, got 184
FAIL: Hand count after playing council_room was not correct. Expected 315, got 326
FAIL: Hand count after playing council_room was not correct. Expected 150, got 152
FAIL: Hand count after playing council_room was not correct. Expected 152, got 125
FAIL: Hand count after playing council_room was not correct. Expected 152, got 145
FAIL: Hand count after playing council_room was not correct. Expected 152, got 251
FAIL: Hand count after playing council_room was not correct. Expected 309, got 311
FAIL: Hand count after playing council_room was not correct. Expected 311, got 76
FAIL: Hand count after playing council_room was not correct. Expected 311, got 129
FAIL: Hand count after playing council_room was not correct. Expected 311, got 462
FAIL: Hand count after playing council_room was not correct. Expected 395, got 397
FAIL: Hand count after playing council_room was not correct. Expected 397, got 211
FAIL: Hand count after playing council_room was not correct. Expected 397, got 151
FAIL: Hand count after playing council_room was not correct. Expected 397, got 499
FAIL: Hand count after playing council_room was not correct. Expected 119, got 121
FAIL: Hand count after playing council_room was not correct. Expected 121, got 262
FAIL: Hand count after playing council_room was not correct. Expected 121, got 278
FAIL: Hand count after playing council_room was not correct. Expected 121, got 251
FAIL: Hand count after playing council_room was not correct. Expected 47, got 49
FAIL: Hand count after playing council_room was not correct. Expected 49, got 457
FAIL: Hand count after playing council_room was not correct. Expected 49, got 229
FAIL: Hand count after playing council_room was not correct. Expected 49, got 211
FAIL: Hand count after playing council_room was not correct. Expected 363, got 365
FAIL: Hand count after playing council_room was not correct. Expected 365, got 374
FAIL: Hand count after playing council_room was not correct. Expected 365, got 349
FAIL: Hand count after playing council_room was not correct. Expected 365, got 433
FAIL: Hand count after playing council_room was not correct. Expected 457, got 459
FAIL: Hand count after playing council_room was not correct. Expected 459, got 428
FAIL: Hand count after playing council_room was not correct. Expected 459, got 13
FAIL: Hand count after playing council_room was not correct. Expected 459, got 379
FAIL: Hand count after playing council_room was not correct. Expected 437, got 439
FAIL: Hand count after playing council_room was not correct. Expected 439, got 153
FAIL: Hand count after playing council_room was not correct. Expected 439, got 458
FAIL: Hand count after playing council_room was not correct. Expected 439, got 35
FAIL: Hand count after playing council_room was not correct. Expected 332, got 334
FAIL: Hand count after playing council_room was not correct. Expected 334, got 287
FAIL: Hand count after playing council_room was not correct. Expected 334, got 120
FAIL: Hand count after playing council_room was not correct. Expected 334, got 356
FAIL: Hand count after playing council_room was not correct. Expected 308, got 310
FAIL: Hand count after playing council_room was not correct. Expected 310, got 167
FAIL: Hand count after playing council_room was not correct. Expected 310, got 78
FAIL: Hand count after playing council_room was not correct. Expected 310, got 100
FAIL: Hand count after playing council_room was not correct. Expected 329, got 331
FAIL: Hand count after playing council_room was not correct. Expected 331, got 79
FAIL: Hand count after playing council_room was not correct. Expected 331, got 488
FAIL: Hand count after playing council_room was not correct. Expected 331, got 46
FAIL: Hand count after playing council_room was not correct. Expected 370, got 372
FAIL: Hand count after playing council_room was not correct. Expected 372, got 312
FAIL: Hand count after playing council_room was not correct. Expected 372, got 350
FAIL: Hand count after playing council_room was not correct. Expected 372, got 201
FAIL: Hand count after playing council_room was not correct. Expected 452, got 454
FAIL: Hand count after playing council_room was not correct. Expected 454, got 344
FAIL: Hand count after playing council_room was not correct. Expected 454, got 498
FAIL: Hand count after playing council_room was not correct. Expected 454, got 226
FAIL: Hand count after playing council_room was not correct. Expected 436, got 438
FAIL: Hand count after playing council_room was not correct. Expected 438, got 404
FAIL: Hand count after playing council_room was not correct. Expected 438, got 326
FAIL: Hand count after playing council_room was not correct. Expected 438, got 406
FAIL: Hand count after playing council_room was not correct. Expected 124, got 126
FAIL: Hand count after playing council_room was not correct. Expected 126, got 466
FAIL: Hand count after playing council_room was not correct. Expected 126, got 72
FAIL: Hand count after playing council_room was not correct. Expected 126, got 350
FAIL: Hand count after playing council_room was not correct. Expected 292, got 294
FAIL: Hand count after playing council_room was not correct. Expected 294, got 109
FAIL: Hand count after playing council_room was not correct. Expected 294, got 275
FAIL: Hand count after playing council_room was not correct. Expected 294, got 284
FAIL: Hand count after playing council_room was not correct. Expected 370, got 372
FAIL: Hand count after playing council_room was not correct. Expected 372, got 120
FAIL: Hand count after playing council_room was not correct. Expected 372, got 229
FAIL: Hand count after playing council_room was not correct. Expected 372, got 209
FAIL: Hand count after playing council_room was not correct. Expected 316, got 318
FAIL: Hand count after playing council_room was not correct. Expected 318, got 211
FAIL: Hand count after playing council_room was not correct. Expected 318, got 451
FAIL: Hand count after playing council_room was not correct. Expected 318, got 298
FAIL: Hand count after playing council_room was not correct. Expected 315, got 317
FAIL: Hand count after playing council_room was not correct. Expected 317, got 428
FAIL: Hand count after playing council_room was not correct. Expected 317, got 466
FAIL: Hand count after playing council_room was not correct. Expected 317, got 495
FAIL: Hand count after playing council_room was not correct. Expected 491, got 493
FAIL: Hand count after playing council_room was not correct. Expected 493, got 258
FAIL: Hand count after playing council_room was not correct. Expected 493, got 397
FAIL: Hand count after playing council_room was not correct. Expected 493, got 188
FAIL: Hand count after playing council_room was not correct. Expected 97, got 99
FAIL: Hand count after playing council_room was not correct. Expected 99, got 482
FAIL: Hand count after playing council_room was not correct. Expected 99, got 143
FAIL: Hand count after playing council_room was not correct. Expected 99, got 315
FAIL: Hand count after playing council_room was not correct. Expected 202, got 204
FAIL: Hand count after playing council_room was not correct. Expected 204, got 156
FAIL: Hand count after playing council_room was not correct. Expected 204, got 337
FAIL: Hand count after playing council_room was not correct. Expected 204, got 337
FAIL: Hand count after playing council_room was not correct. Expected 164, got 166
FAIL: Hand count after playing council_room was not correct. Expected 166, got 445
FAIL: Hand count after playing council_room was not correct. Expected 166, got 427
FAIL: Hand count after playing council_room was not correct. Expected 166, got 353
FAIL: Hand count after playing council_room was not correct. Expected 113, got 115
FAIL: Hand count after playing council_room was not correct. Expected 115, got 105
FAIL: Hand count after playing council_room was not correct. Expected 115, got 85
FAIL: Hand count after playing council_room was not correct. Expected 115, got 21
FAIL: Hand count after playing council_room was not correct. Expected 409, got 411
FAIL: Hand count after playing council_room was not correct. Expected 411, got 420
FAIL: Hand count after playing council_room was not correct. Expected 411, got 360
FAIL: Hand count after playing council_room was not correct. Expected 411, got 115
FAIL: Hand count after playing council_room was not correct. Expected 342, got 344
FAIL: Hand count after playing council_room was not correct. Expected 344, got 193
FAIL: Hand count after playing council_room was not correct. Expected 344, got 217
FAIL: Hand count after playing council_room was not correct. Expected 344, got 62
FAIL: Hand count after playing council_room was not correct. Expected 356, got 358
FAIL: Hand count after playing council_room was not correct. Expected 358, got 269
FAIL: Hand count after playing council_room was not correct. Expected 358, got 341
FAIL: Hand count after playing council_room was not correct. Expected 358, got 99
FAIL: Hand count after playing council_room was not correct. Expected 228, got 230
FAIL: Hand count after playing council_room was not correct. Expected 230, got 155
FAIL: Hand count after playing council_room was not correct. Expected 230, got 266
FAIL: Hand count after playing council_room was not correct. Expected 230, got 135
FAIL: Hand count after playing council_room was not correct. Expected 268, got 270
FAIL: Hand count after playing council_room was not correct. Expected 270, got 358
FAIL: Hand count after playing council_room was not correct. Expected 270, got 84
FAIL: Hand count after playing council_room was not correct. Expected 270, got 53
FAIL: Hand count after playing council_room was not correct. Expected 156, got 158
FAIL: Hand count after playing council_room was not correct. Expected 158, got 79
FAIL: Hand count after playing council_room was not correct. Expected 158, got 244
FAIL: Hand count after playing council_room was not correct. Expected 158, got 426
FAIL: Hand count after playing council_room was not correct. Expected 178, got 180
FAIL: Hand count after playing council_room was not correct. Expected 180, got 481
FAIL: Hand count after playing council_room was not correct. Expected 180, got 179
FAIL: Hand count after playing council_room was not correct. Expected 180, got 125
FAIL: Hand count after playing council_room was not correct. Expected 230, got 232
FAIL: Hand count after playing council_room was not correct. Expected 232, got 336
FAIL: Hand count after playing council_room was not correct. Expected 232, got 279
FAIL: Hand count after playing council_room was not correct. Expected 232, got 94
FAIL: Hand count after playing council_room was not correct. Expected 197, got 199
FAIL: Hand count after playing council_room was not correct. Expected 199, got 219
FAIL: Hand count after playing council_room was not correct. Expected 199, got 492
FAIL: Hand count after playing council_room was not correct. Expected 199, got 243
FAIL: Hand count after playing council_room was not correct. Expected 218, got 220
FAIL: Hand count after playing council_room was not correct. Expected 220, got 196
FAIL: Hand count after playing council_room was not correct. Expected 220, got 270
FAIL: Hand count after playing council_room was not correct. Expected 220, got 322
FAIL: Hand count after playing council_room was not correct. Expected 367, got 369
FAIL: Hand count after playing council_room was not correct. Expected 369, got 321
FAIL: Hand count after playing council_room was not correct. Expected 369, got 335
FAIL: Hand count after playing council_room was not correct. Expected 369, got 370
FAIL: Hand count after playing council_room was not correct. Expected 217, got 219
FAIL: Hand count after playing council_room was not correct. Expected 219, got 52
FAIL: Hand count after playing council_room was not correct. Expected 219, got 233
FAIL: Hand count after playing council_room was not correct. Expected 219, got 44
FAIL: Hand count after playing council_room was not correct. Expected 176, got 178
FAIL: Hand count after playing council_room was not correct. Expected 178, got 132
FAIL: Hand count after playing council_room was not correct. Expected 178, got 139
FAIL: Hand count after playing council_room was not correct. Expected 178, got 399
FAIL: Hand count after playing council_room was not correct. Expected 356, got 358
FAIL: Hand count after playing council_room was not correct. Expected 358, got 209
FAIL: Hand count after playing council_room was not correct. Expected 358, got 140
FAIL: Hand count after playing council_room was not correct. Expected 358, got 187
FAIL: Hand count after playing council_room was not correct. Expected 82, got 84
FAIL: Hand count after playing council_room was not correct. Expected 84, got 410
FAIL: Hand count after playing council_room was not correct. Expected 84, got 63
FAIL: Hand count after playing council_room was not correct. Expected 84, got 402
FAIL: Hand count after playing council_room was not correct. Expected 343, got 345
FAIL: Hand count after playing council_room was not correct. Expected 345, got 223
FAIL: Hand count after playing council_room was not correct. Expected 345, got 459
FAIL: Hand count after playing council_room was not correct. Expected 345, got 499
FAIL: Hand count after playing council_room was not correct. Expected 355, got 357
FAIL: Hand count after playing council_room was not correct. Expected 357, got 300
FAIL: Hand count after playing council_room was not correct. Expected 357, got 35
FAIL: Hand count after playing council_room was not correct. Expected 357, got 103
FAIL: Hand count after playing council_room was not correct. Expected 325, got 327
FAIL: Hand count after playing council_room was not correct. Expected 327, got 239
FAIL: Hand count after playing council_room was not correct. Expected 327, got 65
FAIL: Hand count after playing council_room was not correct. Expected 327, got 367
FAIL: Hand count after playing council_room was not correct. Expected 463, got 465
FAIL: Hand count after playing council_room was not correct. Expected 465, got 444
FAIL: Hand count after playing council_room was not correct. Expected 465, got 486
FAIL: Hand count after playing council_room was not correct. Expected 465, got 119
FAIL: Hand count after playing council_room was not correct. Expected 95, got 97
FAIL: Hand count after playing council_room was not correct. Expected 97, got 182
FAIL: Hand count after playing council_room was not correct. Expected 97, got 424
FAIL: Hand count after playing council_room was not correct. Expected 97, got 303
FAIL: Hand count after playing council_room was not correct. Expected 30, got 32
FAIL: Hand count after playing council_room was not correct. Expected 32, got 355
FAIL: Hand count after playing council_room was not correct. Expected 32, got 261
FAIL: Hand count after playing council_room was not correct. Expected 32, got 81
FAIL: Hand count after playing council_room was not correct. Expected 155, got 157
FAIL: Hand count after playing council_room was not correct. Expected 157, got 438
FAIL: Hand count after playing council_room was not correct. Expected 157, got 15
FAIL: Hand count after playing council_room was not correct. Expected 157, got 83
FAIL: Hand count after playing council_room was not correct. Expected 350, got 352
FAIL: Hand count after playing council_room was not correct. Expected 352, got 273
FAIL: Hand count after playing council_room was not correct. Expected 352, got 461
FAIL: Hand count after playing council_room was not correct. Expected 352, got 124
FAIL: Hand count after playing council_room was not correct. Expected 372, got 374
FAIL: Hand count after playing council_room was not correct. Expected 374, got 78
FAIL: Hand count after playing council_room was not correct. Expected 374, got 338
FAIL: Hand count after playing council_room was not correct. Expected 374, got 58
FAIL: Hand count after playing council_room was not correct. Expected 124, got 126
FAIL: Hand count after playing council_room was not correct. Expected 126, got 389
FAIL: Hand count after playing council_room was not correct. Expected 126, got 470
FAIL: Hand count after playing council_room was not correct. Expected 126, got 472
FAIL: Hand count after playing council_room was not correct. Expected 182, got 184
FAIL: Hand count after playing council_room was not correct. Expected 184, got 224
FAIL: Hand count after playing council_room was not correct. Expected 184, got 357
FAIL: Hand count after playing council_room was not correct. Expected 184, got 451
FAIL: Hand count after playing council_room was not correct. Expected 440, got 442
FAIL: Hand count after playing council_room was not correct. Expected 442, got 197
FAIL: Hand count after playing council_room was not correct. Expected 442, got 142
FAIL: Hand count after playing council_room was not correct. Expected 442, got 418
FAIL: Hand count after playing council_room was not correct. Expected 103, got 105
FAIL: Hand count after playing council_room was not correct. Expected 105, got 138
FAIL: Hand count after playing council_room was not correct. Expected 105, got 404
FAIL: Hand count after playing council_room was not correct. Expected 105, got 304
FAIL: Hand count after playing council_room was not correct. Expected 90, got 92
FAIL: Hand count after playing council_room was not correct. Expected 92, got 457
FAIL: Hand count after playing council_room was not correct. Expected 92, got 43
FAIL: Hand count after playing council_room was not correct. Expected 92, got 26
FAIL: Hand count after playing council_room was not correct. Expected 32, got 34
FAIL: Hand count after playing council_room was not correct. Expected 34, got 13
FAIL: Hand count after playing council_room was not correct. Expected 34, got 316
FAIL: Hand count after playing council_room was not correct. Expected 34, got 36
FAIL: Hand count after playing council_room was not correct. Expected 322, got 324
FAIL: Hand count after playing council_room was not correct. Expected 324, got 334
FAIL: Hand count after playing council_room was not correct. Expected 324, got 134
FAIL: Hand count after playing council_room was not correct. Expected 324, got 349
FAIL: Hand count after playing council_room was not correct. Expected 405, got 407
FAIL: Hand count after playing council_room was not correct. Expected 407, got 258
FAIL: Hand count after playing council_room was not correct. Expected 407, got 352
FAIL: Hand count after playing council_room was not correct. Expected 407, got 403
FAIL: Hand count after playing council_room was not correct. Expected 119, got 121
FAIL: Hand count after playing council_room was not correct. Expected 121, got 246
FAIL: Hand count after playing council_room was not correct. Expected 121, got 53
FAIL: Hand count after playing council_room was not correct. Expected 121, got 309
FAIL: Hand count after playing council_room was not correct. Expected 193, got 195
FAIL: Hand count after playing council_room was not correct. Expected 195, got 195
FAIL: Hand count after playing council_room was not correct. Expected 195, got 192
FAIL: Hand count after playing council_room was not correct. Expected 195, got 470
FAIL: Hand count after playing council_room was not correct. Expected 294, got 296
FAIL: Hand count after playing council_room was not correct. Expected 296, got 324
FAIL: Hand count after playing council_room was not correct. Expected 296, got 30
FAIL: Hand count after playing council_room was not correct. Expected 296, got 193
FAIL: Hand count after playing council_room was not correct. Expected 400, got 402
FAIL: Hand count after playing council_room was not correct. Expected 402, got 78
FAIL: Hand count after playing council_room was not correct. Expected 402, got 240
FAIL: Hand count after playing council_room was not correct. Expected 402, got 117
FAIL: Hand count after playing council_room was not correct. Expected 29, got 31
FAIL: Hand count after playing council_room was not correct. Expected 31, got 426
FAIL: Hand count after playing council_room was not correct. Expected 31, got 32
FAIL: Hand count after playing council_room was not correct. Expected 31, got 401
FAIL: Hand count after playing council_room was not correct. Expected 487, got 489
FAIL: Hand count after playing council_room was not correct. Expected 489, got 24
FAIL: Hand count after playing council_room was not correct. Expected 489, got 471
FAIL: Hand count after playing council_room was not correct. Expected 489, got 222
FAIL: Hand count after playing council_room was not correct. Expected 95, got 97
FAIL: Hand count after playing council_room was not correct. Expected 97, got 140
FAIL: Hand count after playing council_room was not correct. Expected 97, got 488
FAIL: Hand count after playing council_room was not correct. Expected 97, got 401
FAIL: Hand count after playing council_room was not correct. Expected 412, got 414
FAIL: Hand count after playing council_room was not correct. Expected 414, got 481
FAIL: Hand count after playing council_room was not correct. Expected 414, got 125
FAIL: Hand count after playing council_room was not correct. Expected 414, got 245
FAIL: Hand count after playing council_room was not correct. Expected 81, got 83
FAIL: Hand count after playing council_room was not correct. Expected 83, got 5
FAIL: Hand count after playing council_room was not correct. Expected 83, got 197
FAIL: Hand count after playing council_room was not correct. Expected 83, got 15
FAIL: Hand count after playing council_room was not correct. Expected 41, got 43
FAIL: Hand count after playing council_room was not correct. Expected 43, got 165
FAIL: Hand count after playing council_room was not correct. Expected 43, got 342
FAIL: Hand count after playing council_room was not correct. Expected 43, got 91
FAIL: Hand count after playing council_room was not correct. Expected 341, got 343
FAIL: Hand count after playing council_room was not correct. Expected 343, got 6
FAIL: Hand count after playing council_room was not correct. Expected 343, got 319
FAIL: Hand count after playing council_room was not correct. Expected 343, got 115
FAIL: Hand count after playing council_room was not correct. Expected 180, got 182
FAIL: Hand count after playing council_room was not correct. Expected 182, got 84
FAIL: Hand count after playing council_room was not correct. Expected 182, got 498
FAIL: Hand count after playing council_room was not correct. Expected 182, got 458
FAIL: Hand count after playing council_room was not correct. Expected 172, got 174
FAIL: Hand count after playing council_room was not correct. Expected 174, got 112
FAIL: Hand count after playing council_room was not correct. Expected 174, got 273
FAIL: Hand count after playing council_room was not correct. Expected 174, got 485
FAIL: Hand count after playing council_room was not correct. Expected 357, got 359
FAIL: Hand count after playing council_room was not correct. Expected 359, got 407
FAIL: Hand count after playing council_room was not correct. Expected 359, got 396
FAIL: Hand count after playing council_room was not correct. Expected 359, got 384
FAIL: Hand count after playing council_room was not correct. Expected 318, got 320
FAIL: Hand count after playing council_room was not correct. Expected 320, got 433
FAIL: Hand count after playing council_room was not correct. Expected 320, got 48
FAIL: Hand count after playing council_room was not correct. Expected 320, got 397
FAIL: Hand count after playing council_room was not correct. Expected 103, got 105
FAIL: Hand count after playing council_room was not correct. Expected 105, got 304
FAIL: Hand count after playing council_room was not correct. Expected 105, got 411
FAIL: Hand count after playing council_room was not correct. Expected 105, got 398
FAIL: Hand count after playing council_room was not correct. Expected 430, got 432
FAIL: Hand count after playing council_room was not correct. Expected 432, got 38
FAIL: Hand count after playing council_room was not correct. Expected 432, got 68
FAIL: Hand count after playing council_room was not correct. Expected 432, got 310
FAIL: Hand count after playing council_room was not correct. Expected 257, got 259
FAIL: Hand count after playing council_room was not correct. Expected 259, got 14
FAIL: Hand count after playing council_room was not correct. Expected 259, got 48
FAIL: Hand count after playing council_room was not correct. Expected 259, got 146
FAIL: Hand count after playing council_room was not correct. Expected 322, got 324
FAIL: Hand count after playing council_room was not correct. Expected 324, got 213
FAIL: Hand count after playing council_room was not correct. Expected 324, got 190
FAIL: Hand count after playing council_room was not correct. Expected 324, got 11
FAIL: Hand count after playing council_room was not correct. Expected 133, got 135
FAIL: Hand count after playing council_room was not correct. Expected 135, got 457
FAIL: Hand count after playing council_room was not correct. Expected 135, got 346
FAIL: Hand count after playing council_room was not correct. Expected 135, got 196
FAIL: Hand count after playing council_room was not correct. Expected 18, got 20
FAIL: Hand count after playing council_room was not correct. Expected 20, got 143
FAIL: Hand count after playing council_room was not correct. Expected 20, got 154
FAIL: Hand count after playing council_room was not correct. Expected 20, got 442
FAIL: Hand count after playing council_room was not correct. Expected 269, got 271
FAIL: Hand count after playing council_room was not correct. Expected 271, got 255
FAIL: Hand count after playing council_room was not correct. Expected 271, got 354
FAIL: Hand count after playing council_room was not correct. Expected 271, got 296
FAIL: Hand count after playing council_room was not correct. Expected 215, got 217
FAIL: Hand count after playing council_room was not correct. Expected 217, got 32
FAIL: Hand count after playing council_room was not correct. Expected 217, got 82
FAIL: Hand count after playing council_room was not correct. Expected 217, got 56
FAIL: Hand count after playing council_room was not correct. Expected 42, got 44
FAIL: Hand count after playing council_room was not correct. Expected 44, got 243
FAIL: Hand count after playing council_room was not correct. Expected 44, got 314
FAIL: Hand count after playing council_room was not correct. Expected 44, got 120
FAIL: Hand count after playing council_room was not correct. Expected 206, got 208
FAIL: Hand count after playing council_room was not correct. Expected 208, got 288
FAIL: Hand count after playing council_room was not correct. Expected 208, got 198
FAIL: Hand count after playing council_room was not correct. Expected 208, got 262
FAIL: Hand count after playing council_room was not correct. Expected 14, got 16
FAIL: Hand count after playing council_room was not correct. Expected 16, got 7
FAIL: Hand count after playing council_room was not correct. Expected 16, got 147
FAIL: Hand count after playing council_room was not correct. Expected 16, got 352
FAIL: Hand count after playing council_room was not correct. Expected 37, got 39
FAIL: Hand count after playing council_room was not correct. Expected 39, got 443
FAIL: Hand count after playing council_room was not correct. Expected 39, got 313
FAIL: Hand count after playing council_room was not correct. Expected 39, got 466
FAIL: Hand count after playing council_room was not correct. Expected 12, got 14
FAIL: Hand count after playing council_room was not correct. Expected 14, got 179
FAIL: Hand count after playing council_room was not correct. Expected 14, got 133
FAIL: Hand count after playing council_room was not correct. Expected 14, got 183
FAIL: Hand count after playing council_room was not correct. Expected 282, got 284
FAIL: Hand count after playing council_room was not correct. Expected 284, got 198
FAIL: Hand count after playing council_room was not correct. Expected 284, got 315
FAIL: Hand count after playing council_room was not correct. Expected 284, got 204
FAIL: Hand count after playing council_room was not correct. Expected 454, got 456
FAIL: Hand count after playing council_room was not correct. Expected 456, got 398
FAIL: Hand count after playing council_room was not correct. Expected 456, got 492
FAIL: Hand count after playing council_room was not correct. Expected 456, got 138
FAIL: Hand count after playing council_room was not correct. Expected 123, got 125
FAIL: Hand count after playing council_room was not correct. Expected 125, got 286
FAIL: Hand count after playing council_room was not correct. Expected 125, got 221
FAIL: Hand count after playing council_room was not correct. Expected 125, got 70
FAIL: Hand count after playing council_room was not correct. Expected 330, got 332
FAIL: Hand count after playing council_room was not correct. Expected 332, got 103
FAIL: Hand count after playing council_room was not correct. Expected 332, got 116
FAIL: Hand count after playing council_room was not correct. Expected 332, got 210
FAIL: Hand count after playing council_room was not correct. Expected 273, got 275
FAIL: Hand count after playing council_room was not correct. Expected 275, got 128
FAIL: Hand count after playing council_room was not correct. Expected 275, got 109
FAIL: Hand count after playing council_room was not correct. Expected 275, got 196
FAIL: Hand count after playing council_room was not correct. Expected 193, got 195
FAIL: Hand count after playing council_room was not correct. Expected 195, got 214
FAIL: Hand count after playing council_room was not correct. Expected 195, got 419
FAIL: Hand count after playing council_room was not correct. Expected 195, got 190
FAIL: Hand count after playing council_room was not correct. Expected 182, got 184
FAIL: Hand count after playing council_room was not correct. Expected 184, got 438
FAIL: Hand count after playing council_room was not correct. Expected 184, got 346
FAIL: Hand count after playing council_room was not correct. Expected 184, got 488
FAIL: Hand count after playing council_room was not correct. Expected 407, got 409
FAIL: Hand count after playing council_room was not correct. Expected 409, got 138
FAIL: Hand count after playing council_room was not correct. Expected 409, got 305
FAIL: Hand count after playing council_room was not correct. Expected 409, got 420
FAIL: Hand count after playing council_room was not correct. Expected 328, got 330
FAIL: Hand count after playing council_room was not correct. Expected 330, got 5
FAIL: Hand count after playing council_room was not correct. Expected 330, got 471
FAIL: Hand count after playing council_room was not correct. Expected 330, got 449
FAIL: Hand count after playing council_room was not correct. Expected 196, got 198
FAIL: Hand count after playing council_room was not correct. Expected 198, got 104
FAIL: Hand count after playing council_room was not correct. Expected 198, got 274
FAIL: Hand count after playing council_room was not correct. Expected 198, got 376
FAIL: Hand count after playing council_room was not correct. Expected 63, got 65
FAIL: Hand count after playing council_room was not correct. Expected 65, got 307
FAIL: Hand count after playing council_room was not correct. Expected 65, got 272
FAIL: Hand count after playing council_room was not correct. Expected 65, got 335
FAIL: Hand count after playing council_room was not correct. Expected 382, got 384
FAIL: Hand count after playing council_room was not correct. Expected 384, got 471
FAIL: Hand count after playing council_room was not correct. Expected 384, got 227
FAIL: Hand count after playing council_room was not correct. Expected 384, got 288
FAIL: Hand count after playing council_room was not correct. Expected 243, got 245
FAIL: Hand count after playing council_room was not correct. Expected 245, got 467
FAIL: Hand count after playing council_room was not correct. Expected 245, got 474
FAIL: Hand count after playing council_room was not correct. Expected 245, got 436
FAIL: Hand count after playing council_room was not correct. Expected 309, got 311
FAIL: Hand count after playing council_room was not correct. Expected 311, got 270
FAIL: Hand count after playing council_room was not correct. Expected 311, got 431
FAIL: Hand count after playing council_room was not correct. Expected 311, got 21
FAIL: Hand count after playing council_room was not correct. Expected 7, got 9
FAIL: Hand count after playing council_room was not correct. Expected 9, got 51
FAIL: Hand count after playing council_room was not correct. Expected 9, got 405
FAIL: Hand count after playing council_room was not correct. Expected 9, got 443
FAIL: Hand count after playing council_room was not correct. Expected 457, got 459
FAIL: Hand count after playing council_room was not correct. Expected 459, got 116
FAIL: Hand count after playing council_room was not correct. Expected 459, got 383
FAIL: Hand count after playing council_room was not correct. Expected 459, got 122
FAIL: Hand count after playing council_room was not correct. Expected 330, got 332
FAIL: Hand count after playing council_room was not correct. Expected 332, got 357
FAIL: Hand count after playing council_room was not correct. Expected 332, got 373
FAIL: Hand count after playing council_room was not correct. Expected 332, got 126
FAIL: Hand count after playing council_room was not correct. Expected 411, got 413
FAIL: Hand count after playing council_room was not correct. Expected 413, got 265
FAIL: Hand count after playing council_room was not correct. Expected 413, got 354
FAIL: Hand count after playing council_room was not correct. Expected 413, got 164
FAIL: Hand count after playing council_room was not correct. Expected 231, got 233
FAIL: Hand count after playing council_room was not correct. Expected 233, got 396
FAIL: Hand count after playing council_room was not correct. Expected 233, got 473
FAIL: Hand count after playing council_room was not correct. Expected 233, got 294
FAIL: Hand count after playing council_room was not correct. Expected 409, got 411
FAIL: Hand count after playing council_room was not correct. Expected 411, got 497
FAIL: Hand count after playing council_room was not correct. Expected 411, got 33
FAIL: Hand count after playing council_room was not correct. Expected 411, got 53
FAIL: Hand count after playing council_room was not correct. Expected 143, got 145
FAIL: Hand count after playing council_room was not correct. Expected 145, got 426
FAIL: Hand count after playing council_room was not correct. Expected 145, got 11
FAIL: Hand count after playing council_room was not correct. Expected 145, got 338
FAIL: Hand count after playing council_room was not correct. Expected 406, got 408
FAIL: Hand count after playing council_room was not correct. Expected 408, got 228
FAIL: Hand count after playing council_room was not correct. Expected 408, got 301
FAIL: Hand count after playing council_room was not correct. Expected 408, got 353
FAIL: Hand count after playing council_room was not correct. Expected 47, got 49
FAIL: Hand count after playing council_room was not correct. Expected 49, got 439
FAIL: Hand count after playing council_room was not correct. Expected 49, got 493
FAIL: Hand count after playing council_room was not correct. Expected 49, got 381
FAIL: Hand count after playing council_room was not correct. Expected 7, got 9
FAIL: Hand count after playing council_room was not correct. Expected 9, got 195
FAIL: Hand count after playing council_room was not correct. Expected 9, got 113
FAIL: Hand count after playing council_room was not correct. Expected 9, got 56
FAIL: Hand count after playing council_room was not correct. Expected 315, got 317
FAIL: Hand count after playing council_room was not correct. Expected 317, got 383
FAIL: Hand count after playing council_room was not correct. Expected 317, got 180
FAIL: Hand count after playing council_room was not correct. Expected 317, got 270
FAIL: Hand count after playing council_room was not correct. Expected 213, got 215
FAIL: Hand count after playing council_room was not correct. Expected 215, got 42
FAIL: Hand count after playing council_room was not correct. Expected 215, got 125
FAIL: Hand count after playing council_room was not correct. Expected 215, got 34
FAIL: Hand count after playing council_room was not correct. Expected 401, got 403
FAIL: Hand count after playing council_room was not correct. Expected 403, got 153
FAIL: Hand count after playing council_room was not correct. Expected 403, got 254
FAIL: Hand count after playing council_room was not correct. Expected 403, got 179
FAIL: Hand count after playing council_room was not correct. Expected 29, got 31
FAIL: Hand count after playing council_room was not correct. Expected 31, got 480
FAIL: Hand count after playing council_room was not correct. Expected 31, got 329
FAIL: Hand count after playing council_room was not correct. Expected 31, got 349
FAIL: Hand count after playing council_room was not correct. Expected 124, got 126
FAIL: Hand count after playing council_room was not correct. Expected 126, got 130
FAIL: Hand count after playing council_room was not correct. Expected 126, got 429
FAIL: Hand count after playing council_room was not correct. Expected 126, got 88
FAIL: Hand count after playing council_room was not correct. Expected 290, got 292
FAIL: Hand count after playing council_room was not correct. Expected 292, got 272
FAIL: Hand count after playing council_room was not correct. Expected 292, got 431
FAIL: Hand count after playing council_room was not correct. Expected 292, got 219
FAIL: Hand count after playing council_room was not correct. Expected 67, got 69
FAIL: Hand count after playing council_room was not correct. Expected 69, got 102
FAIL: Hand count after playing council_room was not correct. Expected 69, got 191
FAIL: Hand count after playing council_room was not correct. Expected 69, got 114
FAIL: Hand count after playing council_room was not correct. Expected 192, got 194
FAIL: Hand count after playing council_room was not correct. Expected 194, got 163
FAIL: Hand count after playing council_room was not correct. Expected 194, got 303
FAIL: Hand count after playing council_room was not correct. Expected 194, got 124
FAIL: Hand count after playing council_room was not correct. Expected 160, got 162
FAIL: Hand count after playing council_room was not correct. Expected 162, got 349
FAIL: Hand count after playing council_room was not correct. Expected 162, got 418
FAIL: Hand count after playing council_room was not correct. Expected 162, got 354
FAIL: Hand count after playing council_room was not correct. Expected 66, got 68
FAIL: Hand count after playing council_room was not correct. Expected 68, got 415
FAIL: Hand count after playing council_room was not correct. Expected 68, got 448
FAIL: Hand count after playing council_room was not correct. Expected 68, got 47
FAIL: Hand count after playing council_room was not correct. Expected 361, got 363
FAIL: Hand count after playing council_room was not correct. Expected 363, got 144
FAIL: Hand count after playing council_room was not correct. Expected 363, got 171
FAIL: Hand count after playing council_room was not correct. Expected 363, got 433
FAIL: Hand count after playing council_room was not correct. Expected 181, got 183
FAIL: Hand count after playing council_room was not correct. Expected 183, got 225
FAIL: Hand count after playing council_room was not correct. Expected 183, got 134
FAIL: Hand count after playing council_room was not correct. Expected 183, got 73
FAIL: Hand count after playing council_room was not correct. Expected 308, got 310
FAIL: Hand count after playing council_room was not correct. Expected 310, got 280
FAIL: Hand count after playing council_room was not correct. Expected 310, got 163
FAIL: Hand count after playing council_room was not correct. Expected 310, got 256
FAIL: Hand count after playing council_room was not correct. Expected 300, got 302
FAIL: Hand count after playing council_room was not correct. Expected 302, got 459
FAIL: Hand count after playing council_room was not correct. Expected 302, got 456
FAIL: Hand count after playing council_room was not correct. Expected 302, got 50
FAIL: Hand count after playing council_room was not correct. Expected 188, got 190
FAIL: Hand count after playing council_room was not correct. Expected 190, got 344
FAIL: Hand count after playing council_room was not correct. Expected 190, got 237
FAIL: Hand count after playing council_room was not correct. Expected 190, got 143
FAIL: Hand count after playing council_room was not correct. Expected 130, got 132
FAIL: Hand count after playing council_room was not correct. Expected 132, got 77
FAIL: Hand count after playing council_room was not correct. Expected 132, got 137
FAIL: Hand count after playing council_room was not correct. Expected 132, got 63
FAIL: Hand count after playing council_room was not correct. Expected 325, got 327
FAIL: Hand count after playing council_room was not correct. Expected 327, got 78
FAIL: Hand count after playing council_room was not correct. Expected 327, got 52
FAIL: Hand count after playing council_room was not correct. Expected 327, got 237
FAIL: Hand count after playing council_room was not correct. Expected 176, got 178
FAIL: Hand count after playing council_room was not correct. Expected 178, got 384
FAIL: Hand count after playing council_room was not correct. Expected 178, got 391
FAIL: Hand count after playing council_room was not correct. Expected 178, got 390
FAIL: Hand count after playing council_room was not correct. Expected 267, got 269
FAIL: Hand count after playing council_room was not correct. Expected 269, got 390
FAIL: Hand count after playing council_room was not correct. Expected 269, got 392
FAIL: Hand count after playing council_room was not correct. Expected 269, got 84
FAIL: Hand count after playing council_room was not correct. Expected 20, got 22
FAIL: Hand count after playing council_room was not correct. Expected 22, got 292
FAIL: Hand count after playing council_room was not correct. Expected 22, got 138
FAIL: Hand count after playing council_room was not correct. Expected 22, got 331
FAIL: Hand count after playing council_room was not correct. Expected 24, got 26
FAIL: Hand count after playing council_room was not correct. Expected 26, got 295
FAIL: Hand count after playing council_room was not correct. Expected 26, got 66
FAIL: Hand count after playing council_room was not correct. Expected 26, got 193
FAIL: Hand count after playing council_room was not correct. Expected 167, got 169
FAIL: Hand count after playing council_room was not correct. Expected 169, got 413
FAIL: Hand count after playing council_room was not correct. Expected 169, got 369
FAIL: Hand count after playing council_room was not correct. Expected 169, got 200
FAIL: Hand count after playing council_room was not correct. Expected 271, got 273
FAIL: Hand count after playing council_room was not correct. Expected 273, got 247
FAIL: Hand count after playing council_room was not correct. Expected 273, got 255
FAIL: Hand count after playing council_room was not correct. Expected 273, got 119
FAIL: Hand count after playing council_room was not correct. Expected 331, got 333
FAIL: Hand count after playing council_room was not correct. Expected 333, got 250
FAIL: Hand count after playing council_room was not correct. Expected 333, got 90
FAIL: Hand count after playing council_room was not correct. Expected 333, got 139
FAIL: Hand count after playing council_room was not correct. Expected 250, got 252
FAIL: Hand count after playing council_room was not correct. Expected 252, got 117
FAIL: Hand count after playing council_room was not correct. Expected 252, got 429
FAIL: Hand count after playing council_room was not correct. Expected 252, got 35
FAIL: Hand count after playing council_room was not correct. Expected 271, got 273
FAIL: Hand count after playing council_room was not correct. Expected 273, got 353
FAIL: Hand count after playing council_room was not correct. Expected 273, got 34
FAIL: Hand count after playing council_room was not correct. Expected 273, got 273
FAIL: Hand count after playing council_room was not correct. Expected 16, got 18
FAIL: Hand count after playing council_room was not correct. Expected 18, got 448
FAIL: Hand count after playing council_room was not correct. Expected 18, got 313
FAIL: Hand count after playing council_room was not correct. Expected 18, got 30
FAIL: Hand count after playing council_room was not correct. Expected 328, got 330
FAIL: Hand count after playing council_room was not correct. Expected 330, got 465
FAIL: Hand count after playing council_room was not correct. Expected 330, got 260
FAIL: Hand count after playing council_room was not correct. Expected 330, got 302
FAIL: Hand count after playing council_room was not correct. Expected 361, got 363
FAIL: Hand count after playing council_room was not correct. Expected 363, got 31
FAIL: Hand count after playing council_room was not correct. Expected 363, got 138
FAIL: Hand count after playing council_room was not correct. Expected 363, got 91
FAIL: Hand count after playing council_room was not correct. Expected 480, got 482
FAIL: Hand count after playing council_room was not correct. Expected 482, got 495
FAIL: Hand count after playing council_room was not correct. Expected 482, got 343
FAIL: Hand count after playing council_room was not correct. Expected 482, got 227
FAIL: Hand count after playing council_room was not correct. Expected 436, got 438
FAIL: Hand count after playing council_room was not correct. Expected 438, got 134
FAIL: Hand count after playing council_room was not correct. Expected 438, got 170
FAIL: Hand count after playing council_room was not correct. Expected 438, got 112
FAIL: Hand count after playing council_room was not correct. Expected 72, got 74
FAIL: Hand count after playing council_room was not correct. Expected 74, got 340
FAIL: Hand count after playing council_room was not correct. Expected 74, got 124
FAIL: Hand count after playing council_room was not correct. Expected 74, got 229
FAIL: Hand count after playing council_room was not correct. Expected 271, got 273
FAIL: Hand count after playing council_room was not correct. Expected 273, got 57
FAIL: Hand count after playing council_room was not correct. Expected 273, got 172
FAIL: Hand count after playing council_room was not correct. Expected 273, got 456
FAIL: Hand count after playing council_room was not correct. Expected 418, got 420
FAIL: Hand count after playing council_room was not correct. Expected 420, got 417
FAIL: Hand count after playing council_room was not correct. Expected 420, got 72
FAIL: Hand count after playing council_room was not correct. Expected 420, got 499
FAIL: Hand count after playing council_room was not correct. Expected 492, got 494
FAIL: Hand count after playing council_room was not correct. Expected 494, got 376
FAIL: Hand count after playing council_room was not correct. Expected 494, got 198
FAIL: Hand count after playing council_room was not correct. Expected 494, got 361
FAIL: Hand count after playing council_room was not correct. Expected 122, got 124
FAIL: Hand count after playing council_room was not correct. Expected 124, got 258
FAIL: Hand count after playing council_room was not correct. Expected 124, got 19
FAIL: Hand count after playing council_room was not correct. Expected 124, got 187
FAIL: Hand count after playing council_room was not correct. Expected 22, got 24
FAIL: Hand count after playing council_room was not correct. Expected 24, got 333
FAIL: Hand count after playing council_room was not correct. Expected 24, got 139
FAIL: Hand count after playing council_room was not correct. Expected 24, got 462
FAIL: Hand count after playing council_room was not correct. Expected 237, got 239
FAIL: Hand count after playing council_room was not correct. Expected 239, got 489
FAIL: Hand count after playing council_room was not correct. Expected 239, got 421
FAIL: Hand count after playing council_room was not correct. Expected 239, got 241
FAIL: Hand count after playing council_room was not correct. Expected 198, got 200
FAIL: Hand count after playing council_room was not correct. Expected 200, got 353
FAIL: Hand count after playing council_room was not correct. Expected 200, got 144
FAIL: Hand count after playing council_room was not correct. Expected 200, got 285
FAIL: Hand count after playing council_room was not correct. Expected 35, got 37
FAIL: Hand count after playing council_room was not correct. Expected 37, got 343
FAIL: Hand count after playing council_room was not correct. Expected 37, got 460
FAIL: Hand count after playing council_room was not correct. Expected 37, got 461
FAIL: Hand count after playing council_room was not correct. Expected 157, got 159
FAIL: Hand count after playing council_room was not correct. Expected 159, got 67
FAIL: Hand count after playing council_room was not correct. Expected 159, got 343
FAIL: Hand count after playing council_room was not correct. Expected 159, got 184
FAIL: Hand count after playing council_room was not correct. Expected 90, got 92
FAIL: Hand count after playing council_room was not correct. Expected 92, got 166
FAIL: Hand count after playing council_room was not correct. Expected 92, got 322
FAIL: Hand count after playing council_room was not correct. Expected 92, got 109
FAIL: Hand count after playing council_room was not correct. Expected 372, got 374
FAIL: Hand count after playing council_room was not correct. Expected 374, got 78
FAIL: Hand count after playing council_room was not correct. Expected 374, got 198
FAIL: Hand count after playing council_room was not correct. Expected 374, got 434
FAIL: Hand count after playing council_room was not correct. Expected 275, got 277
FAIL: Hand count after playing council_room was not correct. Expected 277, got 199
FAIL: Hand count after playing council_room was not correct. Expected 277, got 259
FAIL: Hand count after playing council_room was not correct. Expected 277, got 225
FAIL: Hand count after playing council_room was not correct. Expected 82, got 84
FAIL: Hand count after playing council_room was not correct. Expected 84, got 485
FAIL: Hand count after playing council_room was not correct. Expected 84, got 22
FAIL: Hand count after playing council_room was not correct. Expected 84, got 10
FAIL: Hand count after playing council_room was not correct. Expected 177, got 179
FAIL: Hand count after playing council_room was not correct. Expected 179, got 296
FAIL: Hand count after playing council_room was not correct. Expected 179, got 51
FAIL: Hand count after playing council_room was not correct. Expected 179, got 218
FAIL: Hand count after playing council_room was not correct. Expected 263, got 265
FAIL: Hand count after playing council_room was not correct. Expected 265, got 360
FAIL: Hand count after playing council_room was not correct. Expected 265, got 25
FAIL: Hand count after playing council_room was not correct. Expected 265, got 62
FAIL: Hand count after playing council_room was not correct. Expected 393, got 395
FAIL: Hand count after playing council_room was not correct. Expected 395, got 173
FAIL: Hand count after playing council_room was not correct. Expected 395, got 460
FAIL: Hand count after playing council_room was not correct. Expected 395, got 440
FAIL: Hand count after playing council_room was not correct. Expected 407, got 409
FAIL: Hand count after playing council_room was not correct. Expected 409, got 281
FAIL: Hand count after playing council_room was not correct. Expected 409, got 464
FAIL: Hand count after playing council_room was not correct. Expected 409, got 225
FAIL: Hand count after playing council_room was not correct. Expected 457, got 459
FAIL: Hand count after playing council_room was not correct. Expected 459, got 491
FAIL: Hand count after playing council_room was not correct. Expected 459, got 103
FAIL: Hand count after playing council_room was not correct. Expected 459, got 55
FAIL: Hand count after playing council_room was not correct. Expected 39, got 41
FAIL: Hand count after playing council_room was not correct. Expected 41, got 478
FAIL: Hand count after playing council_room was not correct. Expected 41, got 406
FAIL: Hand count after playing council_room was not correct. Expected 41, got 206
FAIL: Hand count after playing council_room was not correct. Expected 30, got 32
FAIL: Hand count after playing council_room was not correct. Expected 32, got 249
FAIL: Hand count after playing council_room was not correct. Expected 32, got 461
FAIL: Hand count after playing council_room was not correct. Expected 32, got 347
FAIL: Hand count after playing council_room was not correct. Expected 382, got 384
FAIL: Hand count after playing council_room was not correct. Expected 384, got 479
FAIL: Hand count after playing council_room was not correct. Expected 384, got 114
FAIL: Hand count after playing council_room was not correct. Expected 384, got 414
FAIL: Hand count after playing council_room was not correct. Expected 286, got 288
FAIL: Hand count after playing council_room was not correct. Expected 288, got 343
FAIL: Hand count after playing council_room was not correct. Expected 288, got 457
FAIL: Hand count after playing council_room was not correct. Expected 288, got 70
FAIL: Hand count after playing council_room was not correct. Expected 483, got 485
FAIL: Hand count after playing council_room was not correct. Expected 485, got 193
FAIL: Hand count after playing council_room was not correct. Expected 485, got 371
FAIL: Hand count after playing council_room was not correct. Expected 485, got 422
FAIL: Hand count after playing council_room was not correct. Expected 377, got 379
FAIL: Hand count after playing council_room was not correct. Expected 379, got 29
FAIL: Hand count after playing council_room was not correct. Expected 379, got 60
FAIL: Hand count after playing council_room was not correct. Expected 379, got 164
FAIL: Hand count after playing council_room was not correct. Expected 89, got 91
FAIL: Hand count after playing council_room was not correct. Expected 91, got 129
FAIL: Hand count after playing council_room was not correct. Expected 91, got 395
FAIL: Hand count after playing council_room was not correct. Expected 91, got 322
FAIL: Hand count after playing council_room was not correct. Expected 93, got 95
FAIL: Hand count after playing council_room was not correct. Expected 95, got 482
FAIL: Hand count after playing council_room was not correct. Expected 95, got 16
FAIL: Hand count after playing council_room was not correct. Expected 95, got 265
FAIL: Hand count after playing council_room was not correct. Expected 239, got 241
FAIL: Hand count after playing council_room was not correct. Expected 241, got 299
FAIL: Hand count after playing council_room was not correct. Expected 241, got 227
FAIL: Hand count after playing council_room was not correct. Expected 241, got 447
FAIL: Hand count after playing council_room was not correct. Expected 72, got 74
FAIL: Hand count after playing council_room was not correct. Expected 74, got 281
FAIL: Hand count after playing council_room was not correct. Expected 74, got 490
FAIL: Hand count after playing council_room was not correct. Expected 74, got 416
FAIL: Hand count after playing council_room was not correct. Expected 382, got 384
FAIL: Hand count after playing council_room was not correct. Expected 384, got 407
FAIL: Hand count after playing council_room was not correct. Expected 384, got 80
FAIL: Hand count after playing council_room was not correct. Expected 384, got 440
FAIL: Hand count after playing council_room was not correct. Expected 102, got 104
FAIL: Hand count after playing council_room was not correct. Expected 104, got 160
FAIL: Hand count after playing council_room was not correct. Expected 104, got 376
FAIL: Hand count after playing council_room was not correct. Expected 104, got 394
FAIL: Hand count after playing council_room was not correct. Expected 245, got 247
FAIL: Hand count after playing council_room was not correct. Expected 247, got 432
FAIL: Hand count after playing council_room was not correct. Expected 247, got 297
FAIL: Hand count after playing council_room was not correct. Expected 247, got 382
FAIL: Hand count after playing council_room was not correct. Expected 235, got 237
FAIL: Hand count after playing council_room was not correct. Expected 237, got 480
FAIL: Hand count after playing council_room was not correct. Expected 237, got 179
FAIL: Hand count after playing council_room was not correct. Expected 237, got 228
FAIL: Hand count after playing council_room was not correct. Expected 444, got 446
FAIL: Hand count after playing council_room was not correct. Expected 446, got 339
FAIL: Hand count after playing council_room was not correct. Expected 446, got 89
FAIL: Hand count after playing council_room was not correct. Expected 446, got 341
FAIL: Hand count after playing council_room was not correct. Expected 421, got 423
FAIL: Hand count after playing council_room was not correct. Expected 423, got 101
FAIL: Hand count after playing council_room was not correct. Expected 423, got 302
FAIL: Hand count after playing council_room was not correct. Expected 423, got 203
FAIL: Hand count after playing council_room was not correct. Expected 313, got 315
FAIL: Hand count after playing council_room was not correct. Expected 315, got 100
FAIL: Hand count after playing council_room was not correct. Expected 315, got 259
FAIL: Hand count after playing council_room was not correct. Expected 315, got 11
FAIL: Hand count after playing council_room was not correct. Expected 300, got 302
FAIL: Hand count after playing council_room was not correct. Expected 302, got 126
FAIL: Hand count after playing council_room was not correct. Expected 302, got 110
FAIL: Hand count after playing council_room was not correct. Expected 302, got 438
FAIL: Hand count after playing council_room was not correct. Expected 299, got 301
FAIL: Hand count after playing council_room was not correct. Expected 301, got 217
FAIL: Hand count after playing council_room was not correct. Expected 301, got 312
FAIL: Hand count after playing council_room was not correct. Expected 301, got 56
FAIL: Hand count after playing council_room was not correct. Expected 439, got 441
FAIL: Hand count after playing council_room was not correct. Expected 441, got 474
FAIL: Hand count after playing council_room was not correct. Expected 441, got 265
FAIL: Hand count after playing council_room was not correct. Expected 441, got 341
FAIL: Hand count after playing council_room was not correct. Expected 486, got 488
FAIL: Hand count after playing council_room was not correct. Expected 488, got 172
FAIL: Hand count after playing council_room was not correct. Expected 488, got 14
FAIL: Hand count after playing council_room was not correct. Expected 488, got 41
FAIL: Hand count after playing council_room was not correct. Expected 44, got 46
FAIL: Hand count after playing council_room was not correct. Expected 46, got 156
FAIL: Hand count after playing council_room was not correct. Expected 46, got 390
FAIL: Hand count after playing council_room was not correct. Expected 46, got 1
FAIL: Hand count after playing council_room was not correct. Expected 366, got 368
FAIL: Hand count after playing council_room was not correct. Expected 368, got 426
FAIL: Hand count after playing council_room was not correct. Expected 368, got 200
FAIL: Hand count after playing council_room was not correct. Expected 368, got 268
FAIL: Hand count after playing council_room was not correct. Expected 359, got 361
FAIL: Hand count after playing council_room was not correct. Expected 361, got 312
FAIL: Hand count after playing council_room was not correct. Expected 361, got 330
FAIL: Hand count after playing council_room was not correct. Expected 361, got 344
FAIL: Hand count after playing council_room was not correct. Expected 380, got 382
FAIL: Hand count after playing council_room was not correct. Expected 382, got 321
FAIL: Hand count after playing council_room was not correct. Expected 382, got 135
FAIL: Hand count after playing council_room was not correct. Expected 382, got 314
FAIL: Hand count after playing council_room was not correct. Expected 194, got 196
FAIL: Hand count after playing council_room was not correct. Expected 196, got 264
FAIL: Hand count after playing council_room was not correct. Expected 196, got 310
FAIL: Hand count after playing council_room was not correct. Expected 196, got 437
FAIL: Hand count after playing council_room was not correct. Expected 341, got 343
FAIL: Hand count after playing council_room was not correct. Expected 343, got 109
FAIL: Hand count after playing council_room was not correct. Expected 343, got 460
FAIL: Hand count after playing council_room was not correct. Expected 343, got 212
FAIL: Hand count after playing council_room was not correct. Expected 347, got 349
FAIL: Hand count after playing council_room was not correct. Expected 349, got 185
FAIL: Hand count after playing council_room was not correct. Expected 349, got 439
FAIL: Hand count after playing council_room was not correct. Expected 349, got 393
FAIL: Hand count after playing council_room was not correct. Expected 308, got 310
FAIL: Hand count after playing council_room was not correct. Expected 310, got 207
FAIL: Hand count after playing council_room was not correct. Expected 310, got 410
FAIL: Hand count after playing council_room was not correct. Expected 310, got 495
FAIL: Hand count after playing council_room was not correct. Expected 403, got 405
FAIL: Hand count after playing council_room was not correct. Expected 405, got 381
FAIL: Hand count after playing council_room was not correct. Expected 405, got 168
FAIL: Hand count after playing council_room was not correct. Expected 405, got 295
FAIL: Hand count after playing council_room was not correct. Expected 421, got 423
FAIL: Hand count after playing council_room was not correct. Expected 423, got 454
FAIL: Hand count after playing council_room was not correct. Expected 423, got 338
FAIL: Hand count after playing council_room was not correct. Expected 423, got 474
FAIL: Hand count after playing council_room was not correct. Expected 130, got 132
FAIL: Hand count after playing council_room was not correct. Expected 132, got 18
FAIL: Hand count after playing council_room was not correct. Expected 132, got 97
FAIL: Hand count after playing council_room was not correct. Expected 132, got 71
FAIL: Hand count after playing council_room was not correct. Expected 71, got 73
FAIL: Hand count after playing council_room was not correct. Expected 73, got 464
FAIL: Hand count after playing council_room was not correct. Expected 73, got 60
FAIL: Hand count after playing council_room was not correct. Expected 73, got 226
FAIL: Hand count after playing council_room was not correct. Expected 361, got 363
FAIL: Hand count after playing council_room was not correct. Expected 363, got 407
FAIL: Hand count after playing council_room was not correct. Expected 363, got 54
FAIL: Hand count after playing council_room was not correct. Expected 363, got 104
FAIL: Hand count after playing council_room was not correct. Expected 107, got 109
FAIL: Hand count after playing council_room was not correct. Expected 109, got 25
FAIL: Hand count after playing council_room was not correct. Expected 109, got 300
FAIL: Hand count after playing council_room was not correct. Expected 109, got 350
FAIL: Hand count after playing council_room was not correct. Expected 383, got 385
FAIL: Hand count after playing council_room was not correct. Expected 385, got 144
FAIL: Hand count after playing council_room was not correct. Expected 385, got 165
FAIL: Hand count after playing council_room was not correct. Expected 385, got 62
FAIL: Hand count after playing council_room was not correct. Expected 92, got 94
FAIL: Hand count after playing council_room was not correct. Expected 94, got 279
FAIL: Hand count after playing council_room was not correct. Expected 94, got 26
FAIL: Hand count after playing council_room was not correct. Expected 94, got 275
FAIL: Hand count after playing council_room was not correct. Expected 180, got 182
FAIL: Hand count after playing council_room was not correct. Expected 182, got 453
FAIL: Hand count after playing council_room was not correct. Expected 182, got 95
FAIL: Hand count after playing council_room was not correct. Expected 182, got 240
FAIL: Hand count after playing council_room was not correct. Expected 90, got 92
FAIL: Hand count after playing council_room was not correct. Expected 92, got 147
FAIL: Hand count after playing council_room was not correct. Expected 92, got 14
FAIL: Hand count after playing council_room was not correct. Expected 92, got 422
FAIL: Hand count after playing council_room was not correct. Expected 74, got 76
FAIL: Hand count after playing council_room was not correct. Expected 76, got 228
FAIL: Hand count after playing council_room was not correct. Expected 76, got 493
FAIL: Hand count after playing council_room was not correct. Expected 76, got 475
FAIL: Hand count after playing council_room was not correct. Expected 471, got 473
FAIL: Hand count after playing council_room was not correct. Expected 473, got 275
FAIL: Hand count after playing council_room was not correct. Expected 473, got 324
FAIL: Hand count after playing council_room was not correct. Expected 473, got 459
FAIL: Hand count after playing council_room was not correct. Expected 175, got 177
FAIL: Hand count after playing council_room was not correct. Expected 177, got 367
FAIL: Hand count after playing council_room was not correct. Expected 177, got 149
FAIL: Hand count after playing council_room was not correct. Expected 177, got 187
FAIL: Hand count after playing council_room was not correct. Expected 150, got 152
FAIL: Hand count after playing council_room was not correct. Expected 152, got 229
FAIL: Hand count after playing council_room was not correct. Expected 152, got 352
FAIL: Hand count after playing council_room was not correct. Expected 152, got 76
FAIL: Hand count after playing council_room was not correct. Expected 234, got 236
FAIL: Hand count after playing council_room was not correct. Expected 236, got 431
FAIL: Hand count after playing council_room was not correct. Expected 236, got 375
FAIL: Hand count after playing council_room was not correct. Expected 236, got 29
FAIL: Hand count after playing council_room was not correct. Expected 107, got 109
FAIL: Hand count after playing council_room was not correct. Expected 109, got 403
FAIL: Hand count after playing council_room was not correct. Expected 109, got 78
FAIL: Hand count after playing council_room was not correct. Expected 109, got 57
FAIL: Hand count after playing council_room was not correct. Expected 363, got 365
FAIL: Hand count after playing council_room was not correct. Expected 365, got 38
FAIL: Hand count after playing council_room was not correct. Expected 365, got 274
FAIL: Hand count after playing council_room was not correct. Expected 365, got 237
FAIL: Hand count after playing council_room was not correct. Expected 409, got 411
FAIL: Hand count after playing council_room was not correct. Expected 411, got 293
FAIL: Hand count after playing council_room was not correct. Expected 411, got 270
FAIL: Hand count after playing council_room was not correct. Expected 411, got 74
FAIL: Hand count after playing council_room was not correct. Expected 368, got 370
FAIL: Hand count after playing council_room was not correct. Expected 370, got 324
FAIL: Hand count after playing council_room was not correct. Expected 370, got 71
FAIL: Hand count after playing council_room was not correct. Expected 370, got 394
FAIL: Hand count after playing council_room was not correct. Expected 74, got 76
FAIL: Hand count after playing council_room was not correct. Expected 76, got 191
FAIL: Hand count after playing council_room was not correct. Expected 76, got 359
FAIL: Hand count after playing council_room was not correct. Expected 76, got 188
FAIL: Hand count after playing council_room was not correct. Expected 389, got 391
FAIL: Hand count after playing council_room was not correct. Expected 391, got 113
FAIL: Hand count after playing council_room was not correct. Expected 391, got 34
FAIL: Hand count after playing council_room was not correct. Expected 391, got 492
FAIL: Hand count after playing council_room was not correct. Expected 31, got 33
FAIL: Hand count after playing council_room was not correct. Expected 33, got 75
FAIL: Hand count after playing council_room was not correct. Expected 33, got 377
FAIL: Hand count after playing council_room was not correct. Expected 33, got 290
FAIL: Hand count after playing council_room was not correct. Expected 340, got 342
FAIL: Hand count after playing council_room was not correct. Expected 342, got 121
FAIL: Hand count after playing council_room was not correct. Expected 342, got 45
FAIL: Hand count after playing council_room was not correct. Expected 342, got 480
FAIL: Hand count after playing council_room was not correct. Expected 347, got 349
FAIL: Hand count after playing council_room was not correct. Expected 349, got 294
FAIL: Hand count after playing council_room was not correct. Expected 349, got 474
FAIL: Hand count after playing council_room was not correct. Expected 349, got 494
FAIL: Hand count after playing council_room was not correct. Expected 93, got 95
FAIL: Hand count after playing council_room was not correct. Expected 95, got 26
FAIL: Hand count after playing council_room was not correct. Expected 95, got 271
FAIL: Hand count after playing council_room was not correct. Expected 95, got 330
FAIL: Hand count after playing council_room was not correct. Expected 410, got 412
FAIL: Hand count after playing council_room was not correct. Expected 412, got 330
FAIL: Hand count after playing council_room was not correct. Expected 412, got 24
FAIL: Hand count after playing council_room was not correct. Expected 412, got 43
FAIL: Hand count after playing council_room was not correct. Expected 106, got 108
FAIL: Hand count after playing council_room was not correct. Expected 108, got 388
FAIL: Hand count after playing council_room was not correct. Expected 108, got 368
FAIL: Hand count after playing council_room was not correct. Expected 108, got 132
FAIL: Hand count after playing council_room was not correct. Expected 303, got 305
FAIL: Hand count after playing council_room was not correct. Expected 305, got 134
FAIL: Hand count after playing council_room was not correct. Expected 305, got 191
FAIL: Hand count after playing council_room was not correct. Expected 305, got 206
FAIL: Hand count after playing council_room was not correct. Expected 60, got 62
FAIL: Hand count after playing council_room was not correct. Expected 62, got 34
FAIL: Hand count after playing council_room was not correct. Expected 62, got 51
FAIL: Hand count after playing council_room was not correct. Expected 62, got 17
FAIL: Hand count after playing council_room was not correct. Expected 172, got 174
FAIL: Hand count after playing council_room was not correct. Expected 174, got 72
FAIL: Hand count after playing council_room was not correct. Expected 174, got 218
FAIL: Hand count after playing council_room was not correct. Expected 174, got 306
FAIL: Hand count after playing council_room was not correct. Expected 87, got 89
FAIL: Hand count after playing council_room was not correct. Expected 89, got 103
FAIL: Hand count after playing council_room was not correct. Expected 89, got 297
FAIL: Hand count after playing council_room was not correct. Expected 89, got 463
FAIL: Hand count after playing council_room was not correct. Expected 286, got 288
FAIL: Hand count after playing council_room was not correct. Expected 288, got 377
FAIL: Hand count after playing council_room was not correct. Expected 288, got 72
FAIL: Hand count after playing council_room was not correct. Expected 288, got 329
FAIL: Hand count after playing council_room was not correct. Expected 465, got 467
FAIL: Hand count after playing council_room was not correct. Expected 467, got 466
FAIL: Hand count after playing council_room was not correct. Expected 467, got 263
FAIL: Hand count after playing council_room was not correct. Expected 467, got 342
FAIL: Hand count after playing council_room was not correct. Expected 328, got 330
FAIL: Hand count after playing council_room was not correct. Expected 330, got 254
FAIL: Hand count after playing council_room was not correct. Expected 330, got 270
FAIL: Hand count after playing council_room was not correct. Expected 330, got 165
FAIL: Hand count after playing council_room was not correct. Expected 445, got 447
FAIL: Hand count after playing council_room was not correct. Expected 447, got 137
FAIL: Hand count after playing council_room was not correct. Expected 447, got 212
FAIL: Hand count after playing council_room was not correct. Expected 447, got 241
FAIL: Hand count after playing council_room was not correct. Expected 273, got 275
FAIL: Hand count after playing council_room was not correct. Expected 275, got 163
FAIL: Hand count after playing council_room was not correct. Expected 275, got 394
FAIL: Hand count after playing council_room was not correct. Expected 275, got 264
FAIL: Hand count after playing council_room was not correct. Expected 262, got 264
FAIL: Hand count after playing council_room was not correct. Expected 264, got 36
FAIL: Hand count after playing council_room was not correct. Expected 264, got 56
FAIL: Hand count after playing council_room was not correct. Expected 264, got 254
FAIL: Hand count after playing council_room was not correct. Expected 268, got 270
FAIL: Hand count after playing council_room was not correct. Expected 270, got 466
FAIL: Hand count after playing council_room was not correct. Expected 270, got 329
FAIL: Hand count after playing council_room was not correct. Expected 270, got 109
FAIL: Hand count after playing council_room was not correct. Expected 344, got 346
FAIL: Hand count after playing council_room was not correct. Expected 346, got 374
FAIL: Hand count after playing council_room was not correct. Expected 346, got 468
FAIL: Hand count after playing council_room was not correct. Expected 346, got 228
FAIL: Hand count after playing council_room was not correct. Expected 326, got 328
FAIL: Hand count after playing council_room was not correct. Expected 328, got 126
FAIL: Hand count after playing council_room was not correct. Expected 328, got 172
FAIL: Hand count after playing council_room was not correct. Expected 328, got 349
FAIL: Hand count after playing council_room was not correct. Expected 411, got 413
FAIL: Hand count after playing council_room was not correct. Expected 413, got 477
FAIL: Hand count after playing council_room was not correct. Expected 413, got 446
FAIL: Hand count after playing council_room was not correct. Expected 413, got 166
FAIL: Hand count after playing council_room was not correct. Expected 104, got 106
FAIL: Hand count after playing council_room was not correct. Expected 106, got 367
FAIL: Hand count after playing council_room was not correct. Expected 106, got 79
FAIL: Hand count after playing council_room was not correct. Expected 106, got 467
FAIL: Hand count after playing council_room was not correct. Expected 179, got 181
FAIL: Hand count after playing council_room was not correct. Expected 181, got 348
FAIL: Hand count after playing council_room was not correct. Expected 181, got 227
FAIL: Hand count after playing council_room was not correct. Expected 181, got 75
FAIL: Hand count after playing council_room was not correct. Expected 428, got 430
FAIL: Hand count after playing council_room was not correct. Expected 430, got 389
FAIL: Hand count after playing council_room was not correct. Expected 430, got 405
FAIL: Hand count after playing council_room was not correct. Expected 430, got 421
FAIL: Hand count after playing council_room was not correct. Expected 448, got 450
FAIL: Hand count after playing council_room was not correct. Expected 450, got 454
FAIL: Hand count after playing council_room was not correct. Expected 450, got 312
FAIL: Hand count after playing council_room was not correct. Expected 450, got 323
FAIL: Hand count after playing council_room was not correct. Expected 262, got 264
FAIL: Hand count after playing council_room was not correct. Expected 264, got 279
FAIL: Hand count after playing council_room was not correct. Expected 264, got 45
FAIL: Hand count after playing council_room was not correct. Expected 264, got 192
FAIL: Hand count after playing council_room was not correct. Expected 232, got 234
FAIL: Hand count after playing council_room was not correct. Expected 234, got 422
FAIL: Hand count after playing council_room was not correct. Expected 234, got 239
FAIL: Hand count after playing council_room was not correct. Expected 234, got 484
FAIL: Hand count after playing council_room was not correct. Expected 329, got 331
FAIL: Hand count after playing council_room was not correct. Expected 331, got 415
FAIL: Hand count after playing council_room was not correct. Expected 331, got 97
FAIL: Hand count after playing council_room was not correct. Expected 331, got 111
FAIL: Hand count after playing council_room was not correct. Expected 193, got 195
FAIL: Hand count after playing council_room was not correct. Expected 195, got 5
FAIL: Hand count after playing council_room was not correct. Expected 195, got 401
FAIL: Hand count after playing council_room was not correct. Expected 195, got 404
FAIL: Hand count after playing council_room was not correct. Expected 27, got 29
FAIL: Hand count after playing council_room was not correct. Expected 29, got 422
FAIL: Hand count after playing council_room was not correct. Expected 29, got 338
FAIL: Hand count after playing council_room was not correct. Expected 29, got 296
FAIL: Hand count after playing council_room was not correct. Expected 377, got 379
FAIL: Hand count after playing council_room was not correct. Expected 379, got 285
FAIL: Hand count after playing council_room was not correct. Expected 379, got 17
FAIL: Hand count after playing council_room was not correct. Expected 379, got 16
FAIL: Hand count after playing council_room was not correct. Expected 198, got 200
FAIL: Hand count after playing council_room was not correct. Expected 200, got 264
FAIL: Hand count after playing council_room was not correct. Expected 200, got 477
FAIL: Hand count after playing council_room was not correct. Expected 200, got 473
FAIL: Hand count after playing council_room was not correct. Expected 146, got 148
FAIL: Hand count after playing council_room was not correct. Expected 148, got 50
FAIL: Hand count after playing council_room was not correct. Expected 148, got 397
FAIL: Hand count after playing council_room was not correct. Expected 148, got 319
FAIL: Hand count after playing council_room was not correct. Expected 7, got 9
FAIL: Hand count after playing council_room was not correct. Expected 9, got 396
FAIL: Hand count after playing council_room was not correct. Expected 9, got 217
FAIL: Hand count after playing council_room was not correct. Expected 9, got 103
FAIL: Hand count after playing council_room was not correct. Expected 279, got 281
FAIL: Hand count after playing council_room was not correct. Expected 281, got 159
FAIL: Hand count after playing council_room was not correct. Expected 281, got 481
FAIL: Hand count after playing council_room was not correct. Expected 281, got 182
FAIL: Hand count after playing council_room was not correct. Expected 37, got 39
FAIL: Hand count after playing council_room was not correct. Expected 39, got 294
FAIL: Hand count after playing council_room was not correct. Expected 39, got 90
FAIL: Hand count after playing council_room was not correct. Expected 39, got 34
FAIL: Hand count after playing council_room was not correct. Expected 147, got 149
FAIL: Hand count after playing council_room was not correct. Expected 149, got 340
FAIL: Hand count after playing council_room was not correct. Expected 149, got 224
FAIL: Hand count after playing council_room was not correct. Expected 149, got 225
FAIL: Hand count after playing council_room was not correct. Expected 259, got 261
FAIL: Hand count after playing council_room was not correct. Expected 261, got 103
FAIL: Hand count after playing council_room was not correct. Expected 261, got 330
FAIL: Hand count after playing council_room was not correct. Expected 261, got 192
FAIL: Hand count after playing council_room was not correct. Expected 13, got 15
FAIL: Hand count after playing council_room was not correct. Expected 15, got 431
FAIL: Hand count after playing council_room was not correct. Expected 15, got 406
FAIL: Hand count after playing council_room was not correct. Expected 15, got 95
FAIL: Hand count after playing council_room was not correct. Expected 32, got 34
FAIL: Hand count after playing council_room was not correct. Expected 34, got 272
FAIL: Hand count after playing council_room was not correct. Expected 34, got 10
FAIL: Hand count after playing council_room was not correct. Expected 34, got 61
FAIL: Hand count after playing council_room was not correct. Expected 294, got 296
FAIL: Hand count after playing council_room was not correct. Expected 296, got 240
FAIL: Hand count after playing council_room was not correct. Expected 296, got 31
FAIL: Hand count after playing council_room was not correct. Expected 296, got 99
FAIL: Hand count after playing council_room was not correct. Expected 151, got 153
FAIL: Hand count after playing council_room was not correct. Expected 153, got 38
FAIL: Hand count after playing council_room was not correct. Expected 153, got 355
FAIL: Hand count after playing council_room was not correct. Expected 153, got 269
FAIL: Hand count after playing council_room was not correct. Expected 346, got 348
FAIL: Hand count after playing council_room was not correct. Expected 348, got 378
FAIL: Hand count after playing council_room was not correct. Expected 348, got 70
FAIL: Hand count after playing council_room was not correct. Expected 348, got 391
FAIL: Hand count after playing council_room was not correct. Expected 177, got 179
FAIL: Hand count after playing council_room was not correct. Expected 179, got 292
FAIL: Hand count after playing council_room was not correct. Expected 179, got 491
FAIL: Hand count after playing council_room was not correct. Expected 179, got 345
FAIL: Hand count after playing council_room was not correct. Expected 108, got 110
FAIL: Hand count after playing council_room was not correct. Expected 110, got 423
FAIL: Hand count after playing council_room was not correct. Expected 110, got 232
FAIL: Hand count after playing council_room was not correct. Expected 110, got 57
FAIL: Hand count after playing council_room was not correct. Expected 343, got 345
FAIL: Hand count after playing council_room was not correct. Expected 345, got 397
FAIL: Hand count after playing council_room was not correct. Expected 345, got 309
FAIL: Hand count after playing council_room was not correct. Expected 345, got 454
FAIL: Hand count after playing council_room was not correct. Expected 435, got 437
FAIL: Hand count after playing council_room was not correct. Expected 437, got 350
FAIL: Hand count after playing council_room was not correct. Expected 437, got 479
FAIL: Hand count after playing council_room was not correct. Expected 437, got 79
FAIL: Hand count after playing council_room was not correct. Expected 209, got 211
FAIL: Hand count after playing council_room was not correct. Expected 211, got 148
FAIL: Hand count after playing council_room was not correct. Expected 211, got 110
FAIL: Hand count after playing council_room was not correct. Expected 211, got 467
FAIL: Hand count after playing council_room was not correct. Expected 414, got 416
FAIL: Hand count after playing council_room was not correct. Expected 416, got 119
FAIL: Hand count after playing council_room was not correct. Expected 416, got 358
FAIL: Hand count after playing council_room was not correct. Expected 416, got 182
FAIL: Hand count after playing council_room was not correct. Expected 270, got 272
FAIL: Hand count after playing council_room was not correct. Expected 272, got 126
FAIL: Hand count after playing council_room was not correct. Expected 272, got 37
FAIL: Hand count after playing council_room was not correct. Expected 272, got 440
FAIL: Hand count after playing council_room was not correct. Expected 288, got 290
FAIL: Hand count after playing council_room was not correct. Expected 290, got 137
FAIL: Hand count after playing council_room was not correct. Expected 290, got 427
FAIL: Hand count after playing council_room was not correct. Expected 290, got 277
FAIL: Hand count after playing council_room was not correct. Expected 199, got 201
FAIL: Hand count after playing council_room was not correct. Expected 201, got 475
FAIL: Hand count after playing council_room was not correct. Expected 201, got 286
FAIL: Hand count after playing council_room was not correct. Expected 201, got 433
FAIL: Hand count after playing council_room was not correct. Expected 431, got 433
FAIL: Hand count after playing council_room was not correct. Expected 433, got 124
FAIL: Hand count after playing council_room was not correct. Expected 433, got 353
FAIL: Hand count after playing council_room was not correct. Expected 433, got 214
FAIL: Hand count after playing council_room was not correct. Expected 217, got 219
FAIL: Hand count after playing council_room was not correct. Expected 219, got 361
FAIL: Hand count after playing council_room was not correct. Expected 219, got 238
FAIL: Hand count after playing council_room was not correct. Expected 219, got 41
FAIL: Hand count after playing council_room was not correct. Expected 482, got 484
FAIL: Hand count after playing council_room was not correct. Expected 484, got 350
FAIL: Hand count after playing council_room was not correct. Expected 484, got 199
FAIL: Hand count after playing council_room was not correct. Expected 484, got 257
FAIL: Hand count after playing council_room was not correct. Expected 139, got 141
FAIL: Hand count after playing council_room was not correct. Expected 141, got 153
FAIL: Hand count after playing council_room was not correct. Expected 141, got 462
FAIL: Hand count after playing council_room was not correct. Expected 141, got 35
FAIL: Hand count after playing council_room was not correct. Expected 98, got 100
FAIL: Hand count after playing council_room was not correct. Expected 100, got 253
FAIL: Hand count after playing council_room was not correct. Expected 100, got 376
FAIL: Hand count after playing council_room was not correct. Expected 100, got 469
FAIL: Hand count after playing council_room was not correct. Expected 434, got 436
FAIL: Hand count after playing council_room was not correct. Expected 436, got 497
FAIL: Hand count after playing council_room was not correct. Expected 436, got 222
FAIL: Hand count after playing council_room was not correct. Expected 436, got 400
FAIL: Hand count after playing council_room was not correct. Expected 211, got 213
FAIL: Hand count after playing council_room was not correct. Expected 213, got 102
FAIL: Hand count after playing council_room was not correct. Expected 213, got 284
FAIL: Hand count after playing council_room was not correct. Expected 213, got 384
FAIL: Hand count after playing council_room was not correct. Expected 64, got 66
FAIL: Hand count after playing council_room was not correct. Expected 66, got 235
FAIL: Hand count after playing council_room was not correct. Expected 66, got 397
FAIL: Hand count after playing council_room was not correct. Expected 66, got 146
FAIL: Hand count after playing council_room was not correct. Expected 207, got 209
FAIL: Hand count after playing council_room was not correct. Expected 209, got 338
FAIL: Hand count after playing council_room was not correct. Expected 209, got 58
FAIL: Hand count after playing council_room was not correct. Expected 209, got 44
FAIL: Hand count after playing council_room was not correct. Expected 124, got 126
FAIL: Hand count after playing council_room was not correct. Expected 126, got 174
FAIL: Hand count after playing council_room was not correct. Expected 126, got 9
FAIL: Hand count after playing council_room was not correct. Expected 126, got 59
FAIL: Hand count after playing council_room was not correct. Expected 196, got 198
FAIL: Hand count after playing council_room was not correct. Expected 198, got 70
FAIL: Hand count after playing council_room was not correct. Expected 198, got 225
FAIL: Hand count after playing council_room was not correct. Expected 198, got 386
FAIL: Hand count after playing council_room was not correct. Expected 339, got 341
FAIL: Hand count after playing council_room was not correct. Expected 341, got 469
FAIL: Hand count after playing council_room was not correct. Expected 341, got 497
FAIL: Hand count after playing council_room was not correct. Expected 341, got 413
FAIL: Hand count after playing council_room was not correct. Expected 13, got 15
FAIL: Hand count after playing council_room was not correct. Expected 15, got 178
FAIL: Hand count after playing council_room was not correct. Expected 15, got 376
FAIL: Hand count after playing council_room was not correct. Expected 15, got 256
FAIL: Hand count after playing council_room was not correct. Expected 112, got 114
FAIL: Hand count after playing council_room was not correct. Expected 114, got 236
FAIL: Hand count after playing council_room was not correct. Expected 114, got 396
FAIL: Hand count after playing council_room was not correct. Expected 114, got 33
FAIL: Hand count after playing council_room was not correct. Expected 113, got 115
FAIL: Hand count after playing council_room was not correct. Expected 115, got 225
FAIL: Hand count after playing council_room was not correct. Expected 115, got 228
FAIL: Hand count after playing council_room was not correct. Expected 115, got 197
FAIL: Hand count after playing council_room was not correct. Expected 111, got 113
FAIL: Hand count after playing council_room was not correct. Expected 113, got 407
FAIL: Hand count after playing council_room was not correct. Expected 113, got 175
FAIL: Hand count after playing council_room was not correct. Expected 113, got 322
FAIL: Hand count after playing council_room was not correct. Expected 123, got 125
FAIL: Hand count after playing council_room was not correct. Expected 125, got 163
FAIL: Hand count after playing council_room was not correct. Expected 125, got 18
FAIL: Hand count after playing council_room was not correct. Expected 125, got 170
FAIL: Hand count after playing council_room was not correct. Expected 84, got 86
FAIL: Hand count after playing council_room was not correct. Expected 86, got 142
FAIL: Hand count after playing council_room was not correct. Expected 86, got 258
FAIL: Hand count after playing council_room was not correct. Expected 86, got 500
FAIL: Hand count after playing council_room was not correct. Expected 332, got 334
FAIL: Hand count after playing council_room was not correct. Expected 334, got 460
FAIL: Hand count after playing council_room was not correct. Expected 334, got 32
FAIL: Hand count after playing council_room was not correct. Expected 334, got 250
FAIL: Hand count after playing council_room was not correct. Expected 37, got 39
FAIL: Hand count after playing council_room was not correct. Expected 39, got 358
FAIL: Hand count after playing council_room was not correct. Expected 39, got 72
FAIL: Hand count after playing council_room was not correct. Expected 39, got 345
FAIL: Hand count after playing council_room was not correct. Expected 489, got 491
FAIL: Hand count after playing council_room was not correct. Expected 491, got 265
FAIL: Hand count after playing council_room was not correct. Expected 491, got 392
FAIL: Hand count after playing council_room was not correct. Expected 491, got 474
FAIL: Hand count after playing council_room was not correct. Expected 259, got 261
FAIL: Hand count after playing council_room was not correct. Expected 261, got 33
FAIL: Hand count after playing council_room was not correct. Expected 261, got 42
FAIL: Hand count after playing council_room was not correct. Expected 261, got 186
FAIL: Hand count after playing council_room was not correct. Expected 374, got 376
FAIL: Hand count after playing council_room was not correct. Expected 376, got 320
FAIL: Hand count after playing council_room was not correct. Expected 376, got 328
FAIL: Hand count after playing council_room was not correct. Expected 376, got 247
FAIL: Hand count after playing council_room was not correct. Expected 183, got 185
FAIL: Hand count after playing council_room was not correct. Expected 185, got 265
FAIL: Hand count after playing council_room was not correct. Expected 185, got 479
FAIL: Hand count after playing council_room was not correct. Expected 185, got 70
FAIL: Hand count after playing council_room was not correct. Expected 265, got 267
FAIL: Hand count after playing council_room was not correct. Expected 267, got 15
FAIL: Hand count after playing council_room was not correct. Expected 267, got 11
FAIL: Hand count after playing council_room was not correct. Expected 267, got 130
FAIL: Hand count after playing council_room was not correct. Expected 228, got 230
FAIL: Hand count after playing council_room was not correct. Expected 230, got 127
FAIL: Hand count after playing council_room was not correct. Expected 230, got 319
FAIL: Hand count after playing council_room was not correct. Expected 230, got 255
FAIL: Hand count after playing council_room was not correct. Expected 340, got 342
FAIL: Hand count after playing council_room was not correct. Expected 342, got 123
FAIL: Hand count after playing council_room was not correct. Expected 342, got 93
FAIL: Hand count after playing council_room was not correct. Expected 342, got 196
FAIL: Hand count after playing council_room was not correct. Expected 441, got 443
FAIL: Hand count after playing council_room was not correct. Expected 443, got 342
FAIL: Hand count after playing council_room was not correct. Expected 443, got 55
FAIL: Hand count after playing council_room was not correct. Expected 443, got 210
FAIL: Hand count after playing council_room was not correct. Expected 206, got 208
FAIL: Hand count after playing council_room was not correct. Expected 208, got 90
FAIL: Hand count after playing council_room was not correct. Expected 208, got 127
FAIL: Hand count after playing council_room was not correct. Expected 208, got 294
FAIL: Hand count after playing council_room was not correct. Expected 111, got 113
FAIL: Hand count after playing council_room was not correct. Expected 113, got 321
FAIL: Hand count after playing council_room was not correct. Expected 113, got 427
FAIL: Hand count after playing council_room was not correct. Expected 113, got 161
FAIL: Hand count after playing council_room was not correct. Expected 404, got 406
FAIL: Hand count after playing council_room was not correct. Expected 406, got 252
FAIL: Hand count after playing council_room was not correct. Expected 406, got 500
FAIL: Hand count after playing council_room was not correct. Expected 406, got 141
FAIL: Hand count after playing council_room was not correct. Expected 27, got 29
FAIL: Hand count after playing council_room was not correct. Expected 29, got 357
FAIL: Hand count after playing council_room was not correct. Expected 29, got 485
FAIL: Hand count after playing council_room was not correct. Expected 29, got 132
FAIL: Hand count after playing council_room was not correct. Expected 167, got 169
FAIL: Hand count after playing council_room was not correct. Expected 169, got 432
FAIL: Hand count after playing council_room was not correct. Expected 169, got 327
FAIL: Hand count after playing council_room was not correct. Expected 169, got 40
FAIL: Hand count after playing council_room was not correct. Expected 304, got 306
FAIL: Hand count after playing council_room was not correct. Expected 306, got 273
FAIL: Hand count after playing council_room was not correct. Expected 306, got 236
FAIL: Hand count after playing council_room was not correct. Expected 306, got 489
FAIL: Hand count after playing council_room was not correct. Expected 174, got 176
FAIL: Hand count after playing council_room was not correct. Expected 176, got 325
FAIL: Hand count after playing council_room was not correct. Expected 176, got 18
FAIL: Hand count after playing council_room was not correct. Expected 176, got 211
FAIL: Hand count after playing council_room was not correct. Expected 272, got 274
FAIL: Hand count after playing council_room was not correct. Expected 274, got 436
FAIL: Hand count after playing council_room was not correct. Expected 274, got 187
FAIL: Hand count after playing council_room was not correct. Expected 274, got 329
FAIL: Hand count after playing council_room was not correct. Expected 466, got 468
FAIL: Hand count after playing council_room was not correct. Expected 468, got 392
FAIL: Hand count after playing council_room was not correct. Expected 468, got 398
FAIL: Hand count after playing council_room was not correct. Expected 468, got 89
FAIL: Hand count after playing council_room was not correct. Expected 81, got 83
FAIL: Hand count after playing council_room was not correct. Expected 83, got 134
FAIL: Hand count after playing council_room was not correct. Expected 83, got 457
FAIL: Hand count after playing council_room was not correct. Expected 83, got 87
FAIL: Hand count after playing council_room was not correct. Expected 486, got 488
FAIL: Hand count after playing council_room was not correct. Expected 488, got 322
FAIL: Hand count after playing council_room was not correct. Expected 488, got 287
FAIL: Hand count after playing council_room was not correct. Expected 488, got 149
FAIL: Hand count after playing council_room was not correct. Expected 279, got 281
FAIL: Hand count after playing council_room was not correct. Expected 281, got 256
FAIL: Hand count after playing council_room was not correct. Expected 281, got 420
FAIL: Hand count after playing council_room was not correct. Expected 281, got 146
FAIL: Hand count after playing council_room was not correct. Expected 114, got 116
FAIL: Hand count after playing council_room was not correct. Expected 116, got 145
FAIL: Hand count after playing council_room was not correct. Expected 116, got 230
FAIL: Hand count after playing council_room was not correct. Expected 116, got 191
FAIL: Hand count after playing council_room was not correct. Expected 16, got 18
FAIL: Hand count after playing council_room was not correct. Expected 18, got 107
FAIL: Hand count after playing council_room was not correct. Expected 18, got 474
FAIL: Hand count after playing council_room was not correct. Expected 18, got 41
FAIL: Hand count after playing council_room was not correct. Expected 119, got 121
FAIL: Hand count after playing council_room was not correct. Expected 121, got 68
FAIL: Hand count after playing council_room was not correct. Expected 121, got 166
FAIL: Hand count after playing council_room was not correct. Expected 121, got 217
FAIL: Hand count after playing council_room was not correct. Expected 14, got 16
FAIL: Hand count after playing council_room was not correct. Expected 16, got 238
FAIL: Hand count after playing council_room was not correct. Expected 16, got 259
FAIL: Hand count after playing council_room was not correct. Expected 16, got 438
FAIL: Hand count after playing council_room was not correct. Expected 207, got 209
FAIL: Hand count after playing council_room was not correct. Expected 209, got 128
FAIL: Hand count after playing council_room was not correct. Expected 209, got 42
FAIL: Hand count after playing council_room was not correct. Expected 209, got 277
FAIL: Hand count after playing council_room was not correct. Expected 485, got 487
FAIL: Hand count after playing council_room was not correct. Expected 487, got 14
FAIL: Hand count after playing council_room was not correct. Expected 487, got 115
FAIL: Hand count after playing council_room was not correct. Expected 487, got 493
FAIL: Hand count after playing council_room was not correct. Expected 460, got 462
FAIL: Hand count after playing council_room was not correct. Expected 462, got 109
FAIL: Hand count after playing council_room was not correct. Expected 462, got 128
FAIL: Hand count after playing council_room was not correct. Expected 462, got 172
FAIL: Hand count after playing council_room was not correct. Expected 94, got 96
FAIL: Hand count after playing council_room was not correct. Expected 96, got 445
FAIL: Hand count after playing council_room was not correct. Expected 96, got 47
FAIL: Hand count after playing council_room was not correct. Expected 96, got 374
FAIL: Hand count after playing council_room was not correct. Expected 239, got 241
FAIL: Hand count after playing council_room was not correct. Expected 241, got 232
FAIL: Hand count after playing council_room was not correct. Expected 241, got 255
FAIL: Hand count after playing council_room was not correct. Expected 241, got 313
FAIL: Hand count after playing council_room was not correct. Expected 174, got 176
FAIL: Hand count after playing council_room was not correct. Expected 176, got 154
FAIL: Hand count after playing council_room was not correct. Expected 176, got 427
FAIL: Hand count after playing council_room was not correct. Expected 176, got 290
FAIL: Hand count after playing council_room was not correct. Expected 198, got 200
FAIL: Hand count after playing council_room was not correct. Expected 200, got 124
FAIL: Hand count after playing council_room was not correct. Expected 200, got 322
FAIL: Hand count after playing council_room was not correct. Expected 200, got 330
FAIL: Hand count after playing council_room was not correct. Expected 132, got 134
FAIL: Hand count after playing council_room was not correct. Expected 134, got 143
FAIL: Hand count after playing council_room was not correct. Expected 134, got 25
FAIL: Hand count after playing council_room was not correct. Expected 134, got 392
FAIL: Hand count after playing council_room was not correct. Expected 102, got 104
FAIL: Hand count after playing council_room was not correct. Expected 104, got 436
FAIL: Hand count after playing council_room was not correct. Expected 104, got 85
FAIL: Hand count after playing council_room was not correct. Expected 104, got 399
FAIL: Hand count after playing council_room was not correct. Expected 128, got 130
FAIL: Hand count after playing council_room was not correct. Expected 130, got 466
FAIL: Hand count after playing council_room was not correct. Expected 130, got 172
FAIL: Hand count after playing council_room was not correct. Expected 130, got 289
FAIL: Hand count after playing council_room was not correct. Expected 377, got 379
FAIL: Hand count after playing council_room was not correct. Expected 379, got 160
FAIL: Hand count after playing council_room was not correct. Expected 379, got 4
FAIL: Hand count after playing council_room was not correct. Expected 379, got 309
FAIL: Hand count after playing council_room was not correct. Expected 137, got 139
FAIL: Hand count after playing council_room was not correct. Expected 139, got 267
FAIL: Hand count after playing council_room was not correct. Expected 139, got 231
FAIL: Hand count after playing council_room was not correct. Expected 139, got 102
FAIL: Hand count after playing council_room was not correct. Expected 425, got 427
FAIL: Hand count after playing council_room was not correct. Expected 427, got 391
FAIL: Hand count after playing council_room was not correct. Expected 427, got 217
FAIL: Hand count after playing council_room was not correct. Expected 427, got 351
FAIL: Hand count after playing council_room was not correct. Expected 243, got 245
FAIL: Hand count after playing council_room was not correct. Expected 245, got 45
FAIL: Hand count after playing council_room was not correct. Expected 245, got 94
FAIL: Hand count after playing council_room was not correct. Expected 245, got 456
FAIL: Hand count after playing council_room was not correct. Expected 74, got 76
FAIL: Hand count after playing council_room was not correct. Expected 76, got 30
FAIL: Hand count after playing council_room was not correct. Expected 76, got 12
FAIL: Hand count after playing council_room was not correct. Expected 76, got 149
FAIL: Hand count after playing council_room was not correct. Expected 279, got 281
FAIL: Hand count after playing council_room was not correct. Expected 281, got 187
FAIL: Hand count after playing council_room was not correct. Expected 281, got 283
FAIL: Hand count after playing council_room was not correct. Expected 281, got 410
FAIL: Hand count after playing council_room was not correct. Expected 55, got 57
FAIL: Hand count after playing council_room was not correct. Expected 57, got 307
FAIL: Hand count after playing council_room was not correct. Expected 57, got 55
FAIL: Hand count after playing council_room was not correct. Expected 57, got 4
FAIL: Hand count after playing council_room was not correct. Expected 357, got 359
FAIL: Hand count after playing council_room was not correct. Expected 359, got 261
FAIL: Hand count after playing council_room was not correct. Expected 359, got 115
FAIL: Hand count after playing council_room was not correct. Expected 359, got 139
FAIL: Hand count after playing council_room was not correct. Expected 359, got 361
FAIL: Hand count after playing council_room was not correct. Expected 361, got 329
FAIL: Hand count after playing council_room was not correct. Expected 361, got 487
FAIL: Hand count after playing council_room was not correct. Expected 361, got 424
FAIL: Hand count after playing council_room was not correct. Expected 243, got 245
FAIL: Hand count after playing council_room was not correct. Expected 245, got 385
FAIL: Hand count after playing council_room was not correct. Expected 245, got 35
FAIL: Hand count after playing council_room was not correct. Expected 245, got 415
FAIL: Hand count after playing council_room was not correct. Expected 130, got 132
FAIL: Hand count after playing council_room was not correct. Expected 132, got 436
FAIL: Hand count after playing council_room was not correct. Expected 132, got 463
FAIL: Hand count after playing council_room was not correct. Expected 132, got 384
FAIL: Hand count after playing council_room was not correct. Expected 455, got 457
FAIL: Hand count after playing council_room was not correct. Expected 457, got 497
FAIL: Hand count after playing council_room was not correct. Expected 457, got 64
FAIL: Hand count after playing council_room was not correct. Expected 457, got 465
FAIL: Hand count after playing council_room was not correct. Expected 179, got 181
FAIL: Hand count after playing council_room was not correct. Expected 181, got 249
FAIL: Hand count after playing council_room was not correct. Expected 181, got 91
FAIL: Hand count after playing council_room was not correct. Expected 181, got 486
FAIL: Hand count after playing council_room was not correct. Expected 435, got 437
FAIL: Hand count after playing council_room was not correct. Expected 437, got 321
FAIL: Hand count after playing council_room was not correct. Expected 437, got 49
FAIL: Hand count after playing council_room was not correct. Expected 437, got 439
FAIL: Hand count after playing council_room was not correct. Expected 150, got 152
FAIL: Hand count after playing council_room was not correct. Expected 152, got 281
FAIL: Hand count after playing council_room was not correct. Expected 152, got 263
FAIL: Hand count after playing council_room was not correct. Expected 152, got 13
FAIL: Hand count after playing council_room was not correct. Expected 157, got 159
FAIL: Hand count after playing council_room was not correct. Expected 159, got 465
FAIL: Hand count after playing council_room was not correct. Expected 159, got 294
FAIL: Hand count after playing council_room was not correct. Expected 159, got 37
FAIL: Hand count after playing council_room was not correct. Expected 393, got 395
FAIL: Hand count after playing council_room was not correct. Expected 395, got 452
FAIL: Hand count after playing council_room was not correct. Expected 395, got 104
FAIL: Hand count after playing council_room was not correct. Expected 395, got 394
FAIL: Hand count after playing council_room was not correct. Expected 321, got 323
FAIL: Hand count after playing council_room was not correct. Expected 323, got 50
FAIL: Hand count after playing council_room was not correct. Expected 323, got 469
FAIL: Hand count after playing council_room was not correct. Expected 323, got 268
FAIL: Hand count after playing council_room was not correct. Expected 242, got 244
FAIL: Hand count after playing council_room was not correct. Expected 244, got 93
FAIL: Hand count after playing council_room was not correct. Expected 244, got 338
FAIL: Hand count after playing council_room was not correct. Expected 244, got 189
FAIL: Hand count after playing council_room was not correct. Expected 29, got 31
FAIL: Hand count after playing council_room was not correct. Expected 31, got 102
FAIL: Hand count after playing council_room was not correct. Expected 31, got 174
FAIL: Hand count after playing council_room was not correct. Expected 31, got 482
FAIL: Hand count after playing council_room was not correct. Expected 262, got 264
FAIL: Hand count after playing council_room was not correct. Expected 264, got 321
FAIL: Hand count after playing council_room was not correct. Expected 264, got 329
FAIL: Hand count after playing council_room was not correct. Expected 264, got 486
FAIL: Hand count after playing council_room was not correct. Expected 120, got 122
FAIL: Hand count after playing council_room was not correct. Expected 122, got 204
FAIL: Hand count after playing council_room was not correct. Expected 122, got 422
FAIL: Hand count after playing council_room was not correct. Expected 122, got 386
FAIL: Hand count after playing council_room was not correct. Expected 416, got 418
FAIL: Hand count after playing council_room was not correct. Expected 418, got 122
FAIL: Hand count after playing council_room was not correct. Expected 418, got 468
FAIL: Hand count after playing council_room was not correct. Expected 418, got 232
FAIL: Hand count after playing council_room was not correct. Expected 89, got 91
FAIL: Hand count after playing council_room was not correct. Expected 91, got 119
FAIL: Hand count after playing council_room was not correct. Expected 91, got 297
FAIL: Hand count after playing council_room was not correct. Expected 91, got 323
FAIL: Hand count after playing council_room was not correct. Expected 307, got 309
FAIL: Hand count after playing council_room was not correct. Expected 309, got 465
FAIL: Hand count after playing council_room was not correct. Expected 309, got 18
FAIL: Hand count after playing council_room was not correct. Expected 309, got 178
FAIL: Hand count after playing council_room was not correct. Expected 350, got 352
FAIL: Hand count after playing council_room was not correct. Expected 352, got 416
FAIL: Hand count after playing council_room was not correct. Expected 352, got 137
FAIL: Hand count after playing council_room was not correct. Expected 352, got 108
FAIL: Hand count after playing council_room was not correct. Expected 251, got 253
FAIL: Hand count after playing council_room was not correct. Expected 253, got 136
FAIL: Hand count after playing council_room was not correct. Expected 253, got 91
FAIL: Hand count after playing council_room was not correct. Expected 253, got 230
FAIL: Hand count after playing council_room was not correct. Expected 425, got 427
FAIL: Hand count after playing council_room was not correct. Expected 427, got 224
FAIL: Hand count after playing council_room was not correct. Expected 427, got 437
FAIL: Hand count after playing council_room was not correct. Expected 427, got 331
FAIL: Hand count after playing council_room was not correct. Expected 209, got 211
FAIL: Hand count after playing council_room was not correct. Expected 211, got 140
FAIL: Hand count after playing council_room was not correct. Expected 211, got 170
FAIL: Hand count after playing council_room was not correct. Expected 211, got 225
FAIL: Hand count after playing council_room was not correct. Expected 465, got 467
FAIL: Hand count after playing council_room was not correct. Expected 467, got 92
FAIL: Hand count after playing council_room was not correct. Expected 467, got 124
FAIL: Hand count after playing council_room was not correct. Expected 467, got 479
FAIL: Hand count after playing council_room was not correct. Expected 133, got 135
FAIL: Hand count after playing council_room was not correct. Expected 135, got 405
FAIL: Hand count after playing council_room was not correct. Expected 135, got 166
FAIL: Hand count after playing council_room was not correct. Expected 135, got 394
FAIL: Hand count after playing council_room was not correct. Expected 81, got 83
FAIL: Hand count after playing council_room was not correct. Expected 83, got 334
FAIL: Hand count after playing council_room was not correct. Expected 83, got 25
FAIL: Hand count after playing council_room was not correct. Expected 83, got 131
FAIL: Hand count after playing council_room was not correct. Expected 244, got 246
FAIL: Hand count after playing council_room was not correct. Expected 246, got 326
FAIL: Hand count after playing council_room was not correct. Expected 246, got 206
FAIL: Hand count after playing council_room was not correct. Expected 246, got 289
FAIL: Hand count after playing council_room was not correct. Expected 128, got 130
FAIL: Hand count after playing council_room was not correct. Expected 130, got 171
FAIL: Hand count after playing council_room was not correct. Expected 130, got 83
FAIL: Hand count after playing council_room was not correct. Expected 130, got 122
FAIL: Hand count after playing council_room was not correct. Expected 28, got 30
FAIL: Hand count after playing council_room was not correct. Expected 30, got 255
FAIL: Hand count after playing council_room was not correct. Expected 30, got 398
FAIL: Hand count after playing council_room was not correct. Expected 30, got 410
FAIL: Hand count after playing council_room was not correct. Expected 422, got 424
FAIL: Hand count after playing council_room was not correct. Expected 424, got 58
FAIL: Hand count after playing council_room was not correct. Expected 424, got 335
FAIL: Hand count after playing council_room was not correct. Expected 424, got 131
FAIL: Hand count after playing council_room was not correct. Expected 273, got 275
FAIL: Hand count after playing council_room was not correct. Expected 275, got 394
FAIL: Hand count after playing council_room was not correct. Expected 275, got 25
FAIL: Hand count after playing council_room was not correct. Expected 275, got 478
FAIL: Hand count after playing council_room was not correct. Expected 351, got 353
FAIL: Hand count after playing council_room was not correct. Expected 353, got 40
FAIL: Hand count after playing council_room was not correct. Expected 353, got 85
FAIL: Hand count after playing council_room was not correct. Expected 353, got 28
FAIL: Hand count after playing council_room was not correct. Expected 37, got 39
FAIL: Hand count after playing council_room was not correct. Expected 39, got 433
FAIL: Hand count after playing council_room was not correct. Expected 39, got 18
FAIL: Hand count after playing council_room was not correct. Expected 39, got 61
FAIL: Hand count after playing council_room was not correct. Expected 461, got 463
FAIL: Hand count after playing council_room was not correct. Expected 463, got 244
FAIL: Hand count after playing council_room was not correct. Expected 463, got 224
FAIL: Hand count after playing council_room was not correct. Expected 463, got 267
FAIL: Hand count after playing council_room was not correct. Expected 478, got 480
FAIL: Hand count after playing council_room was not correct. Expected 480, got 487
FAIL: Hand count after playing council_room was not correct. Expected 480, got 284
FAIL: Hand count after playing council_room was not correct. Expected 480, got 75
FAIL: Hand count after playing council_room was not correct. Expected 97, got 99
FAIL: Hand count after playing council_room was not correct. Expected 99, got 460
FAIL: Hand count after playing council_room was not correct. Expected 99, got 47
FAIL: Hand count after playing council_room was not correct. Expected 99, got 390
FAIL: Hand count after playing council_room was not correct. Expected 143, got 145
FAIL: Hand count after playing council_room was not correct. Expected 145, got 388
FAIL: Hand count after playing council_room was not correct. Expected 145, got 129
FAIL: Hand count after playing council_room was not correct. Expected 145, got 6
FAIL: Hand count after playing council_room was not correct. Expected 499, got 501
FAIL: Hand count after playing council_room was not correct. Expected 501, got 300
FAIL: Hand count after playing council_room was not correct. Expected 501, got 195
FAIL: Hand count after playing council_room was not correct. Expected 501, got 498
FAIL: Hand count after playing council_room was not correct. Expected 8, got 10
FAIL: Hand count after playing council_room was not correct. Expected 10, got 214
FAIL: Hand count after playing council_room was not correct. Expected 10, got 94
FAIL: Hand count after playing council_room was not correct. Expected 10, got 169
FAIL: Hand count after playing council_room was not correct. Expected 96, got 98
FAIL: Hand count after playing council_room was not correct. Expected 98, got 289
FAIL: Hand count after playing council_room was not correct. Expected 98, got 443
FAIL: Hand count after playing council_room was not correct. Expected 98, got 150
FAIL: Hand count after playing council_room was not correct. Expected 493, got 495
FAIL: Hand count after playing council_room was not correct. Expected 495, got 361
FAIL: Hand count after playing council_room was not correct. Expected 495, got 351
FAIL: Hand count after playing council_room was not correct. Expected 495, got 264
FAIL: Hand count after playing council_room was not correct. Expected 208, got 210
FAIL: Hand count after playing council_room was not correct. Expected 210, got 474
FAIL: Hand count after playing council_room was not correct. Expected 210, got 15
FAIL: Hand count after playing council_room was not correct. Expected 210, got 455
FAIL: Hand count after playing council_room was not correct. Expected 95, got 97
FAIL: Hand count after playing council_room was not correct. Expected 97, got 188
FAIL: Hand count after playing council_room was not correct. Expected 97, got 373
FAIL: Hand count after playing council_room was not correct. Expected 97, got 76
FAIL: Hand count after playing council_room was not correct. Expected 376, got 378
FAIL: Hand count after playing council_room was not correct. Expected 378, got 197
FAIL: Hand count after playing council_room was not correct. Expected 378, got 237
FAIL: Hand count after playing council_room was not correct. Expected 378, got 388
FAIL: Hand count after playing council_room was not correct. Expected 239, got 241
FAIL: Hand count after playing council_room was not correct. Expected 241, got 193
FAIL: Hand count after playing council_room was not correct. Expected 241, got 283
FAIL: Hand count after playing council_room was not correct. Expected 241, got 284
FAIL: Hand count after playing council_room was not correct. Expected 44, got 46
FAIL: Hand count after playing council_room was not correct. Expected 46, got 343
FAIL: Hand count after playing council_room was not correct. Expected 46, got 482
FAIL: Hand count after playing council_room was not correct. Expected 46, got 179
FAIL: Hand count after playing council_room was not correct. Expected 42, got 44
FAIL: Hand count after playing council_room was not correct. Expected 44, got 66
FAIL: Hand count after playing council_room was not correct. Expected 44, got 493
FAIL: Hand count after playing council_room was not correct. Expected 44, got 239
FAIL: Hand count after playing council_room was not correct. Expected 223, got 225
FAIL: Hand count after playing council_room was not correct. Expected 225, got 337
FAIL: Hand count after playing council_room was not correct. Expected 225, got 89
FAIL: Hand count after playing council_room was not correct. Expected 225, got 157
FAIL: Hand count after playing council_room was not correct. Expected 377, got 379
FAIL: Hand count after playing council_room was not correct. Expected 379, got 308
FAIL: Hand count after playing council_room was not correct. Expected 379, got 367
FAIL: Hand count after playing council_room was not correct. Expected 379, got 172
FAIL: Hand count after playing council_room was not correct. Expected 27, got 29
FAIL: Hand count after playing council_room was not correct. Expected 29, got 475
FAIL: Hand count after playing council_room was not correct. Expected 29, got 467
FAIL: Hand count after playing council_room was not correct. Expected 29, got 296
FAIL: Hand count after playing council_room was not correct. Expected 68, got 70
FAIL: Hand count after playing council_room was not correct. Expected 70, got 51
FAIL: Hand count after playing council_room was not correct. Expected 70, got 216
FAIL: Hand count after playing council_room was not correct. Expected 70, got 429
FAIL: Hand count after playing council_room was not correct. Expected 466, got 468
FAIL: Hand count after playing council_room was not correct. Expected 468, got 472
FAIL: Hand count after playing council_room was not correct. Expected 468, got 217
FAIL: Hand count after playing council_room was not correct. Expected 468, got 337
FAIL: Hand count after playing council_room was not correct. Expected 395, got 397
FAIL: Hand count after playing council_room was not correct. Expected 397, got 359
FAIL: Hand count after playing council_room was not correct. Expected 397, got 63
FAIL: Hand count after playing council_room was not correct. Expected 397, got 151
FAIL: Hand count after playing council_room was not correct. Expected 127, got 129
FAIL: Hand count after playing council_room was not correct. Expected 129, got 72
FAIL: Hand count after playing council_room was not correct. Expected 129, got 303
FAIL: Hand count after playing council_room was not correct. Expected 129, got 472
FAIL: Hand count after playing council_room was not correct. Expected 117, got 119
FAIL: Hand count after playing council_room was not correct. Expected 119, got 291
FAIL: Hand count after playing council_room was not correct. Expected 119, got 297
FAIL: Hand count after playing council_room was not correct. Expected 119, got 237
FAIL: Hand count after playing council_room was not correct. Expected 343, got 345
FAIL: Hand count after playing council_room was not correct. Expected 345, got 18
FAIL: Hand count after playing council_room was not correct. Expected 345, got 387
FAIL: Hand count after playing council_room was not correct. Expected 345, got 489
FAIL: Hand count after playing council_room was not correct. Expected 221, got 223
FAIL: Hand count after playing council_room was not correct. Expected 223, got 103
FAIL: Hand count after playing council_room was not correct. Expected 223, got 429
FAIL: Hand count after playing council_room was not correct. Expected 223, got 3
FAIL: Hand count after playing council_room was not correct. Expected 41, got 43
FAIL: Hand count after playing council_room was not correct. Expected 43, got 379
FAIL: Hand count after playing council_room was not correct. Expected 43, got 27
FAIL: Hand count after playing council_room was not correct. Expected 43, got 429
FAIL: Hand count after playing council_room was not correct. Expected 133, got 135
FAIL: Hand count after playing council_room was not correct. Expected 135, got 490
FAIL: Hand count after playing council_room was not correct. Expected 135, got 340
FAIL: Hand count after playing council_room was not correct. Expected 135, got 262
FAIL: Hand count after playing council_room was not correct. Expected 69, got 71
FAIL: Hand count after playing council_room was not correct. Expected 71, got 298
FAIL: Hand count after playing council_room was not correct. Expected 71, got 19
FAIL: Hand count after playing council_room was not correct. Expected 71, got 35
FAIL: Hand count after playing council_room was not correct. Expected 293, got 295
FAIL: Hand count after playing council_room was not correct. Expected 295, got 124
FAIL: Hand count after playing council_room was not correct. Expected 295, got 78
FAIL: Hand count after playing council_room was not correct. Expected 295, got 415
FAIL: Hand count after playing council_room was not correct. Expected 495, got 497
FAIL: Hand count after playing council_room was not correct. Expected 497, got 207
FAIL: Hand count after playing council_room was not correct. Expected 497, got 315
FAIL: Hand count after playing council_room was not correct. Expected 497, got 161
FAIL: Hand count after playing council_room was not correct. Expected 147, got 149
FAIL: Hand count after playing council_room was not correct. Expected 149, got 329
FAIL: Hand count after playing council_room was not correct. Expected 149, got 369
FAIL: Hand count after playing council_room was not correct. Expected 149, got 403
FAIL: Hand count after playing council_room was not correct. Expected 340, got 342
FAIL: Hand count after playing council_room was not correct. Expected 342, got 491
FAIL: Hand count after playing council_room was not correct. Expected 342, got 486
FAIL: Hand count after playing council_room was not correct. Expected 342, got 301
FAIL: Hand count after playing council_room was not correct. Expected 299, got 301
FAIL: Hand count after playing council_room was not correct. Expected 301, got 272
FAIL: Hand count after playing council_room was not correct. Expected 301, got 261
FAIL: Hand count after playing council_room was not correct. Expected 301, got 447
FAIL: Hand count after playing council_room was not correct. Expected 223, got 225
FAIL: Hand count after playing council_room was not correct. Expected 225, got 388
FAIL: Hand count after playing council_room was not correct. Expected 225, got 243
FAIL: Hand count after playing council_room was not correct. Expected 225, got 234
FAIL: Hand count after playing council_room was not correct. Expected 388, got 390
FAIL: Hand count after playing council_room was not correct. Expected 390, got 433
FAIL: Hand count after playing council_room was not correct. Expected 390, got 477
FAIL: Hand count after playing council_room was not correct. Expected 390, got 263
FAIL: Hand count after playing council_room was not correct. Expected 349, got 351
FAIL: Hand count after playing council_room was not correct. Expected 351, got 472
FAIL: Hand count after playing council_room was not correct. Expected 351, got 47
FAIL: Hand count after playing council_room was not correct. Expected 351, got 459
FAIL: Hand count after playing council_room was not correct. Expected 329, got 331
FAIL: Hand count after playing council_room was not correct. Expected 331, got 414
FAIL: Hand count after playing council_room was not correct. Expected 331, got 299
FAIL: Hand count after playing council_room was not correct. Expected 331, got 20
FAIL: Hand count after playing council_room was not correct. Expected 480, got 482
FAIL: Hand count after playing council_room was not correct. Expected 482, got 65
FAIL: Hand count after playing council_room was not correct. Expected 482, got 15
FAIL: Hand count after playing council_room was not correct. Expected 482, got 143
FAIL: Hand count after playing council_room was not correct. Expected 130, got 132
FAIL: Hand count after playing council_room was not correct. Expected 132, got 398
FAIL: Hand count after playing council_room was not correct. Expected 132, got 97
FAIL: Hand count after playing council_room was not correct. Expected 132, got 50
FAIL: Hand count after playing council_room was not correct. Expected 226, got 228
FAIL: Hand count after playing council_room was not correct. Expected 228, got 70
FAIL: Hand count after playing council_room was not correct. Expected 228, got 350
FAIL: Hand count after playing council_room was not correct. Expected 228, got 290
FAIL: Hand count after playing council_room was not correct. Expected 72, got 74
FAIL: Hand count after playing council_room was not correct. Expected 74, got 75
FAIL: Hand count after playing council_room was not correct. Expected 74, got 109
FAIL: Hand count after playing council_room was not correct. Expected 74, got 215
FAIL: Hand count after playing council_room was not correct. Expected 194, got 196
FAIL: Hand count after playing council_room was not correct. Expected 196, got 362
FAIL: Hand count after playing council_room was not correct. Expected 196, got 54
FAIL: Hand count after playing council_room was not correct. Expected 196, got 486
FAIL: Hand count after playing council_room was not correct. Expected 420, got 422
FAIL: Hand count after playing council_room was not correct. Expected 422, got 482
FAIL: Hand count after playing council_room was not correct. Expected 422, got 260
FAIL: Hand count after playing council_room was not correct. Expected 422, got 451
FAIL: Hand count after playing council_room was not correct. Expected 187, got 189
FAIL: Hand count after playing council_room was not correct. Expected 189, got 214
FAIL: Hand count after playing council_room was not correct. Expected 189, got 215
FAIL: Hand count after playing council_room was not correct. Expected 189, got 193
FAIL: Hand count after playing council_room was not correct. Expected 218, got 220
FAIL: Hand count after playing council_room was not correct. Expected 220, got 17
FAIL: Hand count after playing council_room was not correct. Expected 220, got 325
FAIL: Hand count after playing council_room was not correct. Expected 220, got 282
FAIL: Hand count after playing council_room was not correct. Expected 69, got 71
FAIL: Hand count after playing council_room was not correct. Expected 71, got 393
FAIL: Hand count after playing council_room was not correct. Expected 71, got 496
FAIL: Hand count after playing council_room was not correct. Expected 71, got 235
FAIL: Hand count after playing council_room was not correct. Expected 231, got 233
FAIL: Hand count after playing council_room was not correct. Expected 233, got 175
FAIL: Hand count after playing council_room was not correct. Expected 233, got 183
FAIL: Hand count after playing council_room was not correct. Expected 233, got 389
FAIL: Hand count after playing council_room was not correct. Expected 282, got 284
FAIL: Hand count after playing council_room was not correct. Expected 284, got 151
FAIL: Hand count after playing council_room was not correct. Expected 284, got 388
FAIL: Hand count after playing council_room was not correct. Expected 284, got 249
FAIL: Hand count after playing council_room was not correct. Expected 151, got 153
FAIL: Hand count after playing council_room was not correct. Expected 153, got 219
FAIL: Hand count after playing council_room was not correct. Expected 153, got 486
FAIL: Hand count after playing council_room was not correct. Expected 153, got 78
FAIL: Hand count after playing council_room was not correct. Expected 496, got 498
FAIL: Hand count after playing council_room was not correct. Expected 498, got 250
FAIL: Hand count after playing council_room was not correct. Expected 498, got 405
FAIL: Hand count after playing council_room was not correct. Expected 498, got 85
FAIL: Hand count after playing council_room was not correct. Expected 36, got 38
FAIL: Hand count after playing council_room was not correct. Expected 38, got 12
FAIL: Hand count after playing council_room was not correct. Expected 38, got 315
FAIL: Hand count after playing council_room was not correct. Expected 38, got 449
FAIL: Hand count after playing council_room was not correct. Expected 408, got 410
FAIL: Hand count after playing council_room was not correct. Expected 410, got 202
FAIL: Hand count after playing council_room was not correct. Expected 410, got 87
FAIL: Hand count after playing council_room was not correct. Expected 410, got 302
FAIL: Hand count after playing council_room was not correct. Expected 21, got 23
FAIL: Hand count after playing council_room was not correct. Expected 23, got 9
FAIL: Hand count after playing council_room was not correct. Expected 23, got 26
FAIL: Hand count after playing council_room was not correct. Expected 23, got 216
FAIL: Hand count after playing council_room was not correct. Expected 343, got 345
FAIL: Hand count after playing council_room was not correct. Expected 345, got 51
FAIL: Hand count after playing council_room was not correct. Expected 345, got 332
FAIL: Hand count after playing council_room was not correct. Expected 345, got 265
FAIL: Hand count after playing council_room was not correct. Expected 447, got 449
FAIL: Hand count after playing council_room was not correct. Expected 449, got 120
FAIL: Hand count after playing council_room was not correct. Expected 449, got 154
FAIL: Hand count after playing council_room was not correct. Expected 449, got 178
FAIL: Hand count after playing council_room was not correct. Expected 94, got 96
FAIL: Hand count after playing council_room was not correct. Expected 96, got 222
FAIL: Hand count after playing council_room was not correct. Expected 96, got 443
FAIL: Hand count after playing council_room was not correct. Expected 96, got 330
FAIL: Hand count after playing council_room was not correct. Expected 394, got 396
FAIL: Hand count after playing council_room was not correct. Expected 396, got 171
FAIL: Hand count after playing council_room was not correct. Expected 396, got 122
FAIL: Hand count after playing council_room was not correct. Expected 396, got 413
FAIL: Hand count after playing council_room was not correct. Expected 45, got 47
FAIL: Hand count after playing council_room was not correct. Expected 47, got 106
FAIL: Hand count after playing council_room was not correct. Expected 47, got 256
FAIL: Hand count after playing council_room was not correct. Expected 47, got 339
FAIL: Hand count after playing council_room was not correct. Expected 199, got 201
FAIL: Hand count after playing council_room was not correct. Expected 201, got 476
FAIL: Hand count after playing council_room was not correct. Expected 201, got 496
FAIL: Hand count after playing council_room was not correct. Expected 201, got 180
FAIL: Hand count after playing council_room was not correct. Expected 99, got 101
FAIL: Hand count after playing council_room was not correct. Expected 101, got 45
FAIL: Hand count after playing council_room was not correct. Expected 101, got 261
FAIL: Hand count after playing council_room was not correct. Expected 101, got 464
FAIL: Hand count after playing council_room was not correct. Expected 462, got 464
FAIL: Hand count after playing council_room was not correct. Expected 464, got 398
FAIL: Hand count after playing council_room was not correct. Expected 464, got 96
FAIL: Hand count after playing council_room was not correct. Expected 464, got 398
FAIL: Hand count after playing council_room was not correct. Expected 166, got 168
FAIL: Hand count after playing council_room was not correct. Expected 168, got 108
FAIL: Hand count after playing council_room was not correct. Expected 168, got 321
FAIL: Hand count after playing council_room was not correct. Expected 168, got 84
FAIL: Hand count after playing council_room was not correct. Expected 209, got 211
FAIL: Hand count after playing council_room was not correct. Expected 211, got 290
FAIL: Hand count after playing council_room was not correct. Expected 211, got 302
FAIL: Hand count after playing council_room was not correct. Expected 211, got 405
FAIL: Hand count after playing council_room was not correct. Expected 349, got 351
FAIL: Hand count after playing council_room was not correct. Expected 351, got 212
FAIL: Hand count after playing council_room was not correct. Expected 351, got 450
FAIL: Hand count after playing council_room was not correct. Expected 351, got 164
FAIL: Hand count after playing council_room was not correct. Expected 281, got 283
FAIL: Hand count after playing council_room was not correct. Expected 283, got 291
FAIL: Hand count after playing council_room was not correct. Expected 283, got 448
FAIL: Hand count after playing council_room was not correct. Expected 283, got 379
FAIL: Hand count after playing council_room was not correct. Expected 304, got 306
FAIL: Hand count after playing council_room was not correct. Expected 306, got 347
FAIL: Hand count after playing council_room was not correct. Expected 306, got 170
FAIL: Hand count after playing council_room was not correct. Expected 306, got 390
FAIL: Hand count after playing council_room was not correct. Expected 346, got 348
FAIL: Hand count after playing council_room was not correct. Expected 348, got 171
FAIL: Hand count after playing council_room was not correct. Expected 348, got 93
FAIL: Hand count after playing council_room was not correct. Expected 348, got 122
File 'dominion.c'
Lines executed:34.94% of 561
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:91
        -:    0:Programs:86
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      300:    8:int compare(const void* a, const void* b) {
      300:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      300:   11:  if (*(int*)a < *(int*)b)
       80:   12:    return -1;
      220:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       10:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       10:   44:  SelectStream(1);
       10:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       10:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       10:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      110:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1100:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       10:   73:  if (numPlayers == 2)
        -:   74:    {
       10:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       10:   87:  if (numPlayers == 2)
        -:   88:    {
       10:   89:      state->supplyCount[estate] = 8;
       10:   90:      state->supplyCount[duchy] = 8;
       10:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       10:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  102:  state->supplyCount[silver] = 40;
       10:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      210:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1650:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1550:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      100:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      100:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      100:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1450:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       30:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       20:  140:      state->deckCount[i] = 0;
       80:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       60:  143:	  state->deck[i][j] = estate;
       60:  144:	  state->deckCount[i]++;
        -:  145:	}
      160:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      140:  148:	  state->deck[i][j] = copper;
      140:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       30:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       20:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       30:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       20:  166:      state->handCount[i] = 0;
       20:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      280:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      270:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       10:  182:  state->outpostPlayed = 0;
       10:  183:  state->phase = 0;
       10:  184:  state->numActions = 1;
       10:  185:  state->numBuys = 1;
       10:  186:  state->playedCardCount = 0;
       10:  187:  state->whoseTurn = 0;
       10:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       60:  192:  for (it = 0; it < 5; it++){
       50:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       10:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       10:  198:  return 0;
        -:  199:}
        -:  200:
       20:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       20:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       20:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       20:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      240:  214:  while (state->deckCount[player] > 0) {
      200:  215:    card = floor(Random() * state->deckCount[player]);
      200:  216:    newDeck[newDeckPos] = state->deck[player][card];
      200:  217:    newDeckPos++;
      720:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      520:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      200:  221:    state->deckCount[player]--;
        -:  222:  }
      220:  223:  for (i = 0; i < newDeckPos; i++) {
      200:  224:    state->deck[player][i] = newDeck[i];
      200:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       20:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
      168:  311:int numHandCards(struct gameState *state) {
      168:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    74178:  346:int whoseTurn(struct gameState *state) {
    74178:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    14028:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    14028:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
     1666:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    12362:  401:  j = 0;
   321412:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
   309050:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    37044:  406:	  j++;
        -:  407:	}
        -:  408:    }
    12362:  409:  if ( j >= 3)
        -:  410:    {
    12348:  411:      return 1;
        -:  412:    }
        -:  413:
       14:  414:  return 0;
        -:  415:}
        -:  416:
       40:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       40:  420:  int score = 0;
        -:  421:  //score from hand
      160:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
      120:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
      120:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
      120:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
      120:  427:      if (state->hand[player][i] == province) { score = score + 6; };
      120:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      120:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       40:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       40:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
       40:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   226070:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   226070:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   226070:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   226070:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   226070:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   226070:  576:    state->deckCount[player]--;
   226070:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   226070:  580:  return 0;
        -:  581:}
        -:  582:
      490:  583:int getCost(int cardNumber)
        -:  584:{
      490:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
       14:  588:      return 0;
        -:  589:    case estate:
       14:  590:      return 2;
        -:  591:    case duchy:
       14:  592:      return 5;
        -:  593:    case province:
       14:  594:      return 8;
        -:  595:    case copper:
       14:  596:      return 0;
        -:  597:    case silver:
       14:  598:      return 3;
        -:  599:    case gold:
       14:  600:      return 6;
        -:  601:    case adventurer:
       14:  602:      return 6;
        -:  603:    case council_room:
       14:  604:      return 5;
        -:  605:    case feast:
       14:  606:      return 4;
        -:  607:    case gardens:
       14:  608:      return 4;
        -:  609:    case mine:
       14:  610:      return 5;
        -:  611:    case remodel:
       14:  612:      return 4;
        -:  613:    case smithy:
       14:  614:      return 4;
        -:  615:    case village:
       14:  616:      return 3;
        -:  617:    case baron:
       14:  618:      return 4;
        -:  619:    case great_hall:
       14:  620:      return 3;
        -:  621:    case minion:
       14:  622:      return 5;
        -:  623:    case steward:
       14:  624:      return 3;
        -:  625:    case tribute:
       14:  626:      return 5;
        -:  627:    case ambassador:
       14:  628:      return 3;
        -:  629:    case cutpurse:
       14:  630:      return 4;
        -:  631:    case embargo:
       14:  632:      return 2;
        -:  633:    case outpost:
       14:  634:      return 5;
        -:  635:    case salvager:
       14:  636:      return 4;
        -:  637:    case sea_hag:
       14:  638:      return 4;
        -:  639:    case treasure_map:
       14:  640:      return 4;
        -:  641:    }
        -:  642:
      112:  643:  return -1;
        -:  644:}
        -:  645:
       10:  646:void adventurer_action (int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z) {
       40:  647:    while(drawntreasure<2){
       20:  648:        if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:            shuffle(currentPlayer, state);
        -:  650:        }
       20:  651:        drawCard(currentPlayer, state);
       20:  652:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       20:  653:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       20:  654:          drawntreasure++;
        -:  655:        else{
    #####:  656:          temphand[z]=cardDrawn;
    #####:  657:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  658:        }
        -:  659:  }
       20:  660:  while(z-1>=0){
    #####:  661:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  662:      z=z-1;
        -:  663:  }
       10:  664:}
        -:  665:
    48000:  666:void smithy_action (int currentPlayer, struct gameState *state, int i, int handPos) {
        -:  667:  //+3 Cards
   192000:  668:  for (i = 0; i < 3; i++) {
   144000:  669:    drawCard(currentPlayer, state);
        -:  670:  }
        -:  671:
        -:  672:  //discard card from hand
    48000:  673:  discardCard(handPos, currentPlayer, state, 0);
    48000:  674:}
        -:  675:
    #####:  676:void village_action (int currentPlayer, struct gameState *state, int handPos) {
        -:  677:  //+1 Card
    #####:  678:  drawCard(currentPlayer, state);
        -:  679:
        -:  680:  //+2 Actions
    #####:  681:  state->numActions = state->numActions + 2;
        -:  682:
        -:  683:  //discard played card from hand
    #####:  684:  discardCard(handPos, currentPlayer, state, 0);
    #####:  685:}
        -:  686:
    14000:  687:void council_room_action (int i, int currentPlayer, struct gameState *state) {
        -:  688:  //+4 Cards
    70000:  689:  for (i = 0; i < 4; i++) {
    56000:  690:      drawCard(currentPlayer, state);
        -:  691:  }
        -:  692:
        -:  693:  //+1 Buy
    14000:  694:  state->numBuys++;
        -:  695:
        -:  696:  //Each other player draws a card
    70000:  697:  for (i = 0; i < state->numPlayers; i++) {
    56000:  698:      if ( i == currentPlayer ) {
    14000:  699:          drawCard(i, state);
        -:  700:      }
        -:  701:  }
    14000:  702:}
        -:  703:
    #####:  704:int mine_action (int j, struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos, int i) {
    #####:  705:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  706:
    #####:  707:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
    #####:  708:      return -1;
        -:  709:  }
        -:  710:
    #####:  711:  if (choice2 > treasure_map || choice2 < curse) {
    #####:  712:      return -1;
        -:  713:  }
        -:  714:
    #####:  715:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
    #####:  716:      return -1;
        -:  717:  }
        -:  718:
    #####:  719:  gainCard(choice2, state, 2, currentPlayer);
        -:  720:
        -:  721:  //discard card from hand
    #####:  722:  discardCard(handPos, currentPlayer, state, 0);
        -:  723:
        -:  724:  //discard trashed card
    #####:  725:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  726:      if (state->hand[currentPlayer][i] == j) {
    #####:  727:        discardCard(i, currentPlayer, state, 0);
    #####:  728:        break;
        -:  729:      }
        -:  730:  }
        -:  731:
    #####:  732:  return -1;
        -:  733:}
        -:  734:
    74010:  735:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  736:{
        -:  737:  int i;
        -:  738:  int j;
        -:  739:  int k;
        -:  740:  int x;
        -:  741:  int m;
        -:  742:  int index;
    74010:  743:  int currentPlayer = whoseTurn(state);
    74010:  744:  int nextPlayer = currentPlayer + 1;
        -:  745:
    74010:  746:  int tributeRevealedCards[2] = {-1, -1};
        -:  747:  int temphand[MAX_HAND];// moved above the if statement
    74010:  748:  int drawntreasure=0;
        -:  749:  int cardDrawn;
    74010:  750:  int z = 0;// this is the counter for the temp hand
    74010:  751:  if (nextPlayer > (state->numPlayers - 1)){
    51500:  752:    nextPlayer = 0;
        -:  753:  }
        -:  754:
        -:  755:
        -:  756:  //uses switch to select card and perform actions
    74010:  757:  switch( card )
        -:  758:    {
        -:  759:    case adventurer:
       10:  760:      adventurer_action (drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
       10:  761:      return 0;
        -:  762:
        -:  763:    case council_room:
    14000:  764:      council_room_action (i, currentPlayer, state);
    14000:  765:      return 0;
        -:  766:
        -:  767:    case feast:
        -:  768:      //gain card with cost up to 5
        -:  769:      //Backup hand
    #####:  770:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  771:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  772:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  773:      }
        -:  774:      //Backup hand
        -:  775:
        -:  776:      //Update Coins for Buy
    #####:  777:      updateCoins(currentPlayer, state, 5);
    #####:  778:      x = 1;//Condition to loop on
    #####:  779:      while( x == 1) {//Buy one card
    #####:  780:	if (supplyCount(choice1, state) <= 0){
        -:  781:	  if (DEBUG)
        -:  782:	    printf("None of that card left, sorry!\n");
        -:  783:
        -:  784:	  if (DEBUG){
        -:  785:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  786:	  }
        -:  787:	}
    #####:  788:	else if (state->coins < getCost(choice1)){
    #####:  789:	  printf("That card is too expensive!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  793:	  }
        -:  794:	}
        -:  795:	else{
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  799:	  }
        -:  800:
    #####:  801:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  802:	  x = 0;//No more buying cards
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
        -:  808:	}
        -:  809:      }
        -:  810:
        -:  811:      //Reset Hand
    #####:  812:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  813:	state->hand[currentPlayer][i] = temphand[i];
    #####:  814:	temphand[i] = -1;
        -:  815:      }
        -:  816:      //Reset Hand
        -:  817:
    #####:  818:      return 0;
        -:  819:
        -:  820:    case gardens:
    #####:  821:      return -1;
        -:  822:
        -:  823:    case mine:
    #####:  824:      m = mine_action (j, state, currentPlayer, choice1, choice2, handPos, i);
    #####:  825:      return m;
        -:  826:
        -:  827:    case remodel:
    #####:  828:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  829:
    #####:  830:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  831:	{
    #####:  832:	  return -1;
        -:  833:	}
        -:  834:
    #####:  835:      gainCard(choice2, state, 0, currentPlayer);
        -:  836:
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:
        -:  840:      //discard trashed card
    #####:  841:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  842:	{
    #####:  843:	  if (state->hand[currentPlayer][i] == j)
        -:  844:	    {
    #####:  845:	      discardCard(i, currentPlayer, state, 0);
    #####:  846:	      break;
        -:  847:	    }
        -:  848:	}
        -:  849:
        -:  850:
    #####:  851:      return 0;
        -:  852:
        -:  853:    case smithy:
    48000:  854:      smithy_action (currentPlayer, state, i, handPos);
    48000:  855:      return 0;
        -:  856:
        -:  857:    case village:
    #####:  858:      village_action (currentPlayer, state, handPos);
    #####:  859:      return 0;
        -:  860:
        -:  861:    case baron:
    #####:  862:      state->numBuys++;//Increase buys by 1!
    #####:  863:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  864:	int p = 0;//Iterator for hand!
    #####:  865:	int card_not_discarded = 1;//Flag for discard set!
    #####:  866:	while(card_not_discarded){
    #####:  867:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  868:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  869:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  870:	    state->discardCount[currentPlayer]++;
    #####:  871:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  872:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  873:	    }
    #####:  874:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  875:	    state->handCount[currentPlayer]--;
    #####:  876:	    card_not_discarded = 0;//Exit the loop
        -:  877:	  }
    #####:  878:	  else if (p > state->handCount[currentPlayer]){
        -:  879:	    if(DEBUG) {
        -:  880:	      printf("No estate cards in your hand, invalid choice\n");
        -:  881:	      printf("Must gain an estate if there are any\n");
        -:  882:	    }
    #####:  883:	    if (supplyCount(estate, state) > 0){
    #####:  884:	      gainCard(estate, state, 0, currentPlayer);
    #####:  885:	      state->supplyCount[estate]--;//Decrement estates
    #####:  886:	      if (supplyCount(estate, state) == 0){
    #####:  887:		isGameOver(state);
        -:  888:	      }
        -:  889:	    }
    #####:  890:	    card_not_discarded = 0;//Exit the loop
        -:  891:	  }
        -:  892:
        -:  893:	  else{
    #####:  894:	    p++;//Next card
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:
        -:  899:      else{
    #####:  900:	if (supplyCount(estate, state) > 0){
    #####:  901:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  902:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  903:	  if (supplyCount(estate, state) == 0){
    #####:  904:	    isGameOver(state);
        -:  905:	  }
        -:  906:	}
        -:  907:      }
        -:  908:
        -:  909:
    #####:  910:      return 0;
        -:  911:
        -:  912:    case great_hall:
        -:  913:      //+1 Card
    12000:  914:      drawCard(currentPlayer, state);
        -:  915:
        -:  916:      //+1 Actions
    12000:  917:      state->numActions++;
        -:  918:
        -:  919:      //discard card from hand
    12000:  920:      discardCard(handPos, currentPlayer, state, 0);
    12000:  921:      return 0;
        -:  922:
        -:  923:    case minion:
        -:  924:      //+1 action
    #####:  925:      state->numActions++;
        -:  926:
        -:  927:      //discard card from hand
    #####:  928:      discardCard(handPos, currentPlayer, state, 0);
        -:  929:
    #####:  930:      if (choice1)		//+2 coins
        -:  931:	{
    #####:  932:	  state->coins = state->coins + 2;
        -:  933:	}
        -:  934:
    #####:  935:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  936:	{
        -:  937:	  //discard hand
    #####:  938:	  while(numHandCards(state) > 0)
        -:  939:	    {
    #####:  940:	      discardCard(handPos, currentPlayer, state, 0);
        -:  941:	    }
        -:  942:
        -:  943:	  //draw 4
    #####:  944:	  for (i = 0; i < 4; i++)
        -:  945:	    {
    #####:  946:	      drawCard(currentPlayer, state);
        -:  947:	    }
        -:  948:
        -:  949:	  //other players discard hand and redraw if hand size > 4
    #####:  950:	  for (i = 0; i < state->numPlayers; i++)
        -:  951:	    {
    #####:  952:	      if (i != currentPlayer)
        -:  953:		{
    #####:  954:		  if ( state->handCount[i] > 4 )
        -:  955:		    {
        -:  956:		      //discard hand
    #####:  957:		      while( state->handCount[i] > 0 )
        -:  958:			{
    #####:  959:			  discardCard(handPos, i, state, 0);
        -:  960:			}
        -:  961:
        -:  962:		      //draw 4
    #####:  963:		      for (j = 0; j < 4; j++)
        -:  964:			{
    #####:  965:			  drawCard(i, state);
        -:  966:			}
        -:  967:		    }
        -:  968:		}
        -:  969:	    }
        -:  970:
        -:  971:	}
    #####:  972:      return 0;
        -:  973:
        -:  974:    case steward:
    #####:  975:      if (choice1 == 1)
        -:  976:	{
        -:  977:	  //+2 cards
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
    #####:  981:      else if (choice1 == 2)
        -:  982:	{
        -:  983:	  //+2 coins
    #####:  984:	  state->coins = state->coins + 2;
        -:  985:	}
        -:  986:      else
        -:  987:	{
        -:  988:	  //trash 2 cards in hand
    #####:  989:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  990:	  discardCard(choice3, currentPlayer, state, 1);
        -:  991:	}
        -:  992:
        -:  993:      //discard card from hand
    #####:  994:      discardCard(handPos, currentPlayer, state, 0);
    #####:  995:      return 0;
        -:  996:
        -:  997:    case tribute:
    #####:  998:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  999:	if (state->deckCount[nextPlayer] > 0){
    #####: 1000:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1001:	  state->deckCount[nextPlayer]--;
        -: 1002:	}
    #####: 1003:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1004:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1005:	  state->discardCount[nextPlayer]--;
        -: 1006:	}
        -: 1007:	else{
        -: 1008:	  //No Card to Reveal
        -: 1009:	  if (DEBUG){
        -: 1010:	    printf("No cards to reveal\n");
        -: 1011:	  }
        -: 1012:	}
        -: 1013:      }
        -: 1014:
        -: 1015:      else{
    #####: 1016:	if (state->deckCount[nextPlayer] == 0){
    #####: 1017:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1018:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1019:	    state->deckCount[nextPlayer]++;
    #####: 1020:	    state->discard[nextPlayer][i] = -1;
    #####: 1021:	    state->discardCount[nextPlayer]--;
        -: 1022:	  }
        -: 1023:
    #####: 1024:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1025:	}
    #####: 1026:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1028:	state->deckCount[nextPlayer]--;
    #####: 1029:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1030:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1031:	state->deckCount[nextPlayer]--;
        -: 1032:      }
        -: 1033:
    #####: 1034:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1035:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1036:	state->playedCardCount++;
    #####: 1037:	tributeRevealedCards[1] = -1;
        -: 1038:      }
        -: 1039:
    #####: 1040:      for (i = 0; i <= 2; i ++){
    #####: 1041:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1042:	  state->coins += 2;
        -: 1043:	}
        -: 1044:
    #####: 1045:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1046:	  drawCard(currentPlayer, state);
    #####: 1047:	  drawCard(currentPlayer, state);
        -: 1048:	}
        -: 1049:	else{//Action Card
    #####: 1050:	  state->numActions = state->numActions + 2;
        -: 1051:	}
        -: 1052:      }
        -: 1053:
    #####: 1054:      return 0;
        -: 1055:
        -: 1056:    case ambassador:
    #####: 1057:      j = 0;		//used to check if player has enough cards to discard
        -: 1058:
    #####: 1059:      if (choice2 > 2 || choice2 < 0)
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:
    #####: 1064:      if (choice1 == handPos)
        -: 1065:	{
    #####: 1066:	  return -1;
        -: 1067:	}
        -: 1068:
    #####: 1069:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1070:	{
    #####: 1071:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1072:	    {
    #####: 1073:	      j++;
        -: 1074:	    }
        -: 1075:	}
    #####: 1076:      if (j < choice2)
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
        -: 1081:      if (DEBUG)
        -: 1082:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1083:
        -: 1084:      //increase supply count for choosen card by amount being discarded
    #####: 1085:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1086:
        -: 1087:      //each other player gains a copy of revealed card
    #####: 1088:      for (i = 0; i < state->numPlayers; i++)
        -: 1089:	{
    #####: 1090:	  if (i != currentPlayer)
        -: 1091:	    {
    #####: 1092:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1093:	    }
        -: 1094:	}
        -: 1095:
        -: 1096:      //discard played card from hand
    #####: 1097:      discardCard(handPos, currentPlayer, state, 0);
        -: 1098:
        -: 1099:      //trash copies of cards returned to supply
    #####: 1100:      for (j = 0; j < choice2; j++)
        -: 1101:	{
    #####: 1102:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1103:	    {
    #####: 1104:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1105:		{
    #####: 1106:		  discardCard(i, currentPlayer, state, 1);
    #####: 1107:		  break;
        -: 1108:		}
        -: 1109:	    }
        -: 1110:	}
        -: 1111:
    #####: 1112:      return 0;
        -: 1113:
        -: 1114:    case cutpurse:
        -: 1115:
    #####: 1116:      updateCoins(currentPlayer, state, 2);
    #####: 1117:      for (i = 0; i < state->numPlayers; i++)
        -: 1118:	{
    #####: 1119:	  if (i != currentPlayer)
        -: 1120:	    {
    #####: 1121:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1122:		{
    #####: 1123:		  if (state->hand[i][j] == copper)
        -: 1124:		    {
    #####: 1125:		      discardCard(j, i, state, 0);
    #####: 1126:		      break;
        -: 1127:		    }
    #####: 1128:		  if (j == state->handCount[i])
        -: 1129:		    {
    #####: 1130:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1131:			{
        -: 1132:			  if (DEBUG)
        -: 1133:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1134:			}
    #####: 1135:		      break;
        -: 1136:		    }
        -: 1137:		}
        -: 1138:
        -: 1139:	    }
        -: 1140:
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
    #####: 1146:      return 0;
        -: 1147:
        -: 1148:
        -: 1149:    case embargo:
        -: 1150:      //+2 Coins
    #####: 1151:      state->coins = state->coins + 2;
        -: 1152:
        -: 1153:      //see if selected pile is in play
    #####: 1154:      if ( state->supplyCount[choice1] == -1 )
        -: 1155:	{
    #####: 1156:	  return -1;
        -: 1157:	}
        -: 1158:
        -: 1159:      //add embargo token to selected supply pile
    #####: 1160:      state->embargoTokens[choice1]++;
        -: 1161:
        -: 1162:      //trash card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1164:      return 0;
        -: 1165:
        -: 1166:    case outpost:
        -: 1167:      //set outpost flag
    #####: 1168:      state->outpostPlayed++;
        -: 1169:
        -: 1170:      //discard card
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1172:      return 0;
        -: 1173:
        -: 1174:    case salvager:
        -: 1175:      //+1 buy
    #####: 1176:      state->numBuys++;
        -: 1177:
    #####: 1178:      if (choice1)
        -: 1179:	{
        -: 1180:	  //gain coins equal to trashed card
    #####: 1181:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1182:	  //trash card
    #####: 1183:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1184:	}
        -: 1185:
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:    case sea_hag:
    #####: 1191:      for (i = 0; i < state->numPlayers; i++){
    #####: 1192:	if (i != currentPlayer){
    #####: 1193:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1194:	  state->discardCount[i]++;
    #####: 1195:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1196:	}
        -: 1197:      }
    #####: 1198:      return 0;
        -: 1199:
        -: 1200:    case treasure_map:
        -: 1201:      //search hand for another treasure_map
    #####: 1202:      index = -1;
    #####: 1203:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1206:	    {
    #####: 1207:	      index = i;
    #####: 1208:	      break;
        -: 1209:	    }
        -: 1210:	}
    #####: 1211:      if (index > -1)
        -: 1212:	{
        -: 1213:	  //trash both treasure cards
    #####: 1214:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1215:	  discardCard(index, currentPlayer, state, 1);
        -: 1216:
        -: 1217:	  //gain 4 Gold cards
    #####: 1218:	  for (i = 0; i < 4; i++)
        -: 1219:	    {
    #####: 1220:	      gainCard(gold, state, 1, currentPlayer);
        -: 1221:	    }
        -: 1222:
        -: 1223:	  //return success
    #####: 1224:	  return 1;
        -: 1225:	}
        -: 1226:
        -: 1227:      //no second treasure_map found in hand
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:  return -1;
        -: 1232:}
        -: 1233:
    60000: 1234:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1235:{
        -: 1236:
        -: 1237:  //if card is not trashed, added to Played pile
    60000: 1238:  if (trashFlag < 1)
        -: 1239:    {
        -: 1240:      //add card to played pile
    60000: 1241:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    60000: 1242:      state->playedCardCount++;
        -: 1243:    }
        -: 1244:
        -: 1245:  //set played card to -1
    60000: 1246:  state->hand[currentPlayer][handPos] = -1;
        -: 1247:
        -: 1248:  //remove card from player's hand
    60000: 1249:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1250:    {
        -: 1251:      //reduce number of cards in hand
       19: 1252:      state->handCount[currentPlayer]--;
        -: 1253:    }
    59981: 1254:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1255:    {
        -: 1256:      //reduce number of cards in hand
    #####: 1257:      state->handCount[currentPlayer]--;
        -: 1258:    }
        -: 1259:  else
        -: 1260:    {
        -: 1261:      //replace discarded card with last card in hand
    59981: 1262:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1263:      //set last card to -1
    59981: 1264:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1265:      //reduce number of cards in hand
    59981: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
        -: 1268:
    60000: 1269:  return 0;
        -: 1270:}
        -: 1271:
    #####: 1272:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1273:{
        -: 1274:  //Note: supplyPos is enum of choosen card
        -: 1275:
        -: 1276:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1277:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1278:    {
    #####: 1279:      return -1;
        -: 1280:    }
        -: 1281:
        -: 1282:  //added card for [whoseTurn] current player:
        -: 1283:  // toFlag = 0 : add to discard
        -: 1284:  // toFlag = 1 : add to deck
        -: 1285:  // toFlag = 2 : add to hand
        -: 1286:
    #####: 1287:  if (toFlag == 1)
        -: 1288:    {
    #####: 1289:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1290:      state->deckCount[player]++;
        -: 1291:    }
    #####: 1292:  else if (toFlag == 2)
        -: 1293:    {
    #####: 1294:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1295:      state->handCount[player]++;
        -: 1296:    }
        -: 1297:  else
        -: 1298:    {
    #####: 1299:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1300:      state->discardCount[player]++;
        -: 1301:    }
        -: 1302:
        -: 1303:  //decrease number in supply pile
    #####: 1304:  state->supplyCount[supplyPos]--;
        -: 1305:
    #####: 1306:  return 0;
        -: 1307:}
        -: 1308:
      122: 1309:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1310:{
        -: 1311:  int i;
        -: 1312:
        -: 1313:  //reset coin count
      122: 1314:  state->coins = 0;
        -: 1315:
        -: 1316:  //add coins for each Treasure card in player's hand
      172: 1317:  for (i = 0; i < state->handCount[player]; i++)
        -: 1318:    {
       50: 1319:      if (state->hand[player][i] == copper)
        -: 1320:	{
       40: 1321:	  state->coins += 1;
        -: 1322:	}
       10: 1323:      else if (state->hand[player][i] == silver)
        -: 1324:	{
    #####: 1325:	  state->coins += 2;
        -: 1326:	}
       10: 1327:      else if (state->hand[player][i] == gold)
        -: 1328:	{
    #####: 1329:	  state->coins += 3;
        -: 1330:	}
        -: 1331:    }
        -: 1332:
        -: 1333:  //add bonus
      122: 1334:  state->coins += bonus;
        -: 1335:
      122: 1336:  return 0;
        -: 1337:}
        -: 1338:
        -: 1339:
        -: 1340://end of dominion.c
cardtest4.c:
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
Test passed! Returned fine and a new card was added and old was removed. Number of actions also right.
File 'dominion.c'
Lines executed:34.94% of 561
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:92
        -:    0:Programs:87
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      300:    8:int compare(const void* a, const void* b) {
      300:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      300:   11:  if (*(int*)a < *(int*)b)
       80:   12:    return -1;
      220:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       10:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       10:   44:  SelectStream(1);
       10:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       10:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       10:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      110:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1100:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       10:   73:  if (numPlayers == 2)
        -:   74:    {
       10:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       10:   87:  if (numPlayers == 2)
        -:   88:    {
       10:   89:      state->supplyCount[estate] = 8;
       10:   90:      state->supplyCount[duchy] = 8;
       10:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       10:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  102:  state->supplyCount[silver] = 40;
       10:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      210:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1650:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1550:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      100:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      100:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      100:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1450:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       30:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       20:  140:      state->deckCount[i] = 0;
       80:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       60:  143:	  state->deck[i][j] = estate;
       60:  144:	  state->deckCount[i]++;
        -:  145:	}
      160:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      140:  148:	  state->deck[i][j] = copper;
      140:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       30:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       20:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       30:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       20:  166:      state->handCount[i] = 0;
       20:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      280:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      270:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       10:  182:  state->outpostPlayed = 0;
       10:  183:  state->phase = 0;
       10:  184:  state->numActions = 1;
       10:  185:  state->numBuys = 1;
       10:  186:  state->playedCardCount = 0;
       10:  187:  state->whoseTurn = 0;
       10:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       60:  192:  for (it = 0; it < 5; it++){
       50:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       10:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       10:  198:  return 0;
        -:  199:}
        -:  200:
       20:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       20:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       20:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       20:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      240:  214:  while (state->deckCount[player] > 0) {
      200:  215:    card = floor(Random() * state->deckCount[player]);
      200:  216:    newDeck[newDeckPos] = state->deck[player][card];
      200:  217:    newDeckPos++;
      720:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      520:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      200:  221:    state->deckCount[player]--;
        -:  222:  }
      220:  223:  for (i = 0; i < newDeckPos; i++) {
      200:  224:    state->deck[player][i] = newDeck[i];
      200:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       20:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
      168:  311:int numHandCards(struct gameState *state) {
      168:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    76178:  346:int whoseTurn(struct gameState *state) {
    76178:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    14028:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    14028:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
     1666:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    12362:  401:  j = 0;
   321412:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
   309050:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    37044:  406:	  j++;
        -:  407:	}
        -:  408:    }
    12362:  409:  if ( j >= 3)
        -:  410:    {
    12348:  411:      return 1;
        -:  412:    }
        -:  413:
       14:  414:  return 0;
        -:  415:}
        -:  416:
       40:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       40:  420:  int score = 0;
        -:  421:  //score from hand
      160:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
      120:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
      120:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
      120:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
      120:  427:      if (state->hand[player][i] == province) { score = score + 6; };
      120:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      120:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       40:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       40:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
       40:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   228070:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   228070:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   228070:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   228070:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   228070:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   228070:  576:    state->deckCount[player]--;
   228070:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   228070:  580:  return 0;
        -:  581:}
        -:  582:
      490:  583:int getCost(int cardNumber)
        -:  584:{
      490:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
       14:  588:      return 0;
        -:  589:    case estate:
       14:  590:      return 2;
        -:  591:    case duchy:
       14:  592:      return 5;
        -:  593:    case province:
       14:  594:      return 8;
        -:  595:    case copper:
       14:  596:      return 0;
        -:  597:    case silver:
       14:  598:      return 3;
        -:  599:    case gold:
       14:  600:      return 6;
        -:  601:    case adventurer:
       14:  602:      return 6;
        -:  603:    case council_room:
       14:  604:      return 5;
        -:  605:    case feast:
       14:  606:      return 4;
        -:  607:    case gardens:
       14:  608:      return 4;
        -:  609:    case mine:
       14:  610:      return 5;
        -:  611:    case remodel:
       14:  612:      return 4;
        -:  613:    case smithy:
       14:  614:      return 4;
        -:  615:    case village:
       14:  616:      return 3;
        -:  617:    case baron:
       14:  618:      return 4;
        -:  619:    case great_hall:
       14:  620:      return 3;
        -:  621:    case minion:
       14:  622:      return 5;
        -:  623:    case steward:
       14:  624:      return 3;
        -:  625:    case tribute:
       14:  626:      return 5;
        -:  627:    case ambassador:
       14:  628:      return 3;
        -:  629:    case cutpurse:
       14:  630:      return 4;
        -:  631:    case embargo:
       14:  632:      return 2;
        -:  633:    case outpost:
       14:  634:      return 5;
        -:  635:    case salvager:
       14:  636:      return 4;
        -:  637:    case sea_hag:
       14:  638:      return 4;
        -:  639:    case treasure_map:
       14:  640:      return 4;
        -:  641:    }
        -:  642:
      112:  643:  return -1;
        -:  644:}
        -:  645:
       10:  646:void adventurer_action (int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z) {
       40:  647:    while(drawntreasure<2){
       20:  648:        if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:            shuffle(currentPlayer, state);
        -:  650:        }
       20:  651:        drawCard(currentPlayer, state);
       20:  652:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       20:  653:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       20:  654:          drawntreasure++;
        -:  655:        else{
    #####:  656:          temphand[z]=cardDrawn;
    #####:  657:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  658:        }
        -:  659:  }
       20:  660:  while(z-1>=0){
    #####:  661:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  662:      z=z-1;
        -:  663:  }
       10:  664:}
        -:  665:
    48000:  666:void smithy_action (int currentPlayer, struct gameState *state, int i, int handPos) {
        -:  667:  //+3 Cards
   192000:  668:  for (i = 0; i < 3; i++) {
   144000:  669:    drawCard(currentPlayer, state);
        -:  670:  }
        -:  671:
        -:  672:  //discard card from hand
    48000:  673:  discardCard(handPos, currentPlayer, state, 0);
    48000:  674:}
        -:  675:
    #####:  676:void village_action (int currentPlayer, struct gameState *state, int handPos) {
        -:  677:  //+1 Card
    #####:  678:  drawCard(currentPlayer, state);
        -:  679:
        -:  680:  //+2 Actions
    #####:  681:  state->numActions = state->numActions + 2;
        -:  682:
        -:  683:  //discard played card from hand
    #####:  684:  discardCard(handPos, currentPlayer, state, 0);
    #####:  685:}
        -:  686:
    14000:  687:void council_room_action (int i, int currentPlayer, struct gameState *state) {
        -:  688:  //+4 Cards
    70000:  689:  for (i = 0; i < 4; i++) {
    56000:  690:      drawCard(currentPlayer, state);
        -:  691:  }
        -:  692:
        -:  693:  //+1 Buy
    14000:  694:  state->numBuys++;
        -:  695:
        -:  696:  //Each other player draws a card
    70000:  697:  for (i = 0; i < state->numPlayers; i++) {
    56000:  698:      if ( i == currentPlayer ) {
    14000:  699:          drawCard(i, state);
        -:  700:      }
        -:  701:  }
    14000:  702:}
        -:  703:
    #####:  704:int mine_action (int j, struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos, int i) {
    #####:  705:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  706:
    #####:  707:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
    #####:  708:      return -1;
        -:  709:  }
        -:  710:
    #####:  711:  if (choice2 > treasure_map || choice2 < curse) {
    #####:  712:      return -1;
        -:  713:  }
        -:  714:
    #####:  715:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
    #####:  716:      return -1;
        -:  717:  }
        -:  718:
    #####:  719:  gainCard(choice2, state, 2, currentPlayer);
        -:  720:
        -:  721:  //discard card from hand
    #####:  722:  discardCard(handPos, currentPlayer, state, 0);
        -:  723:
        -:  724:  //discard trashed card
    #####:  725:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  726:      if (state->hand[currentPlayer][i] == j) {
    #####:  727:        discardCard(i, currentPlayer, state, 0);
    #####:  728:        break;
        -:  729:      }
        -:  730:  }
        -:  731:
    #####:  732:  return -1;
        -:  733:}
        -:  734:
    76010:  735:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  736:{
        -:  737:  int i;
        -:  738:  int j;
        -:  739:  int k;
        -:  740:  int x;
        -:  741:  int m;
        -:  742:  int index;
    76010:  743:  int currentPlayer = whoseTurn(state);
    76010:  744:  int nextPlayer = currentPlayer + 1;
        -:  745:
    76010:  746:  int tributeRevealedCards[2] = {-1, -1};
        -:  747:  int temphand[MAX_HAND];// moved above the if statement
    76010:  748:  int drawntreasure=0;
        -:  749:  int cardDrawn;
    76010:  750:  int z = 0;// this is the counter for the temp hand
    76010:  751:  if (nextPlayer > (state->numPlayers - 1)){
    51500:  752:    nextPlayer = 0;
        -:  753:  }
        -:  754:
        -:  755:
        -:  756:  //uses switch to select card and perform actions
    76010:  757:  switch( card )
        -:  758:    {
        -:  759:    case adventurer:
       10:  760:      adventurer_action (drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
       10:  761:      return 0;
        -:  762:
        -:  763:    case council_room:
    14000:  764:      council_room_action (i, currentPlayer, state);
    14000:  765:      return 0;
        -:  766:
        -:  767:    case feast:
        -:  768:      //gain card with cost up to 5
        -:  769:      //Backup hand
    #####:  770:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  771:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  772:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  773:      }
        -:  774:      //Backup hand
        -:  775:
        -:  776:      //Update Coins for Buy
    #####:  777:      updateCoins(currentPlayer, state, 5);
    #####:  778:      x = 1;//Condition to loop on
    #####:  779:      while( x == 1) {//Buy one card
    #####:  780:	if (supplyCount(choice1, state) <= 0){
        -:  781:	  if (DEBUG)
        -:  782:	    printf("None of that card left, sorry!\n");
        -:  783:
        -:  784:	  if (DEBUG){
        -:  785:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  786:	  }
        -:  787:	}
    #####:  788:	else if (state->coins < getCost(choice1)){
    #####:  789:	  printf("That card is too expensive!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  793:	  }
        -:  794:	}
        -:  795:	else{
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  799:	  }
        -:  800:
    #####:  801:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  802:	  x = 0;//No more buying cards
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
        -:  808:	}
        -:  809:      }
        -:  810:
        -:  811:      //Reset Hand
    #####:  812:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  813:	state->hand[currentPlayer][i] = temphand[i];
    #####:  814:	temphand[i] = -1;
        -:  815:      }
        -:  816:      //Reset Hand
        -:  817:
    #####:  818:      return 0;
        -:  819:
        -:  820:    case gardens:
    #####:  821:      return -1;
        -:  822:
        -:  823:    case mine:
    #####:  824:      m = mine_action (j, state, currentPlayer, choice1, choice2, handPos, i);
    #####:  825:      return m;
        -:  826:
        -:  827:    case remodel:
    #####:  828:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  829:
    #####:  830:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  831:	{
    #####:  832:	  return -1;
        -:  833:	}
        -:  834:
    #####:  835:      gainCard(choice2, state, 0, currentPlayer);
        -:  836:
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:
        -:  840:      //discard trashed card
    #####:  841:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  842:	{
    #####:  843:	  if (state->hand[currentPlayer][i] == j)
        -:  844:	    {
    #####:  845:	      discardCard(i, currentPlayer, state, 0);
    #####:  846:	      break;
        -:  847:	    }
        -:  848:	}
        -:  849:
        -:  850:
    #####:  851:      return 0;
        -:  852:
        -:  853:    case smithy:
    48000:  854:      smithy_action (currentPlayer, state, i, handPos);
    48000:  855:      return 0;
        -:  856:
        -:  857:    case village:
    #####:  858:      village_action (currentPlayer, state, handPos);
    #####:  859:      return 0;
        -:  860:
        -:  861:    case baron:
    #####:  862:      state->numBuys++;//Increase buys by 1!
    #####:  863:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  864:	int p = 0;//Iterator for hand!
    #####:  865:	int card_not_discarded = 1;//Flag for discard set!
    #####:  866:	while(card_not_discarded){
    #####:  867:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  868:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  869:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  870:	    state->discardCount[currentPlayer]++;
    #####:  871:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  872:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  873:	    }
    #####:  874:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  875:	    state->handCount[currentPlayer]--;
    #####:  876:	    card_not_discarded = 0;//Exit the loop
        -:  877:	  }
    #####:  878:	  else if (p > state->handCount[currentPlayer]){
        -:  879:	    if(DEBUG) {
        -:  880:	      printf("No estate cards in your hand, invalid choice\n");
        -:  881:	      printf("Must gain an estate if there are any\n");
        -:  882:	    }
    #####:  883:	    if (supplyCount(estate, state) > 0){
    #####:  884:	      gainCard(estate, state, 0, currentPlayer);
    #####:  885:	      state->supplyCount[estate]--;//Decrement estates
    #####:  886:	      if (supplyCount(estate, state) == 0){
    #####:  887:		isGameOver(state);
        -:  888:	      }
        -:  889:	    }
    #####:  890:	    card_not_discarded = 0;//Exit the loop
        -:  891:	  }
        -:  892:
        -:  893:	  else{
    #####:  894:	    p++;//Next card
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:
        -:  899:      else{
    #####:  900:	if (supplyCount(estate, state) > 0){
    #####:  901:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  902:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  903:	  if (supplyCount(estate, state) == 0){
    #####:  904:	    isGameOver(state);
        -:  905:	  }
        -:  906:	}
        -:  907:      }
        -:  908:
        -:  909:
    #####:  910:      return 0;
        -:  911:
        -:  912:    case great_hall:
        -:  913:      //+1 Card
    14000:  914:      drawCard(currentPlayer, state);
        -:  915:
        -:  916:      //+1 Actions
    14000:  917:      state->numActions++;
        -:  918:
        -:  919:      //discard card from hand
    14000:  920:      discardCard(handPos, currentPlayer, state, 0);
    14000:  921:      return 0;
        -:  922:
        -:  923:    case minion:
        -:  924:      //+1 action
    #####:  925:      state->numActions++;
        -:  926:
        -:  927:      //discard card from hand
    #####:  928:      discardCard(handPos, currentPlayer, state, 0);
        -:  929:
    #####:  930:      if (choice1)		//+2 coins
        -:  931:	{
    #####:  932:	  state->coins = state->coins + 2;
        -:  933:	}
        -:  934:
    #####:  935:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  936:	{
        -:  937:	  //discard hand
    #####:  938:	  while(numHandCards(state) > 0)
        -:  939:	    {
    #####:  940:	      discardCard(handPos, currentPlayer, state, 0);
        -:  941:	    }
        -:  942:
        -:  943:	  //draw 4
    #####:  944:	  for (i = 0; i < 4; i++)
        -:  945:	    {
    #####:  946:	      drawCard(currentPlayer, state);
        -:  947:	    }
        -:  948:
        -:  949:	  //other players discard hand and redraw if hand size > 4
    #####:  950:	  for (i = 0; i < state->numPlayers; i++)
        -:  951:	    {
    #####:  952:	      if (i != currentPlayer)
        -:  953:		{
    #####:  954:		  if ( state->handCount[i] > 4 )
        -:  955:		    {
        -:  956:		      //discard hand
    #####:  957:		      while( state->handCount[i] > 0 )
        -:  958:			{
    #####:  959:			  discardCard(handPos, i, state, 0);
        -:  960:			}
        -:  961:
        -:  962:		      //draw 4
    #####:  963:		      for (j = 0; j < 4; j++)
        -:  964:			{
    #####:  965:			  drawCard(i, state);
        -:  966:			}
        -:  967:		    }
        -:  968:		}
        -:  969:	    }
        -:  970:
        -:  971:	}
    #####:  972:      return 0;
        -:  973:
        -:  974:    case steward:
    #####:  975:      if (choice1 == 1)
        -:  976:	{
        -:  977:	  //+2 cards
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	  drawCard(currentPlayer, state);
        -:  980:	}
    #####:  981:      else if (choice1 == 2)
        -:  982:	{
        -:  983:	  //+2 coins
    #####:  984:	  state->coins = state->coins + 2;
        -:  985:	}
        -:  986:      else
        -:  987:	{
        -:  988:	  //trash 2 cards in hand
    #####:  989:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  990:	  discardCard(choice3, currentPlayer, state, 1);
        -:  991:	}
        -:  992:
        -:  993:      //discard card from hand
    #####:  994:      discardCard(handPos, currentPlayer, state, 0);
    #####:  995:      return 0;
        -:  996:
        -:  997:    case tribute:
    #####:  998:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  999:	if (state->deckCount[nextPlayer] > 0){
    #####: 1000:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1001:	  state->deckCount[nextPlayer]--;
        -: 1002:	}
    #####: 1003:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1004:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1005:	  state->discardCount[nextPlayer]--;
        -: 1006:	}
        -: 1007:	else{
        -: 1008:	  //No Card to Reveal
        -: 1009:	  if (DEBUG){
        -: 1010:	    printf("No cards to reveal\n");
        -: 1011:	  }
        -: 1012:	}
        -: 1013:      }
        -: 1014:
        -: 1015:      else{
    #####: 1016:	if (state->deckCount[nextPlayer] == 0){
    #####: 1017:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1018:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1019:	    state->deckCount[nextPlayer]++;
    #####: 1020:	    state->discard[nextPlayer][i] = -1;
    #####: 1021:	    state->discardCount[nextPlayer]--;
        -: 1022:	  }
        -: 1023:
    #####: 1024:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1025:	}
    #####: 1026:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1028:	state->deckCount[nextPlayer]--;
    #####: 1029:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1030:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1031:	state->deckCount[nextPlayer]--;
        -: 1032:      }
        -: 1033:
    #####: 1034:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1035:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1036:	state->playedCardCount++;
    #####: 1037:	tributeRevealedCards[1] = -1;
        -: 1038:      }
        -: 1039:
    #####: 1040:      for (i = 0; i <= 2; i ++){
    #####: 1041:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1042:	  state->coins += 2;
        -: 1043:	}
        -: 1044:
    #####: 1045:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1046:	  drawCard(currentPlayer, state);
    #####: 1047:	  drawCard(currentPlayer, state);
        -: 1048:	}
        -: 1049:	else{//Action Card
    #####: 1050:	  state->numActions = state->numActions + 2;
        -: 1051:	}
        -: 1052:      }
        -: 1053:
    #####: 1054:      return 0;
        -: 1055:
        -: 1056:    case ambassador:
    #####: 1057:      j = 0;		//used to check if player has enough cards to discard
        -: 1058:
    #####: 1059:      if (choice2 > 2 || choice2 < 0)
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:
    #####: 1064:      if (choice1 == handPos)
        -: 1065:	{
    #####: 1066:	  return -1;
        -: 1067:	}
        -: 1068:
    #####: 1069:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1070:	{
    #####: 1071:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1072:	    {
    #####: 1073:	      j++;
        -: 1074:	    }
        -: 1075:	}
    #####: 1076:      if (j < choice2)
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
        -: 1081:      if (DEBUG)
        -: 1082:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1083:
        -: 1084:      //increase supply count for choosen card by amount being discarded
    #####: 1085:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1086:
        -: 1087:      //each other player gains a copy of revealed card
    #####: 1088:      for (i = 0; i < state->numPlayers; i++)
        -: 1089:	{
    #####: 1090:	  if (i != currentPlayer)
        -: 1091:	    {
    #####: 1092:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1093:	    }
        -: 1094:	}
        -: 1095:
        -: 1096:      //discard played card from hand
    #####: 1097:      discardCard(handPos, currentPlayer, state, 0);
        -: 1098:
        -: 1099:      //trash copies of cards returned to supply
    #####: 1100:      for (j = 0; j < choice2; j++)
        -: 1101:	{
    #####: 1102:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1103:	    {
    #####: 1104:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1105:		{
    #####: 1106:		  discardCard(i, currentPlayer, state, 1);
    #####: 1107:		  break;
        -: 1108:		}
        -: 1109:	    }
        -: 1110:	}
        -: 1111:
    #####: 1112:      return 0;
        -: 1113:
        -: 1114:    case cutpurse:
        -: 1115:
    #####: 1116:      updateCoins(currentPlayer, state, 2);
    #####: 1117:      for (i = 0; i < state->numPlayers; i++)
        -: 1118:	{
    #####: 1119:	  if (i != currentPlayer)
        -: 1120:	    {
    #####: 1121:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1122:		{
    #####: 1123:		  if (state->hand[i][j] == copper)
        -: 1124:		    {
    #####: 1125:		      discardCard(j, i, state, 0);
    #####: 1126:		      break;
        -: 1127:		    }
    #####: 1128:		  if (j == state->handCount[i])
        -: 1129:		    {
    #####: 1130:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1131:			{
        -: 1132:			  if (DEBUG)
        -: 1133:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1134:			}
    #####: 1135:		      break;
        -: 1136:		    }
        -: 1137:		}
        -: 1138:
        -: 1139:	    }
        -: 1140:
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
    #####: 1146:      return 0;
        -: 1147:
        -: 1148:
        -: 1149:    case embargo:
        -: 1150:      //+2 Coins
    #####: 1151:      state->coins = state->coins + 2;
        -: 1152:
        -: 1153:      //see if selected pile is in play
    #####: 1154:      if ( state->supplyCount[choice1] == -1 )
        -: 1155:	{
    #####: 1156:	  return -1;
        -: 1157:	}
        -: 1158:
        -: 1159:      //add embargo token to selected supply pile
    #####: 1160:      state->embargoTokens[choice1]++;
        -: 1161:
        -: 1162:      //trash card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1164:      return 0;
        -: 1165:
        -: 1166:    case outpost:
        -: 1167:      //set outpost flag
    #####: 1168:      state->outpostPlayed++;
        -: 1169:
        -: 1170:      //discard card
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1172:      return 0;
        -: 1173:
        -: 1174:    case salvager:
        -: 1175:      //+1 buy
    #####: 1176:      state->numBuys++;
        -: 1177:
    #####: 1178:      if (choice1)
        -: 1179:	{
        -: 1180:	  //gain coins equal to trashed card
    #####: 1181:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1182:	  //trash card
    #####: 1183:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1184:	}
        -: 1185:
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:    case sea_hag:
    #####: 1191:      for (i = 0; i < state->numPlayers; i++){
    #####: 1192:	if (i != currentPlayer){
    #####: 1193:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1194:	  state->discardCount[i]++;
    #####: 1195:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1196:	}
        -: 1197:      }
    #####: 1198:      return 0;
        -: 1199:
        -: 1200:    case treasure_map:
        -: 1201:      //search hand for another treasure_map
    #####: 1202:      index = -1;
    #####: 1203:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1206:	    {
    #####: 1207:	      index = i;
    #####: 1208:	      break;
        -: 1209:	    }
        -: 1210:	}
    #####: 1211:      if (index > -1)
        -: 1212:	{
        -: 1213:	  //trash both treasure cards
    #####: 1214:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1215:	  discardCard(index, currentPlayer, state, 1);
        -: 1216:
        -: 1217:	  //gain 4 Gold cards
    #####: 1218:	  for (i = 0; i < 4; i++)
        -: 1219:	    {
    #####: 1220:	      gainCard(gold, state, 1, currentPlayer);
        -: 1221:	    }
        -: 1222:
        -: 1223:	  //return success
    #####: 1224:	  return 1;
        -: 1225:	}
        -: 1226:
        -: 1227:      //no second treasure_map found in hand
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:  return -1;
        -: 1232:}
        -: 1233:
    62000: 1234:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1235:{
        -: 1236:
        -: 1237:  //if card is not trashed, added to Played pile
    62000: 1238:  if (trashFlag < 1)
        -: 1239:    {
        -: 1240:      //add card to played pile
    62000: 1241:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    62000: 1242:      state->playedCardCount++;
        -: 1243:    }
        -: 1244:
        -: 1245:  //set played card to -1
    62000: 1246:  state->hand[currentPlayer][handPos] = -1;
        -: 1247:
        -: 1248:  //remove card from player's hand
    62000: 1249:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1250:    {
        -: 1251:      //reduce number of cards in hand
       25: 1252:      state->handCount[currentPlayer]--;
        -: 1253:    }
    61975: 1254:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1255:    {
        -: 1256:      //reduce number of cards in hand
    #####: 1257:      state->handCount[currentPlayer]--;
        -: 1258:    }
        -: 1259:  else
        -: 1260:    {
        -: 1261:      //replace discarded card with last card in hand
    61975: 1262:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1263:      //set last card to -1
    61975: 1264:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1265:      //reduce number of cards in hand
    61975: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
        -: 1268:
    62000: 1269:  return 0;
        -: 1270:}
        -: 1271:
    #####: 1272:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1273:{
        -: 1274:  //Note: supplyPos is enum of choosen card
        -: 1275:
        -: 1276:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1277:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1278:    {
    #####: 1279:      return -1;
        -: 1280:    }
        -: 1281:
        -: 1282:  //added card for [whoseTurn] current player:
        -: 1283:  // toFlag = 0 : add to discard
        -: 1284:  // toFlag = 1 : add to deck
        -: 1285:  // toFlag = 2 : add to hand
        -: 1286:
    #####: 1287:  if (toFlag == 1)
        -: 1288:    {
    #####: 1289:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1290:      state->deckCount[player]++;
        -: 1291:    }
    #####: 1292:  else if (toFlag == 2)
        -: 1293:    {
    #####: 1294:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1295:      state->handCount[player]++;
        -: 1296:    }
        -: 1297:  else
        -: 1298:    {
    #####: 1299:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1300:      state->discardCount[player]++;
        -: 1301:    }
        -: 1302:
        -: 1303:  //decrease number in supply pile
    #####: 1304:  state->supplyCount[supplyPos]--;
        -: 1305:
    #####: 1306:  return 0;
        -: 1307:}
        -: 1308:
      122: 1309:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1310:{
        -: 1311:  int i;
        -: 1312:
        -: 1313:  //reset coin count
      122: 1314:  state->coins = 0;
        -: 1315:
        -: 1316:  //add coins for each Treasure card in player's hand
      172: 1317:  for (i = 0; i < state->handCount[player]; i++)
        -: 1318:    {
       50: 1319:      if (state->hand[player][i] == copper)
        -: 1320:	{
       40: 1321:	  state->coins += 1;
        -: 1322:	}
       10: 1323:      else if (state->hand[player][i] == silver)
        -: 1324:	{
    #####: 1325:	  state->coins += 2;
        -: 1326:	}
       10: 1327:      else if (state->hand[player][i] == gold)
        -: 1328:	{
    #####: 1329:	  state->coins += 3;
        -: 1330:	}
        -: 1331:    }
        -: 1332:
        -: 1333:  //add bonus
      122: 1334:  state->coins += bonus;
        -: 1335:
      122: 1336:  return 0;
        -: 1337:}
        -: 1338:
        -: 1339:
        -: 1340://end of dominion.c
