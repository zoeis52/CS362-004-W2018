unittest1.c:
All tests passed!
File 'dominion.c'
Lines executed:5.38% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
    #####:  215:    card = floor(Random() * state->deckCount[player]);
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    #####:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
        -:  581:}
        -:  582:
       35:  583:int getCost(int cardNumber)
        -:  584:{
       35:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo:
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
        8:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int smithy_card(int handPos, struct gameState *state, int currentPlayer){
        -:  647:  //+3 Cards
        -:  648:  int i;
        -:  649:
    #####:  650:	  for (i = 0; i < 4; i++)	//4 not 3 bug here
        -:  651:	{
    #####:  652:	  drawCard(currentPlayer, state);
        -:  653:	}
        -:  654:
        -:  655:      //discard card from hand
    #####:  656:      discardCard(handPos, currentPlayer, state, 0);
    #####:  657:      return 0;
        -:  658:
        -:  659:}
    #####:  660:int adventurer_card(struct gameState *state, int currentPlayer){
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
    #####:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
    #####:  664:  int z = 0;
    #####:  665:  while(drawntreasure<5){	//error, lets you get 5 instead of 2 treasures
    #####:  666:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  667:	  shuffle(currentPlayer, state);
        -:  668:	}
    #####:  669:	drawCard(currentPlayer, state);
    #####:  670:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  671:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  672:	  drawntreasure++;
        -:  673:	else{
    #####:  674:	  temphand[z]=cardDrawn;
    #####:  675:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  676:	  z++;
        -:  677:	}
        -:  678:      }
    #####:  679:      while(z-1>=0){
    #####:  680:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  681:	z=z-1;
        -:  682:      }
    #####:  683:      return 0;
        -:  684:
        -:  685:}
    #####:  686:int baron_card(int choice1, struct gameState *state, int currentPlayer){
    #####:  687:	state->numBuys++;//Increase buys by 1!
    #####:  688:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  689:	int p = 0;//Iterator for hand!
    #####:  690:	int card_not_discarded = 1;//Flag for discard set!
    #####:  691:	while(card_not_discarded){
    #####:  692:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  693:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  694:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  695:	    state->discardCount[currentPlayer]++;
    #####:  696:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  697:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  698:	    }
    #####:  699:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  700:	    state->handCount[currentPlayer]--;
    #####:  701:	    card_not_discarded = 0;//Exit the loop
        -:  702:	  }
    #####:  703:	  else if (p > state->handCount[currentPlayer]){
        -:  704:	    if(DEBUG) {
        -:  705:	      printf("No estate cards in your hand, invalid choice\n");
        -:  706:	      printf("Must gain an estate if there are any\n");
        -:  707:	    }
    #####:  708:	    if (supplyCount(estate, state) > 0){
    #####:  709:	      gainCard(estate, state, 0, currentPlayer);
    #####:  710:	      state->supplyCount[estate]--;//Decrement estates
    #####:  711:	      if (supplyCount(estate, state) == 0){
    #####:  712:		isGameOver(state);
        -:  713:	      }
        -:  714:	    }
    #####:  715:	    card_not_discarded = 0;//Exit the loop
        -:  716:	  }
        -:  717:
        -:  718:	  else{
    #####:  719:	    p++;//Next card
        -:  720:	  }
        -:  721:	}
        -:  722:      }
        -:  723:
        -:  724:      else{
    #####:  725:	if (supplyCount(estate, state) > 0){
    #####:  726:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  727:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  728:	  if (supplyCount(estate, state) == 0){
    #####:  729:	    isGameOver(state);
        -:  730:	  }
        -:  731:	}
        -:  732:      }
        -:  733:
        -:  734:
    #####:  735:      return 0;
        -:  736:
        -:  737:}
    #####:  738:int mine_card(int choice1,int choice2, int handPos, struct gameState *state, int currentPlayer){
        -:  739:	int i;
        -:  740:	int j;
        -:  741:
        -:  742:
    #####:  743:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  744:
    #####:  745:      if (state->hand[currentPlayer][choice1] < copper && state->hand[currentPlayer][choice1] > gold)
        -:  746:	{
    #####:  747:	  return -1;
        -:  748:	}
        -:  749:
    #####:  750:      if (choice2 > treasure_map || choice2 < curse)
        -:  751:	{
    #####:  752:	  return -1;
        -:  753:	}
        -:  754:
    #####:  755:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:
    #####:  760:      gainCard(choice2, state, 2, currentPlayer);
        -:  761:
        -:  762:      //discard card from hand
    #####:  763:      discardCard(handPos, currentPlayer, state, 0);
        -:  764:
        -:  765:
        -:  766:      //discard trashed card
        -:  767:	  //
        -:  768:
    #####:  769:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  770:	{
    #####:  771:	  if (state->hand[currentPlayer][i] == j)
        -:  772:	    {
    #####:  773:	      discardCard(i, currentPlayer, state, 0);
    #####:  774:		  break;
        -:  775:	    }
        -:  776:	}
        -:  777:
        -:  778:
    #####:  779:      return 0;
        -:  780:
        -:  781:}
        -:  782:
        -:  783:
    #####:  784:int council_room_card(struct gameState *state, int handPos, int currentPlayer){
        -:  785:  //+4 Cards
        -:  786:  int i;
        -:  787:
    #####:  788:      for (i = 0; i < 4; i++)
        -:  789:  	  {
    #####:  790:	  drawCard(currentPlayer, state);
        -:  791:	}
        -:  792:
        -:  793:      //+1 Buy
    #####:  794:      state->numBuys++;
        -:  795:
        -:  796:      //Each other player draws a card
    #####:  797:      for (i = 0; i < state->numPlayers; i++)
        -:  798:	{
        -:  799:	 //bug, doesn' t exlude current player for additional draw
    #####:  800:		 if ( i == currentPlayer )// added bug changed not equal to equal
        -:  801:	    {
    #####:  802:	      drawCard(i, state);
        -:  803:	    }
        -:  804:	}
        -:  805:
        -:  806:      //put played card in played card pile
    #####:  807:      discardCard(handPos, currentPlayer, state, 0);
        -:  808:
    #####:  809:      return 0;
        -:  810:
        -:  811:}
        -:  812:
        -:  813:
    #####:  814:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  815:{
        -:  816:  int i;
        -:  817:  int j;
        -:  818:  int k;
        -:  819:  int x;
        -:  820:  int index;
    #####:  821:  int currentPlayer = whoseTurn(state);
    #####:  822:  int nextPlayer = currentPlayer + 1;
        -:  823:
    #####:  824:  int tributeRevealedCards[2] = {-1, -1};
        -:  825:  int temphand[MAX_HAND];// moved above the if statement
        -:  826: // int drawntreasure=0;
        -:  827: // int cardDrawn;
        -:  828:  //int z = 0;// this is the counter for the temp hand
    #####:  829:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  830:    nextPlayer = 0;
        -:  831:  }
        -:  832:
        -:  833:
        -:  834:  //uses switch to select card and perform actions
    #####:  835:  switch( card )
        -:  836:    {
        -:  837:
        -:  838:	//refactored
        -:  839:    case adventurer:
        -:  840:
    #####:  841:	return adventurer_card(state, currentPlayer);
        -:  842:
        -:  843:	//refactored
        -:  844:    case council_room:
    #####:  845:    	council_room_card(state, handPos, currentPlayer);
        -:  846:
        -:  847:
        -:  848:    case feast:
        -:  849:      //gain card with cost up to 5
        -:  850:      //Backup hand
    #####:  851:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  852:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  853:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  854:      }
        -:  855:      //Backup hand
        -:  856:
        -:  857:      //Update Coins for Buy
    #####:  858:      updateCoins(currentPlayer, state, 5);
    #####:  859:      x = 1;//Condition to loop on
    #####:  860:      while( x == 1) {//Buy one card
    #####:  861:	if (supplyCount(choice1, state) <= 0){
        -:  862:	  if (DEBUG)
        -:  863:	    printf("None of that card left, sorry!\n");
        -:  864:
        -:  865:	  if (DEBUG){
        -:  866:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  867:	  }
        -:  868:	}
    #####:  869:	else if (state->coins < getCost(choice1)){
    #####:  870:	  printf("That card is too expensive!\n");
        -:  871:
        -:  872:	  if (DEBUG){
        -:  873:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  874:	  }
        -:  875:	}
        -:  876:	else{
        -:  877:
        -:  878:	  if (DEBUG){
        -:  879:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  880:	  }
        -:  881:
    #####:  882:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  883:	  x = 0;//No more buying cards
        -:  884:
        -:  885:	  if (DEBUG){
        -:  886:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  887:	  }
        -:  888:
        -:  889:	}
        -:  890:      }
        -:  891:
        -:  892:      //Reset Hand
    #####:  893:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  894:	state->hand[currentPlayer][i] = temphand[i];
    #####:  895:	temphand[i] = -1;
        -:  896:      }
        -:  897:      //Reset Hand
        -:  898:
    #####:  899:      return 0;
        -:  900:
        -:  901:    case gardens:
    #####:  902:      return -1;
        -:  903:
        -:  904:
        -:  905:
        -:  906:	//refactored
        -:  907:	case mine:
    #####:  908:     	return mine_card(choice1, choice2, handPos, state, currentPlayer);
        -:  909:
        -:  910:
        -:  911:
        -:  912:    case remodel:
    #####:  913:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  914:
    #####:  915:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  916:	{
    #####:  917:	  return -1;
        -:  918:	}
        -:  919:
    #####:  920:      gainCard(choice2, state, 0, currentPlayer);
        -:  921:
        -:  922:      //discard card from hand
    #####:  923:      discardCard(handPos, currentPlayer, state, 0);
        -:  924:
        -:  925:      //discard trashed card
    #####:  926:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  927:	{
    #####:  928:	  if (state->hand[currentPlayer][i] == j)
        -:  929:	    {
    #####:  930:	      discardCard(i, currentPlayer, state, 0);
    #####:  931:	      break;
        -:  932:	    }
        -:  933:	}
        -:  934:
        -:  935:
    #####:  936:      return 0;
        -:  937:
        -:  938:
        -:  939:	  //refactored
        -:  940:    case smithy:
    #####:  941:   		return smithy_card(handPos, state, currentPlayer);
        -:  942:
        -:  943:    case village:
        -:  944:      //+1 Card
    #####:  945:      drawCard(currentPlayer, state);
        -:  946:
        -:  947:      //+2 Actions
    #####:  948:      state->numActions = state->numActions + 2;
        -:  949:
        -:  950:      //discard played card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
    #####:  952:      return 0;
        -:  953:
        -:  954:
        -:  955:	//refactored
        -:  956:    case baron:
    #####:  957:    	return baron_card(choice1, state, currentPlayer);
        -:  958:
        -:  959:    case great_hall:
        -:  960:      //+1 Card
    #####:  961:      drawCard(currentPlayer, state);
        -:  962:
        -:  963:      //+1 Actions
    #####:  964:      state->numActions++;
        -:  965:
        -:  966:      //discard card from hand
    #####:  967:      discardCard(handPos, currentPlayer, state, 0);
    #####:  968:      return 0;
        -:  969:
        -:  970:    case minion:
        -:  971:      //+1 action
    #####:  972:      state->numActions++;
        -:  973:
        -:  974:      //discard card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);
        -:  976:
    #####:  977:      if (choice1)		//+2 coins
        -:  978:	{
    #####:  979:	  state->coins = state->coins + 2;
        -:  980:	}
        -:  981:
    #####:  982:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  983:	{
        -:  984:	  //discard hand
    #####:  985:	  while(numHandCards(state) > 0)
        -:  986:	    {
    #####:  987:	      discardCard(handPos, currentPlayer, state, 0);
        -:  988:	    }
        -:  989:
        -:  990:	  //draw 4
    #####:  991:	  for (i = 0; i < 4; i++)
        -:  992:	    {
    #####:  993:	      drawCard(currentPlayer, state);
        -:  994:	    }
        -:  995:
        -:  996:	  //other players discard hand and redraw if hand size > 4
    #####:  997:	  for (i = 0; i < state->numPlayers; i++)
        -:  998:	    {
    #####:  999:	      if (i != currentPlayer)
        -: 1000:		{
    #####: 1001:		  if ( state->handCount[i] > 4 )
        -: 1002:		    {
        -: 1003:		      //discard hand
    #####: 1004:		      while( state->handCount[i] > 0 )
        -: 1005:			{
    #####: 1006:			  discardCard(handPos, i, state, 0);
        -: 1007:			}
        -: 1008:
        -: 1009:		      //draw 4
    #####: 1010:		      for (j = 0; j < 4; j++)
        -: 1011:			{
    #####: 1012:			  drawCard(i, state);
        -: 1013:			}
        -: 1014:		    }
        -: 1015:		}
        -: 1016:	    }
        -: 1017:
        -: 1018:	}
    #####: 1019:      return 0;
        -: 1020:
        -: 1021:    case steward:
    #####: 1022:      if (choice1 == 1)
        -: 1023:	{
        -: 1024:	  //+2 cards
    #####: 1025:	  drawCard(currentPlayer, state);
    #####: 1026:	  drawCard(currentPlayer, state);
        -: 1027:	}
    #####: 1028:      else if (choice1 == 2)
        -: 1029:	{
        -: 1030:	  //+2 coins
    #####: 1031:	  state->coins = state->coins + 2;
        -: 1032:	}
        -: 1033:      else
        -: 1034:	{
        -: 1035:	  //trash 2 cards in hand
    #####: 1036:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1037:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card from hand
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case tribute:
    #####: 1045:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1046:	if (state->deckCount[nextPlayer] > 0){
    #####: 1047:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	  state->deckCount[nextPlayer]--;
        -: 1049:	}
    #####: 1050:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1051:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1052:	  state->discardCount[nextPlayer]--;
        -: 1053:	}
        -: 1054:	else{
        -: 1055:	  //No Card to Reveal
        -: 1056:	  if (DEBUG){
        -: 1057:	    printf("No cards to reveal\n");
        -: 1058:	  }
        -: 1059:	}
        -: 1060:      }
        -: 1061:
        -: 1062:      else{
    #####: 1063:	if (state->deckCount[nextPlayer] == 0){
    #####: 1064:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1065:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1066:	    state->deckCount[nextPlayer]++;
    #####: 1067:	    state->discard[nextPlayer][i] = -1;
    #####: 1068:	    state->discardCount[nextPlayer]--;
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1072:	}
    #####: 1073:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1074:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1075:	state->deckCount[nextPlayer]--;
    #####: 1076:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1077:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1078:	state->deckCount[nextPlayer]--;
        -: 1079:      }
        -: 1080:
    #####: 1081:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1082:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1083:	state->playedCardCount++;
    #####: 1084:	tributeRevealedCards[1] = -1;
        -: 1085:      }
        -: 1086:
    #####: 1087:      for (i = 0; i <= 2; i ++){
    #####: 1088:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1089:	  state->coins += 2;
        -: 1090:	}
        -: 1091:
    #####: 1092:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1093:	  drawCard(currentPlayer, state);
    #####: 1094:	  drawCard(currentPlayer, state);
        -: 1095:	}
        -: 1096:	else{//Action Card
    #####: 1097:	  state->numActions = state->numActions + 2;
        -: 1098:	}
        -: 1099:      }
        -: 1100:
    #####: 1101:      return 0;
        -: 1102:
        -: 1103:    case ambassador:
    #####: 1104:      j = 0;		//used to check if player has enough cards to discard
        -: 1105:
    #####: 1106:      if (choice2 > 2 || choice2 < 0)
        -: 1107:	{
    #####: 1108:	  return -1;
        -: 1109:	}
        -: 1110:
    #####: 1111:      if (choice1 == handPos)
        -: 1112:	{
    #####: 1113:	  return -1;
        -: 1114:	}
        -: 1115:
    #####: 1116:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1117:	{
    #####: 1118:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1119:	    {
    #####: 1120:	      j++;
        -: 1121:	    }
        -: 1122:	}
    #####: 1123:      if (j < choice2)
        -: 1124:	{
    #####: 1125:	  return -1;
        -: 1126:	}
        -: 1127:
        -: 1128:      if (DEBUG)
        -: 1129:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1130:
        -: 1131:      //increase supply count for choosen card by amount being discarded
    #####: 1132:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1133:
        -: 1134:      //each other player gains a copy of revealed card
    #####: 1135:      for (i = 0; i < state->numPlayers; i++)
        -: 1136:	{
    #####: 1137:	  if (i != currentPlayer)
        -: 1138:	    {
    #####: 1139:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1140:	    }
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
        -: 1146:      //trash copies of cards returned to supply
    #####: 1147:      for (j = 0; j < choice2; j++)
        -: 1148:	{
    #####: 1149:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1150:	    {
    #####: 1151:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1152:		{
    #####: 1153:		  discardCard(i, currentPlayer, state, 1);
    #####: 1154:		  break;
        -: 1155:		}
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
    #####: 1159:      return 0;
        -: 1160:
        -: 1161:    case cutpurse:
        -: 1162:
    #####: 1163:      updateCoins(currentPlayer, state, 2);
    #####: 1164:      for (i = 0; i < state->numPlayers; i++)
        -: 1165:	{
    #####: 1166:	  if (i != currentPlayer)
        -: 1167:	    {
    #####: 1168:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1169:		{
    #####: 1170:		  if (state->hand[i][j] == copper)
        -: 1171:		    {
    #####: 1172:		      discardCard(j, i, state, 0);
    #####: 1173:		      break;
        -: 1174:		    }
    #####: 1175:		  if (j == state->handCount[i])
        -: 1176:		    {
    #####: 1177:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1178:			{
        -: 1179:			  if (DEBUG)
        -: 1180:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1181:			}
    #####: 1182:		      break;
        -: 1183:		    }
        -: 1184:		}
        -: 1185:
        -: 1186:	    }
        -: 1187:
        -: 1188:	}
        -: 1189:
        -: 1190:      //discard played card from hand
    #####: 1191:      discardCard(handPos, currentPlayer, state, 0);
        -: 1192:
    #####: 1193:      return 0;
        -: 1194:
        -: 1195:
        -: 1196:    case embargo:
        -: 1197:      //+2 Coins
    #####: 1198:      state->coins = state->coins + 2;
        -: 1199:
        -: 1200:      //see if selected pile is in play
    #####: 1201:      if ( state->supplyCount[choice1] == -1 )
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
        -: 1206:      //add embargo token to selected supply pile
    #####: 1207:      state->embargoTokens[choice1]++;
        -: 1208:
        -: 1209:      //trash card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1211:      return 0;
        -: 1212:
        -: 1213:    case outpost:
        -: 1214:      //set outpost flag
    #####: 1215:      state->outpostPlayed++;
        -: 1216:
        -: 1217:      //discard card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1219:      return 0;
        -: 1220:
        -: 1221:    case salvager:
        -: 1222:      //+1 buy
    #####: 1223:      state->numBuys++;
        -: 1224:
    #####: 1225:      if (choice1)
        -: 1226:	{
        -: 1227:	  //gain coins equal to trashed card
    #####: 1228:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1229:	  //trash card
    #####: 1230:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1231:	}
        -: 1232:
        -: 1233:      //discard card
    #####: 1234:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1235:      return 0;
        -: 1236:
        -: 1237:    case sea_hag:
    #####: 1238:      for (i = 0; i < state->numPlayers; i++){
    #####: 1239:	if (i != currentPlayer){
    #####: 1240:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1241:	  state->discardCount[i]++;
    #####: 1242:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1243:	}
        -: 1244:      }
    #####: 1245:      return 0;
        -: 1246:
        -: 1247:    case treasure_map:
        -: 1248:      //search hand for another treasure_map
    #####: 1249:      index = -1;
    #####: 1250:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1251:	{
    #####: 1252:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1253:	    {
    #####: 1254:	      index = i;
    #####: 1255:	      break;
        -: 1256:	    }
        -: 1257:	}
    #####: 1258:      if (index > -1)
        -: 1259:	{
        -: 1260:	  //trash both treasure cards
    #####: 1261:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1262:	  discardCard(index, currentPlayer, state, 1);
        -: 1263:
        -: 1264:	  //gain 4 Gold cards
    #####: 1265:	  for (i = 0; i < 4; i++)
        -: 1266:	    {
    #####: 1267:	      gainCard(gold, state, 1, currentPlayer);
        -: 1268:	    }
        -: 1269:
        -: 1270:	  //return success
    #####: 1271:	  return 1;
        -: 1272:	}
        -: 1273:
        -: 1274:      //no second treasure_map found in hand
    #####: 1275:      return -1;
        -: 1276:    }
        -: 1277:
    #####: 1278:  return -1;
        -: 1279:}
        -: 1280:
    #####: 1281:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1282:{
        -: 1283:
        -: 1284:  //if card is not trashed, added to Played pile
    #####: 1285:  if (trashFlag < 1)
        -: 1286:    {
        -: 1287:      //add card to played pile
    #####: 1288:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1289:      state->playedCardCount++;
        -: 1290:    }
        -: 1291:
        -: 1292:  //set played card to -1
    #####: 1293:  state->hand[currentPlayer][handPos] = -1;
        -: 1294:
        -: 1295:  //remove card from player's hand
    #####: 1296:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1297:    {
        -: 1298:      //reduce number of cards in hand
    #####: 1299:      state->handCount[currentPlayer]--;
        -: 1300:    }
    #####: 1301:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1302:    {
        -: 1303:      //reduce number of cards in hand
    #####: 1304:      state->handCount[currentPlayer]--;
        -: 1305:    }
        -: 1306:  else
        -: 1307:    {
        -: 1308:      //replace discarded card with last card in hand
    #####: 1309:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1310:      //set last card to -1
    #####: 1311:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1312:      //reduce number of cards in hand
    #####: 1313:      state->handCount[currentPlayer]--;
        -: 1314:    }
        -: 1315:
    #####: 1316:  return 0;
        -: 1317:}
        -: 1318:
    #####: 1319:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1320:{
        -: 1321:  //Note: supplyPos is enum of choosen card
        -: 1322:
        -: 1323:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1324:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1325:    {
    #####: 1326:      return -1;
        -: 1327:    }
        -: 1328:
        -: 1329:  //added card for [whoseTurn] current player:
        -: 1330:  // toFlag = 0 : add to discard
        -: 1331:  // toFlag = 1 : add to deck
        -: 1332:  // toFlag = 2 : add to hand
        -: 1333:
    #####: 1334:  if (toFlag == 1)
        -: 1335:    {
    #####: 1336:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1337:      state->deckCount[player]++;
        -: 1338:    }
    #####: 1339:  else if (toFlag == 2)
        -: 1340:    {
    #####: 1341:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1342:      state->handCount[player]++;
        -: 1343:    }
        -: 1344:  else
        -: 1345:    {
    #####: 1346:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1347:      state->discardCount[player]++;
        -: 1348:    }
        -: 1349:
        -: 1350:  //decrease number in supply pile
    #####: 1351:  state->supplyCount[supplyPos]--;
        -: 1352:
    #####: 1353:  return 0;
        -: 1354:}
        -: 1355:
    #####: 1356:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1357:{
        -: 1358:  int i;
        -: 1359:
        -: 1360:  //reset coin count
    #####: 1361:  state->coins = 0;
        -: 1362:
        -: 1363:  //add coins for each Treasure card in player's hand
    #####: 1364:  for (i = 0; i < state->handCount[player]; i++)
        -: 1365:    {
    #####: 1366:      if (state->hand[player][i] == copper)
        -: 1367:	{
    #####: 1368:	  state->coins += 1;
        -: 1369:	}
    #####: 1370:      else if (state->hand[player][i] == silver)
        -: 1371:	{
    #####: 1372:	  state->coins += 2;
        -: 1373:	}
    #####: 1374:      else if (state->hand[player][i] == gold)
        -: 1375:	{
    #####: 1376:	  state->coins += 3;
        -: 1377:	}
        -: 1378:    }
        -: 1379:
        -: 1380:  //add bonus
    #####: 1381:  state->coins += bonus;
        -: 1382:
    #####: 1383:  return 0;
        -: 1384:}
        -: 1385:
        -: 1386:
        -: 1387://end of dominion.c
unittest2.c:
Test passed! The return value of isGameOver was 1 when the province count was set to zero
Test passed! The return value of isGameOver was 0 when all the supply counts were greater than 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
Test passed! The return value of isGameOver was 1 when 3 random supply counts were 0
File 'dominion.c'
Lines executed:7.17% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
    #####:  215:    card = floor(Random() * state->deckCount[player]);
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
     1002:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
     1002:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      113:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      889:  401:  j = 0;
    23114:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    22225:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     2664:  406:	  j++;
        -:  407:	}
        -:  408:    }
      889:  409:  if ( j >= 3)
        -:  410:    {
      888:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    #####:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
        -:  581:}
        -:  582:
       35:  583:int getCost(int cardNumber)
        -:  584:{
       35:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo:
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
        8:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int smithy_card(int handPos, struct gameState *state, int currentPlayer){
        -:  647:  //+3 Cards
        -:  648:  int i;
        -:  649:
    #####:  650:	  for (i = 0; i < 4; i++)	//4 not 3 bug here
        -:  651:	{
    #####:  652:	  drawCard(currentPlayer, state);
        -:  653:	}
        -:  654:
        -:  655:      //discard card from hand
    #####:  656:      discardCard(handPos, currentPlayer, state, 0);
    #####:  657:      return 0;
        -:  658:
        -:  659:}
    #####:  660:int adventurer_card(struct gameState *state, int currentPlayer){
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
    #####:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
    #####:  664:  int z = 0;
    #####:  665:  while(drawntreasure<5){	//error, lets you get 5 instead of 2 treasures
    #####:  666:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  667:	  shuffle(currentPlayer, state);
        -:  668:	}
    #####:  669:	drawCard(currentPlayer, state);
    #####:  670:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  671:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  672:	  drawntreasure++;
        -:  673:	else{
    #####:  674:	  temphand[z]=cardDrawn;
    #####:  675:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  676:	  z++;
        -:  677:	}
        -:  678:      }
    #####:  679:      while(z-1>=0){
    #####:  680:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  681:	z=z-1;
        -:  682:      }
    #####:  683:      return 0;
        -:  684:
        -:  685:}
    #####:  686:int baron_card(int choice1, struct gameState *state, int currentPlayer){
    #####:  687:	state->numBuys++;//Increase buys by 1!
    #####:  688:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  689:	int p = 0;//Iterator for hand!
    #####:  690:	int card_not_discarded = 1;//Flag for discard set!
    #####:  691:	while(card_not_discarded){
    #####:  692:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  693:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  694:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  695:	    state->discardCount[currentPlayer]++;
    #####:  696:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  697:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  698:	    }
    #####:  699:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  700:	    state->handCount[currentPlayer]--;
    #####:  701:	    card_not_discarded = 0;//Exit the loop
        -:  702:	  }
    #####:  703:	  else if (p > state->handCount[currentPlayer]){
        -:  704:	    if(DEBUG) {
        -:  705:	      printf("No estate cards in your hand, invalid choice\n");
        -:  706:	      printf("Must gain an estate if there are any\n");
        -:  707:	    }
    #####:  708:	    if (supplyCount(estate, state) > 0){
    #####:  709:	      gainCard(estate, state, 0, currentPlayer);
    #####:  710:	      state->supplyCount[estate]--;//Decrement estates
    #####:  711:	      if (supplyCount(estate, state) == 0){
    #####:  712:		isGameOver(state);
        -:  713:	      }
        -:  714:	    }
    #####:  715:	    card_not_discarded = 0;//Exit the loop
        -:  716:	  }
        -:  717:
        -:  718:	  else{
    #####:  719:	    p++;//Next card
        -:  720:	  }
        -:  721:	}
        -:  722:      }
        -:  723:
        -:  724:      else{
    #####:  725:	if (supplyCount(estate, state) > 0){
    #####:  726:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  727:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  728:	  if (supplyCount(estate, state) == 0){
    #####:  729:	    isGameOver(state);
        -:  730:	  }
        -:  731:	}
        -:  732:      }
        -:  733:
        -:  734:
    #####:  735:      return 0;
        -:  736:
        -:  737:}
    #####:  738:int mine_card(int choice1,int choice2, int handPos, struct gameState *state, int currentPlayer){
        -:  739:	int i;
        -:  740:	int j;
        -:  741:
        -:  742:
    #####:  743:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  744:
    #####:  745:      if (state->hand[currentPlayer][choice1] < copper && state->hand[currentPlayer][choice1] > gold)
        -:  746:	{
    #####:  747:	  return -1;
        -:  748:	}
        -:  749:
    #####:  750:      if (choice2 > treasure_map || choice2 < curse)
        -:  751:	{
    #####:  752:	  return -1;
        -:  753:	}
        -:  754:
    #####:  755:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:
    #####:  760:      gainCard(choice2, state, 2, currentPlayer);
        -:  761:
        -:  762:      //discard card from hand
    #####:  763:      discardCard(handPos, currentPlayer, state, 0);
        -:  764:
        -:  765:
        -:  766:      //discard trashed card
        -:  767:	  //
        -:  768:
    #####:  769:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  770:	{
    #####:  771:	  if (state->hand[currentPlayer][i] == j)
        -:  772:	    {
    #####:  773:	      discardCard(i, currentPlayer, state, 0);
    #####:  774:		  break;
        -:  775:	    }
        -:  776:	}
        -:  777:
        -:  778:
    #####:  779:      return 0;
        -:  780:
        -:  781:}
        -:  782:
        -:  783:
    #####:  784:int council_room_card(struct gameState *state, int handPos, int currentPlayer){
        -:  785:  //+4 Cards
        -:  786:  int i;
        -:  787:
    #####:  788:      for (i = 0; i < 4; i++)
        -:  789:  	  {
    #####:  790:	  drawCard(currentPlayer, state);
        -:  791:	}
        -:  792:
        -:  793:      //+1 Buy
    #####:  794:      state->numBuys++;
        -:  795:
        -:  796:      //Each other player draws a card
    #####:  797:      for (i = 0; i < state->numPlayers; i++)
        -:  798:	{
        -:  799:	 //bug, doesn' t exlude current player for additional draw
    #####:  800:		 if ( i == currentPlayer )// added bug changed not equal to equal
        -:  801:	    {
    #####:  802:	      drawCard(i, state);
        -:  803:	    }
        -:  804:	}
        -:  805:
        -:  806:      //put played card in played card pile
    #####:  807:      discardCard(handPos, currentPlayer, state, 0);
        -:  808:
    #####:  809:      return 0;
        -:  810:
        -:  811:}
        -:  812:
        -:  813:
    #####:  814:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  815:{
        -:  816:  int i;
        -:  817:  int j;
        -:  818:  int k;
        -:  819:  int x;
        -:  820:  int index;
    #####:  821:  int currentPlayer = whoseTurn(state);
    #####:  822:  int nextPlayer = currentPlayer + 1;
        -:  823:
    #####:  824:  int tributeRevealedCards[2] = {-1, -1};
        -:  825:  int temphand[MAX_HAND];// moved above the if statement
        -:  826: // int drawntreasure=0;
        -:  827: // int cardDrawn;
        -:  828:  //int z = 0;// this is the counter for the temp hand
    #####:  829:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  830:    nextPlayer = 0;
        -:  831:  }
        -:  832:
        -:  833:
        -:  834:  //uses switch to select card and perform actions
    #####:  835:  switch( card )
        -:  836:    {
        -:  837:
        -:  838:	//refactored
        -:  839:    case adventurer:
        -:  840:
    #####:  841:	return adventurer_card(state, currentPlayer);
        -:  842:
        -:  843:	//refactored
        -:  844:    case council_room:
    #####:  845:    	council_room_card(state, handPos, currentPlayer);
        -:  846:
        -:  847:
        -:  848:    case feast:
        -:  849:      //gain card with cost up to 5
        -:  850:      //Backup hand
    #####:  851:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  852:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  853:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  854:      }
        -:  855:      //Backup hand
        -:  856:
        -:  857:      //Update Coins for Buy
    #####:  858:      updateCoins(currentPlayer, state, 5);
    #####:  859:      x = 1;//Condition to loop on
    #####:  860:      while( x == 1) {//Buy one card
    #####:  861:	if (supplyCount(choice1, state) <= 0){
        -:  862:	  if (DEBUG)
        -:  863:	    printf("None of that card left, sorry!\n");
        -:  864:
        -:  865:	  if (DEBUG){
        -:  866:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  867:	  }
        -:  868:	}
    #####:  869:	else if (state->coins < getCost(choice1)){
    #####:  870:	  printf("That card is too expensive!\n");
        -:  871:
        -:  872:	  if (DEBUG){
        -:  873:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  874:	  }
        -:  875:	}
        -:  876:	else{
        -:  877:
        -:  878:	  if (DEBUG){
        -:  879:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  880:	  }
        -:  881:
    #####:  882:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  883:	  x = 0;//No more buying cards
        -:  884:
        -:  885:	  if (DEBUG){
        -:  886:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  887:	  }
        -:  888:
        -:  889:	}
        -:  890:      }
        -:  891:
        -:  892:      //Reset Hand
    #####:  893:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  894:	state->hand[currentPlayer][i] = temphand[i];
    #####:  895:	temphand[i] = -1;
        -:  896:      }
        -:  897:      //Reset Hand
        -:  898:
    #####:  899:      return 0;
        -:  900:
        -:  901:    case gardens:
    #####:  902:      return -1;
        -:  903:
        -:  904:
        -:  905:
        -:  906:	//refactored
        -:  907:	case mine:
    #####:  908:     	return mine_card(choice1, choice2, handPos, state, currentPlayer);
        -:  909:
        -:  910:
        -:  911:
        -:  912:    case remodel:
    #####:  913:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  914:
    #####:  915:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  916:	{
    #####:  917:	  return -1;
        -:  918:	}
        -:  919:
    #####:  920:      gainCard(choice2, state, 0, currentPlayer);
        -:  921:
        -:  922:      //discard card from hand
    #####:  923:      discardCard(handPos, currentPlayer, state, 0);
        -:  924:
        -:  925:      //discard trashed card
    #####:  926:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  927:	{
    #####:  928:	  if (state->hand[currentPlayer][i] == j)
        -:  929:	    {
    #####:  930:	      discardCard(i, currentPlayer, state, 0);
    #####:  931:	      break;
        -:  932:	    }
        -:  933:	}
        -:  934:
        -:  935:
    #####:  936:      return 0;
        -:  937:
        -:  938:
        -:  939:	  //refactored
        -:  940:    case smithy:
    #####:  941:   		return smithy_card(handPos, state, currentPlayer);
        -:  942:
        -:  943:    case village:
        -:  944:      //+1 Card
    #####:  945:      drawCard(currentPlayer, state);
        -:  946:
        -:  947:      //+2 Actions
    #####:  948:      state->numActions = state->numActions + 2;
        -:  949:
        -:  950:      //discard played card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
    #####:  952:      return 0;
        -:  953:
        -:  954:
        -:  955:	//refactored
        -:  956:    case baron:
    #####:  957:    	return baron_card(choice1, state, currentPlayer);
        -:  958:
        -:  959:    case great_hall:
        -:  960:      //+1 Card
    #####:  961:      drawCard(currentPlayer, state);
        -:  962:
        -:  963:      //+1 Actions
    #####:  964:      state->numActions++;
        -:  965:
        -:  966:      //discard card from hand
    #####:  967:      discardCard(handPos, currentPlayer, state, 0);
    #####:  968:      return 0;
        -:  969:
        -:  970:    case minion:
        -:  971:      //+1 action
    #####:  972:      state->numActions++;
        -:  973:
        -:  974:      //discard card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);
        -:  976:
    #####:  977:      if (choice1)		//+2 coins
        -:  978:	{
    #####:  979:	  state->coins = state->coins + 2;
        -:  980:	}
        -:  981:
    #####:  982:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  983:	{
        -:  984:	  //discard hand
    #####:  985:	  while(numHandCards(state) > 0)
        -:  986:	    {
    #####:  987:	      discardCard(handPos, currentPlayer, state, 0);
        -:  988:	    }
        -:  989:
        -:  990:	  //draw 4
    #####:  991:	  for (i = 0; i < 4; i++)
        -:  992:	    {
    #####:  993:	      drawCard(currentPlayer, state);
        -:  994:	    }
        -:  995:
        -:  996:	  //other players discard hand and redraw if hand size > 4
    #####:  997:	  for (i = 0; i < state->numPlayers; i++)
        -:  998:	    {
    #####:  999:	      if (i != currentPlayer)
        -: 1000:		{
    #####: 1001:		  if ( state->handCount[i] > 4 )
        -: 1002:		    {
        -: 1003:		      //discard hand
    #####: 1004:		      while( state->handCount[i] > 0 )
        -: 1005:			{
    #####: 1006:			  discardCard(handPos, i, state, 0);
        -: 1007:			}
        -: 1008:
        -: 1009:		      //draw 4
    #####: 1010:		      for (j = 0; j < 4; j++)
        -: 1011:			{
    #####: 1012:			  drawCard(i, state);
        -: 1013:			}
        -: 1014:		    }
        -: 1015:		}
        -: 1016:	    }
        -: 1017:
        -: 1018:	}
    #####: 1019:      return 0;
        -: 1020:
        -: 1021:    case steward:
    #####: 1022:      if (choice1 == 1)
        -: 1023:	{
        -: 1024:	  //+2 cards
    #####: 1025:	  drawCard(currentPlayer, state);
    #####: 1026:	  drawCard(currentPlayer, state);
        -: 1027:	}
    #####: 1028:      else if (choice1 == 2)
        -: 1029:	{
        -: 1030:	  //+2 coins
    #####: 1031:	  state->coins = state->coins + 2;
        -: 1032:	}
        -: 1033:      else
        -: 1034:	{
        -: 1035:	  //trash 2 cards in hand
    #####: 1036:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1037:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card from hand
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case tribute:
    #####: 1045:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1046:	if (state->deckCount[nextPlayer] > 0){
    #####: 1047:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	  state->deckCount[nextPlayer]--;
        -: 1049:	}
    #####: 1050:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1051:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1052:	  state->discardCount[nextPlayer]--;
        -: 1053:	}
        -: 1054:	else{
        -: 1055:	  //No Card to Reveal
        -: 1056:	  if (DEBUG){
        -: 1057:	    printf("No cards to reveal\n");
        -: 1058:	  }
        -: 1059:	}
        -: 1060:      }
        -: 1061:
        -: 1062:      else{
    #####: 1063:	if (state->deckCount[nextPlayer] == 0){
    #####: 1064:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1065:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1066:	    state->deckCount[nextPlayer]++;
    #####: 1067:	    state->discard[nextPlayer][i] = -1;
    #####: 1068:	    state->discardCount[nextPlayer]--;
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1072:	}
    #####: 1073:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1074:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1075:	state->deckCount[nextPlayer]--;
    #####: 1076:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1077:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1078:	state->deckCount[nextPlayer]--;
        -: 1079:      }
        -: 1080:
    #####: 1081:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1082:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1083:	state->playedCardCount++;
    #####: 1084:	tributeRevealedCards[1] = -1;
        -: 1085:      }
        -: 1086:
    #####: 1087:      for (i = 0; i <= 2; i ++){
    #####: 1088:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1089:	  state->coins += 2;
        -: 1090:	}
        -: 1091:
    #####: 1092:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1093:	  drawCard(currentPlayer, state);
    #####: 1094:	  drawCard(currentPlayer, state);
        -: 1095:	}
        -: 1096:	else{//Action Card
    #####: 1097:	  state->numActions = state->numActions + 2;
        -: 1098:	}
        -: 1099:      }
        -: 1100:
    #####: 1101:      return 0;
        -: 1102:
        -: 1103:    case ambassador:
    #####: 1104:      j = 0;		//used to check if player has enough cards to discard
        -: 1105:
    #####: 1106:      if (choice2 > 2 || choice2 < 0)
        -: 1107:	{
    #####: 1108:	  return -1;
        -: 1109:	}
        -: 1110:
    #####: 1111:      if (choice1 == handPos)
        -: 1112:	{
    #####: 1113:	  return -1;
        -: 1114:	}
        -: 1115:
    #####: 1116:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1117:	{
    #####: 1118:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1119:	    {
    #####: 1120:	      j++;
        -: 1121:	    }
        -: 1122:	}
    #####: 1123:      if (j < choice2)
        -: 1124:	{
    #####: 1125:	  return -1;
        -: 1126:	}
        -: 1127:
        -: 1128:      if (DEBUG)
        -: 1129:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1130:
        -: 1131:      //increase supply count for choosen card by amount being discarded
    #####: 1132:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1133:
        -: 1134:      //each other player gains a copy of revealed card
    #####: 1135:      for (i = 0; i < state->numPlayers; i++)
        -: 1136:	{
    #####: 1137:	  if (i != currentPlayer)
        -: 1138:	    {
    #####: 1139:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1140:	    }
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
        -: 1146:      //trash copies of cards returned to supply
    #####: 1147:      for (j = 0; j < choice2; j++)
        -: 1148:	{
    #####: 1149:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1150:	    {
    #####: 1151:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1152:		{
    #####: 1153:		  discardCard(i, currentPlayer, state, 1);
    #####: 1154:		  break;
        -: 1155:		}
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
    #####: 1159:      return 0;
        -: 1160:
        -: 1161:    case cutpurse:
        -: 1162:
    #####: 1163:      updateCoins(currentPlayer, state, 2);
    #####: 1164:      for (i = 0; i < state->numPlayers; i++)
        -: 1165:	{
    #####: 1166:	  if (i != currentPlayer)
        -: 1167:	    {
    #####: 1168:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1169:		{
    #####: 1170:		  if (state->hand[i][j] == copper)
        -: 1171:		    {
    #####: 1172:		      discardCard(j, i, state, 0);
    #####: 1173:		      break;
        -: 1174:		    }
    #####: 1175:		  if (j == state->handCount[i])
        -: 1176:		    {
    #####: 1177:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1178:			{
        -: 1179:			  if (DEBUG)
        -: 1180:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1181:			}
    #####: 1182:		      break;
        -: 1183:		    }
        -: 1184:		}
        -: 1185:
        -: 1186:	    }
        -: 1187:
        -: 1188:	}
        -: 1189:
        -: 1190:      //discard played card from hand
    #####: 1191:      discardCard(handPos, currentPlayer, state, 0);
        -: 1192:
    #####: 1193:      return 0;
        -: 1194:
        -: 1195:
        -: 1196:    case embargo:
        -: 1197:      //+2 Coins
    #####: 1198:      state->coins = state->coins + 2;
        -: 1199:
        -: 1200:      //see if selected pile is in play
    #####: 1201:      if ( state->supplyCount[choice1] == -1 )
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
        -: 1206:      //add embargo token to selected supply pile
    #####: 1207:      state->embargoTokens[choice1]++;
        -: 1208:
        -: 1209:      //trash card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1211:      return 0;
        -: 1212:
        -: 1213:    case outpost:
        -: 1214:      //set outpost flag
    #####: 1215:      state->outpostPlayed++;
        -: 1216:
        -: 1217:      //discard card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1219:      return 0;
        -: 1220:
        -: 1221:    case salvager:
        -: 1222:      //+1 buy
    #####: 1223:      state->numBuys++;
        -: 1224:
    #####: 1225:      if (choice1)
        -: 1226:	{
        -: 1227:	  //gain coins equal to trashed card
    #####: 1228:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1229:	  //trash card
    #####: 1230:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1231:	}
        -: 1232:
        -: 1233:      //discard card
    #####: 1234:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1235:      return 0;
        -: 1236:
        -: 1237:    case sea_hag:
    #####: 1238:      for (i = 0; i < state->numPlayers; i++){
    #####: 1239:	if (i != currentPlayer){
    #####: 1240:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1241:	  state->discardCount[i]++;
    #####: 1242:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1243:	}
        -: 1244:      }
    #####: 1245:      return 0;
        -: 1246:
        -: 1247:    case treasure_map:
        -: 1248:      //search hand for another treasure_map
    #####: 1249:      index = -1;
    #####: 1250:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1251:	{
    #####: 1252:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1253:	    {
    #####: 1254:	      index = i;
    #####: 1255:	      break;
        -: 1256:	    }
        -: 1257:	}
    #####: 1258:      if (index > -1)
        -: 1259:	{
        -: 1260:	  //trash both treasure cards
    #####: 1261:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1262:	  discardCard(index, currentPlayer, state, 1);
        -: 1263:
        -: 1264:	  //gain 4 Gold cards
    #####: 1265:	  for (i = 0; i < 4; i++)
        -: 1266:	    {
    #####: 1267:	      gainCard(gold, state, 1, currentPlayer);
        -: 1268:	    }
        -: 1269:
        -: 1270:	  //return success
    #####: 1271:	  return 1;
        -: 1272:	}
        -: 1273:
        -: 1274:      //no second treasure_map found in hand
    #####: 1275:      return -1;
        -: 1276:    }
        -: 1277:
    #####: 1278:  return -1;
        -: 1279:}
        -: 1280:
    #####: 1281:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1282:{
        -: 1283:
        -: 1284:  //if card is not trashed, added to Played pile
    #####: 1285:  if (trashFlag < 1)
        -: 1286:    {
        -: 1287:      //add card to played pile
    #####: 1288:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1289:      state->playedCardCount++;
        -: 1290:    }
        -: 1291:
        -: 1292:  //set played card to -1
    #####: 1293:  state->hand[currentPlayer][handPos] = -1;
        -: 1294:
        -: 1295:  //remove card from player's hand
    #####: 1296:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1297:    {
        -: 1298:      //reduce number of cards in hand
    #####: 1299:      state->handCount[currentPlayer]--;
        -: 1300:    }
    #####: 1301:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1302:    {
        -: 1303:      //reduce number of cards in hand
    #####: 1304:      state->handCount[currentPlayer]--;
        -: 1305:    }
        -: 1306:  else
        -: 1307:    {
        -: 1308:      //replace discarded card with last card in hand
    #####: 1309:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1310:      //set last card to -1
    #####: 1311:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1312:      //reduce number of cards in hand
    #####: 1313:      state->handCount[currentPlayer]--;
        -: 1314:    }
        -: 1315:
    #####: 1316:  return 0;
        -: 1317:}
        -: 1318:
    #####: 1319:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1320:{
        -: 1321:  //Note: supplyPos is enum of choosen card
        -: 1322:
        -: 1323:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1324:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1325:    {
    #####: 1326:      return -1;
        -: 1327:    }
        -: 1328:
        -: 1329:  //added card for [whoseTurn] current player:
        -: 1330:  // toFlag = 0 : add to discard
        -: 1331:  // toFlag = 1 : add to deck
        -: 1332:  // toFlag = 2 : add to hand
        -: 1333:
    #####: 1334:  if (toFlag == 1)
        -: 1335:    {
    #####: 1336:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1337:      state->deckCount[player]++;
        -: 1338:    }
    #####: 1339:  else if (toFlag == 2)
        -: 1340:    {
    #####: 1341:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1342:      state->handCount[player]++;
        -: 1343:    }
        -: 1344:  else
        -: 1345:    {
    #####: 1346:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1347:      state->discardCount[player]++;
        -: 1348:    }
        -: 1349:
        -: 1350:  //decrease number in supply pile
    #####: 1351:  state->supplyCount[supplyPos]--;
        -: 1352:
    #####: 1353:  return 0;
        -: 1354:}
        -: 1355:
    #####: 1356:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1357:{
        -: 1358:  int i;
        -: 1359:
        -: 1360:  //reset coin count
    #####: 1361:  state->coins = 0;
        -: 1362:
        -: 1363:  //add coins for each Treasure card in player's hand
    #####: 1364:  for (i = 0; i < state->handCount[player]; i++)
        -: 1365:    {
    #####: 1366:      if (state->hand[player][i] == copper)
        -: 1367:	{
    #####: 1368:	  state->coins += 1;
        -: 1369:	}
    #####: 1370:      else if (state->hand[player][i] == silver)
        -: 1371:	{
    #####: 1372:	  state->coins += 2;
        -: 1373:	}
    #####: 1374:      else if (state->hand[player][i] == gold)
        -: 1375:	{
    #####: 1376:	  state->coins += 3;
        -: 1377:	}
        -: 1378:    }
        -: 1379:
        -: 1380:  //add bonus
    #####: 1381:  state->coins += bonus;
        -: 1382:
    #####: 1383:  return 0;
        -: 1384:}
        -: 1385:
        -: 1386:
        -: 1387://end of dominion.c
unittest3.c:
Expected coin count: 0. Actual coin count: 0 
Expected coin count: 1. Actual coin count: 1 
Expected coin count: 0. Actual coin count: 0 
Expected coin count: 1. Actual coin count: 1 
Expected coin count: 0. Actual coin count: 0 
Expected coin count: 1. Actual coin count: 1 
Expected coin count: 0. Actual coin count: 0 
Expected coin count: 1. Actual coin count: 1 
File 'dominion.c'
Lines executed:8.06% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
    #####:  215:    card = floor(Random() * state->deckCount[player]);
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
     1002:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
     1002:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      113:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      889:  401:  j = 0;
    23114:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    22225:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     2664:  406:	  j++;
        -:  407:	}
        -:  408:    }
      889:  409:  if ( j >= 3)
        -:  410:    {
      888:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    #####:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
        -:  581:}
        -:  582:
       35:  583:int getCost(int cardNumber)
        -:  584:{
       35:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo:
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
        8:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int smithy_card(int handPos, struct gameState *state, int currentPlayer){
        -:  647:  //+3 Cards
        -:  648:  int i;
        -:  649:
    #####:  650:	  for (i = 0; i < 4; i++)	//4 not 3 bug here
        -:  651:	{
    #####:  652:	  drawCard(currentPlayer, state);
        -:  653:	}
        -:  654:
        -:  655:      //discard card from hand
    #####:  656:      discardCard(handPos, currentPlayer, state, 0);
    #####:  657:      return 0;
        -:  658:
        -:  659:}
    #####:  660:int adventurer_card(struct gameState *state, int currentPlayer){
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
    #####:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
    #####:  664:  int z = 0;
    #####:  665:  while(drawntreasure<5){	//error, lets you get 5 instead of 2 treasures
    #####:  666:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  667:	  shuffle(currentPlayer, state);
        -:  668:	}
    #####:  669:	drawCard(currentPlayer, state);
    #####:  670:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  671:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  672:	  drawntreasure++;
        -:  673:	else{
    #####:  674:	  temphand[z]=cardDrawn;
    #####:  675:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  676:	  z++;
        -:  677:	}
        -:  678:      }
    #####:  679:      while(z-1>=0){
    #####:  680:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  681:	z=z-1;
        -:  682:      }
    #####:  683:      return 0;
        -:  684:
        -:  685:}
    #####:  686:int baron_card(int choice1, struct gameState *state, int currentPlayer){
    #####:  687:	state->numBuys++;//Increase buys by 1!
    #####:  688:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  689:	int p = 0;//Iterator for hand!
    #####:  690:	int card_not_discarded = 1;//Flag for discard set!
    #####:  691:	while(card_not_discarded){
    #####:  692:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  693:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  694:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  695:	    state->discardCount[currentPlayer]++;
    #####:  696:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  697:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  698:	    }
    #####:  699:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  700:	    state->handCount[currentPlayer]--;
    #####:  701:	    card_not_discarded = 0;//Exit the loop
        -:  702:	  }
    #####:  703:	  else if (p > state->handCount[currentPlayer]){
        -:  704:	    if(DEBUG) {
        -:  705:	      printf("No estate cards in your hand, invalid choice\n");
        -:  706:	      printf("Must gain an estate if there are any\n");
        -:  707:	    }
    #####:  708:	    if (supplyCount(estate, state) > 0){
    #####:  709:	      gainCard(estate, state, 0, currentPlayer);
    #####:  710:	      state->supplyCount[estate]--;//Decrement estates
    #####:  711:	      if (supplyCount(estate, state) == 0){
    #####:  712:		isGameOver(state);
        -:  713:	      }
        -:  714:	    }
    #####:  715:	    card_not_discarded = 0;//Exit the loop
        -:  716:	  }
        -:  717:
        -:  718:	  else{
    #####:  719:	    p++;//Next card
        -:  720:	  }
        -:  721:	}
        -:  722:      }
        -:  723:
        -:  724:      else{
    #####:  725:	if (supplyCount(estate, state) > 0){
    #####:  726:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  727:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  728:	  if (supplyCount(estate, state) == 0){
    #####:  729:	    isGameOver(state);
        -:  730:	  }
        -:  731:	}
        -:  732:      }
        -:  733:
        -:  734:
    #####:  735:      return 0;
        -:  736:
        -:  737:}
    #####:  738:int mine_card(int choice1,int choice2, int handPos, struct gameState *state, int currentPlayer){
        -:  739:	int i;
        -:  740:	int j;
        -:  741:
        -:  742:
    #####:  743:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  744:
    #####:  745:      if (state->hand[currentPlayer][choice1] < copper && state->hand[currentPlayer][choice1] > gold)
        -:  746:	{
    #####:  747:	  return -1;
        -:  748:	}
        -:  749:
    #####:  750:      if (choice2 > treasure_map || choice2 < curse)
        -:  751:	{
    #####:  752:	  return -1;
        -:  753:	}
        -:  754:
    #####:  755:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:
    #####:  760:      gainCard(choice2, state, 2, currentPlayer);
        -:  761:
        -:  762:      //discard card from hand
    #####:  763:      discardCard(handPos, currentPlayer, state, 0);
        -:  764:
        -:  765:
        -:  766:      //discard trashed card
        -:  767:	  //
        -:  768:
    #####:  769:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  770:	{
    #####:  771:	  if (state->hand[currentPlayer][i] == j)
        -:  772:	    {
    #####:  773:	      discardCard(i, currentPlayer, state, 0);
    #####:  774:		  break;
        -:  775:	    }
        -:  776:	}
        -:  777:
        -:  778:
    #####:  779:      return 0;
        -:  780:
        -:  781:}
        -:  782:
        -:  783:
    #####:  784:int council_room_card(struct gameState *state, int handPos, int currentPlayer){
        -:  785:  //+4 Cards
        -:  786:  int i;
        -:  787:
    #####:  788:      for (i = 0; i < 4; i++)
        -:  789:  	  {
    #####:  790:	  drawCard(currentPlayer, state);
        -:  791:	}
        -:  792:
        -:  793:      //+1 Buy
    #####:  794:      state->numBuys++;
        -:  795:
        -:  796:      //Each other player draws a card
    #####:  797:      for (i = 0; i < state->numPlayers; i++)
        -:  798:	{
        -:  799:	 //bug, doesn' t exlude current player for additional draw
    #####:  800:		 if ( i == currentPlayer )// added bug changed not equal to equal
        -:  801:	    {
    #####:  802:	      drawCard(i, state);
        -:  803:	    }
        -:  804:	}
        -:  805:
        -:  806:      //put played card in played card pile
    #####:  807:      discardCard(handPos, currentPlayer, state, 0);
        -:  808:
    #####:  809:      return 0;
        -:  810:
        -:  811:}
        -:  812:
        -:  813:
    #####:  814:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  815:{
        -:  816:  int i;
        -:  817:  int j;
        -:  818:  int k;
        -:  819:  int x;
        -:  820:  int index;
    #####:  821:  int currentPlayer = whoseTurn(state);
    #####:  822:  int nextPlayer = currentPlayer + 1;
        -:  823:
    #####:  824:  int tributeRevealedCards[2] = {-1, -1};
        -:  825:  int temphand[MAX_HAND];// moved above the if statement
        -:  826: // int drawntreasure=0;
        -:  827: // int cardDrawn;
        -:  828:  //int z = 0;// this is the counter for the temp hand
    #####:  829:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  830:    nextPlayer = 0;
        -:  831:  }
        -:  832:
        -:  833:
        -:  834:  //uses switch to select card and perform actions
    #####:  835:  switch( card )
        -:  836:    {
        -:  837:
        -:  838:	//refactored
        -:  839:    case adventurer:
        -:  840:
    #####:  841:	return adventurer_card(state, currentPlayer);
        -:  842:
        -:  843:	//refactored
        -:  844:    case council_room:
    #####:  845:    	council_room_card(state, handPos, currentPlayer);
        -:  846:
        -:  847:
        -:  848:    case feast:
        -:  849:      //gain card with cost up to 5
        -:  850:      //Backup hand
    #####:  851:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  852:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  853:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  854:      }
        -:  855:      //Backup hand
        -:  856:
        -:  857:      //Update Coins for Buy
    #####:  858:      updateCoins(currentPlayer, state, 5);
    #####:  859:      x = 1;//Condition to loop on
    #####:  860:      while( x == 1) {//Buy one card
    #####:  861:	if (supplyCount(choice1, state) <= 0){
        -:  862:	  if (DEBUG)
        -:  863:	    printf("None of that card left, sorry!\n");
        -:  864:
        -:  865:	  if (DEBUG){
        -:  866:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  867:	  }
        -:  868:	}
    #####:  869:	else if (state->coins < getCost(choice1)){
    #####:  870:	  printf("That card is too expensive!\n");
        -:  871:
        -:  872:	  if (DEBUG){
        -:  873:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  874:	  }
        -:  875:	}
        -:  876:	else{
        -:  877:
        -:  878:	  if (DEBUG){
        -:  879:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  880:	  }
        -:  881:
    #####:  882:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  883:	  x = 0;//No more buying cards
        -:  884:
        -:  885:	  if (DEBUG){
        -:  886:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  887:	  }
        -:  888:
        -:  889:	}
        -:  890:      }
        -:  891:
        -:  892:      //Reset Hand
    #####:  893:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  894:	state->hand[currentPlayer][i] = temphand[i];
    #####:  895:	temphand[i] = -1;
        -:  896:      }
        -:  897:      //Reset Hand
        -:  898:
    #####:  899:      return 0;
        -:  900:
        -:  901:    case gardens:
    #####:  902:      return -1;
        -:  903:
        -:  904:
        -:  905:
        -:  906:	//refactored
        -:  907:	case mine:
    #####:  908:     	return mine_card(choice1, choice2, handPos, state, currentPlayer);
        -:  909:
        -:  910:
        -:  911:
        -:  912:    case remodel:
    #####:  913:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  914:
    #####:  915:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  916:	{
    #####:  917:	  return -1;
        -:  918:	}
        -:  919:
    #####:  920:      gainCard(choice2, state, 0, currentPlayer);
        -:  921:
        -:  922:      //discard card from hand
    #####:  923:      discardCard(handPos, currentPlayer, state, 0);
        -:  924:
        -:  925:      //discard trashed card
    #####:  926:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  927:	{
    #####:  928:	  if (state->hand[currentPlayer][i] == j)
        -:  929:	    {
    #####:  930:	      discardCard(i, currentPlayer, state, 0);
    #####:  931:	      break;
        -:  932:	    }
        -:  933:	}
        -:  934:
        -:  935:
    #####:  936:      return 0;
        -:  937:
        -:  938:
        -:  939:	  //refactored
        -:  940:    case smithy:
    #####:  941:   		return smithy_card(handPos, state, currentPlayer);
        -:  942:
        -:  943:    case village:
        -:  944:      //+1 Card
    #####:  945:      drawCard(currentPlayer, state);
        -:  946:
        -:  947:      //+2 Actions
    #####:  948:      state->numActions = state->numActions + 2;
        -:  949:
        -:  950:      //discard played card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
    #####:  952:      return 0;
        -:  953:
        -:  954:
        -:  955:	//refactored
        -:  956:    case baron:
    #####:  957:    	return baron_card(choice1, state, currentPlayer);
        -:  958:
        -:  959:    case great_hall:
        -:  960:      //+1 Card
    #####:  961:      drawCard(currentPlayer, state);
        -:  962:
        -:  963:      //+1 Actions
    #####:  964:      state->numActions++;
        -:  965:
        -:  966:      //discard card from hand
    #####:  967:      discardCard(handPos, currentPlayer, state, 0);
    #####:  968:      return 0;
        -:  969:
        -:  970:    case minion:
        -:  971:      //+1 action
    #####:  972:      state->numActions++;
        -:  973:
        -:  974:      //discard card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);
        -:  976:
    #####:  977:      if (choice1)		//+2 coins
        -:  978:	{
    #####:  979:	  state->coins = state->coins + 2;
        -:  980:	}
        -:  981:
    #####:  982:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  983:	{
        -:  984:	  //discard hand
    #####:  985:	  while(numHandCards(state) > 0)
        -:  986:	    {
    #####:  987:	      discardCard(handPos, currentPlayer, state, 0);
        -:  988:	    }
        -:  989:
        -:  990:	  //draw 4
    #####:  991:	  for (i = 0; i < 4; i++)
        -:  992:	    {
    #####:  993:	      drawCard(currentPlayer, state);
        -:  994:	    }
        -:  995:
        -:  996:	  //other players discard hand and redraw if hand size > 4
    #####:  997:	  for (i = 0; i < state->numPlayers; i++)
        -:  998:	    {
    #####:  999:	      if (i != currentPlayer)
        -: 1000:		{
    #####: 1001:		  if ( state->handCount[i] > 4 )
        -: 1002:		    {
        -: 1003:		      //discard hand
    #####: 1004:		      while( state->handCount[i] > 0 )
        -: 1005:			{
    #####: 1006:			  discardCard(handPos, i, state, 0);
        -: 1007:			}
        -: 1008:
        -: 1009:		      //draw 4
    #####: 1010:		      for (j = 0; j < 4; j++)
        -: 1011:			{
    #####: 1012:			  drawCard(i, state);
        -: 1013:			}
        -: 1014:		    }
        -: 1015:		}
        -: 1016:	    }
        -: 1017:
        -: 1018:	}
    #####: 1019:      return 0;
        -: 1020:
        -: 1021:    case steward:
    #####: 1022:      if (choice1 == 1)
        -: 1023:	{
        -: 1024:	  //+2 cards
    #####: 1025:	  drawCard(currentPlayer, state);
    #####: 1026:	  drawCard(currentPlayer, state);
        -: 1027:	}
    #####: 1028:      else if (choice1 == 2)
        -: 1029:	{
        -: 1030:	  //+2 coins
    #####: 1031:	  state->coins = state->coins + 2;
        -: 1032:	}
        -: 1033:      else
        -: 1034:	{
        -: 1035:	  //trash 2 cards in hand
    #####: 1036:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1037:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card from hand
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case tribute:
    #####: 1045:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1046:	if (state->deckCount[nextPlayer] > 0){
    #####: 1047:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	  state->deckCount[nextPlayer]--;
        -: 1049:	}
    #####: 1050:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1051:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1052:	  state->discardCount[nextPlayer]--;
        -: 1053:	}
        -: 1054:	else{
        -: 1055:	  //No Card to Reveal
        -: 1056:	  if (DEBUG){
        -: 1057:	    printf("No cards to reveal\n");
        -: 1058:	  }
        -: 1059:	}
        -: 1060:      }
        -: 1061:
        -: 1062:      else{
    #####: 1063:	if (state->deckCount[nextPlayer] == 0){
    #####: 1064:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1065:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1066:	    state->deckCount[nextPlayer]++;
    #####: 1067:	    state->discard[nextPlayer][i] = -1;
    #####: 1068:	    state->discardCount[nextPlayer]--;
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1072:	}
    #####: 1073:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1074:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1075:	state->deckCount[nextPlayer]--;
    #####: 1076:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1077:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1078:	state->deckCount[nextPlayer]--;
        -: 1079:      }
        -: 1080:
    #####: 1081:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1082:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1083:	state->playedCardCount++;
    #####: 1084:	tributeRevealedCards[1] = -1;
        -: 1085:      }
        -: 1086:
    #####: 1087:      for (i = 0; i <= 2; i ++){
    #####: 1088:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1089:	  state->coins += 2;
        -: 1090:	}
        -: 1091:
    #####: 1092:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1093:	  drawCard(currentPlayer, state);
    #####: 1094:	  drawCard(currentPlayer, state);
        -: 1095:	}
        -: 1096:	else{//Action Card
    #####: 1097:	  state->numActions = state->numActions + 2;
        -: 1098:	}
        -: 1099:      }
        -: 1100:
    #####: 1101:      return 0;
        -: 1102:
        -: 1103:    case ambassador:
    #####: 1104:      j = 0;		//used to check if player has enough cards to discard
        -: 1105:
    #####: 1106:      if (choice2 > 2 || choice2 < 0)
        -: 1107:	{
    #####: 1108:	  return -1;
        -: 1109:	}
        -: 1110:
    #####: 1111:      if (choice1 == handPos)
        -: 1112:	{
    #####: 1113:	  return -1;
        -: 1114:	}
        -: 1115:
    #####: 1116:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1117:	{
    #####: 1118:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1119:	    {
    #####: 1120:	      j++;
        -: 1121:	    }
        -: 1122:	}
    #####: 1123:      if (j < choice2)
        -: 1124:	{
    #####: 1125:	  return -1;
        -: 1126:	}
        -: 1127:
        -: 1128:      if (DEBUG)
        -: 1129:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1130:
        -: 1131:      //increase supply count for choosen card by amount being discarded
    #####: 1132:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1133:
        -: 1134:      //each other player gains a copy of revealed card
    #####: 1135:      for (i = 0; i < state->numPlayers; i++)
        -: 1136:	{
    #####: 1137:	  if (i != currentPlayer)
        -: 1138:	    {
    #####: 1139:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1140:	    }
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
        -: 1146:      //trash copies of cards returned to supply
    #####: 1147:      for (j = 0; j < choice2; j++)
        -: 1148:	{
    #####: 1149:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1150:	    {
    #####: 1151:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1152:		{
    #####: 1153:		  discardCard(i, currentPlayer, state, 1);
    #####: 1154:		  break;
        -: 1155:		}
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
    #####: 1159:      return 0;
        -: 1160:
        -: 1161:    case cutpurse:
        -: 1162:
    #####: 1163:      updateCoins(currentPlayer, state, 2);
    #####: 1164:      for (i = 0; i < state->numPlayers; i++)
        -: 1165:	{
    #####: 1166:	  if (i != currentPlayer)
        -: 1167:	    {
    #####: 1168:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1169:		{
    #####: 1170:		  if (state->hand[i][j] == copper)
        -: 1171:		    {
    #####: 1172:		      discardCard(j, i, state, 0);
    #####: 1173:		      break;
        -: 1174:		    }
    #####: 1175:		  if (j == state->handCount[i])
        -: 1176:		    {
    #####: 1177:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1178:			{
        -: 1179:			  if (DEBUG)
        -: 1180:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1181:			}
    #####: 1182:		      break;
        -: 1183:		    }
        -: 1184:		}
        -: 1185:
        -: 1186:	    }
        -: 1187:
        -: 1188:	}
        -: 1189:
        -: 1190:      //discard played card from hand
    #####: 1191:      discardCard(handPos, currentPlayer, state, 0);
        -: 1192:
    #####: 1193:      return 0;
        -: 1194:
        -: 1195:
        -: 1196:    case embargo:
        -: 1197:      //+2 Coins
    #####: 1198:      state->coins = state->coins + 2;
        -: 1199:
        -: 1200:      //see if selected pile is in play
    #####: 1201:      if ( state->supplyCount[choice1] == -1 )
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
        -: 1206:      //add embargo token to selected supply pile
    #####: 1207:      state->embargoTokens[choice1]++;
        -: 1208:
        -: 1209:      //trash card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1211:      return 0;
        -: 1212:
        -: 1213:    case outpost:
        -: 1214:      //set outpost flag
    #####: 1215:      state->outpostPlayed++;
        -: 1216:
        -: 1217:      //discard card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1219:      return 0;
        -: 1220:
        -: 1221:    case salvager:
        -: 1222:      //+1 buy
    #####: 1223:      state->numBuys++;
        -: 1224:
    #####: 1225:      if (choice1)
        -: 1226:	{
        -: 1227:	  //gain coins equal to trashed card
    #####: 1228:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1229:	  //trash card
    #####: 1230:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1231:	}
        -: 1232:
        -: 1233:      //discard card
    #####: 1234:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1235:      return 0;
        -: 1236:
        -: 1237:    case sea_hag:
    #####: 1238:      for (i = 0; i < state->numPlayers; i++){
    #####: 1239:	if (i != currentPlayer){
    #####: 1240:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1241:	  state->discardCount[i]++;
    #####: 1242:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1243:	}
        -: 1244:      }
    #####: 1245:      return 0;
        -: 1246:
        -: 1247:    case treasure_map:
        -: 1248:      //search hand for another treasure_map
    #####: 1249:      index = -1;
    #####: 1250:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1251:	{
    #####: 1252:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1253:	    {
    #####: 1254:	      index = i;
    #####: 1255:	      break;
        -: 1256:	    }
        -: 1257:	}
    #####: 1258:      if (index > -1)
        -: 1259:	{
        -: 1260:	  //trash both treasure cards
    #####: 1261:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1262:	  discardCard(index, currentPlayer, state, 1);
        -: 1263:
        -: 1264:	  //gain 4 Gold cards
    #####: 1265:	  for (i = 0; i < 4; i++)
        -: 1266:	    {
    #####: 1267:	      gainCard(gold, state, 1, currentPlayer);
        -: 1268:	    }
        -: 1269:
        -: 1270:	  //return success
    #####: 1271:	  return 1;
        -: 1272:	}
        -: 1273:
        -: 1274:      //no second treasure_map found in hand
    #####: 1275:      return -1;
        -: 1276:    }
        -: 1277:
    #####: 1278:  return -1;
        -: 1279:}
        -: 1280:
    #####: 1281:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1282:{
        -: 1283:
        -: 1284:  //if card is not trashed, added to Played pile
    #####: 1285:  if (trashFlag < 1)
        -: 1286:    {
        -: 1287:      //add card to played pile
    #####: 1288:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1289:      state->playedCardCount++;
        -: 1290:    }
        -: 1291:
        -: 1292:  //set played card to -1
    #####: 1293:  state->hand[currentPlayer][handPos] = -1;
        -: 1294:
        -: 1295:  //remove card from player's hand
    #####: 1296:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1297:    {
        -: 1298:      //reduce number of cards in hand
    #####: 1299:      state->handCount[currentPlayer]--;
        -: 1300:    }
    #####: 1301:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1302:    {
        -: 1303:      //reduce number of cards in hand
    #####: 1304:      state->handCount[currentPlayer]--;
        -: 1305:    }
        -: 1306:  else
        -: 1307:    {
        -: 1308:      //replace discarded card with last card in hand
    #####: 1309:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1310:      //set last card to -1
    #####: 1311:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1312:      //reduce number of cards in hand
    #####: 1313:      state->handCount[currentPlayer]--;
        -: 1314:    }
        -: 1315:
    #####: 1316:  return 0;
        -: 1317:}
        -: 1318:
    #####: 1319:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1320:{
        -: 1321:  //Note: supplyPos is enum of choosen card
        -: 1322:
        -: 1323:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1324:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1325:    {
    #####: 1326:      return -1;
        -: 1327:    }
        -: 1328:
        -: 1329:  //added card for [whoseTurn] current player:
        -: 1330:  // toFlag = 0 : add to discard
        -: 1331:  // toFlag = 1 : add to deck
        -: 1332:  // toFlag = 2 : add to hand
        -: 1333:
    #####: 1334:  if (toFlag == 1)
        -: 1335:    {
    #####: 1336:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1337:      state->deckCount[player]++;
        -: 1338:    }
    #####: 1339:  else if (toFlag == 2)
        -: 1340:    {
    #####: 1341:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1342:      state->handCount[player]++;
        -: 1343:    }
        -: 1344:  else
        -: 1345:    {
    #####: 1346:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1347:      state->discardCount[player]++;
        -: 1348:    }
        -: 1349:
        -: 1350:  //decrease number in supply pile
    #####: 1351:  state->supplyCount[supplyPos]--;
        -: 1352:
    #####: 1353:  return 0;
        -: 1354:}
        -: 1355:
        8: 1356:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1357:{
        -: 1358:  int i;
        -: 1359:
        -: 1360:  //reset coin count
        8: 1361:  state->coins = 0;
        -: 1362:
        -: 1363:  //add coins for each Treasure card in player's hand
        8: 1364:  for (i = 0; i < state->handCount[player]; i++)
        -: 1365:    {
    #####: 1366:      if (state->hand[player][i] == copper)
        -: 1367:	{
    #####: 1368:	  state->coins += 1;
        -: 1369:	}
    #####: 1370:      else if (state->hand[player][i] == silver)
        -: 1371:	{
    #####: 1372:	  state->coins += 2;
        -: 1373:	}
    #####: 1374:      else if (state->hand[player][i] == gold)
        -: 1375:	{
    #####: 1376:	  state->coins += 3;
        -: 1377:	}
        -: 1378:    }
        -: 1379:
        -: 1380:  //add bonus
        8: 1381:  state->coins += bonus;
        -: 1382:
        8: 1383:  return 0;
        -: 1384:}
        -: 1385:
        -: 1386:
        -: 1387://end of dominion.c
unittest4.c:
All tests passed! The expected number of cards and actual number always matched. 
File 'dominion.c'
Lines executed:8.78% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
    #####:  215:    card = floor(Random() * state->deckCount[player]);
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
       12:  311:int numHandCards(struct gameState *state) {
       12:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       12:  346:int whoseTurn(struct gameState *state) {
       12:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
     1002:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
     1002:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      113:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      889:  401:  j = 0;
    23114:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    22225:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     2664:  406:	  j++;
        -:  407:	}
        -:  408:    }
      889:  409:  if ( j >= 3)
        -:  410:    {
      888:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    #####:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
        -:  581:}
        -:  582:
       35:  583:int getCost(int cardNumber)
        -:  584:{
       35:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo:
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
        8:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int smithy_card(int handPos, struct gameState *state, int currentPlayer){
        -:  647:  //+3 Cards
        -:  648:  int i;
        -:  649:
    #####:  650:	  for (i = 0; i < 4; i++)	//4 not 3 bug here
        -:  651:	{
    #####:  652:	  drawCard(currentPlayer, state);
        -:  653:	}
        -:  654:
        -:  655:      //discard card from hand
    #####:  656:      discardCard(handPos, currentPlayer, state, 0);
    #####:  657:      return 0;
        -:  658:
        -:  659:}
    #####:  660:int adventurer_card(struct gameState *state, int currentPlayer){
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
    #####:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
    #####:  664:  int z = 0;
    #####:  665:  while(drawntreasure<5){	//error, lets you get 5 instead of 2 treasures
    #####:  666:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  667:	  shuffle(currentPlayer, state);
        -:  668:	}
    #####:  669:	drawCard(currentPlayer, state);
    #####:  670:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  671:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  672:	  drawntreasure++;
        -:  673:	else{
    #####:  674:	  temphand[z]=cardDrawn;
    #####:  675:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  676:	  z++;
        -:  677:	}
        -:  678:      }
    #####:  679:      while(z-1>=0){
    #####:  680:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  681:	z=z-1;
        -:  682:      }
    #####:  683:      return 0;
        -:  684:
        -:  685:}
    #####:  686:int baron_card(int choice1, struct gameState *state, int currentPlayer){
    #####:  687:	state->numBuys++;//Increase buys by 1!
    #####:  688:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  689:	int p = 0;//Iterator for hand!
    #####:  690:	int card_not_discarded = 1;//Flag for discard set!
    #####:  691:	while(card_not_discarded){
    #####:  692:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  693:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  694:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  695:	    state->discardCount[currentPlayer]++;
    #####:  696:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  697:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  698:	    }
    #####:  699:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  700:	    state->handCount[currentPlayer]--;
    #####:  701:	    card_not_discarded = 0;//Exit the loop
        -:  702:	  }
    #####:  703:	  else if (p > state->handCount[currentPlayer]){
        -:  704:	    if(DEBUG) {
        -:  705:	      printf("No estate cards in your hand, invalid choice\n");
        -:  706:	      printf("Must gain an estate if there are any\n");
        -:  707:	    }
    #####:  708:	    if (supplyCount(estate, state) > 0){
    #####:  709:	      gainCard(estate, state, 0, currentPlayer);
    #####:  710:	      state->supplyCount[estate]--;//Decrement estates
    #####:  711:	      if (supplyCount(estate, state) == 0){
    #####:  712:		isGameOver(state);
        -:  713:	      }
        -:  714:	    }
    #####:  715:	    card_not_discarded = 0;//Exit the loop
        -:  716:	  }
        -:  717:
        -:  718:	  else{
    #####:  719:	    p++;//Next card
        -:  720:	  }
        -:  721:	}
        -:  722:      }
        -:  723:
        -:  724:      else{
    #####:  725:	if (supplyCount(estate, state) > 0){
    #####:  726:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  727:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  728:	  if (supplyCount(estate, state) == 0){
    #####:  729:	    isGameOver(state);
        -:  730:	  }
        -:  731:	}
        -:  732:      }
        -:  733:
        -:  734:
    #####:  735:      return 0;
        -:  736:
        -:  737:}
    #####:  738:int mine_card(int choice1,int choice2, int handPos, struct gameState *state, int currentPlayer){
        -:  739:	int i;
        -:  740:	int j;
        -:  741:
        -:  742:
    #####:  743:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  744:
    #####:  745:      if (state->hand[currentPlayer][choice1] < copper && state->hand[currentPlayer][choice1] > gold)
        -:  746:	{
    #####:  747:	  return -1;
        -:  748:	}
        -:  749:
    #####:  750:      if (choice2 > treasure_map || choice2 < curse)
        -:  751:	{
    #####:  752:	  return -1;
        -:  753:	}
        -:  754:
    #####:  755:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:
    #####:  760:      gainCard(choice2, state, 2, currentPlayer);
        -:  761:
        -:  762:      //discard card from hand
    #####:  763:      discardCard(handPos, currentPlayer, state, 0);
        -:  764:
        -:  765:
        -:  766:      //discard trashed card
        -:  767:	  //
        -:  768:
    #####:  769:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  770:	{
    #####:  771:	  if (state->hand[currentPlayer][i] == j)
        -:  772:	    {
    #####:  773:	      discardCard(i, currentPlayer, state, 0);
    #####:  774:		  break;
        -:  775:	    }
        -:  776:	}
        -:  777:
        -:  778:
    #####:  779:      return 0;
        -:  780:
        -:  781:}
        -:  782:
        -:  783:
    #####:  784:int council_room_card(struct gameState *state, int handPos, int currentPlayer){
        -:  785:  //+4 Cards
        -:  786:  int i;
        -:  787:
    #####:  788:      for (i = 0; i < 4; i++)
        -:  789:  	  {
    #####:  790:	  drawCard(currentPlayer, state);
        -:  791:	}
        -:  792:
        -:  793:      //+1 Buy
    #####:  794:      state->numBuys++;
        -:  795:
        -:  796:      //Each other player draws a card
    #####:  797:      for (i = 0; i < state->numPlayers; i++)
        -:  798:	{
        -:  799:	 //bug, doesn' t exlude current player for additional draw
    #####:  800:		 if ( i == currentPlayer )// added bug changed not equal to equal
        -:  801:	    {
    #####:  802:	      drawCard(i, state);
        -:  803:	    }
        -:  804:	}
        -:  805:
        -:  806:      //put played card in played card pile
    #####:  807:      discardCard(handPos, currentPlayer, state, 0);
        -:  808:
    #####:  809:      return 0;
        -:  810:
        -:  811:}
        -:  812:
        -:  813:
    #####:  814:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  815:{
        -:  816:  int i;
        -:  817:  int j;
        -:  818:  int k;
        -:  819:  int x;
        -:  820:  int index;
    #####:  821:  int currentPlayer = whoseTurn(state);
    #####:  822:  int nextPlayer = currentPlayer + 1;
        -:  823:
    #####:  824:  int tributeRevealedCards[2] = {-1, -1};
        -:  825:  int temphand[MAX_HAND];// moved above the if statement
        -:  826: // int drawntreasure=0;
        -:  827: // int cardDrawn;
        -:  828:  //int z = 0;// this is the counter for the temp hand
    #####:  829:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  830:    nextPlayer = 0;
        -:  831:  }
        -:  832:
        -:  833:
        -:  834:  //uses switch to select card and perform actions
    #####:  835:  switch( card )
        -:  836:    {
        -:  837:
        -:  838:	//refactored
        -:  839:    case adventurer:
        -:  840:
    #####:  841:	return adventurer_card(state, currentPlayer);
        -:  842:
        -:  843:	//refactored
        -:  844:    case council_room:
    #####:  845:    	council_room_card(state, handPos, currentPlayer);
        -:  846:
        -:  847:
        -:  848:    case feast:
        -:  849:      //gain card with cost up to 5
        -:  850:      //Backup hand
    #####:  851:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  852:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  853:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  854:      }
        -:  855:      //Backup hand
        -:  856:
        -:  857:      //Update Coins for Buy
    #####:  858:      updateCoins(currentPlayer, state, 5);
    #####:  859:      x = 1;//Condition to loop on
    #####:  860:      while( x == 1) {//Buy one card
    #####:  861:	if (supplyCount(choice1, state) <= 0){
        -:  862:	  if (DEBUG)
        -:  863:	    printf("None of that card left, sorry!\n");
        -:  864:
        -:  865:	  if (DEBUG){
        -:  866:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  867:	  }
        -:  868:	}
    #####:  869:	else if (state->coins < getCost(choice1)){
    #####:  870:	  printf("That card is too expensive!\n");
        -:  871:
        -:  872:	  if (DEBUG){
        -:  873:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  874:	  }
        -:  875:	}
        -:  876:	else{
        -:  877:
        -:  878:	  if (DEBUG){
        -:  879:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  880:	  }
        -:  881:
    #####:  882:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  883:	  x = 0;//No more buying cards
        -:  884:
        -:  885:	  if (DEBUG){
        -:  886:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  887:	  }
        -:  888:
        -:  889:	}
        -:  890:      }
        -:  891:
        -:  892:      //Reset Hand
    #####:  893:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  894:	state->hand[currentPlayer][i] = temphand[i];
    #####:  895:	temphand[i] = -1;
        -:  896:      }
        -:  897:      //Reset Hand
        -:  898:
    #####:  899:      return 0;
        -:  900:
        -:  901:    case gardens:
    #####:  902:      return -1;
        -:  903:
        -:  904:
        -:  905:
        -:  906:	//refactored
        -:  907:	case mine:
    #####:  908:     	return mine_card(choice1, choice2, handPos, state, currentPlayer);
        -:  909:
        -:  910:
        -:  911:
        -:  912:    case remodel:
    #####:  913:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  914:
    #####:  915:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  916:	{
    #####:  917:	  return -1;
        -:  918:	}
        -:  919:
    #####:  920:      gainCard(choice2, state, 0, currentPlayer);
        -:  921:
        -:  922:      //discard card from hand
    #####:  923:      discardCard(handPos, currentPlayer, state, 0);
        -:  924:
        -:  925:      //discard trashed card
    #####:  926:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  927:	{
    #####:  928:	  if (state->hand[currentPlayer][i] == j)
        -:  929:	    {
    #####:  930:	      discardCard(i, currentPlayer, state, 0);
    #####:  931:	      break;
        -:  932:	    }
        -:  933:	}
        -:  934:
        -:  935:
    #####:  936:      return 0;
        -:  937:
        -:  938:
        -:  939:	  //refactored
        -:  940:    case smithy:
    #####:  941:   		return smithy_card(handPos, state, currentPlayer);
        -:  942:
        -:  943:    case village:
        -:  944:      //+1 Card
    #####:  945:      drawCard(currentPlayer, state);
        -:  946:
        -:  947:      //+2 Actions
    #####:  948:      state->numActions = state->numActions + 2;
        -:  949:
        -:  950:      //discard played card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
    #####:  952:      return 0;
        -:  953:
        -:  954:
        -:  955:	//refactored
        -:  956:    case baron:
    #####:  957:    	return baron_card(choice1, state, currentPlayer);
        -:  958:
        -:  959:    case great_hall:
        -:  960:      //+1 Card
    #####:  961:      drawCard(currentPlayer, state);
        -:  962:
        -:  963:      //+1 Actions
    #####:  964:      state->numActions++;
        -:  965:
        -:  966:      //discard card from hand
    #####:  967:      discardCard(handPos, currentPlayer, state, 0);
    #####:  968:      return 0;
        -:  969:
        -:  970:    case minion:
        -:  971:      //+1 action
    #####:  972:      state->numActions++;
        -:  973:
        -:  974:      //discard card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);
        -:  976:
    #####:  977:      if (choice1)		//+2 coins
        -:  978:	{
    #####:  979:	  state->coins = state->coins + 2;
        -:  980:	}
        -:  981:
    #####:  982:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  983:	{
        -:  984:	  //discard hand
    #####:  985:	  while(numHandCards(state) > 0)
        -:  986:	    {
    #####:  987:	      discardCard(handPos, currentPlayer, state, 0);
        -:  988:	    }
        -:  989:
        -:  990:	  //draw 4
    #####:  991:	  for (i = 0; i < 4; i++)
        -:  992:	    {
    #####:  993:	      drawCard(currentPlayer, state);
        -:  994:	    }
        -:  995:
        -:  996:	  //other players discard hand and redraw if hand size > 4
    #####:  997:	  for (i = 0; i < state->numPlayers; i++)
        -:  998:	    {
    #####:  999:	      if (i != currentPlayer)
        -: 1000:		{
    #####: 1001:		  if ( state->handCount[i] > 4 )
        -: 1002:		    {
        -: 1003:		      //discard hand
    #####: 1004:		      while( state->handCount[i] > 0 )
        -: 1005:			{
    #####: 1006:			  discardCard(handPos, i, state, 0);
        -: 1007:			}
        -: 1008:
        -: 1009:		      //draw 4
    #####: 1010:		      for (j = 0; j < 4; j++)
        -: 1011:			{
    #####: 1012:			  drawCard(i, state);
        -: 1013:			}
        -: 1014:		    }
        -: 1015:		}
        -: 1016:	    }
        -: 1017:
        -: 1018:	}
    #####: 1019:      return 0;
        -: 1020:
        -: 1021:    case steward:
    #####: 1022:      if (choice1 == 1)
        -: 1023:	{
        -: 1024:	  //+2 cards
    #####: 1025:	  drawCard(currentPlayer, state);
    #####: 1026:	  drawCard(currentPlayer, state);
        -: 1027:	}
    #####: 1028:      else if (choice1 == 2)
        -: 1029:	{
        -: 1030:	  //+2 coins
    #####: 1031:	  state->coins = state->coins + 2;
        -: 1032:	}
        -: 1033:      else
        -: 1034:	{
        -: 1035:	  //trash 2 cards in hand
    #####: 1036:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1037:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card from hand
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case tribute:
    #####: 1045:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1046:	if (state->deckCount[nextPlayer] > 0){
    #####: 1047:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	  state->deckCount[nextPlayer]--;
        -: 1049:	}
    #####: 1050:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1051:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1052:	  state->discardCount[nextPlayer]--;
        -: 1053:	}
        -: 1054:	else{
        -: 1055:	  //No Card to Reveal
        -: 1056:	  if (DEBUG){
        -: 1057:	    printf("No cards to reveal\n");
        -: 1058:	  }
        -: 1059:	}
        -: 1060:      }
        -: 1061:
        -: 1062:      else{
    #####: 1063:	if (state->deckCount[nextPlayer] == 0){
    #####: 1064:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1065:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1066:	    state->deckCount[nextPlayer]++;
    #####: 1067:	    state->discard[nextPlayer][i] = -1;
    #####: 1068:	    state->discardCount[nextPlayer]--;
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1072:	}
    #####: 1073:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1074:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1075:	state->deckCount[nextPlayer]--;
    #####: 1076:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1077:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1078:	state->deckCount[nextPlayer]--;
        -: 1079:      }
        -: 1080:
    #####: 1081:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1082:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1083:	state->playedCardCount++;
    #####: 1084:	tributeRevealedCards[1] = -1;
        -: 1085:      }
        -: 1086:
    #####: 1087:      for (i = 0; i <= 2; i ++){
    #####: 1088:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1089:	  state->coins += 2;
        -: 1090:	}
        -: 1091:
    #####: 1092:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1093:	  drawCard(currentPlayer, state);
    #####: 1094:	  drawCard(currentPlayer, state);
        -: 1095:	}
        -: 1096:	else{//Action Card
    #####: 1097:	  state->numActions = state->numActions + 2;
        -: 1098:	}
        -: 1099:      }
        -: 1100:
    #####: 1101:      return 0;
        -: 1102:
        -: 1103:    case ambassador:
    #####: 1104:      j = 0;		//used to check if player has enough cards to discard
        -: 1105:
    #####: 1106:      if (choice2 > 2 || choice2 < 0)
        -: 1107:	{
    #####: 1108:	  return -1;
        -: 1109:	}
        -: 1110:
    #####: 1111:      if (choice1 == handPos)
        -: 1112:	{
    #####: 1113:	  return -1;
        -: 1114:	}
        -: 1115:
    #####: 1116:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1117:	{
    #####: 1118:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1119:	    {
    #####: 1120:	      j++;
        -: 1121:	    }
        -: 1122:	}
    #####: 1123:      if (j < choice2)
        -: 1124:	{
    #####: 1125:	  return -1;
        -: 1126:	}
        -: 1127:
        -: 1128:      if (DEBUG)
        -: 1129:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1130:
        -: 1131:      //increase supply count for choosen card by amount being discarded
    #####: 1132:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1133:
        -: 1134:      //each other player gains a copy of revealed card
    #####: 1135:      for (i = 0; i < state->numPlayers; i++)
        -: 1136:	{
    #####: 1137:	  if (i != currentPlayer)
        -: 1138:	    {
    #####: 1139:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1140:	    }
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
        -: 1146:      //trash copies of cards returned to supply
    #####: 1147:      for (j = 0; j < choice2; j++)
        -: 1148:	{
    #####: 1149:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1150:	    {
    #####: 1151:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1152:		{
    #####: 1153:		  discardCard(i, currentPlayer, state, 1);
    #####: 1154:		  break;
        -: 1155:		}
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
    #####: 1159:      return 0;
        -: 1160:
        -: 1161:    case cutpurse:
        -: 1162:
    #####: 1163:      updateCoins(currentPlayer, state, 2);
    #####: 1164:      for (i = 0; i < state->numPlayers; i++)
        -: 1165:	{
    #####: 1166:	  if (i != currentPlayer)
        -: 1167:	    {
    #####: 1168:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1169:		{
    #####: 1170:		  if (state->hand[i][j] == copper)
        -: 1171:		    {
    #####: 1172:		      discardCard(j, i, state, 0);
    #####: 1173:		      break;
        -: 1174:		    }
    #####: 1175:		  if (j == state->handCount[i])
        -: 1176:		    {
    #####: 1177:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1178:			{
        -: 1179:			  if (DEBUG)
        -: 1180:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1181:			}
    #####: 1182:		      break;
        -: 1183:		    }
        -: 1184:		}
        -: 1185:
        -: 1186:	    }
        -: 1187:
        -: 1188:	}
        -: 1189:
        -: 1190:      //discard played card from hand
    #####: 1191:      discardCard(handPos, currentPlayer, state, 0);
        -: 1192:
    #####: 1193:      return 0;
        -: 1194:
        -: 1195:
        -: 1196:    case embargo:
        -: 1197:      //+2 Coins
    #####: 1198:      state->coins = state->coins + 2;
        -: 1199:
        -: 1200:      //see if selected pile is in play
    #####: 1201:      if ( state->supplyCount[choice1] == -1 )
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
        -: 1206:      //add embargo token to selected supply pile
    #####: 1207:      state->embargoTokens[choice1]++;
        -: 1208:
        -: 1209:      //trash card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1211:      return 0;
        -: 1212:
        -: 1213:    case outpost:
        -: 1214:      //set outpost flag
    #####: 1215:      state->outpostPlayed++;
        -: 1216:
        -: 1217:      //discard card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1219:      return 0;
        -: 1220:
        -: 1221:    case salvager:
        -: 1222:      //+1 buy
    #####: 1223:      state->numBuys++;
        -: 1224:
    #####: 1225:      if (choice1)
        -: 1226:	{
        -: 1227:	  //gain coins equal to trashed card
    #####: 1228:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1229:	  //trash card
    #####: 1230:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1231:	}
        -: 1232:
        -: 1233:      //discard card
    #####: 1234:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1235:      return 0;
        -: 1236:
        -: 1237:    case sea_hag:
    #####: 1238:      for (i = 0; i < state->numPlayers; i++){
    #####: 1239:	if (i != currentPlayer){
    #####: 1240:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1241:	  state->discardCount[i]++;
    #####: 1242:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1243:	}
        -: 1244:      }
    #####: 1245:      return 0;
        -: 1246:
        -: 1247:    case treasure_map:
        -: 1248:      //search hand for another treasure_map
    #####: 1249:      index = -1;
    #####: 1250:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1251:	{
    #####: 1252:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1253:	    {
    #####: 1254:	      index = i;
    #####: 1255:	      break;
        -: 1256:	    }
        -: 1257:	}
    #####: 1258:      if (index > -1)
        -: 1259:	{
        -: 1260:	  //trash both treasure cards
    #####: 1261:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1262:	  discardCard(index, currentPlayer, state, 1);
        -: 1263:
        -: 1264:	  //gain 4 Gold cards
    #####: 1265:	  for (i = 0; i < 4; i++)
        -: 1266:	    {
    #####: 1267:	      gainCard(gold, state, 1, currentPlayer);
        -: 1268:	    }
        -: 1269:
        -: 1270:	  //return success
    #####: 1271:	  return 1;
        -: 1272:	}
        -: 1273:
        -: 1274:      //no second treasure_map found in hand
    #####: 1275:      return -1;
        -: 1276:    }
        -: 1277:
    #####: 1278:  return -1;
        -: 1279:}
        -: 1280:
    #####: 1281:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1282:{
        -: 1283:
        -: 1284:  //if card is not trashed, added to Played pile
    #####: 1285:  if (trashFlag < 1)
        -: 1286:    {
        -: 1287:      //add card to played pile
    #####: 1288:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1289:      state->playedCardCount++;
        -: 1290:    }
        -: 1291:
        -: 1292:  //set played card to -1
    #####: 1293:  state->hand[currentPlayer][handPos] = -1;
        -: 1294:
        -: 1295:  //remove card from player's hand
    #####: 1296:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1297:    {
        -: 1298:      //reduce number of cards in hand
    #####: 1299:      state->handCount[currentPlayer]--;
        -: 1300:    }
    #####: 1301:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1302:    {
        -: 1303:      //reduce number of cards in hand
    #####: 1304:      state->handCount[currentPlayer]--;
        -: 1305:    }
        -: 1306:  else
        -: 1307:    {
        -: 1308:      //replace discarded card with last card in hand
    #####: 1309:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1310:      //set last card to -1
    #####: 1311:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1312:      //reduce number of cards in hand
    #####: 1313:      state->handCount[currentPlayer]--;
        -: 1314:    }
        -: 1315:
    #####: 1316:  return 0;
        -: 1317:}
        -: 1318:
    #####: 1319:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1320:{
        -: 1321:  //Note: supplyPos is enum of choosen card
        -: 1322:
        -: 1323:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1324:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1325:    {
    #####: 1326:      return -1;
        -: 1327:    }
        -: 1328:
        -: 1329:  //added card for [whoseTurn] current player:
        -: 1330:  // toFlag = 0 : add to discard
        -: 1331:  // toFlag = 1 : add to deck
        -: 1332:  // toFlag = 2 : add to hand
        -: 1333:
    #####: 1334:  if (toFlag == 1)
        -: 1335:    {
    #####: 1336:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1337:      state->deckCount[player]++;
        -: 1338:    }
    #####: 1339:  else if (toFlag == 2)
        -: 1340:    {
    #####: 1341:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1342:      state->handCount[player]++;
        -: 1343:    }
        -: 1344:  else
        -: 1345:    {
    #####: 1346:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1347:      state->discardCount[player]++;
        -: 1348:    }
        -: 1349:
        -: 1350:  //decrease number in supply pile
    #####: 1351:  state->supplyCount[supplyPos]--;
        -: 1352:
    #####: 1353:  return 0;
        -: 1354:}
        -: 1355:
        8: 1356:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1357:{
        -: 1358:  int i;
        -: 1359:
        -: 1360:  //reset coin count
        8: 1361:  state->coins = 0;
        -: 1362:
        -: 1363:  //add coins for each Treasure card in player's hand
        8: 1364:  for (i = 0; i < state->handCount[player]; i++)
        -: 1365:    {
    #####: 1366:      if (state->hand[player][i] == copper)
        -: 1367:	{
    #####: 1368:	  state->coins += 1;
        -: 1369:	}
    #####: 1370:      else if (state->hand[player][i] == silver)
        -: 1371:	{
    #####: 1372:	  state->coins += 2;
        -: 1373:	}
    #####: 1374:      else if (state->hand[player][i] == gold)
        -: 1375:	{
    #####: 1376:	  state->coins += 3;
        -: 1377:	}
        -: 1378:    }
        -: 1379:
        -: 1380:  //add bonus
        8: 1381:  state->coins += bonus;
        -: 1382:
        8: 1383:  return 0;
        -: 1384:}
        -: 1385:
        -: 1386:
        -: 1387://end of dominion.c
cardtest1.c:
handCount was incorrect. Expected 212 but got 213
handCount was incorrect. Expected 392 but got 393
handCount was incorrect. Expected 391 but got 392
handCount was incorrect. Expected 399 but got 400
handCount was incorrect. Expected 471 but got 472
handCount was incorrect. Expected 104 but got 105
handCount was incorrect. Expected 142 but got 143
handCount was incorrect. Expected 489 but got 490
handCount was incorrect. Expected 346 but got 347
handCount was incorrect. Expected 492 but got 493
handCount was incorrect. Expected 302 but got 303
handCount was incorrect. Expected 213 but got 214
handCount was incorrect. Expected 253 but got 254
handCount was incorrect. Expected 403 but got 404
handCount was incorrect. Expected 327 but got 328
handCount was incorrect. Expected 76 but got 77
handCount was incorrect. Expected 316 but got 317
handCount was incorrect. Expected 94 but got 95
handCount was incorrect. Expected 132 but got 133
handCount was incorrect. Expected 135 but got 136
handCount was incorrect. Expected 35 but got 36
handCount was incorrect. Expected 312 but got 313
handCount was incorrect. Expected 171 but got 172
handCount was incorrect. Expected 153 but got 154
handCount was incorrect. Expected 190 but got 191
handCount was incorrect. Expected 171 but got 172
handCount was incorrect. Expected 499 but got 500
handCount was incorrect. Expected 179 but got 180
handCount was incorrect. Expected 404 but got 405
handCount was incorrect. Expected 87 but got 88
handCount was incorrect. Expected 464 but got 465
handCount was incorrect. Expected 62 but got 63
handCount was incorrect. Expected 423 but got 424
handCount was incorrect. Expected 253 but got 254
handCount was incorrect. Expected 463 but got 464
handCount was incorrect. Expected 51 but got 52
handCount was incorrect. Expected 158 but got 159
handCount was incorrect. Expected 182 but got 183
handCount was incorrect. Expected 97 but got 98
handCount was incorrect. Expected 138 but got 139
handCount was incorrect. Expected 220 but got 221
handCount was incorrect. Expected 457 but got 458
handCount was incorrect. Expected 432 but got 433
handCount was incorrect. Expected 365 but got 366
handCount was incorrect. Expected 280 but got 281
handCount was incorrect. Expected 158 but got 159
handCount was incorrect. Expected 114 but got 115
handCount was incorrect. Expected 443 but got 444
handCount was incorrect. Expected 317 but got 318
handCount was incorrect. Expected 400 but got 401
handCount was incorrect. Expected 462 but got 463
handCount was incorrect. Expected 153 but got 154
handCount was incorrect. Expected 90 but got 91
handCount was incorrect. Expected 27 but got 28
handCount was incorrect. Expected 236 but got 237
handCount was incorrect. Expected 393 but got 394
handCount was incorrect. Expected 461 but got 462
handCount was incorrect. Expected 450 but got 451
handCount was incorrect. Expected 33 but got 34
handCount was incorrect. Expected 66 but got 67
handCount was incorrect. Expected 3 but got 4
handCount was incorrect. Expected 51 but got 52
handCount was incorrect. Expected 103 but got 104
handCount was incorrect. Expected 244 but got 245
handCount was incorrect. Expected 153 but got 154
handCount was incorrect. Expected 357 but got 358
handCount was incorrect. Expected 441 but got 442
handCount was incorrect. Expected 226 but got 227
handCount was incorrect. Expected 436 but got 437
handCount was incorrect. Expected 275 but got 276
handCount was incorrect. Expected 291 but got 292
handCount was incorrect. Expected 485 but got 486
handCount was incorrect. Expected 276 but got 277
handCount was incorrect. Expected 110 but got 111
handCount was incorrect. Expected 272 but got 273
handCount was incorrect. Expected 481 but got 482
handCount was incorrect. Expected 467 but got 468
handCount was incorrect. Expected 131 but got 132
handCount was incorrect. Expected 188 but got 189
handCount was incorrect. Expected 29 but got 30
handCount was incorrect. Expected 267 but got 268
handCount was incorrect. Expected 217 but got 218
handCount was incorrect. Expected 447 but got 448
handCount was incorrect. Expected 390 but got 391
handCount was incorrect. Expected 206 but got 207
handCount was incorrect. Expected 449 but got 450
handCount was incorrect. Expected 229 but got 230
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 489 but got 490
handCount was incorrect. Expected 257 but got 258
handCount was incorrect. Expected 128 but got 129
handCount was incorrect. Expected 429 but got 430
handCount was incorrect. Expected 173 but got 174
handCount was incorrect. Expected 60 but got 61
handCount was incorrect. Expected 126 but got 127
handCount was incorrect. Expected 339 but got 340
handCount was incorrect. Expected 282 but got 283
handCount was incorrect. Expected 190 but got 191
handCount was incorrect. Expected 339 but got 340
handCount was incorrect. Expected 331 but got 332
handCount was incorrect. Expected 302 but got 303
handCount was incorrect. Expected 176 but got 177
handCount was incorrect. Expected 112 but got 113
handCount was incorrect. Expected 209 but got 210
handCount was incorrect. Expected 319 but got 320
handCount was incorrect. Expected 427 but got 428
handCount was incorrect. Expected 426 but got 427
handCount was incorrect. Expected 189 but got 190
handCount was incorrect. Expected 217 but got 218
handCount was incorrect. Expected 86 but got 87
handCount was incorrect. Expected 427 but got 428
handCount was incorrect. Expected 319 but got 320
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 236 but got 237
handCount was incorrect. Expected 198 but got 199
handCount was incorrect. Expected 126 but got 127
handCount was incorrect. Expected 197 but got 198
handCount was incorrect. Expected 44 but got 45
handCount was incorrect. Expected 473 but got 474
handCount was incorrect. Expected 228 but got 229
handCount was incorrect. Expected 78 but got 79
handCount was incorrect. Expected 154 but got 155
handCount was incorrect. Expected 441 but got 442
handCount was incorrect. Expected 480 but got 481
handCount was incorrect. Expected 36 but got 37
handCount was incorrect. Expected 334 but got 335
handCount was incorrect. Expected 464 but got 465
handCount was incorrect. Expected 269 but got 270
handCount was incorrect. Expected 334 but got 335
handCount was incorrect. Expected 417 but got 418
handCount was incorrect. Expected 27 but got 28
handCount was incorrect. Expected 226 but got 227
handCount was incorrect. Expected 100 but got 101
handCount was incorrect. Expected 337 but got 338
handCount was incorrect. Expected 468 but got 469
handCount was incorrect. Expected 216 but got 217
handCount was incorrect. Expected 493 but got 494
handCount was incorrect. Expected 417 but got 418
handCount was incorrect. Expected 184 but got 185
handCount was incorrect. Expected 245 but got 246
handCount was incorrect. Expected 191 but got 192
handCount was incorrect. Expected 284 but got 285
handCount was incorrect. Expected 481 but got 482
handCount was incorrect. Expected 55 but got 56
handCount was incorrect. Expected 322 but got 323
handCount was incorrect. Expected 127 but got 128
handCount was incorrect. Expected 143 but got 144
handCount was incorrect. Expected 396 but got 397
handCount was incorrect. Expected 224 but got 225
handCount was incorrect. Expected 377 but got 378
handCount was incorrect. Expected 208 but got 209
handCount was incorrect. Expected 103 but got 104
handCount was incorrect. Expected 338 but got 339
handCount was incorrect. Expected 483 but got 484
handCount was incorrect. Expected 343 but got 344
handCount was incorrect. Expected 286 but got 287
handCount was incorrect. Expected 159 but got 160
handCount was incorrect. Expected 324 but got 325
handCount was incorrect. Expected 383 but got 384
handCount was incorrect. Expected 398 but got 399
handCount was incorrect. Expected 330 but got 331
handCount was incorrect. Expected 168 but got 169
handCount was incorrect. Expected 262 but got 263
handCount was incorrect. Expected 339 but got 340
handCount was incorrect. Expected 482 but got 483
handCount was incorrect. Expected 222 but got 223
handCount was incorrect. Expected 103 but got 104
handCount was incorrect. Expected 263 but got 264
handCount was incorrect. Expected 262 but got 263
handCount was incorrect. Expected 305 but got 306
handCount was incorrect. Expected 439 but got 440
handCount was incorrect. Expected 369 but got 370
handCount was incorrect. Expected 204 but got 205
handCount was incorrect. Expected 273 but got 274
handCount was incorrect. Expected 126 but got 127
handCount was incorrect. Expected 360 but got 361
handCount was incorrect. Expected 182 but got 183
handCount was incorrect. Expected 182 but got 183
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 203 but got 204
handCount was incorrect. Expected 362 but got 363
handCount was incorrect. Expected 164 but got 165
handCount was incorrect. Expected 135 but got 136
handCount was incorrect. Expected 37 but got 38
handCount was incorrect. Expected 59 but got 60
handCount was incorrect. Expected 304 but got 305
handCount was incorrect. Expected 491 but got 492
handCount was incorrect. Expected 275 but got 276
handCount was incorrect. Expected 265 but got 266
handCount was incorrect. Expected 183 but got 184
handCount was incorrect. Expected 101 but got 102
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 295 but got 296
handCount was incorrect. Expected 77 but got 78
handCount was incorrect. Expected 384 but got 385
handCount was incorrect. Expected 329 but got 330
handCount was incorrect. Expected 306 but got 307
handCount was incorrect. Expected 213 but got 214
handCount was incorrect. Expected 407 but got 408
handCount was incorrect. Expected 330 but got 331
handCount was incorrect. Expected 51 but got 52
handCount was incorrect. Expected 384 but got 385
handCount was incorrect. Expected 36 but got 37
handCount was incorrect. Expected 416 but got 417
handCount was incorrect. Expected 471 but got 472
handCount was incorrect. Expected 301 but got 302
handCount was incorrect. Expected 82 but got 83
handCount was incorrect. Expected 233 but got 234
handCount was incorrect. Expected 65 but got 66
handCount was incorrect. Expected 115 but got 116
handCount was incorrect. Expected 217 but got 218
handCount was incorrect. Expected 495 but got 496
handCount was incorrect. Expected 301 but got 302
handCount was incorrect. Expected 319 but got 320
handCount was incorrect. Expected 109 but got 110
handCount was incorrect. Expected 58 but got 59
handCount was incorrect. Expected 70 but got 71
handCount was incorrect. Expected 22 but got 23
handCount was incorrect. Expected 60 but got 61
handCount was incorrect. Expected 29 but got 30
handCount was incorrect. Expected 283 but got 284
handCount was incorrect. Expected 386 but got 387
handCount was incorrect. Expected 424 but got 425
handCount was incorrect. Expected 378 but got 379
handCount was incorrect. Expected 4 but got 5
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 357 but got 358
handCount was incorrect. Expected 27 but got 28
handCount was incorrect. Expected 239 but got 240
handCount was incorrect. Expected 76 but got 77
handCount was incorrect. Expected 374 but got 375
handCount was incorrect. Expected 471 but got 472
handCount was incorrect. Expected 187 but got 188
handCount was incorrect. Expected 419 but got 420
handCount was incorrect. Expected 312 but got 313
handCount was incorrect. Expected 105 but got 106
handCount was incorrect. Expected 484 but got 485
handCount was incorrect. Expected 283 but got 284
handCount was incorrect. Expected 281 but got 282
handCount was incorrect. Expected 337 but got 338
handCount was incorrect. Expected 83 but got 84
handCount was incorrect. Expected 386 but got 387
handCount was incorrect. Expected 370 but got 371
handCount was incorrect. Expected 490 but got 491
handCount was incorrect. Expected 269 but got 270
handCount was incorrect. Expected 473 but got 474
handCount was incorrect. Expected 364 but got 365
handCount was incorrect. Expected 132 but got 133
handCount was incorrect. Expected 367 but got 368
handCount was incorrect. Expected 52 but got 53
handCount was incorrect. Expected 406 but got 407
handCount was incorrect. Expected 375 but got 376
handCount was incorrect. Expected 171 but got 172
handCount was incorrect. Expected 49 but got 50
handCount was incorrect. Expected 50 but got 51
handCount was incorrect. Expected 22 but got 23
handCount was incorrect. Expected 62 but got 63
handCount was incorrect. Expected 342 but got 343
handCount was incorrect. Expected 221 but got 222
handCount was incorrect. Expected 61 but got 62
handCount was incorrect. Expected 302 but got 303
handCount was incorrect. Expected 11 but got 12
handCount was incorrect. Expected 171 but got 172
handCount was incorrect. Expected 40 but got 41
handCount was incorrect. Expected 334 but got 335
handCount was incorrect. Expected 476 but got 477
handCount was incorrect. Expected 245 but got 246
handCount was incorrect. Expected 272 but got 273
handCount was incorrect. Expected 181 but got 182
handCount was incorrect. Expected 337 but got 338
handCount was incorrect. Expected 457 but got 458
handCount was incorrect. Expected 155 but got 156
handCount was incorrect. Expected 264 but got 265
handCount was incorrect. Expected 428 but got 429
handCount was incorrect. Expected 25 but got 26
handCount was incorrect. Expected 224 but got 225
handCount was incorrect. Expected 334 but got 335
handCount was incorrect. Expected 230 but got 231
handCount was incorrect. Expected 376 but got 377
handCount was incorrect. Expected 100 but got 101
handCount was incorrect. Expected 485 but got 486
handCount was incorrect. Expected 86 but got 87
handCount was incorrect. Expected 125 but got 126
handCount was incorrect. Expected 417 but got 418
handCount was incorrect. Expected 397 but got 398
handCount was incorrect. Expected 153 but got 154
handCount was incorrect. Expected 290 but got 291
handCount was incorrect. Expected 486 but got 487
handCount was incorrect. Expected 171 but got 172
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 439 but got 440
handCount was incorrect. Expected 274 but got 275
handCount was incorrect. Expected 422 but got 423
handCount was incorrect. Expected 389 but got 390
handCount was incorrect. Expected 280 but got 281
handCount was incorrect. Expected 336 but got 337
handCount was incorrect. Expected 167 but got 168
handCount was incorrect. Expected 45 but got 46
handCount was incorrect. Expected 192 but got 193
handCount was incorrect. Expected 423 but got 424
handCount was incorrect. Expected 6 but got 7
handCount was incorrect. Expected 114 but got 115
handCount was incorrect. Expected 352 but got 353
handCount was incorrect. Expected 493 but got 494
handCount was incorrect. Expected 148 but got 149
handCount was incorrect. Expected 238 but got 239
handCount was incorrect. Expected 492 but got 493
handCount was incorrect. Expected 75 but got 76
handCount was incorrect. Expected 376 but got 377
handCount was incorrect. Expected 404 but got 405
handCount was incorrect. Expected 485 but got 486
handCount was incorrect. Expected 224 but got 225
handCount was incorrect. Expected 34 but got 35
handCount was incorrect. Expected 3 but got 4
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 246 but got 247
handCount was incorrect. Expected 416 but got 417
handCount was incorrect. Expected 280 but got 281
handCount was incorrect. Expected 356 but got 357
handCount was incorrect. Expected 93 but got 94
handCount was incorrect. Expected 39 but got 40
handCount was incorrect. Expected 308 but got 309
handCount was incorrect. Expected 274 but got 275
handCount was incorrect. Expected 368 but got 369
handCount was incorrect. Expected 347 but got 348
handCount was incorrect. Expected 133 but got 134
handCount was incorrect. Expected 170 but got 171
handCount was incorrect. Expected 331 but got 332
handCount was incorrect. Expected 23 but got 24
handCount was incorrect. Expected 93 but got 94
handCount was incorrect. Expected 293 but got 294
handCount was incorrect. Expected 197 but got 198
handCount was incorrect. Expected 207 but got 208
handCount was incorrect. Expected 394 but got 395
handCount was incorrect. Expected 178 but got 179
handCount was incorrect. Expected 228 but got 229
handCount was incorrect. Expected 446 but got 447
handCount was incorrect. Expected 401 but got 402
handCount was incorrect. Expected 311 but got 312
handCount was incorrect. Expected 386 but got 387
handCount was incorrect. Expected 321 but got 322
handCount was incorrect. Expected 239 but got 240
handCount was incorrect. Expected 336 but got 337
handCount was incorrect. Expected 398 but got 399
handCount was incorrect. Expected 374 but got 375
handCount was incorrect. Expected 460 but got 461
handCount was incorrect. Expected 368 but got 369
handCount was incorrect. Expected 6 but got 7
handCount was incorrect. Expected 218 but got 219
handCount was incorrect. Expected 212 but got 213
handCount was incorrect. Expected 94 but got 95
handCount was incorrect. Expected 333 but got 334
handCount was incorrect. Expected 106 but got 107
handCount was incorrect. Expected 272 but got 273
handCount was incorrect. Expected 489 but got 490
handCount was incorrect. Expected 81 but got 82
handCount was incorrect. Expected 350 but got 351
handCount was incorrect. Expected 438 but got 439
handCount was incorrect. Expected 370 but got 371
handCount was incorrect. Expected 232 but got 233
handCount was incorrect. Expected 392 but got 393
handCount was incorrect. Expected 460 but got 461
handCount was incorrect. Expected 32 but got 33
handCount was incorrect. Expected 231 but got 232
handCount was incorrect. Expected 301 but got 302
handCount was incorrect. Expected 245 but got 246
handCount was incorrect. Expected 210 but got 211
handCount was incorrect. Expected 239 but got 240
handCount was incorrect. Expected 88 but got 89
handCount was incorrect. Expected 163 but got 164
handCount was incorrect. Expected 440 but got 441
handCount was incorrect. Expected 114 but got 115
handCount was incorrect. Expected 259 but got 260
handCount was incorrect. Expected 17 but got 18
handCount was incorrect. Expected 406 but got 407
handCount was incorrect. Expected 269 but got 270
handCount was incorrect. Expected 358 but got 359
handCount was incorrect. Expected 348 but got 349
handCount was incorrect. Expected 421 but got 422
handCount was incorrect. Expected 172 but got 173
handCount was incorrect. Expected 208 but got 209
handCount was incorrect. Expected 240 but got 241
handCount was incorrect. Expected 157 but got 158
handCount was incorrect. Expected 301 but got 302
handCount was incorrect. Expected 400 but got 401
handCount was incorrect. Expected 3 but got 4
handCount was incorrect. Expected 356 but got 357
handCount was incorrect. Expected 449 but got 450
handCount was incorrect. Expected 41 but got 42
handCount was incorrect. Expected 144 but got 145
handCount was incorrect. Expected 440 but got 441
handCount was incorrect. Expected 91 but got 92
handCount was incorrect. Expected 368 but got 369
handCount was incorrect. Expected 392 but got 393
handCount was incorrect. Expected 108 but got 109
handCount was incorrect. Expected 134 but got 135
handCount was incorrect. Expected 344 but got 345
handCount was incorrect. Expected 141 but got 142
handCount was incorrect. Expected 213 but got 214
handCount was incorrect. Expected 75 but got 76
handCount was incorrect. Expected 311 but got 312
handCount was incorrect. Expected 330 but got 331
handCount was incorrect. Expected 290 but got 291
handCount was incorrect. Expected 392 but got 393
handCount was incorrect. Expected 402 but got 403
handCount was incorrect. Expected 16 but got 17
handCount was incorrect. Expected 466 but got 467
handCount was incorrect. Expected 375 but got 376
handCount was incorrect. Expected 180 but got 181
handCount was incorrect. Expected 37 but got 38
handCount was incorrect. Expected 338 but got 339
handCount was incorrect. Expected 375 but got 376
handCount was incorrect. Expected 201 but got 202
handCount was incorrect. Expected 108 but got 109
handCount was incorrect. Expected 71 but got 72
handCount was incorrect. Expected 257 but got 258
handCount was incorrect. Expected 291 but got 292
handCount was incorrect. Expected 301 but got 302
handCount was incorrect. Expected 492 but got 493
handCount was incorrect. Expected 179 but got 180
handCount was incorrect. Expected 40 but got 41
handCount was incorrect. Expected 389 but got 390
handCount was incorrect. Expected 483 but got 484
handCount was incorrect. Expected 483 but got 484
handCount was incorrect. Expected 433 but got 434
handCount was incorrect. Expected 360 but got 361
handCount was incorrect. Expected 121 but got 122
handCount was incorrect. Expected 370 but got 371
handCount was incorrect. Expected 482 but got 483
handCount was incorrect. Expected 96 but got 97
handCount was incorrect. Expected 20 but got 21
handCount was incorrect. Expected 195 but got 196
handCount was incorrect. Expected 457 but got 458
handCount was incorrect. Expected 197 but got 198
handCount was incorrect. Expected 126 but got 127
handCount was incorrect. Expected 63 but got 64
handCount was incorrect. Expected 103 but got 104
handCount was incorrect. Expected 342 but got 343
handCount was incorrect. Expected 66 but got 67
handCount was incorrect. Expected 48 but got 49
handCount was incorrect. Expected 3 but got 4
handCount was incorrect. Expected 238 but got 239
handCount was incorrect. Expected 247 but got 248
handCount was incorrect. Expected 318 but got 319
handCount was incorrect. Expected 168 but got 169
handCount was incorrect. Expected 293 but got 294
handCount was incorrect. Expected 413 but got 414
handCount was incorrect. Expected 28 but got 29
handCount was incorrect. Expected 238 but got 239
handCount was incorrect. Expected 239 but got 240
handCount was incorrect. Expected 285 but got 286
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 34 but got 35
handCount was incorrect. Expected 16 but got 17
handCount was incorrect. Expected 350 but got 351
handCount was incorrect. Expected 407 but got 408
handCount was incorrect. Expected 17 but got 18
handCount was incorrect. Expected 484 but got 485
handCount was incorrect. Expected 420 but got 421
handCount was incorrect. Expected 429 but got 430
handCount was incorrect. Expected 3 but got 4
handCount was incorrect. Expected 253 but got 254
handCount was incorrect. Expected 470 but got 471
handCount was incorrect. Expected 243 but got 244
handCount was incorrect. Expected 492 but got 493
handCount was incorrect. Expected 25 but got 26
handCount was incorrect. Expected 446 but got 447
handCount was incorrect. Expected 436 but got 437
handCount was incorrect. Expected 452 but got 453
handCount was incorrect. Expected 227 but got 228
handCount was incorrect. Expected 265 but got 266
handCount was incorrect. Expected 340 but got 341
handCount was incorrect. Expected 182 but got 183
handCount was incorrect. Expected 435 but got 436
handCount was incorrect. Expected 29 but got 30
handCount was incorrect. Expected 34 but got 35
handCount was incorrect. Expected 293 but got 294
handCount was incorrect. Expected 295 but got 296
handCount was incorrect. Expected 115 but got 116
handCount was incorrect. Expected 293 but got 294
handCount was incorrect. Expected 61 but got 62
handCount was incorrect. Expected 216 but got 217
handCount was incorrect. Expected 394 but got 395
handCount was incorrect. Expected 85 but got 86
handCount was incorrect. Expected 27 but got 28
handCount was incorrect. Expected 241 but got 242
handCount was incorrect. Expected 352 but got 353
handCount was incorrect. Expected 422 but got 423
handCount was incorrect. Expected 234 but got 235
handCount was incorrect. Expected 397 but got 398
handCount was incorrect. Expected 481 but got 482
handCount was incorrect. Expected 186 but got 187
handCount was incorrect. Expected 441 but got 442
handCount was incorrect. Expected 350 but got 351
handCount was incorrect. Expected 320 but got 321
handCount was incorrect. Expected 279 but got 280
handCount was incorrect. Expected 120 but got 121
handCount was incorrect. Expected 414 but got 415
handCount was incorrect. Expected 157 but got 158
handCount was incorrect. Expected 314 but got 315
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 261 but got 262
handCount was incorrect. Expected 307 but got 308
handCount was incorrect. Expected 441 but got 442
handCount was incorrect. Expected 191 but got 192
handCount was incorrect. Expected 381 but got 382
handCount was incorrect. Expected 362 but got 363
handCount was incorrect. Expected 189 but got 190
handCount was incorrect. Expected 440 but got 441
handCount was incorrect. Expected 374 but got 375
handCount was incorrect. Expected 466 but got 467
handCount was incorrect. Expected 149 but got 150
handCount was incorrect. Expected 60 but got 61
handCount was incorrect. Expected 35 but got 36
handCount was incorrect. Expected 115 but got 116
handCount was incorrect. Expected 281 but got 282
handCount was incorrect. Expected 414 but got 415
handCount was incorrect. Expected 328 but got 329
handCount was incorrect. Expected 460 but got 461
handCount was incorrect. Expected 369 but got 370
handCount was incorrect. Expected 497 but got 498
handCount was incorrect. Expected 223 but got 224
handCount was incorrect. Expected 168 but got 169
handCount was incorrect. Expected 118 but got 119
handCount was incorrect. Expected 218 but got 219
handCount was incorrect. Expected 449 but got 450
handCount was incorrect. Expected 223 but got 224
handCount was incorrect. Expected 382 but got 383
handCount was incorrect. Expected 370 but got 371
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 316 but got 317
handCount was incorrect. Expected 195 but got 196
handCount was incorrect. Expected 78 but got 79
handCount was incorrect. Expected 430 but got 431
handCount was incorrect. Expected 70 but got 71
handCount was incorrect. Expected 265 but got 266
handCount was incorrect. Expected 13 but got 14
handCount was incorrect. Expected 144 but got 145
handCount was incorrect. Expected 75 but got 76
handCount was incorrect. Expected 452 but got 453
handCount was incorrect. Expected 98 but got 99
handCount was incorrect. Expected 178 but got 179
handCount was incorrect. Expected 41 but got 42
handCount was incorrect. Expected 322 but got 323
handCount was incorrect. Expected 173 but got 174
handCount was incorrect. Expected 108 but got 109
handCount was incorrect. Expected 266 but got 267
handCount was incorrect. Expected 319 but got 320
handCount was incorrect. Expected 316 but got 317
handCount was incorrect. Expected 407 but got 408
handCount was incorrect. Expected 28 but got 29
handCount was incorrect. Expected 20 but got 21
handCount was incorrect. Expected 52 but got 53
handCount was incorrect. Expected 473 but got 474
handCount was incorrect. Expected 418 but got 419
handCount was incorrect. Expected 207 but got 208
handCount was incorrect. Expected 213 but got 214
handCount was incorrect. Expected 264 but got 265
handCount was incorrect. Expected 449 but got 450
handCount was incorrect. Expected 386 but got 387
handCount was incorrect. Expected 465 but got 466
handCount was incorrect. Expected 344 but got 345
handCount was incorrect. Expected 22 but got 23
handCount was incorrect. Expected 328 but got 329
handCount was incorrect. Expected 145 but got 146
handCount was incorrect. Expected 17 but got 18
handCount was incorrect. Expected 495 but got 496
handCount was incorrect. Expected 48 but got 49
handCount was incorrect. Expected 257 but got 258
handCount was incorrect. Expected 314 but got 315
handCount was incorrect. Expected 301 but got 302
handCount was incorrect. Expected 488 but got 489
handCount was incorrect. Expected 263 but got 264
handCount was incorrect. Expected 154 but got 155
handCount was incorrect. Expected 412 but got 413
handCount was incorrect. Expected 181 but got 182
handCount was incorrect. Expected 111 but got 112
handCount was incorrect. Expected 184 but got 185
handCount was incorrect. Expected 457 but got 458
handCount was incorrect. Expected 361 but got 362
handCount was incorrect. Expected 198 but got 199
handCount was incorrect. Expected 88 but got 89
handCount was incorrect. Expected 191 but got 192
handCount was incorrect. Expected 339 but got 340
handCount was incorrect. Expected 353 but got 354
handCount was incorrect. Expected 434 but got 435
handCount was incorrect. Expected 121 but got 122
handCount was incorrect. Expected 269 but got 270
handCount was incorrect. Expected 139 but got 140
handCount was incorrect. Expected 76 but got 77
handCount was incorrect. Expected 188 but got 189
handCount was incorrect. Expected 358 but got 359
handCount was incorrect. Expected 15 but got 16
handCount was incorrect. Expected 461 but got 462
handCount was incorrect. Expected 385 but got 386
handCount was incorrect. Expected 113 but got 114
handCount was incorrect. Expected 69 but got 70
handCount was incorrect. Expected 203 but got 204
handCount was incorrect. Expected 116 but got 117
handCount was incorrect. Expected 50 but got 51
handCount was incorrect. Expected 185 but got 186
handCount was incorrect. Expected 148 but got 149
handCount was incorrect. Expected 234 but got 235
handCount was incorrect. Expected 93 but got 94
handCount was incorrect. Expected 98 but got 99
handCount was incorrect. Expected 336 but got 337
handCount was incorrect. Expected 251 but got 252
handCount was incorrect. Expected 467 but got 468
handCount was incorrect. Expected 22 but got 23
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 330 but got 331
handCount was incorrect. Expected 5 but got 6
handCount was incorrect. Expected 104 but got 105
handCount was incorrect. Expected 446 but got 447
handCount was incorrect. Expected 468 but got 469
handCount was incorrect. Expected 56 but got 57
handCount was incorrect. Expected 102 but got 103
handCount was incorrect. Expected 166 but got 167
handCount was incorrect. Expected 180 but got 181
handCount was incorrect. Expected 333 but got 334
handCount was incorrect. Expected 75 but got 76
handCount was incorrect. Expected 380 but got 381
handCount was incorrect. Expected 131 but got 132
handCount was incorrect. Expected 351 but got 352
handCount was incorrect. Expected 457 but got 458
handCount was incorrect. Expected 175 but got 176
handCount was incorrect. Expected 395 but got 396
handCount was incorrect. Expected 398 but got 399
handCount was incorrect. Expected 350 but got 351
handCount was incorrect. Expected 237 but got 238
handCount was incorrect. Expected 234 but got 235
handCount was incorrect. Expected 333 but got 334
handCount was incorrect. Expected 46 but got 47
handCount was incorrect. Expected 47 but got 48
handCount was incorrect. Expected 363 but got 364
handCount was incorrect. Expected 346 but got 347
handCount was incorrect. Expected 13 but got 14
handCount was incorrect. Expected 237 but got 238
handCount was incorrect. Expected 277 but got 278
handCount was incorrect. Expected 328 but got 329
handCount was incorrect. Expected 446 but got 447
handCount was incorrect. Expected 415 but got 416
handCount was incorrect. Expected 143 but got 144
handCount was incorrect. Expected 28 but got 29
handCount was incorrect. Expected 429 but got 430
handCount was incorrect. Expected 427 but got 428
handCount was incorrect. Expected 386 but got 387
handCount was incorrect. Expected 388 but got 389
handCount was incorrect. Expected 411 but got 412
handCount was incorrect. Expected 232 but got 233
handCount was incorrect. Expected 475 but got 476
handCount was incorrect. Expected 25 but got 26
handCount was incorrect. Expected 117 but got 118
handCount was incorrect. Expected 370 but got 371
handCount was incorrect. Expected 370 but got 371
handCount was incorrect. Expected 470 but got 471
handCount was incorrect. Expected 487 but got 488
handCount was incorrect. Expected 284 but got 285
handCount was incorrect. Expected 12 but got 13
handCount was incorrect. Expected 5 but got 6
handCount was incorrect. Expected 8 but got 9
handCount was incorrect. Expected 57 but got 58
handCount was incorrect. Expected 317 but got 318
handCount was incorrect. Expected 45 but got 46
handCount was incorrect. Expected 268 but got 269
handCount was incorrect. Expected 302 but got 303
handCount was incorrect. Expected 372 but got 373
handCount was incorrect. Expected 121 but got 122
handCount was incorrect. Expected 231 but got 232
handCount was incorrect. Expected 255 but got 256
handCount was incorrect. Expected 398 but got 399
handCount was incorrect. Expected 496 but got 497
handCount was incorrect. Expected 448 but got 449
handCount was incorrect. Expected 316 but got 317
handCount was incorrect. Expected 28 but got 29
handCount was incorrect. Expected 177 but got 178
handCount was incorrect. Expected 376 but got 377
handCount was incorrect. Expected 60 but got 61
handCount was incorrect. Expected 406 but got 407
handCount was incorrect. Expected 34 but got 35
handCount was incorrect. Expected 346 but got 347
handCount was incorrect. Expected 240 but got 241
handCount was incorrect. Expected 361 but got 362
handCount was incorrect. Expected 487 but got 488
handCount was incorrect. Expected 196 but got 197
handCount was incorrect. Expected 370 but got 371
handCount was incorrect. Expected 296 but got 297
handCount was incorrect. Expected 152 but got 153
handCount was incorrect. Expected 427 but got 428
handCount was incorrect. Expected 128 but got 129
handCount was incorrect. Expected 399 but got 400
handCount was incorrect. Expected 365 but got 366
handCount was incorrect. Expected 36 but got 37
handCount was incorrect. Expected 191 but got 192
handCount was incorrect. Expected 268 but got 269
handCount was incorrect. Expected 412 but got 413
handCount was incorrect. Expected 330 but got 331
handCount was incorrect. Expected 190 but got 191
handCount was incorrect. Expected 50 but got 51
handCount was incorrect. Expected 149 but got 150
handCount was incorrect. Expected 176 but got 177
handCount was incorrect. Expected 296 but got 297
handCount was incorrect. Expected 336 but got 337
handCount was incorrect. Expected 142 but got 143
handCount was incorrect. Expected 444 but got 445
handCount was incorrect. Expected 315 but got 316
handCount was incorrect. Expected 367 but got 368
handCount was incorrect. Expected 264 but got 265
handCount was incorrect. Expected 401 but got 402
handCount was incorrect. Expected 421 but got 422
handCount was incorrect. Expected 304 but got 305
handCount was incorrect. Expected 392 but got 393
handCount was incorrect. Expected 338 but got 339
handCount was incorrect. Expected 251 but got 252
handCount was incorrect. Expected 305 but got 306
handCount was incorrect. Expected 419 but got 420
handCount was incorrect. Expected 305 but got 306
handCount was incorrect. Expected 439 but got 440
handCount was incorrect. Expected 186 but got 187
handCount was incorrect. Expected 225 but got 226
handCount was incorrect. Expected 491 but got 492
handCount was incorrect. Expected 12 but got 13
handCount was incorrect. Expected 127 but got 128
handCount was incorrect. Expected 235 but got 236
handCount was incorrect. Expected 462 but got 463
handCount was incorrect. Expected 173 but got 174
handCount was incorrect. Expected 317 but got 318
handCount was incorrect. Expected 417 but got 418
handCount was incorrect. Expected 494 but got 495
handCount was incorrect. Expected 65 but got 66
handCount was incorrect. Expected 128 but got 129
handCount was incorrect. Expected 344 but got 345
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 379 but got 380
handCount was incorrect. Expected 164 but got 165
handCount was incorrect. Expected 129 but got 130
handCount was incorrect. Expected 355 but got 356
handCount was incorrect. Expected 236 but got 237
handCount was incorrect. Expected 483 but got 484
handCount was incorrect. Expected 88 but got 89
handCount was incorrect. Expected 306 but got 307
handCount was incorrect. Expected 73 but got 74
handCount was incorrect. Expected 95 but got 96
handCount was incorrect. Expected 138 but got 139
handCount was incorrect. Expected 102 but got 103
handCount was incorrect. Expected 493 but got 494
handCount was incorrect. Expected 285 but got 286
handCount was incorrect. Expected 408 but got 409
handCount was incorrect. Expected 228 but got 229
handCount was incorrect. Expected 159 but got 160
handCount was incorrect. Expected 180 but got 181
handCount was incorrect. Expected 479 but got 480
handCount was incorrect. Expected 73 but got 74
handCount was incorrect. Expected 370 but got 371
handCount was incorrect. Expected 287 but got 288
handCount was incorrect. Expected 6 but got 7
handCount was incorrect. Expected 22 but got 23
handCount was incorrect. Expected 180 but got 181
handCount was incorrect. Expected 312 but got 313
handCount was incorrect. Expected 65 but got 66
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 30 but got 31
handCount was incorrect. Expected 142 but got 143
handCount was incorrect. Expected 349 but got 350
handCount was incorrect. Expected 411 but got 412
handCount was incorrect. Expected 280 but got 281
handCount was incorrect. Expected 46 but got 47
handCount was incorrect. Expected 388 but got 389
handCount was incorrect. Expected 86 but got 87
handCount was incorrect. Expected 197 but got 198
handCount was incorrect. Expected 361 but got 362
handCount was incorrect. Expected 131 but got 132
handCount was incorrect. Expected 328 but got 329
handCount was incorrect. Expected 408 but got 409
handCount was incorrect. Expected 277 but got 278
handCount was incorrect. Expected 232 but got 233
handCount was incorrect. Expected 131 but got 132
handCount was incorrect. Expected 60 but got 61
handCount was incorrect. Expected 25 but got 26
handCount was incorrect. Expected 319 but got 320
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 67 but got 68
handCount was incorrect. Expected 57 but got 58
handCount was incorrect. Expected 293 but got 294
handCount was incorrect. Expected 407 but got 408
handCount was incorrect. Expected 313 but got 314
handCount was incorrect. Expected 446 but got 447
handCount was incorrect. Expected 352 but got 353
handCount was incorrect. Expected 246 but got 247
handCount was incorrect. Expected 142 but got 143
handCount was incorrect. Expected 391 but got 392
handCount was incorrect. Expected 36 but got 37
handCount was incorrect. Expected 469 but got 470
handCount was incorrect. Expected 85 but got 86
handCount was incorrect. Expected 107 but got 108
handCount was incorrect. Expected 237 but got 238
handCount was incorrect. Expected 456 but got 457
handCount was incorrect. Expected 249 but got 250
handCount was incorrect. Expected 147 but got 148
handCount was incorrect. Expected 493 but got 494
handCount was incorrect. Expected 245 but got 246
handCount was incorrect. Expected 130 but got 131
handCount was incorrect. Expected 401 but got 402
handCount was incorrect. Expected 350 but got 351
handCount was incorrect. Expected 366 but got 367
handCount was incorrect. Expected 61 but got 62
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 151 but got 152
handCount was incorrect. Expected 232 but got 233
handCount was incorrect. Expected 217 but got 218
handCount was incorrect. Expected 26 but got 27
handCount was incorrect. Expected 179 but got 180
handCount was incorrect. Expected 476 but got 477
handCount was incorrect. Expected 114 but got 115
handCount was incorrect. Expected 121 but got 122
handCount was incorrect. Expected 490 but got 491
handCount was incorrect. Expected 347 but got 348
handCount was incorrect. Expected 390 but got 391
handCount was incorrect. Expected 107 but got 108
handCount was incorrect. Expected 177 but got 178
handCount was incorrect. Expected 456 but got 457
handCount was incorrect. Expected 42 but got 43
handCount was incorrect. Expected 248 but got 249
handCount was incorrect. Expected 192 but got 193
handCount was incorrect. Expected 456 but got 457
handCount was incorrect. Expected 260 but got 261
handCount was incorrect. Expected 388 but got 389
handCount was incorrect. Expected 214 but got 215
handCount was incorrect. Expected 425 but got 426
handCount was incorrect. Expected 307 but got 308
handCount was incorrect. Expected 485 but got 486
handCount was incorrect. Expected 284 but got 285
handCount was incorrect. Expected 123 but got 124
handCount was incorrect. Expected 351 but got 352
handCount was incorrect. Expected 199 but got 200
handCount was incorrect. Expected 33 but got 34
handCount was incorrect. Expected 355 but got 356
handCount was incorrect. Expected 133 but got 134
handCount was incorrect. Expected 361 but got 362
handCount was incorrect. Expected 147 but got 148
handCount was incorrect. Expected 190 but got 191
handCount was incorrect. Expected 419 but got 420
handCount was incorrect. Expected 56 but got 57
handCount was incorrect. Expected 87 but got 88
handCount was incorrect. Expected 472 but got 473
handCount was incorrect. Expected 43 but got 44
handCount was incorrect. Expected 478 but got 479
handCount was incorrect. Expected 126 but got 127
handCount was incorrect. Expected 390 but got 391
handCount was incorrect. Expected 8 but got 9
handCount was incorrect. Expected 443 but got 444
handCount was incorrect. Expected 182 but got 183
handCount was incorrect. Expected 232 but got 233
handCount was incorrect. Expected 467 but got 468
handCount was incorrect. Expected 32 but got 33
handCount was incorrect. Expected 61 but got 62
handCount was incorrect. Expected 439 but got 440
handCount was incorrect. Expected 447 but got 448
handCount was incorrect. Expected 338 but got 339
handCount was incorrect. Expected 445 but got 446
handCount was incorrect. Expected 377 but got 378
handCount was incorrect. Expected 133 but got 134
handCount was incorrect. Expected 330 but got 331
handCount was incorrect. Expected 217 but got 218
handCount was incorrect. Expected 271 but got 272
handCount was incorrect. Expected 435 but got 436
handCount was incorrect. Expected 347 but got 348
handCount was incorrect. Expected 320 but got 321
handCount was incorrect. Expected 216 but got 217
handCount was incorrect. Expected 121 but got 122
handCount was incorrect. Expected 443 but got 444
handCount was incorrect. Expected 114 but got 115
handCount was incorrect. Expected 435 but got 436
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 496 but got 497
handCount was incorrect. Expected 87 but got 88
handCount was incorrect. Expected 138 but got 139
handCount was incorrect. Expected 483 but got 484
handCount was incorrect. Expected 177 but got 178
handCount was incorrect. Expected 460 but got 461
handCount was incorrect. Expected 265 but got 266
handCount was incorrect. Expected 304 but got 305
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 149 but got 150
handCount was incorrect. Expected 85 but got 86
handCount was incorrect. Expected 401 but got 402
handCount was incorrect. Expected 266 but got 267
handCount was incorrect. Expected 48 but got 49
handCount was incorrect. Expected 185 but got 186
handCount was incorrect. Expected 205 but got 206
handCount was incorrect. Expected 204 but got 205
handCount was incorrect. Expected 320 but got 321
handCount was incorrect. Expected 464 but got 465
handCount was incorrect. Expected 216 but got 217
handCount was incorrect. Expected 166 but got 167
handCount was incorrect. Expected 8 but got 9
handCount was incorrect. Expected 498 but got 499
handCount was incorrect. Expected 345 but got 346
handCount was incorrect. Expected 64 but got 65
handCount was incorrect. Expected 64 but got 65
handCount was incorrect. Expected 243 but got 244
handCount was incorrect. Expected 81 but got 82
handCount was incorrect. Expected 452 but got 453
handCount was incorrect. Expected 14 but got 15
handCount was incorrect. Expected 317 but got 318
handCount was incorrect. Expected 152 but got 153
handCount was incorrect. Expected 62 but got 63
handCount was incorrect. Expected 28 but got 29
handCount was incorrect. Expected 373 but got 374
handCount was incorrect. Expected 299 but got 300
handCount was incorrect. Expected 173 but got 174
handCount was incorrect. Expected 257 but got 258
handCount was incorrect. Expected 264 but got 265
handCount was incorrect. Expected 236 but got 237
handCount was incorrect. Expected 212 but got 213
handCount was incorrect. Expected 196 but got 197
handCount was incorrect. Expected 369 but got 370
handCount was incorrect. Expected 321 but got 322
handCount was incorrect. Expected 264 but got 265
handCount was incorrect. Expected 150 but got 151
handCount was incorrect. Expected 478 but got 479
handCount was incorrect. Expected 38 but got 39
handCount was incorrect. Expected 409 but got 410
handCount was incorrect. Expected 176 but got 177
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 303 but got 304
handCount was incorrect. Expected 401 but got 402
handCount was incorrect. Expected 360 but got 361
handCount was incorrect. Expected 335 but got 336
handCount was incorrect. Expected 404 but got 405
handCount was incorrect. Expected 21 but got 22
handCount was incorrect. Expected 38 but got 39
handCount was incorrect. Expected 177 but got 178
handCount was incorrect. Expected 49 but got 50
handCount was incorrect. Expected 286 but got 287
handCount was incorrect. Expected 225 but got 226
handCount was incorrect. Expected 465 but got 466
handCount was incorrect. Expected 132 but got 133
handCount was incorrect. Expected 458 but got 459
handCount was incorrect. Expected 161 but got 162
handCount was incorrect. Expected 382 but got 383
handCount was incorrect. Expected 59 but got 60
handCount was incorrect. Expected 95 but got 96
handCount was incorrect. Expected 58 but got 59
handCount was incorrect. Expected 393 but got 394
handCount was incorrect. Expected 495 but got 496
handCount was incorrect. Expected 70 but got 71
handCount was incorrect. Expected 174 but got 175
handCount was incorrect. Expected 56 but got 57
handCount was incorrect. Expected 133 but got 134
handCount was incorrect. Expected 441 but got 442
handCount was incorrect. Expected 41 but got 42
handCount was incorrect. Expected 210 but got 211
handCount was incorrect. Expected 361 but got 362
handCount was incorrect. Expected 107 but got 108
handCount was incorrect. Expected 351 but got 352
handCount was incorrect. Expected 440 but got 441
handCount was incorrect. Expected 178 but got 179
handCount was incorrect. Expected 449 but got 450
handCount was incorrect. Expected 403 but got 404
handCount was incorrect. Expected 332 but got 333
handCount was incorrect. Expected 249 but got 250
handCount was incorrect. Expected 292 but got 293
handCount was incorrect. Expected 332 but got 333
handCount was incorrect. Expected 282 but got 283
handCount was incorrect. Expected 438 but got 439
handCount was incorrect. Expected 113 but got 114
handCount was incorrect. Expected 248 but got 249
handCount was incorrect. Expected 46 but got 47
handCount was incorrect. Expected 378 but got 379
handCount was incorrect. Expected 462 but got 463
handCount was incorrect. Expected 162 but got 163
handCount was incorrect. Expected 171 but got 172
handCount was incorrect. Expected 137 but got 138
handCount was incorrect. Expected 113 but got 114
handCount was incorrect. Expected 310 but got 311
handCount was incorrect. Expected 259 but got 260
handCount was incorrect. Expected 62 but got 63
handCount was incorrect. Expected 159 but got 160
handCount was incorrect. Expected 160 but got 161
handCount was incorrect. Expected 177 but got 178
handCount was incorrect. Expected 46 but got 47
handCount was incorrect. Expected 116 but got 117
handCount was incorrect. Expected 495 but got 496
handCount was incorrect. Expected 393 but got 394
handCount was incorrect. Expected 161 but got 162
handCount was incorrect. Expected 11 but got 12
handCount was incorrect. Expected 134 but got 135
handCount was incorrect. Expected 431 but got 432
handCount was incorrect. Expected 248 but got 249
handCount was incorrect. Expected 30 but got 31
handCount was incorrect. Expected 63 but got 64
handCount was incorrect. Expected 280 but got 281
handCount was incorrect. Expected 483 but got 484
handCount was incorrect. Expected 313 but got 314
handCount was incorrect. Expected 284 but got 285
handCount was incorrect. Expected 157 but got 158
handCount was incorrect. Expected 398 but got 399
handCount was incorrect. Expected 479 but got 480
handCount was incorrect. Expected 477 but got 478
handCount was incorrect. Expected 359 but got 360
handCount was incorrect. Expected 465 but got 466
handCount was incorrect. Expected 347 but got 348
handCount was incorrect. Expected 79 but got 80
handCount was incorrect. Expected 180 but got 181
handCount was incorrect. Expected 264 but got 265
handCount was incorrect. Expected 406 but got 407
handCount was incorrect. Expected 41 but got 42
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 86 but got 87
handCount was incorrect. Expected 462 but got 463
handCount was incorrect. Expected 46 but got 47
handCount was incorrect. Expected 498 but got 499
handCount was incorrect. Expected 276 but got 277
handCount was incorrect. Expected 376 but got 377
handCount was incorrect. Expected 155 but got 156
handCount was incorrect. Expected 223 but got 224
handCount was incorrect. Expected 381 but got 382
handCount was incorrect. Expected 51 but got 52
handCount was incorrect. Expected 346 but got 347
handCount was incorrect. Expected 378 but got 379
handCount was incorrect. Expected 249 but got 250
handCount was incorrect. Expected 425 but got 426
handCount was incorrect. Expected 80 but got 81
handCount was incorrect. Expected 462 but got 463
handCount was incorrect. Expected 185 but got 186
handCount was incorrect. Expected 384 but got 385
handCount was incorrect. Expected 301 but got 302
handCount was incorrect. Expected 311 but got 312
handCount was incorrect. Expected 110 but got 111
handCount was incorrect. Expected 442 but got 443
handCount was incorrect. Expected 86 but got 87
handCount was incorrect. Expected 483 but got 484
handCount was incorrect. Expected 170 but got 171
handCount was incorrect. Expected 237 but got 238
handCount was incorrect. Expected 412 but got 413
handCount was incorrect. Expected 245 but got 246
handCount was incorrect. Expected 111 but got 112
handCount was incorrect. Expected 294 but got 295
handCount was incorrect. Expected 37 but got 38
handCount was incorrect. Expected 206 but got 207
handCount was incorrect. Expected 42 but got 43
handCount was incorrect. Expected 494 but got 495
handCount was incorrect. Expected 373 but got 374
handCount was incorrect. Expected 419 but got 420
handCount was incorrect. Expected 404 but got 405
handCount was incorrect. Expected 204 but got 205
handCount was incorrect. Expected 93 but got 94
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 167 but got 168
handCount was incorrect. Expected 465 but got 466
handCount was incorrect. Expected 242 but got 243
handCount was incorrect. Expected 55 but got 56
handCount was incorrect. Expected 45 but got 46
handCount was incorrect. Expected 335 but got 336
handCount was incorrect. Expected 23 but got 24
handCount was incorrect. Expected 185 but got 186
handCount was incorrect. Expected 310 but got 311
handCount was incorrect. Expected 176 but got 177
handCount was incorrect. Expected 345 but got 346
handCount was incorrect. Expected 172 but got 173
handCount was incorrect. Expected 360 but got 361
handCount was incorrect. Expected 53 but got 54
handCount was incorrect. Expected 159 but got 160
handCount was incorrect. Expected 80 but got 81
handCount was incorrect. Expected 389 but got 390
handCount was incorrect. Expected 493 but got 494
handCount was incorrect. Expected 432 but got 433
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 100 but got 101
handCount was incorrect. Expected 300 but got 301
handCount was incorrect. Expected 112 but got 113
handCount was incorrect. Expected 196 but got 197
handCount was incorrect. Expected 41 but got 42
handCount was incorrect. Expected 8 but got 9
handCount was incorrect. Expected 102 but got 103
handCount was incorrect. Expected 169 but got 170
handCount was incorrect. Expected 348 but got 349
handCount was incorrect. Expected 327 but got 328
handCount was incorrect. Expected 353 but got 354
handCount was incorrect. Expected 189 but got 190
handCount was incorrect. Expected 315 but got 316
handCount was incorrect. Expected 429 but got 430
handCount was incorrect. Expected 132 but got 133
handCount was incorrect. Expected 39 but got 40
handCount was incorrect. Expected 232 but got 233
handCount was incorrect. Expected 464 but got 465
handCount was incorrect. Expected 357 but got 358
handCount was incorrect. Expected 212 but got 213
handCount was incorrect. Expected 147 but got 148
handCount was incorrect. Expected 62 but got 63
handCount was incorrect. Expected 230 but got 231
handCount was incorrect. Expected 49 but got 50
handCount was incorrect. Expected 411 but got 412
handCount was incorrect. Expected 475 but got 476
handCount was incorrect. Expected 67 but got 68
handCount was incorrect. Expected 359 but got 360
handCount was incorrect. Expected 255 but got 256
handCount was incorrect. Expected 393 but got 394
handCount was incorrect. Expected 383 but got 384
handCount was incorrect. Expected 409 but got 410
handCount was incorrect. Expected 272 but got 273
handCount was incorrect. Expected 115 but got 116
handCount was incorrect. Expected 144 but got 145
handCount was incorrect. Expected 297 but got 298
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 205 but got 206
handCount was incorrect. Expected 99 but got 100
handCount was incorrect. Expected 15 but got 16
handCount was incorrect. Expected 105 but got 106
handCount was incorrect. Expected 193 but got 194
handCount was incorrect. Expected 297 but got 298
handCount was incorrect. Expected 255 but got 256
handCount was incorrect. Expected 468 but got 469
handCount was incorrect. Expected 234 but got 235
handCount was incorrect. Expected 131 but got 132
handCount was incorrect. Expected 410 but got 411
handCount was incorrect. Expected 285 but got 286
handCount was incorrect. Expected 463 but got 464
handCount was incorrect. Expected 437 but got 438
handCount was incorrect. Expected 448 but got 449
handCount was incorrect. Expected 124 but got 125
handCount was incorrect. Expected 340 but got 341
handCount was incorrect. Expected 19 but got 20
handCount was incorrect. Expected 331 but got 332
handCount was incorrect. Expected 225 but got 226
handCount was incorrect. Expected 202 but got 203
handCount was incorrect. Expected 296 but got 297
handCount was incorrect. Expected 148 but got 149
handCount was incorrect. Expected 102 but got 103
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 438 but got 439
handCount was incorrect. Expected 192 but got 193
handCount was incorrect. Expected 355 but got 356
handCount was incorrect. Expected 339 but got 340
handCount was incorrect. Expected 446 but got 447
handCount was incorrect. Expected 65 but got 66
handCount was incorrect. Expected 484 but got 485
handCount was incorrect. Expected 8 but got 9
handCount was incorrect. Expected 244 but got 245
handCount was incorrect. Expected 224 but got 225
handCount was incorrect. Expected 266 but got 267
handCount was incorrect. Expected 234 but got 235
handCount was incorrect. Expected 62 but got 63
handCount was incorrect. Expected 89 but got 90
handCount was incorrect. Expected 115 but got 116
handCount was incorrect. Expected 207 but got 208
handCount was incorrect. Expected 51 but got 52
handCount was incorrect. Expected 77 but got 78
handCount was incorrect. Expected 59 but got 60
handCount was incorrect. Expected 147 but got 148
handCount was incorrect. Expected 406 but got 407
handCount was incorrect. Expected 417 but got 418
handCount was incorrect. Expected 472 but got 473
handCount was incorrect. Expected 313 but got 314
handCount was incorrect. Expected 149 but got 150
handCount was incorrect. Expected 258 but got 259
handCount was incorrect. Expected 143 but got 144
handCount was incorrect. Expected 497 but got 498
handCount was incorrect. Expected 79 but got 80
handCount was incorrect. Expected 247 but got 248
handCount was incorrect. Expected 494 but got 495
handCount was incorrect. Expected 57 but got 58
handCount was incorrect. Expected 222 but got 223
handCount was incorrect. Expected 116 but got 117
handCount was incorrect. Expected 319 but got 320
handCount was incorrect. Expected 165 but got 166
handCount was incorrect. Expected 266 but got 267
handCount was incorrect. Expected 496 but got 497
handCount was incorrect. Expected 148 but got 149
handCount was incorrect. Expected 165 but got 166
handCount was incorrect. Expected 478 but got 479
handCount was incorrect. Expected 486 but got 487
handCount was incorrect. Expected 339 but got 340
handCount was incorrect. Expected 422 but got 423
handCount was incorrect. Expected 377 but got 378
handCount was incorrect. Expected 427 but got 428
handCount was incorrect. Expected 343 but got 344
handCount was incorrect. Expected 371 but got 372
handCount was incorrect. Expected 33 but got 34
handCount was incorrect. Expected 430 but got 431
handCount was incorrect. Expected 421 but got 422
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 358 but got 359
handCount was incorrect. Expected 98 but got 99
handCount was incorrect. Expected 457 but got 458
handCount was incorrect. Expected 262 but got 263
handCount was incorrect. Expected 349 but got 350
handCount was incorrect. Expected 487 but got 488
handCount was incorrect. Expected 147 but got 148
handCount was incorrect. Expected 350 but got 351
handCount was incorrect. Expected 221 but got 222
handCount was incorrect. Expected 22 but got 23
handCount was incorrect. Expected 9 but got 10
handCount was incorrect. Expected 473 but got 474
handCount was incorrect. Expected 467 but got 468
handCount was incorrect. Expected 491 but got 492
handCount was incorrect. Expected 373 but got 374
handCount was incorrect. Expected 420 but got 421
handCount was incorrect. Expected 115 but got 116
handCount was incorrect. Expected 25 but got 26
handCount was incorrect. Expected 400 but got 401
handCount was incorrect. Expected 43 but got 44
handCount was incorrect. Expected 36 but got 37
handCount was incorrect. Expected 149 but got 150
handCount was incorrect. Expected 161 but got 162
handCount was incorrect. Expected 423 but got 424
handCount was incorrect. Expected 29 but got 30
handCount was incorrect. Expected 329 but got 330
handCount was incorrect. Expected 414 but got 415
handCount was incorrect. Expected 217 but got 218
handCount was incorrect. Expected 39 but got 40
handCount was incorrect. Expected 362 but got 363
handCount was incorrect. Expected 427 but got 428
handCount was incorrect. Expected 329 but got 330
handCount was incorrect. Expected 148 but got 149
handCount was incorrect. Expected 277 but got 278
handCount was incorrect. Expected 418 but got 419
handCount was incorrect. Expected 363 but got 364
handCount was incorrect. Expected 251 but got 252
handCount was incorrect. Expected 237 but got 238
handCount was incorrect. Expected 320 but got 321
handCount was incorrect. Expected 23 but got 24
handCount was incorrect. Expected 186 but got 187
handCount was incorrect. Expected 42 but got 43
handCount was incorrect. Expected 134 but got 135
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 194 but got 195
handCount was incorrect. Expected 329 but got 330
handCount was incorrect. Expected 136 but got 137
handCount was incorrect. Expected 103 but got 104
handCount was incorrect. Expected 50 but got 51
handCount was incorrect. Expected 396 but got 397
handCount was incorrect. Expected 293 but got 294
handCount was incorrect. Expected 439 but got 440
handCount was incorrect. Expected 98 but got 99
handCount was incorrect. Expected 412 but got 413
handCount was incorrect. Expected 245 but got 246
handCount was incorrect. Expected 21 but got 22
handCount was incorrect. Expected 391 but got 392
handCount was incorrect. Expected 6 but got 7
handCount was incorrect. Expected 289 but got 290
handCount was incorrect. Expected 440 but got 441
handCount was incorrect. Expected 286 but got 287
handCount was incorrect. Expected 455 but got 456
handCount was incorrect. Expected 468 but got 469
handCount was incorrect. Expected 161 but got 162
handCount was incorrect. Expected 122 but got 123
handCount was incorrect. Expected 319 but got 320
handCount was incorrect. Expected 312 but got 313
handCount was incorrect. Expected 116 but got 117
handCount was incorrect. Expected 95 but got 96
handCount was incorrect. Expected 26 but got 27
handCount was incorrect. Expected 400 but got 401
handCount was incorrect. Expected 446 but got 447
handCount was incorrect. Expected 171 but got 172
handCount was incorrect. Expected 256 but got 257
handCount was incorrect. Expected 343 but got 344
handCount was incorrect. Expected 73 but got 74
handCount was incorrect. Expected 258 but got 259
handCount was incorrect. Expected 29 but got 30
handCount was incorrect. Expected 116 but got 117
handCount was incorrect. Expected 221 but got 222
handCount was incorrect. Expected 312 but got 313
handCount was incorrect. Expected 147 but got 148
handCount was incorrect. Expected 327 but got 328
handCount was incorrect. Expected 142 but got 143
handCount was incorrect. Expected 97 but got 98
handCount was incorrect. Expected 190 but got 191
handCount was incorrect. Expected 283 but got 284
handCount was incorrect. Expected 27 but got 28
handCount was incorrect. Expected 407 but got 408
handCount was incorrect. Expected 400 but got 401
handCount was incorrect. Expected 308 but got 309
handCount was incorrect. Expected 449 but got 450
handCount was incorrect. Expected 331 but got 332
handCount was incorrect. Expected 138 but got 139
handCount was incorrect. Expected 358 but got 359
handCount was incorrect. Expected 35 but got 36
handCount was incorrect. Expected 32 but got 33
handCount was incorrect. Expected 190 but got 191
handCount was incorrect. Expected 458 but got 459
handCount was incorrect. Expected 257 but got 258
handCount was incorrect. Expected 340 but got 341
handCount was incorrect. Expected 76 but got 77
handCount was incorrect. Expected 64 but got 65
handCount was incorrect. Expected 316 but got 317
handCount was incorrect. Expected 50 but got 51
handCount was incorrect. Expected 214 but got 215
handCount was incorrect. Expected 159 but got 160
handCount was incorrect. Expected 72 but got 73
handCount was incorrect. Expected 336 but got 337
handCount was incorrect. Expected 27 but got 28
handCount was incorrect. Expected 181 but got 182
handCount was incorrect. Expected 73 but got 74
handCount was incorrect. Expected 55 but got 56
handCount was incorrect. Expected 123 but got 124
handCount was incorrect. Expected 145 but got 146
handCount was incorrect. Expected 275 but got 276
handCount was incorrect. Expected 169 but got 170
handCount was incorrect. Expected 365 but got 366
handCount was incorrect. Expected 386 but got 387
handCount was incorrect. Expected 264 but got 265
handCount was incorrect. Expected 456 but got 457
handCount was incorrect. Expected 155 but got 156
handCount was incorrect. Expected 362 but got 363
handCount was incorrect. Expected 173 but got 174
handCount was incorrect. Expected 480 but got 481
handCount was incorrect. Expected 381 but got 382
handCount was incorrect. Expected 203 but got 204
handCount was incorrect. Expected 448 but got 449
handCount was incorrect. Expected 290 but got 291
handCount was incorrect. Expected 70 but got 71
handCount was incorrect. Expected 453 but got 454
handCount was incorrect. Expected 236 but got 237
handCount was incorrect. Expected 56 but got 57
handCount was incorrect. Expected 293 but got 294
handCount was incorrect. Expected 401 but got 402
handCount was incorrect. Expected 154 but got 155
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 291 but got 292
handCount was incorrect. Expected 187 but got 188
handCount was incorrect. Expected 74 but got 75
handCount was incorrect. Expected 349 but got 350
handCount was incorrect. Expected 289 but got 290
handCount was incorrect. Expected 302 but got 303
handCount was incorrect. Expected 441 but got 442
handCount was incorrect. Expected 89 but got 90
handCount was incorrect. Expected 206 but got 207
handCount was incorrect. Expected 72 but got 73
handCount was incorrect. Expected 497 but got 498
handCount was incorrect. Expected 52 but got 53
handCount was incorrect. Expected 49 but got 50
handCount was incorrect. Expected 264 but got 265
handCount was incorrect. Expected 391 but got 392
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 156 but got 157
handCount was incorrect. Expected 355 but got 356
handCount was incorrect. Expected 292 but got 293
handCount was incorrect. Expected 409 but got 410
handCount was incorrect. Expected 460 but got 461
handCount was incorrect. Expected 261 but got 262
handCount was incorrect. Expected 435 but got 436
handCount was incorrect. Expected 420 but got 421
handCount was incorrect. Expected 141 but got 142
handCount was incorrect. Expected 345 but got 346
handCount was incorrect. Expected 376 but got 377
handCount was incorrect. Expected 97 but got 98
handCount was incorrect. Expected 231 but got 232
handCount was incorrect. Expected 468 but got 469
handCount was incorrect. Expected 223 but got 224
handCount was incorrect. Expected 99 but got 100
handCount was incorrect. Expected 474 but got 475
handCount was incorrect. Expected 173 but got 174
handCount was incorrect. Expected 134 but got 135
handCount was incorrect. Expected 22 but got 23
handCount was incorrect. Expected 294 but got 295
handCount was incorrect. Expected 269 but got 270
handCount was incorrect. Expected 480 but got 481
handCount was incorrect. Expected 332 but got 333
handCount was incorrect. Expected 274 but got 275
handCount was incorrect. Expected 380 but got 381
handCount was incorrect. Expected 129 but got 130
handCount was incorrect. Expected 451 but got 452
handCount was incorrect. Expected 400 but got 401
handCount was incorrect. Expected 257 but got 258
handCount was incorrect. Expected 402 but got 403
handCount was incorrect. Expected 73 but got 74
handCount was incorrect. Expected 340 but got 341
handCount was incorrect. Expected 46 but got 47
handCount was incorrect. Expected 155 but got 156
handCount was incorrect. Expected 51 but got 52
handCount was incorrect. Expected 378 but got 379
handCount was incorrect. Expected 460 but got 461
handCount was incorrect. Expected 5 but got 6
handCount was incorrect. Expected 25 but got 26
handCount was incorrect. Expected 325 but got 326
handCount was incorrect. Expected 110 but got 111
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 198 but got 199
handCount was incorrect. Expected 238 but got 239
handCount was incorrect. Expected 199 but got 200
handCount was incorrect. Expected 163 but got 164
handCount was incorrect. Expected 66 but got 67
handCount was incorrect. Expected 94 but got 95
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 6 but got 7
handCount was incorrect. Expected 212 but got 213
handCount was incorrect. Expected 141 but got 142
handCount was incorrect. Expected 327 but got 328
handCount was incorrect. Expected 452 but got 453
handCount was incorrect. Expected 223 but got 224
handCount was incorrect. Expected 474 but got 475
handCount was incorrect. Expected 273 but got 274
handCount was incorrect. Expected 30 but got 31
handCount was incorrect. Expected 317 but got 318
handCount was incorrect. Expected 408 but got 409
handCount was incorrect. Expected 332 but got 333
handCount was incorrect. Expected 489 but got 490
handCount was incorrect. Expected 330 but got 331
handCount was incorrect. Expected 122 but got 123
handCount was incorrect. Expected 383 but got 384
handCount was incorrect. Expected 463 but got 464
handCount was incorrect. Expected 169 but got 170
handCount was incorrect. Expected 151 but got 152
handCount was incorrect. Expected 41 but got 42
handCount was incorrect. Expected 421 but got 422
handCount was incorrect. Expected 130 but got 131
handCount was incorrect. Expected 348 but got 349
handCount was incorrect. Expected 237 but got 238
handCount was incorrect. Expected 25 but got 26
handCount was incorrect. Expected 67 but got 68
handCount was incorrect. Expected 368 but got 369
handCount was incorrect. Expected 285 but got 286
handCount was incorrect. Expected 217 but got 218
handCount was incorrect. Expected 483 but got 484
handCount was incorrect. Expected 453 but got 454
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 493 but got 494
handCount was incorrect. Expected 46 but got 47
handCount was incorrect. Expected 144 but got 145
handCount was incorrect. Expected 156 but got 157
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 401 but got 402
handCount was incorrect. Expected 358 but got 359
handCount was incorrect. Expected 273 but got 274
handCount was incorrect. Expected 355 but got 356
handCount was incorrect. Expected 15 but got 16
handCount was incorrect. Expected 491 but got 492
handCount was incorrect. Expected 222 but got 223
handCount was incorrect. Expected 146 but got 147
handCount was incorrect. Expected 49 but got 50
handCount was incorrect. Expected 27 but got 28
handCount was incorrect. Expected 210 but got 211
handCount was incorrect. Expected 240 but got 241
handCount was incorrect. Expected 322 but got 323
handCount was incorrect. Expected 411 but got 412
handCount was incorrect. Expected 15 but got 16
handCount was incorrect. Expected 492 but got 493
handCount was incorrect. Expected 276 but got 277
handCount was incorrect. Expected 392 but got 393
handCount was incorrect. Expected 449 but got 450
handCount was incorrect. Expected 168 but got 169
handCount was incorrect. Expected 101 but got 102
handCount was incorrect. Expected 250 but got 251
handCount was incorrect. Expected 249 but got 250
handCount was incorrect. Expected 120 but got 121
handCount was incorrect. Expected 20 but got 21
handCount was incorrect. Expected 429 but got 430
handCount was incorrect. Expected 92 but got 93
handCount was incorrect. Expected 20 but got 21
handCount was incorrect. Expected 289 but got 290
handCount was incorrect. Expected 491 but got 492
handCount was incorrect. Expected 152 but got 153
handCount was incorrect. Expected 276 but got 277
handCount was incorrect. Expected 326 but got 327
handCount was incorrect. Expected 237 but got 238
handCount was incorrect. Expected 395 but got 396
handCount was incorrect. Expected 295 but got 296
handCount was incorrect. Expected 38 but got 39
handCount was incorrect. Expected 368 but got 369
handCount was incorrect. Expected 270 but got 271
handCount was incorrect. Expected 33 but got 34
handCount was incorrect. Expected 166 but got 167
handCount was incorrect. Expected 88 but got 89
handCount was incorrect. Expected 177 but got 178
handCount was incorrect. Expected 498 but got 499
handCount was incorrect. Expected 28 but got 29
handCount was incorrect. Expected 261 but got 262
handCount was incorrect. Expected 264 but got 265
handCount was incorrect. Expected 331 but got 332
handCount was incorrect. Expected 158 but got 159
handCount was incorrect. Expected 64 but got 65
handCount was incorrect. Expected 439 but got 440
handCount was incorrect. Expected 34 but got 35
handCount was incorrect. Expected 128 but got 129
handCount was incorrect. Expected 11 but got 12
handCount was incorrect. Expected 234 but got 235
handCount was incorrect. Expected 37 but got 38
handCount was incorrect. Expected 306 but got 307
handCount was incorrect. Expected 20 but got 21
handCount was incorrect. Expected 76 but got 77
handCount was incorrect. Expected 263 but got 264
handCount was incorrect. Expected 485 but got 486
handCount was incorrect. Expected 37 but got 38
handCount was incorrect. Expected 105 but got 106
handCount was incorrect. Expected 273 but got 274
handCount was incorrect. Expected 328 but got 329
handCount was incorrect. Expected 198 but got 199
handCount was incorrect. Expected 308 but got 309
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 478 but got 479
handCount was incorrect. Expected 436 but got 437
handCount was incorrect. Expected 483 but got 484
handCount was incorrect. Expected 179 but got 180
handCount was incorrect. Expected 95 but got 96
handCount was incorrect. Expected 7 but got 8
handCount was incorrect. Expected 135 but got 136
handCount was incorrect. Expected 289 but got 290
handCount was incorrect. Expected 456 but got 457
handCount was incorrect. Expected 321 but got 322
handCount was incorrect. Expected 130 but got 131
handCount was incorrect. Expected 195 but got 196
handCount was incorrect. Expected 134 but got 135
handCount was incorrect. Expected 380 but got 381
handCount was incorrect. Expected 331 but got 332
handCount was incorrect. Expected 418 but got 419
handCount was incorrect. Expected 73 but got 74
handCount was incorrect. Expected 196 but got 197
handCount was incorrect. Expected 358 but got 359
handCount was incorrect. Expected 124 but got 125
handCount was incorrect. Expected 466 but got 467
handCount was incorrect. Expected 359 but got 360
handCount was incorrect. Expected 413 but got 414
handCount was incorrect. Expected 251 but got 252
handCount was incorrect. Expected 14 but got 15
handCount was incorrect. Expected 98 but got 99
handCount was incorrect. Expected 269 but got 270
handCount was incorrect. Expected 63 but got 64
handCount was incorrect. Expected 283 but got 284
handCount was incorrect. Expected 445 but got 446
handCount was incorrect. Expected 230 but got 231
handCount was incorrect. Expected 484 but got 485
handCount was incorrect. Expected 249 but got 250
handCount was incorrect. Expected 489 but got 490
handCount was incorrect. Expected 5 but got 6
handCount was incorrect. Expected 357 but got 358
handCount was incorrect. Expected 21 but got 22
handCount was incorrect. Expected 209 but got 210
handCount was incorrect. Expected 63 but got 64
handCount was incorrect. Expected 368 but got 369
handCount was incorrect. Expected 92 but got 93
handCount was incorrect. Expected 331 but got 332
handCount was incorrect. Expected 374 but got 375
handCount was incorrect. Expected 15 but got 16
handCount was incorrect. Expected 187 but got 188
handCount was incorrect. Expected 107 but got 108
handCount was incorrect. Expected 276 but got 277
handCount was incorrect. Expected 462 but got 463
handCount was incorrect. Expected 74 but got 75
handCount was incorrect. Expected 412 but got 413
handCount was incorrect. Expected 394 but got 395
handCount was incorrect. Expected 178 but got 179
handCount was incorrect. Expected 132 but got 133
handCount was incorrect. Expected 183 but got 184
handCount was incorrect. Expected 382 but got 383
handCount was incorrect. Expected 236 but got 237
handCount was incorrect. Expected 164 but got 165
handCount was incorrect. Expected 220 but got 221
handCount was incorrect. Expected 117 but got 118
handCount was incorrect. Expected 53 but got 54
handCount was incorrect. Expected 205 but got 206
handCount was incorrect. Expected 131 but got 132
handCount was incorrect. Expected 438 but got 439
handCount was incorrect. Expected 292 but got 293
handCount was incorrect. Expected 290 but got 291
handCount was incorrect. Expected 151 but got 152
handCount was incorrect. Expected 34 but got 35
handCount was incorrect. Expected 138 but got 139
handCount was incorrect. Expected 335 but got 336
handCount was incorrect. Expected 444 but got 445
handCount was incorrect. Expected 50 but got 51
handCount was incorrect. Expected 148 but got 149
handCount was incorrect. Expected 180 but got 181
handCount was incorrect. Expected 431 but got 432
handCount was incorrect. Expected 441 but got 442
handCount was incorrect. Expected 65 but got 66
handCount was incorrect. Expected 346 but got 347
handCount was incorrect. Expected 368 but got 369
handCount was incorrect. Expected 234 but got 235
handCount was incorrect. Expected 43 but got 44
handCount was incorrect. Expected 424 but got 425
handCount was incorrect. Expected 304 but got 305
handCount was incorrect. Expected 229 but got 230
handCount was incorrect. Expected 343 but got 344
handCount was incorrect. Expected 345 but got 346
handCount was incorrect. Expected 343 but got 344
handCount was incorrect. Expected 426 but got 427
handCount was incorrect. Expected 486 but got 487
handCount was incorrect. Expected 261 but got 262
handCount was incorrect. Expected 403 but got 404
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 21 but got 22
handCount was incorrect. Expected 472 but got 473
handCount was incorrect. Expected 229 but got 230
handCount was incorrect. Expected 174 but got 175
handCount was incorrect. Expected 425 but got 426
handCount was incorrect. Expected 97 but got 98
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 267 but got 268
handCount was incorrect. Expected 25 but got 26
handCount was incorrect. Expected 155 but got 156
handCount was incorrect. Expected 265 but got 266
handCount was incorrect. Expected 382 but got 383
handCount was incorrect. Expected 423 but got 424
handCount was incorrect. Expected 421 but got 422
handCount was incorrect. Expected 340 but got 341
handCount was incorrect. Expected 409 but got 410
handCount was incorrect. Expected 33 but got 34
handCount was incorrect. Expected 350 but got 351
handCount was incorrect. Expected 422 but got 423
handCount was incorrect. Expected 376 but got 377
handCount was incorrect. Expected 46 but got 47
handCount was incorrect. Expected 395 but got 396
handCount was incorrect. Expected 158 but got 159
handCount was incorrect. Expected 279 but got 280
handCount was incorrect. Expected 221 but got 222
handCount was incorrect. Expected 397 but got 398
handCount was incorrect. Expected 305 but got 306
handCount was incorrect. Expected 107 but got 108
handCount was incorrect. Expected 399 but got 400
handCount was incorrect. Expected 259 but got 260
handCount was incorrect. Expected 487 but got 488
handCount was incorrect. Expected 205 but got 206
handCount was incorrect. Expected 163 but got 164
handCount was incorrect. Expected 449 but got 450
handCount was incorrect. Expected 263 but got 264
handCount was incorrect. Expected 251 but got 252
handCount was incorrect. Expected 68 but got 69
handCount was incorrect. Expected 184 but got 185
handCount was incorrect. Expected 235 but got 236
handCount was incorrect. Expected 116 but got 117
handCount was incorrect. Expected 498 but got 499
handCount was incorrect. Expected 240 but got 241
handCount was incorrect. Expected 360 but got 361
handCount was incorrect. Expected 180 but got 181
handCount was incorrect. Expected 407 but got 408
handCount was incorrect. Expected 404 but got 405
handCount was incorrect. Expected 253 but got 254
handCount was incorrect. Expected 113 but got 114
handCount was incorrect. Expected 64 but got 65
handCount was incorrect. Expected 456 but got 457
handCount was incorrect. Expected 470 but got 471
handCount was incorrect. Expected 411 but got 412
handCount was incorrect. Expected 50 but got 51
handCount was incorrect. Expected 444 but got 445
handCount was incorrect. Expected 380 but got 381
handCount was incorrect. Expected 143 but got 144
handCount was incorrect. Expected 111 but got 112
handCount was incorrect. Expected 202 but got 203
handCount was incorrect. Expected 461 but got 462
handCount was incorrect. Expected 322 but got 323
handCount was incorrect. Expected 440 but got 441
handCount was incorrect. Expected 394 but got 395
handCount was incorrect. Expected 355 but got 356
handCount was incorrect. Expected 471 but got 472
handCount was incorrect. Expected 300 but got 301
handCount was incorrect. Expected 440 but got 441
handCount was incorrect. Expected 481 but got 482
handCount was incorrect. Expected 161 but got 162
handCount was incorrect. Expected 218 but got 219
handCount was incorrect. Expected 373 but got 374
handCount was incorrect. Expected 409 but got 410
handCount was incorrect. Expected 183 but got 184
handCount was incorrect. Expected 34 but got 35
handCount was incorrect. Expected 7 but got 8
handCount was incorrect. Expected 67 but got 68
handCount was incorrect. Expected 255 but got 256
handCount was incorrect. Expected 78 but got 79
handCount was incorrect. Expected 113 but got 114
handCount was incorrect. Expected 378 but got 379
handCount was incorrect. Expected 147 but got 148
handCount was incorrect. Expected 236 but got 237
handCount was incorrect. Expected 466 but got 467
handCount was incorrect. Expected 425 but got 426
handCount was incorrect. Expected 456 but got 457
handCount was incorrect. Expected 427 but got 428
handCount was incorrect. Expected 21 but got 22
handCount was incorrect. Expected 388 but got 389
handCount was incorrect. Expected 157 but got 158
handCount was incorrect. Expected 370 but got 371
handCount was incorrect. Expected 410 but got 411
handCount was incorrect. Expected 37 but got 38
handCount was incorrect. Expected 487 but got 488
handCount was incorrect. Expected 354 but got 355
handCount was incorrect. Expected 444 but got 445
handCount was incorrect. Expected 313 but got 314
handCount was incorrect. Expected 351 but got 352
handCount was incorrect. Expected 321 but got 322
handCount was incorrect. Expected 176 but got 177
handCount was incorrect. Expected 63 but got 64
handCount was incorrect. Expected 36 but got 37
handCount was incorrect. Expected 157 but got 158
handCount was incorrect. Expected 110 but got 111
handCount was incorrect. Expected 468 but got 469
handCount was incorrect. Expected 328 but got 329
handCount was incorrect. Expected 468 but got 469
handCount was incorrect. Expected 236 but got 237
handCount was incorrect. Expected 23 but got 24
handCount was incorrect. Expected 222 but got 223
handCount was incorrect. Expected 68 but got 69
handCount was incorrect. Expected 386 but got 387
handCount was incorrect. Expected 78 but got 79
handCount was incorrect. Expected 45 but got 46
handCount was incorrect. Expected 33 but got 34
handCount was incorrect. Expected 64 but got 65
handCount was incorrect. Expected 65 but got 66
handCount was incorrect. Expected 355 but got 356
handCount was incorrect. Expected 436 but got 437
handCount was incorrect. Expected 60 but got 61
handCount was incorrect. Expected 465 but got 466
handCount was incorrect. Expected 104 but got 105
handCount was incorrect. Expected 272 but got 273
handCount was incorrect. Expected 260 but got 261
handCount was incorrect. Expected 156 but got 157
handCount was incorrect. Expected 418 but got 419
handCount was incorrect. Expected 303 but got 304
handCount was incorrect. Expected 372 but got 373
handCount was incorrect. Expected 174 but got 175
handCount was incorrect. Expected 135 but got 136
handCount was incorrect. Expected 235 but got 236
handCount was incorrect. Expected 157 but got 158
handCount was incorrect. Expected 318 but got 319
handCount was incorrect. Expected 410 but got 411
handCount was incorrect. Expected 106 but got 107
handCount was incorrect. Expected 134 but got 135
handCount was incorrect. Expected 36 but got 37
handCount was incorrect. Expected 261 but got 262
handCount was incorrect. Expected 121 but got 122
handCount was incorrect. Expected 286 but got 287
handCount was incorrect. Expected 24 but got 25
handCount was incorrect. Expected 31 but got 32
handCount was incorrect. Expected 454 but got 455
handCount was incorrect. Expected 361 but got 362
handCount was incorrect. Expected 419 but got 420
handCount was incorrect. Expected 210 but got 211
handCount was incorrect. Expected 10 but got 11
handCount was incorrect. Expected 153 but got 154
handCount was incorrect. Expected 15 but got 16
handCount was incorrect. Expected 357 but got 358
handCount was incorrect. Expected 145 but got 146
handCount was incorrect. Expected 394 but got 395
handCount was incorrect. Expected 177 but got 178
handCount was incorrect. Expected 190 but got 191
handCount was incorrect. Expected 435 but got 436
handCount was incorrect. Expected 176 but got 177
handCount was incorrect. Expected 462 but got 463
handCount was incorrect. Expected 354 but got 355
handCount was incorrect. Expected 90 but got 91
handCount was incorrect. Expected 104 but got 105
handCount was incorrect. Expected 234 but got 235
handCount was incorrect. Expected 366 but got 367
handCount was incorrect. Expected 184 but got 185
handCount was incorrect. Expected 203 but got 204
handCount was incorrect. Expected 145 but got 146
handCount was incorrect. Expected 445 but got 446
handCount was incorrect. Expected 211 but got 212
handCount was incorrect. Expected 317 but got 318
handCount was incorrect. Expected 476 but got 477
handCount was incorrect. Expected 183 but got 184
handCount was incorrect. Expected 344 but got 345
handCount was incorrect. Expected 22 but got 23
handCount was incorrect. Expected 225 but got 226
handCount was incorrect. Expected 198 but got 199
handCount was incorrect. Expected 167 but got 168
handCount was incorrect. Expected 294 but got 295
handCount was incorrect. Expected 444 but got 445
handCount was incorrect. Expected 218 but got 219
handCount was incorrect. Expected 116 but got 117
handCount was incorrect. Expected 369 but got 370
handCount was incorrect. Expected 268 but got 269
handCount was incorrect. Expected 397 but got 398
handCount was incorrect. Expected 288 but got 289
handCount was incorrect. Expected 108 but got 109
handCount was incorrect. Expected 161 but got 162
handCount was incorrect. Expected 400 but got 401
handCount was incorrect. Expected 307 but got 308
handCount was incorrect. Expected 307 but got 308
handCount was incorrect. Expected 488 but got 489
handCount was incorrect. Expected 259 but got 260
handCount was incorrect. Expected 276 but got 277
handCount was incorrect. Expected 440 but got 441
handCount was incorrect. Expected 195 but got 196
handCount was incorrect. Expected 184 but got 185
handCount was incorrect. Expected 371 but got 372
handCount was incorrect. Expected 26 but got 27
handCount was incorrect. Expected 200 but got 201
handCount was incorrect. Expected 364 but got 365
handCount was incorrect. Expected 176 but got 177
handCount was incorrect. Expected 274 but got 275
handCount was incorrect. Expected 3 but got 4
handCount was incorrect. Expected 32 but got 33
handCount was incorrect. Expected 45 but got 46
handCount was incorrect. Expected 38 but got 39
handCount was incorrect. Expected 112 but got 113
handCount was incorrect. Expected 354 but got 355
handCount was incorrect. Expected 189 but got 190
handCount was incorrect. Expected 179 but got 180
handCount was incorrect. Expected 33 but got 34
handCount was incorrect. Expected 109 but got 110
handCount was incorrect. Expected 85 but got 86
handCount was incorrect. Expected 258 but got 259
handCount was incorrect. Expected 289 but got 290
handCount was incorrect. Expected 326 but got 327
handCount was incorrect. Expected 242 but got 243
handCount was incorrect. Expected 251 but got 252
handCount was incorrect. Expected 380 but got 381
handCount was incorrect. Expected 187 but got 188
handCount was incorrect. Expected 143 but got 144
handCount was incorrect. Expected 173 but got 174
handCount was incorrect. Expected 252 but got 253
handCount was incorrect. Expected 179 but got 180
handCount was incorrect. Expected 467 but got 468
handCount was incorrect. Expected 317 but got 318
handCount was incorrect. Expected 477 but got 478
handCount was incorrect. Expected 302 but got 303
handCount was incorrect. Expected 16 but got 17
handCount was incorrect. Expected 258 but got 259
handCount was incorrect. Expected 228 but got 229
handCount was incorrect. Expected 489 but got 490
handCount was incorrect. Expected 313 but got 314
handCount was incorrect. Expected 239 but got 240
handCount was incorrect. Expected 45 but got 46
handCount was incorrect. Expected 29 but got 30
handCount was incorrect. Expected 249 but got 250
handCount was incorrect. Expected 235 but got 236
handCount was incorrect. Expected 348 but got 349
handCount was incorrect. Expected 487 but got 488
handCount was incorrect. Expected 427 but got 428
handCount was incorrect. Expected 247 but got 248
handCount was incorrect. Expected 189 but got 190
handCount was incorrect. Expected 48 but got 49
handCount was incorrect. Expected 196 but got 197
handCount was incorrect. Expected 62 but got 63
handCount was incorrect. Expected 120 but got 121
handCount was incorrect. Expected 402 but got 403
handCount was incorrect. Expected 35 but got 36
handCount was incorrect. Expected 469 but got 470
handCount was incorrect. Expected 349 but got 350
handCount was incorrect. Expected 90 but got 91
handCount was incorrect. Expected 28 but got 29
handCount was incorrect. Expected 340 but got 341
handCount was incorrect. Expected 201 but got 202
handCount was incorrect. Expected 247 but got 248
handCount was incorrect. Expected 437 but got 438
handCount was incorrect. Expected 196 but got 197
handCount was incorrect. Expected 272 but got 273
handCount was incorrect. Expected 298 but got 299
handCount was incorrect. Expected 424 but got 425
handCount was incorrect. Expected 34 but got 35
handCount was incorrect. Expected 376 but got 377
handCount was incorrect. Expected 225 but got 226
handCount was incorrect. Expected 11 but got 12
handCount was incorrect. Expected 372 but got 373
handCount was incorrect. Expected 299 but got 300
handCount was incorrect. Expected 433 but got 434
handCount was incorrect. Expected 155 but got 156
handCount was incorrect. Expected 250 but got 251
handCount was incorrect. Expected 453 but got 454
handCount was incorrect. Expected 249 but got 250
handCount was incorrect. Expected 490 but got 491
handCount was incorrect. Expected 20 but got 21
handCount was incorrect. Expected 298 but got 299
handCount was incorrect. Expected 114 but got 115
handCount was incorrect. Expected 168 but got 169
handCount was incorrect. Expected 77 but got 78
handCount was incorrect. Expected 431 but got 432
handCount was incorrect. Expected 42 but got 43
handCount was incorrect. Expected 243 but got 244
handCount was incorrect. Expected 84 but got 85
handCount was incorrect. Expected 233 but got 234
handCount was incorrect. Expected 424 but got 425
handCount was incorrect. Expected 309 but got 310
handCount was incorrect. Expected 428 but got 429
handCount was incorrect. Expected 11 but got 12
handCount was incorrect. Expected 80 but got 81
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 112 but got 113
handCount was incorrect. Expected 465 but got 466
handCount was incorrect. Expected 432 but got 433
handCount was incorrect. Expected 15 but got 16
handCount was incorrect. Expected 393 but got 394
handCount was incorrect. Expected 475 but got 476
handCount was incorrect. Expected 286 but got 287
handCount was incorrect. Expected 46 but got 47
handCount was incorrect. Expected 108 but got 109
handCount was incorrect. Expected 248 but got 249
handCount was incorrect. Expected 423 but got 424
handCount was incorrect. Expected 47 but got 48
handCount was incorrect. Expected 190 but got 191
handCount was incorrect. Expected 219 but got 220
handCount was incorrect. Expected 447 but got 448
handCount was incorrect. Expected 88 but got 89
handCount was incorrect. Expected 303 but got 304
handCount was incorrect. Expected 306 but got 307
handCount was incorrect. Expected 403 but got 404
handCount was incorrect. Expected 108 but got 109
handCount was incorrect. Expected 469 but got 470
handCount was incorrect. Expected 124 but got 125
handCount was incorrect. Expected 45 but got 46
handCount was incorrect. Expected 273 but got 274
handCount was incorrect. Expected 443 but got 444
handCount was incorrect. Expected 378 but got 379
handCount was incorrect. Expected 141 but got 142
handCount was incorrect. Expected 257 but got 258
handCount was incorrect. Expected 466 but got 467
handCount was incorrect. Expected 225 but got 226
handCount was incorrect. Expected 187 but got 188
handCount was incorrect. Expected 243 but got 244
handCount was incorrect. Expected 227 but got 228
handCount was incorrect. Expected 431 but got 432
handCount was incorrect. Expected 484 but got 485
handCount was incorrect. Expected 141 but got 142
handCount was incorrect. Expected 489 but got 490
handCount was incorrect. Expected 196 but got 197
handCount was incorrect. Expected 387 but got 388
handCount was incorrect. Expected 29 but got 30
handCount was incorrect. Expected 408 but got 409
handCount was incorrect. Expected 34 but got 35
handCount was incorrect. Expected 417 but got 418
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 404 but got 405
handCount was incorrect. Expected 183 but got 184
handCount was incorrect. Expected 147 but got 148
handCount was incorrect. Expected 279 but got 280
handCount was incorrect. Expected 163 but got 164
handCount was incorrect. Expected 245 but got 246
handCount was incorrect. Expected 246 but got 247
handCount was incorrect. Expected 462 but got 463
handCount was incorrect. Expected 436 but got 437
handCount was incorrect. Expected 479 but got 480
handCount was incorrect. Expected 244 but got 245
handCount was incorrect. Expected 225 but got 226
handCount was incorrect. Expected 224 but got 225
handCount was incorrect. Expected 459 but got 460
handCount was incorrect. Expected 49 but got 50
handCount was incorrect. Expected 484 but got 485
handCount was incorrect. Expected 293 but got 294
handCount was incorrect. Expected 291 but got 292
handCount was incorrect. Expected 351 but got 352
handCount was incorrect. Expected 156 but got 157
handCount was incorrect. Expected 199 but got 200
handCount was incorrect. Expected 76 but got 77
handCount was incorrect. Expected 26 but got 27
handCount was incorrect. Expected 451 but got 452
handCount was incorrect. Expected 215 but got 216
handCount was incorrect. Expected 50 but got 51
handCount was incorrect. Expected 449 but got 450
handCount was incorrect. Expected 138 but got 139
handCount was incorrect. Expected 9 but got 10
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 434 but got 435
handCount was incorrect. Expected 417 but got 418
handCount was incorrect. Expected 360 but got 361
handCount was incorrect. Expected 197 but got 198
handCount was incorrect. Expected 336 but got 337
handCount was incorrect. Expected 20 but got 21
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 226 but got 227
handCount was incorrect. Expected 156 but got 157
handCount was incorrect. Expected 43 but got 44
handCount was incorrect. Expected 310 but got 311
handCount was incorrect. Expected 477 but got 478
handCount was incorrect. Expected 498 but got 499
handCount was incorrect. Expected 80 but got 81
handCount was incorrect. Expected 40 but got 41
handCount was incorrect. Expected 251 but got 252
handCount was incorrect. Expected 78 but got 79
handCount was incorrect. Expected 290 but got 291
handCount was incorrect. Expected 461 but got 462
handCount was incorrect. Expected 285 but got 286
handCount was incorrect. Expected 131 but got 132
handCount was incorrect. Expected 26 but got 27
handCount was incorrect. Expected 238 but got 239
handCount was incorrect. Expected 340 but got 341
handCount was incorrect. Expected 339 but got 340
handCount was incorrect. Expected 340 but got 341
handCount was incorrect. Expected 71 but got 72
handCount was incorrect. Expected 159 but got 160
handCount was incorrect. Expected 308 but got 309
handCount was incorrect. Expected 348 but got 349
handCount was incorrect. Expected 90 but got 91
handCount was incorrect. Expected 348 but got 349
handCount was incorrect. Expected 276 but got 277
handCount was incorrect. Expected 59 but got 60
handCount was incorrect. Expected 123 but got 124
handCount was incorrect. Expected 44 but got 45
handCount was incorrect. Expected 12 but got 13
handCount was incorrect. Expected 323 but got 324
handCount was incorrect. Expected 139 but got 140
handCount was incorrect. Expected 189 but got 190
handCount was incorrect. Expected 217 but got 218
handCount was incorrect. Expected 312 but got 313
handCount was incorrect. Expected 179 but got 180
handCount was incorrect. Expected 181 but got 182
handCount was incorrect. Expected 366 but got 367
handCount was incorrect. Expected 194 but got 195
handCount was incorrect. Expected 433 but got 434
handCount was incorrect. Expected 64 but got 65
handCount was incorrect. Expected 111 but got 112
handCount was incorrect. Expected 428 but got 429
handCount was incorrect. Expected 233 but got 234
handCount was incorrect. Expected 495 but got 496
handCount was incorrect. Expected 306 but got 307
handCount was incorrect. Expected 297 but got 298
handCount was incorrect. Expected 104 but got 105
handCount was incorrect. Expected 359 but got 360
handCount was incorrect. Expected 252 but got 253
handCount was incorrect. Expected 134 but got 135
handCount was incorrect. Expected 133 but got 134
handCount was incorrect. Expected 133 but got 134
handCount was incorrect. Expected 370 but got 371
handCount was incorrect. Expected 104 but got 105
handCount was incorrect. Expected 28 but got 29
handCount was incorrect. Expected 58 but got 59
handCount was incorrect. Expected 394 but got 395
handCount was incorrect. Expected 137 but got 138
handCount was incorrect. Expected 478 but got 479
handCount was incorrect. Expected 142 but got 143
handCount was incorrect. Expected 498 but got 499
handCount was incorrect. Expected 112 but got 113
handCount was incorrect. Expected 427 but got 428
handCount was incorrect. Expected 122 but got 123
handCount was incorrect. Expected 493 but got 494
handCount was incorrect. Expected 483 but got 484
handCount was incorrect. Expected 97 but got 98
handCount was incorrect. Expected 104 but got 105
handCount was incorrect. Expected 274 but got 275
handCount was incorrect. Expected 396 but got 397
handCount was incorrect. Expected 361 but got 362
handCount was incorrect. Expected 270 but got 271
handCount was incorrect. Expected 12 but got 13
handCount was incorrect. Expected 248 but got 249
handCount was incorrect. Expected 383 but got 384
handCount was incorrect. Expected 236 but got 237
handCount was incorrect. Expected 125 but got 126
handCount was incorrect. Expected 314 but got 315
handCount was incorrect. Expected 106 but got 107
handCount was incorrect. Expected 200 but got 201
handCount was incorrect. Expected 309 but got 310
handCount was incorrect. Expected 74 but got 75
handCount was incorrect. Expected 328 but got 329
handCount was incorrect. Expected 361 but got 362
handCount was incorrect. Expected 486 but got 487
handCount was incorrect. Expected 340 but got 341
handCount was incorrect. Expected 163 but got 164
handCount was incorrect. Expected 121 but got 122
handCount was incorrect. Expected 100 but got 101
handCount was incorrect. Expected 139 but got 140
handCount was incorrect. Expected 174 but got 175
handCount was incorrect. Expected 75 but got 76
handCount was incorrect. Expected 401 but got 402
handCount was incorrect. Expected 459 but got 460
handCount was incorrect. Expected 174 but got 175
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 35 but got 36
handCount was incorrect. Expected 483 but got 484
handCount was incorrect. Expected 110 but got 111
handCount was incorrect. Expected 274 but got 275
handCount was incorrect. Expected 89 but got 90
handCount was incorrect. Expected 116 but got 117
handCount was incorrect. Expected 5 but got 6
handCount was incorrect. Expected 302 but got 303
handCount was incorrect. Expected 303 but got 304
handCount was incorrect. Expected 448 but got 449
handCount was incorrect. Expected 55 but got 56
handCount was incorrect. Expected 401 but got 402
handCount was incorrect. Expected 498 but got 499
handCount was incorrect. Expected 348 but got 349
handCount was incorrect. Expected 288 but got 289
handCount was incorrect. Expected 420 but got 421
handCount was incorrect. Expected 14 but got 15
handCount was incorrect. Expected 299 but got 300
handCount was incorrect. Expected 71 but got 72
handCount was incorrect. Expected 408 but got 409
handCount was incorrect. Expected 69 but got 70
handCount was incorrect. Expected 481 but got 482
handCount was incorrect. Expected 465 but got 466
handCount was incorrect. Expected 256 but got 257
handCount was incorrect. Expected 237 but got 238
handCount was incorrect. Expected 65 but got 66
handCount was incorrect. Expected 9 but got 10
handCount was incorrect. Expected 237 but got 238
handCount was incorrect. Expected 90 but got 91
handCount was incorrect. Expected 67 but got 68
handCount was incorrect. Expected 470 but got 471
handCount was incorrect. Expected 115 but got 116
handCount was incorrect. Expected 67 but got 68
handCount was incorrect. Expected 57 but got 58
handCount was incorrect. Expected 350 but got 351
handCount was incorrect. Expected 219 but got 220
handCount was incorrect. Expected 25 but got 26
handCount was incorrect. Expected 279 but got 280
handCount was incorrect. Expected 232 but got 233
handCount was incorrect. Expected 81 but got 82
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 155 but got 156
handCount was incorrect. Expected 253 but got 254
handCount was incorrect. Expected 27 but got 28
handCount was incorrect. Expected 63 but got 64
handCount was incorrect. Expected 329 but got 330
handCount was incorrect. Expected 100 but got 101
handCount was incorrect. Expected 301 but got 302
handCount was incorrect. Expected 176 but got 177
handCount was incorrect. Expected 178 but got 179
handCount was incorrect. Expected 394 but got 395
handCount was incorrect. Expected 366 but got 367
handCount was incorrect. Expected 309 but got 310
handCount was incorrect. Expected 420 but got 421
handCount was incorrect. Expected 118 but got 119
handCount was incorrect. Expected 82 but got 83
handCount was incorrect. Expected 119 but got 120
handCount was incorrect. Expected 389 but got 390
handCount was incorrect. Expected 407 but got 408
handCount was incorrect. Expected 245 but got 246
handCount was incorrect. Expected 491 but got 492
handCount was incorrect. Expected 375 but got 376
handCount was incorrect. Expected 103 but got 104
handCount was incorrect. Expected 63 but got 64
handCount was incorrect. Expected 61 but got 62
handCount was incorrect. Expected 125 but got 126
handCount was incorrect. Expected 323 but got 324
handCount was incorrect. Expected 32 but got 33
handCount was incorrect. Expected 29 but got 30
handCount was incorrect. Expected 194 but got 195
handCount was incorrect. Expected 453 but got 454
handCount was incorrect. Expected 44 but got 45
handCount was incorrect. Expected 77 but got 78
handCount was incorrect. Expected 279 but got 280
handCount was incorrect. Expected 31 but got 32
handCount was incorrect. Expected 377 but got 378
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 338 but got 339
handCount was incorrect. Expected 148 but got 149
handCount was incorrect. Expected 438 but got 439
handCount was incorrect. Expected 420 but got 421
handCount was incorrect. Expected 93 but got 94
handCount was incorrect. Expected 491 but got 492
handCount was incorrect. Expected 293 but got 294
handCount was incorrect. Expected 291 but got 292
handCount was incorrect. Expected 167 but got 168
handCount was incorrect. Expected 255 but got 256
handCount was incorrect. Expected 27 but got 28
handCount was incorrect. Expected 260 but got 261
handCount was incorrect. Expected 498 but got 499
handCount was incorrect. Expected 371 but got 372
handCount was incorrect. Expected 344 but got 345
handCount was incorrect. Expected 202 but got 203
handCount was incorrect. Expected 488 but got 489
handCount was incorrect. Expected 240 but got 241
handCount was incorrect. Expected 316 but got 317
handCount was incorrect. Expected 188 but got 189
handCount was incorrect. Expected 200 but got 201
handCount was incorrect. Expected 90 but got 91
handCount was incorrect. Expected 24 but got 25
handCount was incorrect. Expected 428 but got 429
handCount was incorrect. Expected 422 but got 423
handCount was incorrect. Expected 468 but got 469
handCount was incorrect. Expected 258 but got 259
handCount was incorrect. Expected 302 but got 303
handCount was incorrect. Expected 92 but got 93
handCount was incorrect. Expected 490 but got 491
handCount was incorrect. Expected 491 but got 492
handCount was incorrect. Expected 490 but got 491
handCount was incorrect. Expected 221 but got 222
handCount was incorrect. Expected 260 but got 261
handCount was incorrect. Expected 7 but got 8
handCount was incorrect. Expected 374 but got 375
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 253 but got 254
handCount was incorrect. Expected 357 but got 358
handCount was incorrect. Expected 350 but got 351
handCount was incorrect. Expected 465 but got 466
handCount was incorrect. Expected 343 but got 344
handCount was incorrect. Expected 196 but got 197
handCount was incorrect. Expected 46 but got 47
handCount was incorrect. Expected 250 but got 251
handCount was incorrect. Expected 269 but got 270
handCount was incorrect. Expected 103 but got 104
handCount was incorrect. Expected 27 but got 28
handCount was incorrect. Expected 465 but got 466
handCount was incorrect. Expected 363 but got 364
handCount was incorrect. Expected 118 but got 119
handCount was incorrect. Expected 155 but got 156
handCount was incorrect. Expected 89 but got 90
handCount was incorrect. Expected 137 but got 138
handCount was incorrect. Expected 97 but got 98
handCount was incorrect. Expected 42 but got 43
handCount was incorrect. Expected 332 but got 333
handCount was incorrect. Expected 462 but got 463
handCount was incorrect. Expected 354 but got 355
handCount was incorrect. Expected 446 but got 447
handCount was incorrect. Expected 89 but got 90
handCount was incorrect. Expected 133 but got 134
handCount was incorrect. Expected 420 but got 421
handCount was incorrect. Expected 462 but got 463
handCount was incorrect. Expected 495 but got 496
handCount was incorrect. Expected 121 but got 122
handCount was incorrect. Expected 334 but got 335
handCount was incorrect. Expected 486 but got 487
handCount was incorrect. Expected 159 but got 160
handCount was incorrect. Expected 354 but got 355
handCount was incorrect. Expected 117 but got 118
handCount was incorrect. Expected 47 but got 48
handCount was incorrect. Expected 55 but got 56
handCount was incorrect. Expected 193 but got 194
handCount was incorrect. Expected 321 but got 322
handCount was incorrect. Expected 226 but got 227
handCount was incorrect. Expected 276 but got 277
handCount was incorrect. Expected 79 but got 80
handCount was incorrect. Expected 63 but got 64
handCount was incorrect. Expected 196 but got 197
handCount was incorrect. Expected 299 but got 300
handCount was incorrect. Expected 304 but got 305
handCount was incorrect. Expected 499 but got 500
handCount was incorrect. Expected 465 but got 466
handCount was incorrect. Expected 455 but got 456
handCount was incorrect. Expected 489 but got 490
handCount was incorrect. Expected 174 but got 175
handCount was incorrect. Expected 382 but got 383
handCount was incorrect. Expected 427 but got 428
handCount was incorrect. Expected 268 but got 269
handCount was incorrect. Expected 408 but got 409
handCount was incorrect. Expected 335 but got 336
handCount was incorrect. Expected 220 but got 221
handCount was incorrect. Expected 407 but got 408
handCount was incorrect. Expected 348 but got 349
handCount was incorrect. Expected 174 but got 175
handCount was incorrect. Expected 487 but got 488
handCount was incorrect. Expected 320 but got 321
handCount was incorrect. Expected 269 but got 270
handCount was incorrect. Expected 419 but got 420
handCount was incorrect. Expected 267 but got 268
handCount was incorrect. Expected 338 but got 339
handCount was incorrect. Expected 435 but got 436
handCount was incorrect. Expected 229 but got 230
handCount was incorrect. Expected 150 but got 151
handCount was incorrect. Expected 302 but got 303
handCount was incorrect. Expected 80 but got 81
handCount was incorrect. Expected 112 but got 113
handCount was incorrect. Expected 422 but got 423
handCount was incorrect. Expected 131 but got 132
handCount was incorrect. Expected 214 but got 215
handCount was incorrect. Expected 21 but got 22
handCount was incorrect. Expected 277 but got 278
handCount was incorrect. Expected 479 but got 480
handCount was incorrect. Expected 488 but got 489
handCount was incorrect. Expected 124 but got 125
handCount was incorrect. Expected 7 but got 8
handCount was incorrect. Expected 5 but got 6
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 210 but got 211
handCount was incorrect. Expected 252 but got 253
handCount was incorrect. Expected 339 but got 340
handCount was incorrect. Expected 137 but got 138
handCount was incorrect. Expected 268 but got 269
handCount was incorrect. Expected 48 but got 49
handCount was incorrect. Expected 371 but got 372
handCount was incorrect. Expected 394 but got 395
handCount was incorrect. Expected 283 but got 284
handCount was incorrect. Expected 163 but got 164
handCount was incorrect. Expected 291 but got 292
handCount was incorrect. Expected 315 but got 316
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 154 but got 155
handCount was incorrect. Expected 351 but got 352
handCount was incorrect. Expected 12 but got 13
handCount was incorrect. Expected 90 but got 91
handCount was incorrect. Expected 84 but got 85
handCount was incorrect. Expected 172 but got 173
handCount was incorrect. Expected 475 but got 476
handCount was incorrect. Expected 231 but got 232
handCount was incorrect. Expected 347 but got 348
handCount was incorrect. Expected 367 but got 368
handCount was incorrect. Expected 274 but got 275
handCount was incorrect. Expected 271 but got 272
handCount was incorrect. Expected 444 but got 445
handCount was incorrect. Expected 158 but got 159
handCount was incorrect. Expected 323 but got 324
handCount was incorrect. Expected 440 but got 441
handCount was incorrect. Expected 145 but got 146
handCount was incorrect. Expected 212 but got 213
handCount was incorrect. Expected 372 but got 373
handCount was incorrect. Expected 80 but got 81
handCount was incorrect. Expected 426 but got 427
handCount was incorrect. Expected 74 but got 75
handCount was incorrect. Expected 210 but got 211
handCount was incorrect. Expected 485 but got 486
handCount was incorrect. Expected 190 but got 191
handCount was incorrect. Expected 460 but got 461
handCount was incorrect. Expected 282 but got 283
handCount was incorrect. Expected 365 but got 366
handCount was incorrect. Expected 406 but got 407
handCount was incorrect. Expected 473 but got 474
handCount was incorrect. Expected 388 but got 389
handCount was incorrect. Expected 363 but got 364
handCount was incorrect. Expected 56 but got 57
handCount was incorrect. Expected 80 but got 81
handCount was incorrect. Expected 171 but got 172
handCount was incorrect. Expected 363 but got 364
handCount was incorrect. Expected 143 but got 144
handCount was incorrect. Expected 376 but got 377
handCount was incorrect. Expected 322 but got 323
handCount was incorrect. Expected 246 but got 247
handCount was incorrect. Expected 377 but got 378
handCount was incorrect. Expected 281 but got 282
handCount was incorrect. Expected 489 but got 490
handCount was incorrect. Expected 132 but got 133
handCount was incorrect. Expected 332 but got 333
handCount was incorrect. Expected 67 but got 68
handCount was incorrect. Expected 427 but got 428
handCount was incorrect. Expected 451 but got 452
handCount was incorrect. Expected 413 but got 414
handCount was incorrect. Expected 445 but got 446
handCount was incorrect. Expected 80 but got 81
handCount was incorrect. Expected 430 but got 431
handCount was incorrect. Expected 350 but got 351
handCount was incorrect. Expected 417 but got 418
handCount was incorrect. Expected 128 but got 129
handCount was incorrect. Expected 437 but got 438
handCount was incorrect. Expected 37 but got 38
handCount was incorrect. Expected 148 but got 149
handCount was incorrect. Expected 197 but got 198
handCount was incorrect. Expected 88 but got 89
handCount was incorrect. Expected 381 but got 382
handCount was incorrect. Expected 446 but got 447
handCount was incorrect. Expected 144 but got 145
handCount was incorrect. Expected 214 but got 215
handCount was incorrect. Expected 471 but got 472
handCount was incorrect. Expected 455 but got 456
handCount was incorrect. Expected 78 but got 79
handCount was incorrect. Expected 121 but got 122
handCount was incorrect. Expected 424 but got 425
handCount was incorrect. Expected 409 but got 410
handCount was incorrect. Expected 129 but got 130
handCount was incorrect. Expected 192 but got 193
handCount was incorrect. Expected 280 but got 281
handCount was incorrect. Expected 15 but got 16
handCount was incorrect. Expected 54 but got 55
handCount was incorrect. Expected 185 but got 186
handCount was incorrect. Expected 312 but got 313
handCount was incorrect. Expected 398 but got 399
handCount was incorrect. Expected 336 but got 337
handCount was incorrect. Expected 269 but got 270
handCount was incorrect. Expected 458 but got 459
handCount was incorrect. Expected 340 but got 341
handCount was incorrect. Expected 181 but got 182
handCount was incorrect. Expected 125 but got 126
handCount was incorrect. Expected 450 but got 451
handCount was incorrect. Expected 99 but got 100
handCount was incorrect. Expected 486 but got 487
handCount was incorrect. Expected 325 but got 326
handCount was incorrect. Expected 247 but got 248
handCount was incorrect. Expected 194 but got 195
handCount was incorrect. Expected 134 but got 135
handCount was incorrect. Expected 157 but got 158
handCount was incorrect. Expected 249 but got 250
handCount was incorrect. Expected 157 but got 158
handCount was incorrect. Expected 208 but got 209
handCount was incorrect. Expected 241 but got 242
handCount was incorrect. Expected 489 but got 490
handCount was incorrect. Expected 440 but got 441
handCount was incorrect. Expected 99 but got 100
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 6 but got 7
handCount was incorrect. Expected 126 but got 127
handCount was incorrect. Expected 181 but got 182
handCount was incorrect. Expected 279 but got 280
handCount was incorrect. Expected 200 but got 201
handCount was incorrect. Expected 307 but got 308
handCount was incorrect. Expected 246 but got 247
handCount was incorrect. Expected 311 but got 312
handCount was incorrect. Expected 71 but got 72
handCount was incorrect. Expected 63 but got 64
handCount was incorrect. Expected 306 but got 307
handCount was incorrect. Expected 164 but got 165
handCount was incorrect. Expected 433 but got 434
handCount was incorrect. Expected 464 but got 465
handCount was incorrect. Expected 386 but got 387
handCount was incorrect. Expected 11 but got 12
handCount was incorrect. Expected 86 but got 87
handCount was incorrect. Expected 181 but got 182
handCount was incorrect. Expected 282 but got 283
handCount was incorrect. Expected 264 but got 265
handCount was incorrect. Expected 85 but got 86
handCount was incorrect. Expected 153 but got 154
handCount was incorrect. Expected 134 but got 135
handCount was incorrect. Expected 329 but got 330
handCount was incorrect. Expected 185 but got 186
handCount was incorrect. Expected 476 but got 477
handCount was incorrect. Expected 97 but got 98
handCount was incorrect. Expected 68 but got 69
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 224 but got 225
handCount was incorrect. Expected 273 but got 274
handCount was incorrect. Expected 440 but got 441
handCount was incorrect. Expected 271 but got 272
handCount was incorrect. Expected 241 but got 242
handCount was incorrect. Expected 118 but got 119
handCount was incorrect. Expected 473 but got 474
handCount was incorrect. Expected 197 but got 198
handCount was incorrect. Expected 359 but got 360
handCount was incorrect. Expected 110 but got 111
handCount was incorrect. Expected 427 but got 428
handCount was incorrect. Expected 305 but got 306
handCount was incorrect. Expected 403 but got 404
handCount was incorrect. Expected 312 but got 313
handCount was incorrect. Expected 135 but got 136
handCount was incorrect. Expected 141 but got 142
handCount was incorrect. Expected 202 but got 203
handCount was incorrect. Expected 37 but got 38
handCount was incorrect. Expected 439 but got 440
handCount was incorrect. Expected 331 but got 332
handCount was incorrect. Expected 296 but got 297
handCount was incorrect. Expected 134 but got 135
handCount was incorrect. Expected 307 but got 308
handCount was incorrect. Expected 427 but got 428
handCount was incorrect. Expected 473 but got 474
handCount was incorrect. Expected 438 but got 439
handCount was incorrect. Expected 35 but got 36
handCount was incorrect. Expected 381 but got 382
handCount was incorrect. Expected 252 but got 253
handCount was incorrect. Expected 51 but got 52
handCount was incorrect. Expected 238 but got 239
handCount was incorrect. Expected 344 but got 345
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 6 but got 7
handCount was incorrect. Expected 378 but got 379
handCount was incorrect. Expected 291 but got 292
handCount was incorrect. Expected 310 but got 311
handCount was incorrect. Expected 437 but got 438
handCount was incorrect. Expected 489 but got 490
handCount was incorrect. Expected 261 but got 262
handCount was incorrect. Expected 380 but got 381
handCount was incorrect. Expected 226 but got 227
handCount was incorrect. Expected 439 but got 440
handCount was incorrect. Expected 395 but got 396
handCount was incorrect. Expected 362 but got 363
handCount was incorrect. Expected 476 but got 477
handCount was incorrect. Expected 15 but got 16
handCount was incorrect. Expected 487 but got 488
handCount was incorrect. Expected 391 but got 392
handCount was incorrect. Expected 391 but got 392
handCount was incorrect. Expected 5 but got 6
handCount was incorrect. Expected 301 but got 302
handCount was incorrect. Expected 387 but got 388
handCount was incorrect. Expected 356 but got 357
handCount was incorrect. Expected 142 but got 143
handCount was incorrect. Expected 433 but got 434
handCount was incorrect. Expected 117 but got 118
handCount was incorrect. Expected 89 but got 90
handCount was incorrect. Expected 138 but got 139
handCount was incorrect. Expected 444 but got 445
handCount was incorrect. Expected 32 but got 33
handCount was incorrect. Expected 168 but got 169
handCount was incorrect. Expected 315 but got 316
handCount was incorrect. Expected 265 but got 266
handCount was incorrect. Expected 77 but got 78
handCount was incorrect. Expected 160 but got 161
handCount was incorrect. Expected 83 but got 84
handCount was incorrect. Expected 175 but got 176
handCount was incorrect. Expected 294 but got 295
handCount was incorrect. Expected 170 but got 171
handCount was incorrect. Expected 469 but got 470
handCount was incorrect. Expected 313 but got 314
handCount was incorrect. Expected 115 but got 116
handCount was incorrect. Expected 76 but got 77
handCount was incorrect. Expected 68 but got 69
handCount was incorrect. Expected 69 but got 70
handCount was incorrect. Expected 299 but got 300
handCount was incorrect. Expected 235 but got 236
handCount was incorrect. Expected 161 but got 162
handCount was incorrect. Expected 126 but got 127
handCount was incorrect. Expected 179 but got 180
handCount was incorrect. Expected 139 but got 140
handCount was incorrect. Expected 400 but got 401
handCount was incorrect. Expected 25 but got 26
handCount was incorrect. Expected 345 but got 346
handCount was incorrect. Expected 26 but got 27
handCount was incorrect. Expected 329 but got 330
handCount was incorrect. Expected 182 but got 183
handCount was incorrect. Expected 268 but got 269
handCount was incorrect. Expected 408 but got 409
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 372 but got 373
handCount was incorrect. Expected 493 but got 494
handCount was incorrect. Expected 163 but got 164
handCount was incorrect. Expected 394 but got 395
handCount was incorrect. Expected 290 but got 291
handCount was incorrect. Expected 431 but got 432
handCount was incorrect. Expected 280 but got 281
handCount was incorrect. Expected 403 but got 404
handCount was incorrect. Expected 377 but got 378
handCount was incorrect. Expected 271 but got 272
handCount was incorrect. Expected 45 but got 46
handCount was incorrect. Expected 449 but got 450
handCount was incorrect. Expected 405 but got 406
handCount was incorrect. Expected 94 but got 95
handCount was incorrect. Expected 239 but got 240
handCount was incorrect. Expected 147 but got 148
handCount was incorrect. Expected 237 but got 238
handCount was incorrect. Expected 134 but got 135
handCount was incorrect. Expected 365 but got 366
handCount was incorrect. Expected 175 but got 176
handCount was incorrect. Expected 227 but got 228
handCount was incorrect. Expected 392 but got 393
handCount was incorrect. Expected 164 but got 165
handCount was incorrect. Expected 411 but got 412
handCount was incorrect. Expected 15 but got 16
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 44 but got 45
handCount was incorrect. Expected 476 but got 477
handCount was incorrect. Expected 93 but got 94
handCount was incorrect. Expected 248 but got 249
handCount was incorrect. Expected 248 but got 249
handCount was incorrect. Expected 384 but got 385
handCount was incorrect. Expected 285 but got 286
handCount was incorrect. Expected 107 but got 108
handCount was incorrect. Expected 183 but got 184
handCount was incorrect. Expected 380 but got 381
handCount was incorrect. Expected 480 but got 481
handCount was incorrect. Expected 248 but got 249
handCount was incorrect. Expected 415 but got 416
handCount was incorrect. Expected 53 but got 54
handCount was incorrect. Expected 54 but got 55
handCount was incorrect. Expected 220 but got 221
handCount was incorrect. Expected 288 but got 289
handCount was incorrect. Expected 89 but got 90
handCount was incorrect. Expected 186 but got 187
handCount was incorrect. Expected 313 but got 314
handCount was incorrect. Expected 51 but got 52
handCount was incorrect. Expected 244 but got 245
handCount was incorrect. Expected 352 but got 353
handCount was incorrect. Expected 162 but got 163
handCount was incorrect. Expected 90 but got 91
handCount was incorrect. Expected 374 but got 375
handCount was incorrect. Expected 4 but got 5
handCount was incorrect. Expected 16 but got 17
handCount was incorrect. Expected 397 but got 398
handCount was incorrect. Expected 494 but got 495
handCount was incorrect. Expected 413 but got 414
handCount was incorrect. Expected 79 but got 80
handCount was incorrect. Expected 437 but got 438
handCount was incorrect. Expected 206 but got 207
handCount was incorrect. Expected 347 but got 348
handCount was incorrect. Expected 374 but got 375
handCount was incorrect. Expected 182 but got 183
handCount was incorrect. Expected 447 but got 448
handCount was incorrect. Expected 246 but got 247
handCount was incorrect. Expected 240 but got 241
handCount was incorrect. Expected 490 but got 491
handCount was incorrect. Expected 65 but got 66
handCount was incorrect. Expected 160 but got 161
handCount was incorrect. Expected 296 but got 297
handCount was incorrect. Expected 399 but got 400
handCount was incorrect. Expected 135 but got 136
handCount was incorrect. Expected 76 but got 77
handCount was incorrect. Expected 185 but got 186
handCount was incorrect. Expected 380 but got 381
handCount was incorrect. Expected 112 but got 113
handCount was incorrect. Expected 46 but got 47
handCount was incorrect. Expected 455 but got 456
handCount was incorrect. Expected 211 but got 212
handCount was incorrect. Expected 69 but got 70
handCount was incorrect. Expected 364 but got 365
handCount was incorrect. Expected 217 but got 218
handCount was incorrect. Expected 414 but got 415
handCount was incorrect. Expected 34 but got 35
handCount was incorrect. Expected 136 but got 137
handCount was incorrect. Expected 240 but got 241
handCount was incorrect. Expected 49 but got 50
handCount was incorrect. Expected 196 but got 197
handCount was incorrect. Expected 100 but got 101
handCount was incorrect. Expected 159 but got 160
handCount was incorrect. Expected 332 but got 333
handCount was incorrect. Expected 215 but got 216
handCount was incorrect. Expected 213 but got 214
handCount was incorrect. Expected 99 but got 100
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 134 but got 135
handCount was incorrect. Expected 205 but got 206
handCount was incorrect. Expected 317 but got 318
handCount was incorrect. Expected 196 but got 197
handCount was incorrect. Expected 44 but got 45
handCount was incorrect. Expected 12 but got 13
handCount was incorrect. Expected 259 but got 260
handCount was incorrect. Expected 251 but got 252
handCount was incorrect. Expected 405 but got 406
handCount was incorrect. Expected 248 but got 249
handCount was incorrect. Expected 88 but got 89
handCount was incorrect. Expected 255 but got 256
handCount was incorrect. Expected 359 but got 360
handCount was incorrect. Expected 472 but got 473
handCount was incorrect. Expected 227 but got 228
handCount was incorrect. Expected 136 but got 137
handCount was incorrect. Expected 174 but got 175
handCount was incorrect. Expected 31 but got 32
handCount was incorrect. Expected 80 but got 81
handCount was incorrect. Expected 479 but got 480
handCount was incorrect. Expected 73 but got 74
handCount was incorrect. Expected 296 but got 297
handCount was incorrect. Expected 98 but got 99
handCount was incorrect. Expected 472 but got 473
handCount was incorrect. Expected 465 but got 466
handCount was incorrect. Expected 208 but got 209
handCount was incorrect. Expected 150 but got 151
handCount was incorrect. Expected 426 but got 427
handCount was incorrect. Expected 363 but got 364
handCount was incorrect. Expected 261 but got 262
handCount was incorrect. Expected 36 but got 37
handCount was incorrect. Expected 142 but got 143
handCount was incorrect. Expected 56 but got 57
handCount was incorrect. Expected 483 but got 484
handCount was incorrect. Expected 51 but got 52
handCount was incorrect. Expected 277 but got 278
handCount was incorrect. Expected 319 but got 320
handCount was incorrect. Expected 484 but got 485
handCount was incorrect. Expected 429 but got 430
handCount was incorrect. Expected 374 but got 375
handCount was incorrect. Expected 145 but got 146
handCount was incorrect. Expected 444 but got 445
handCount was incorrect. Expected 280 but got 281
handCount was incorrect. Expected 392 but got 393
handCount was incorrect. Expected 359 but got 360
handCount was incorrect. Expected 218 but got 219
handCount was incorrect. Expected 90 but got 91
handCount was incorrect. Expected 450 but got 451
handCount was incorrect. Expected 76 but got 77
handCount was incorrect. Expected 114 but got 115
handCount was incorrect. Expected 10 but got 11
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 391 but got 392
handCount was incorrect. Expected 142 but got 143
handCount was incorrect. Expected 3 but got 4
handCount was incorrect. Expected 471 but got 472
handCount was incorrect. Expected 210 but got 211
handCount was incorrect. Expected 164 but got 165
handCount was incorrect. Expected 416 but got 417
handCount was incorrect. Expected 175 but got 176
handCount was incorrect. Expected 59 but got 60
handCount was incorrect. Expected 431 but got 432
handCount was incorrect. Expected 414 but got 415
handCount was incorrect. Expected 423 but got 424
handCount was incorrect. Expected 182 but got 183
handCount was incorrect. Expected 174 but got 175
handCount was incorrect. Expected 47 but got 48
handCount was incorrect. Expected 226 but got 227
handCount was incorrect. Expected 206 but got 207
handCount was incorrect. Expected 417 but got 418
handCount was incorrect. Expected 170 but got 171
handCount was incorrect. Expected 479 but got 480
handCount was incorrect. Expected 337 but got 338
handCount was incorrect. Expected 254 but got 255
handCount was incorrect. Expected 50 but got 51
handCount was incorrect. Expected 6 but got 7
handCount was incorrect. Expected 131 but got 132
handCount was incorrect. Expected 449 but got 450
handCount was incorrect. Expected 174 but got 175
handCount was incorrect. Expected 254 but got 255
handCount was incorrect. Expected 207 but got 208
handCount was incorrect. Expected 452 but got 453
handCount was incorrect. Expected 473 but got 474
handCount was incorrect. Expected 277 but got 278
handCount was incorrect. Expected 475 but got 476
handCount was incorrect. Expected 31 but got 32
handCount was incorrect. Expected 487 but got 488
handCount was incorrect. Expected 464 but got 465
handCount was incorrect. Expected 280 but got 281
handCount was incorrect. Expected 373 but got 374
handCount was incorrect. Expected 455 but got 456
handCount was incorrect. Expected 489 but got 490
handCount was incorrect. Expected 468 but got 469
handCount was incorrect. Expected 220 but got 221
handCount was incorrect. Expected 411 but got 412
handCount was incorrect. Expected 428 but got 429
handCount was incorrect. Expected 166 but got 167
handCount was incorrect. Expected 389 but got 390
handCount was incorrect. Expected 84 but got 85
handCount was incorrect. Expected 168 but got 169
handCount was incorrect. Expected 147 but got 148
handCount was incorrect. Expected 64 but got 65
handCount was incorrect. Expected 4 but got 5
handCount was incorrect. Expected 220 but got 221
handCount was incorrect. Expected 459 but got 460
handCount was incorrect. Expected 20 but got 21
handCount was incorrect. Expected 450 but got 451
handCount was incorrect. Expected 164 but got 165
handCount was incorrect. Expected 62 but got 63
handCount was incorrect. Expected 20 but got 21
handCount was incorrect. Expected 277 but got 278
handCount was incorrect. Expected 339 but got 340
handCount was incorrect. Expected 320 but got 321
handCount was incorrect. Expected 268 but got 269
handCount was incorrect. Expected 34 but got 35
handCount was incorrect. Expected 86 but got 87
handCount was incorrect. Expected 174 but got 175
handCount was incorrect. Expected 338 but got 339
handCount was incorrect. Expected 161 but got 162
handCount was incorrect. Expected 294 but got 295
handCount was incorrect. Expected 408 but got 409
handCount was incorrect. Expected 329 but got 330
handCount was incorrect. Expected 148 but got 149
handCount was incorrect. Expected 223 but got 224
handCount was incorrect. Expected 465 but got 466
handCount was incorrect. Expected 193 but got 194
handCount was incorrect. Expected 477 but got 478
handCount was incorrect. Expected 459 but got 460
handCount was incorrect. Expected 159 but got 160
handCount was incorrect. Expected 44 but got 45
handCount was incorrect. Expected 148 but got 149
handCount was incorrect. Expected 267 but got 268
handCount was incorrect. Expected 166 but got 167
handCount was incorrect. Expected 312 but got 313
handCount was incorrect. Expected 435 but got 436
handCount was incorrect. Expected 348 but got 349
handCount was incorrect. Expected 332 but got 333
handCount was incorrect. Expected 102 but got 103
handCount was incorrect. Expected 472 but got 473
handCount was incorrect. Expected 45 but got 46
handCount was incorrect. Expected 396 but got 397
handCount was incorrect. Expected 371 but got 372
handCount was incorrect. Expected 213 but got 214
handCount was incorrect. Expected 267 but got 268
handCount was incorrect. Expected 198 but got 199
handCount was incorrect. Expected 126 but got 127
handCount was incorrect. Expected 167 but got 168
handCount was incorrect. Expected 37 but got 38
handCount was incorrect. Expected 119 but got 120
handCount was incorrect. Expected 443 but got 444
handCount was incorrect. Expected 411 but got 412
handCount was incorrect. Expected 309 but got 310
handCount was incorrect. Expected 167 but got 168
handCount was incorrect. Expected 28 but got 29
handCount was incorrect. Expected 466 but got 467
handCount was incorrect. Expected 142 but got 143
handCount was incorrect. Expected 176 but got 177
handCount was incorrect. Expected 116 but got 117
handCount was incorrect. Expected 356 but got 357
handCount was incorrect. Expected 99 but got 100
handCount was incorrect. Expected 41 but got 42
handCount was incorrect. Expected 250 but got 251
handCount was incorrect. Expected 293 but got 294
handCount was incorrect. Expected 251 but got 252
handCount was incorrect. Expected 241 but got 242
handCount was incorrect. Expected 93 but got 94
handCount was incorrect. Expected 465 but got 466
handCount was incorrect. Expected 101 but got 102
handCount was incorrect. Expected 319 but got 320
handCount was incorrect. Expected 410 but got 411
handCount was incorrect. Expected 491 but got 492
handCount was incorrect. Expected 351 but got 352
handCount was incorrect. Expected 238 but got 239
handCount was incorrect. Expected 369 but got 370
handCount was incorrect. Expected 195 but got 196
handCount was incorrect. Expected 48 but got 49
handCount was incorrect. Expected 497 but got 498
handCount was incorrect. Expected 363 but got 364
handCount was incorrect. Expected 259 but got 260
handCount was incorrect. Expected 238 but got 239
handCount was incorrect. Expected 229 but got 230
handCount was incorrect. Expected 260 but got 261
handCount was incorrect. Expected 427 but got 428
handCount was incorrect. Expected 324 but got 325
handCount was incorrect. Expected 115 but got 116
handCount was incorrect. Expected 155 but got 156
handCount was incorrect. Expected 243 but got 244
handCount was incorrect. Expected 56 but got 57
handCount was incorrect. Expected 320 but got 321
handCount was incorrect. Expected 159 but got 160
handCount was incorrect. Expected 359 but got 360
handCount was incorrect. Expected 56 but got 57
handCount was incorrect. Expected 494 but got 495
handCount was incorrect. Expected 376 but got 377
handCount was incorrect. Expected 356 but got 357
handCount was incorrect. Expected 436 but got 437
handCount was incorrect. Expected 290 but got 291
handCount was incorrect. Expected 371 but got 372
handCount was incorrect. Expected 398 but got 399
handCount was incorrect. Expected 305 but got 306
handCount was incorrect. Expected 182 but got 183
handCount was incorrect. Expected 189 but got 190
handCount was incorrect. Expected 474 but got 475
handCount was incorrect. Expected 211 but got 212
handCount was incorrect. Expected 482 but got 483
handCount was incorrect. Expected 231 but got 232
handCount was incorrect. Expected 136 but got 137
handCount was incorrect. Expected 111 but got 112
handCount was incorrect. Expected 297 but got 298
handCount was incorrect. Expected 338 but got 339
handCount was incorrect. Expected 77 but got 78
handCount was incorrect. Expected 398 but got 399
handCount was incorrect. Expected 348 but got 349
handCount was incorrect. Expected 165 but got 166
handCount was incorrect. Expected 98 but got 99
handCount was incorrect. Expected 280 but got 281
handCount was incorrect. Expected 429 but got 430
handCount was incorrect. Expected 247 but got 248
handCount was incorrect. Expected 307 but got 308
handCount was incorrect. Expected 101 but got 102
handCount was incorrect. Expected 461 but got 462
handCount was incorrect. Expected 249 but got 250
handCount was incorrect. Expected 256 but got 257
handCount was incorrect. Expected 26 but got 27
handCount was incorrect. Expected 15 but got 16
handCount was incorrect. Expected 409 but got 410
handCount was incorrect. Expected 145 but got 146
handCount was incorrect. Expected 348 but got 349
handCount was incorrect. Expected 192 but got 193
handCount was incorrect. Expected 81 but got 82
handCount was incorrect. Expected 277 but got 278
handCount was incorrect. Expected 317 but got 318
handCount was incorrect. Expected 70 but got 71
handCount was incorrect. Expected 406 but got 407
handCount was incorrect. Expected 383 but got 384
handCount was incorrect. Expected 267 but got 268
handCount was incorrect. Expected 290 but got 291
handCount was incorrect. Expected 39 but got 40
handCount was incorrect. Expected 39 but got 40
handCount was incorrect. Expected 104 but got 105
handCount was incorrect. Expected 245 but got 246
handCount was incorrect. Expected 228 but got 229
handCount was incorrect. Expected 180 but got 181
handCount was incorrect. Expected 215 but got 216
handCount was incorrect. Expected 202 but got 203
handCount was incorrect. Expected 229 but got 230
handCount was incorrect. Expected 284 but got 285
handCount was incorrect. Expected 228 but got 229
handCount was incorrect. Expected 369 but got 370
handCount was incorrect. Expected 411 but got 412
handCount was incorrect. Expected 199 but got 200
handCount was incorrect. Expected 467 but got 468
handCount was incorrect. Expected 472 but got 473
handCount was incorrect. Expected 48 but got 49
handCount was incorrect. Expected 117 but got 118
handCount was incorrect. Expected 264 but got 265
handCount was incorrect. Expected 216 but got 217
handCount was incorrect. Expected 86 but got 87
handCount was incorrect. Expected 496 but got 497
handCount was incorrect. Expected 375 but got 376
handCount was incorrect. Expected 141 but got 142
handCount was incorrect. Expected 201 but got 202
handCount was incorrect. Expected 62 but got 63
handCount was incorrect. Expected 152 but got 153
handCount was incorrect. Expected 34 but got 35
handCount was incorrect. Expected 308 but got 309
handCount was incorrect. Expected 52 but got 53
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 48 but got 49
handCount was incorrect. Expected 159 but got 160
handCount was incorrect. Expected 97 but got 98
handCount was incorrect. Expected 186 but got 187
handCount was incorrect. Expected 3 but got 4
handCount was incorrect. Expected 238 but got 239
handCount was incorrect. Expected 313 but got 314
handCount was incorrect. Expected 248 but got 249
handCount was incorrect. Expected 9 but got 10
handCount was incorrect. Expected 51 but got 52
handCount was incorrect. Expected 441 but got 442
handCount was incorrect. Expected 496 but got 497
handCount was incorrect. Expected 187 but got 188
handCount was incorrect. Expected 320 but got 321
handCount was incorrect. Expected 58 but got 59
handCount was incorrect. Expected 382 but got 383
handCount was incorrect. Expected 447 but got 448
handCount was incorrect. Expected 275 but got 276
handCount was incorrect. Expected 326 but got 327
handCount was incorrect. Expected 121 but got 122
handCount was incorrect. Expected 178 but got 179
handCount was incorrect. Expected 484 but got 485
handCount was incorrect. Expected 15 but got 16
handCount was incorrect. Expected 71 but got 72
handCount was incorrect. Expected 78 but got 79
handCount was incorrect. Expected 420 but got 421
handCount was incorrect. Expected 94 but got 95
handCount was incorrect. Expected 76 but got 77
handCount was incorrect. Expected 154 but got 155
handCount was incorrect. Expected 81 but got 82
handCount was incorrect. Expected 48 but got 49
handCount was incorrect. Expected 184 but got 185
handCount was incorrect. Expected 412 but got 413
handCount was incorrect. Expected 205 but got 206
handCount was incorrect. Expected 412 but got 413
handCount was incorrect. Expected 390 but got 391
handCount was incorrect. Expected 449 but got 450
handCount was incorrect. Expected 399 but got 400
handCount was incorrect. Expected 153 but got 154
handCount was incorrect. Expected 455 but got 456
handCount was incorrect. Expected 367 but got 368
handCount was incorrect. Expected 180 but got 181
handCount was incorrect. Expected 220 but got 221
handCount was incorrect. Expected 112 but got 113
handCount was incorrect. Expected 70 but got 71
handCount was incorrect. Expected 354 but got 355
handCount was incorrect. Expected 256 but got 257
handCount was incorrect. Expected 53 but got 54
handCount was incorrect. Expected 9 but got 10
handCount was incorrect. Expected 99 but got 100
handCount was incorrect. Expected 141 but got 142
handCount was incorrect. Expected 378 but got 379
handCount was incorrect. Expected 8 but got 9
handCount was incorrect. Expected 299 but got 300
handCount was incorrect. Expected 51 but got 52
handCount was incorrect. Expected 339 but got 340
handCount was incorrect. Expected 288 but got 289
handCount was incorrect. Expected 355 but got 356
handCount was incorrect. Expected 481 but got 482
handCount was incorrect. Expected 237 but got 238
handCount was incorrect. Expected 147 but got 148
handCount was incorrect. Expected 349 but got 350
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 469 but got 470
handCount was incorrect. Expected 10 but got 11
handCount was incorrect. Expected 216 but got 217
handCount was incorrect. Expected 302 but got 303
handCount was incorrect. Expected 230 but got 231
handCount was incorrect. Expected 251 but got 252
handCount was incorrect. Expected 433 but got 434
handCount was incorrect. Expected 275 but got 276
handCount was incorrect. Expected 41 but got 42
handCount was incorrect. Expected 365 but got 366
handCount was incorrect. Expected 289 but got 290
handCount was incorrect. Expected 418 but got 419
handCount was incorrect. Expected 417 but got 418
handCount was incorrect. Expected 474 but got 475
handCount was incorrect. Expected 483 but got 484
handCount was incorrect. Expected 85 but got 86
handCount was incorrect. Expected 14 but got 15
handCount was incorrect. Expected 318 but got 319
handCount was incorrect. Expected 480 but got 481
handCount was incorrect. Expected 265 but got 266
handCount was incorrect. Expected 236 but got 237
handCount was incorrect. Expected 80 but got 81
handCount was incorrect. Expected 215 but got 216
handCount was incorrect. Expected 360 but got 361
handCount was incorrect. Expected 229 but got 230
handCount was incorrect. Expected 446 but got 447
handCount was incorrect. Expected 440 but got 441
handCount was incorrect. Expected 371 but got 372
handCount was incorrect. Expected 492 but got 493
handCount was incorrect. Expected 272 but got 273
handCount was incorrect. Expected 16 but got 17
handCount was incorrect. Expected 20 but got 21
handCount was incorrect. Expected 475 but got 476
handCount was incorrect. Expected 106 but got 107
handCount was incorrect. Expected 263 but got 264
handCount was incorrect. Expected 107 but got 108
handCount was incorrect. Expected 143 but got 144
handCount was incorrect. Expected 435 but got 436
handCount was incorrect. Expected 218 but got 219
handCount was incorrect. Expected 192 but got 193
handCount was incorrect. Expected 57 but got 58
handCount was incorrect. Expected 184 but got 185
handCount was incorrect. Expected 37 but got 38
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 264 but got 265
handCount was incorrect. Expected 217 but got 218
handCount was incorrect. Expected 414 but got 415
handCount was incorrect. Expected 445 but got 446
handCount was incorrect. Expected 68 but got 69
handCount was incorrect. Expected 280 but got 281
handCount was incorrect. Expected 56 but got 57
handCount was incorrect. Expected 276 but got 277
handCount was incorrect. Expected 128 but got 129
handCount was incorrect. Expected 458 but got 459
handCount was incorrect. Expected 396 but got 397
handCount was incorrect. Expected 419 but got 420
handCount was incorrect. Expected 39 but got 40
handCount was incorrect. Expected 300 but got 301
handCount was incorrect. Expected 144 but got 145
handCount was incorrect. Expected 378 but got 379
handCount was incorrect. Expected 131 but got 132
handCount was incorrect. Expected 99 but got 100
handCount was incorrect. Expected 336 but got 337
handCount was incorrect. Expected 72 but got 73
handCount was incorrect. Expected 196 but got 197
handCount was incorrect. Expected 476 but got 477
handCount was incorrect. Expected 350 but got 351
handCount was incorrect. Expected 212 but got 213
handCount was incorrect. Expected 339 but got 340
handCount was incorrect. Expected 177 but got 178
handCount was incorrect. Expected 469 but got 470
handCount was incorrect. Expected 352 but got 353
handCount was incorrect. Expected 342 but got 343
handCount was incorrect. Expected 77 but got 78
handCount was incorrect. Expected 291 but got 292
handCount was incorrect. Expected 306 but got 307
handCount was incorrect. Expected 382 but got 383
handCount was incorrect. Expected 81 but got 82
handCount was incorrect. Expected 388 but got 389
handCount was incorrect. Expected 436 but got 437
handCount was incorrect. Expected 282 but got 283
handCount was incorrect. Expected 72 but got 73
handCount was incorrect. Expected 388 but got 389
handCount was incorrect. Expected 97 but got 98
handCount was incorrect. Expected 414 but got 415
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 254 but got 255
handCount was incorrect. Expected 363 but got 364
handCount was incorrect. Expected 46 but got 47
handCount was incorrect. Expected 200 but got 201
handCount was incorrect. Expected 209 but got 210
handCount was incorrect. Expected 228 but got 229
handCount was incorrect. Expected 245 but got 246
handCount was incorrect. Expected 210 but got 211
handCount was incorrect. Expected 493 but got 494
handCount was incorrect. Expected 473 but got 474
handCount was incorrect. Expected 495 but got 496
handCount was incorrect. Expected 378 but got 379
handCount was incorrect. Expected 289 but got 290
handCount was incorrect. Expected 219 but got 220
handCount was incorrect. Expected 208 but got 209
handCount was incorrect. Expected 297 but got 298
handCount was incorrect. Expected 244 but got 245
handCount was incorrect. Expected 294 but got 295
handCount was incorrect. Expected 75 but got 76
handCount was incorrect. Expected 453 but got 454
handCount was incorrect. Expected 321 but got 322
handCount was incorrect. Expected 161 but got 162
handCount was incorrect. Expected 373 but got 374
handCount was incorrect. Expected 196 but got 197
handCount was incorrect. Expected 352 but got 353
handCount was incorrect. Expected 189 but got 190
handCount was incorrect. Expected 171 but got 172
handCount was incorrect. Expected 172 but got 173
handCount was incorrect. Expected 33 but got 34
handCount was incorrect. Expected 458 but got 459
handCount was incorrect. Expected 302 but got 303
handCount was incorrect. Expected 482 but got 483
handCount was incorrect. Expected 191 but got 192
handCount was incorrect. Expected 6 but got 7
handCount was incorrect. Expected 30 but got 31
handCount was incorrect. Expected 244 but got 245
handCount was incorrect. Expected 444 but got 445
handCount was incorrect. Expected 295 but got 296
handCount was incorrect. Expected 192 but got 193
handCount was incorrect. Expected 257 but got 258
handCount was incorrect. Expected 41 but got 42
handCount was incorrect. Expected 41 but got 42
handCount was incorrect. Expected 398 but got 399
handCount was incorrect. Expected 290 but got 291
handCount was incorrect. Expected 40 but got 41
handCount was incorrect. Expected 241 but got 242
handCount was incorrect. Expected 345 but got 346
handCount was incorrect. Expected 45 but got 46
handCount was incorrect. Expected 202 but got 203
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 499 but got 500
handCount was incorrect. Expected 454 but got 455
handCount was incorrect. Expected 191 but got 192
handCount was incorrect. Expected 92 but got 93
handCount was incorrect. Expected 430 but got 431
handCount was incorrect. Expected 376 but got 377
handCount was incorrect. Expected 401 but got 402
handCount was incorrect. Expected 206 but got 207
handCount was incorrect. Expected 178 but got 179
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 240 but got 241
handCount was incorrect. Expected 192 but got 193
handCount was incorrect. Expected 430 but got 431
handCount was incorrect. Expected 255 but got 256
handCount was incorrect. Expected 318 but got 319
handCount was incorrect. Expected 263 but got 264
handCount was incorrect. Expected 289 but got 290
handCount was incorrect. Expected 496 but got 497
handCount was incorrect. Expected 99 but got 100
handCount was incorrect. Expected 347 but got 348
handCount was incorrect. Expected 154 but got 155
handCount was incorrect. Expected 155 but got 156
handCount was incorrect. Expected 270 but got 271
handCount was incorrect. Expected 97 but got 98
handCount was incorrect. Expected 463 but got 464
handCount was incorrect. Expected 321 but got 322
handCount was incorrect. Expected 319 but got 320
handCount was incorrect. Expected 460 but got 461
handCount was incorrect. Expected 234 but got 235
handCount was incorrect. Expected 356 but got 357
handCount was incorrect. Expected 445 but got 446
handCount was incorrect. Expected 479 but got 480
handCount was incorrect. Expected 248 but got 249
handCount was incorrect. Expected 45 but got 46
handCount was incorrect. Expected 279 but got 280
handCount was incorrect. Expected 480 but got 481
handCount was incorrect. Expected 361 but got 362
handCount was incorrect. Expected 287 but got 288
handCount was incorrect. Expected 418 but got 419
handCount was incorrect. Expected 218 but got 219
handCount was incorrect. Expected 52 but got 53
handCount was incorrect. Expected 329 but got 330
handCount was incorrect. Expected 219 but got 220
handCount was incorrect. Expected 496 but got 497
handCount was incorrect. Expected 192 but got 193
handCount was incorrect. Expected 470 but got 471
handCount was incorrect. Expected 106 but got 107
handCount was incorrect. Expected 315 but got 316
handCount was incorrect. Expected 116 but got 117
handCount was incorrect. Expected 397 but got 398
handCount was incorrect. Expected 393 but got 394
handCount was incorrect. Expected 351 but got 352
handCount was incorrect. Expected 369 but got 370
handCount was incorrect. Expected 7 but got 8
handCount was incorrect. Expected 412 but got 413
handCount was incorrect. Expected 34 but got 35
handCount was incorrect. Expected 234 but got 235
handCount was incorrect. Expected 456 but got 457
handCount was incorrect. Expected 37 but got 38
handCount was incorrect. Expected 85 but got 86
handCount was incorrect. Expected 30 but got 31
handCount was incorrect. Expected 17 but got 18
handCount was incorrect. Expected 324 but got 325
handCount was incorrect. Expected 33 but got 34
handCount was incorrect. Expected 353 but got 354
handCount was incorrect. Expected 338 but got 339
handCount was incorrect. Expected 92 but got 93
handCount was incorrect. Expected 224 but got 225
handCount was incorrect. Expected 388 but got 389
handCount was incorrect. Expected 113 but got 114
handCount was incorrect. Expected 255 but got 256
handCount was incorrect. Expected 240 but got 241
handCount was incorrect. Expected 412 but got 413
handCount was incorrect. Expected 231 but got 232
handCount was incorrect. Expected 203 but got 204
handCount was incorrect. Expected 455 but got 456
handCount was incorrect. Expected 272 but got 273
handCount was incorrect. Expected 417 but got 418
handCount was incorrect. Expected 482 but got 483
handCount was incorrect. Expected 151 but got 152
handCount was incorrect. Expected 423 but got 424
handCount was incorrect. Expected 247 but got 248
handCount was incorrect. Expected 281 but got 282
handCount was incorrect. Expected 353 but got 354
handCount was incorrect. Expected 260 but got 261
handCount was incorrect. Expected 199 but got 200
handCount was incorrect. Expected 286 but got 287
handCount was incorrect. Expected 31 but got 32
handCount was incorrect. Expected 138 but got 139
handCount was incorrect. Expected 41 but got 42
handCount was incorrect. Expected 145 but got 146
handCount was incorrect. Expected 77 but got 78
handCount was incorrect. Expected 495 but got 496
handCount was incorrect. Expected 209 but got 210
handCount was incorrect. Expected 218 but got 219
handCount was incorrect. Expected 339 but got 340
handCount was incorrect. Expected 95 but got 96
handCount was incorrect. Expected 94 but got 95
handCount was incorrect. Expected 383 but got 384
handCount was incorrect. Expected 137 but got 138
handCount was incorrect. Expected 227 but got 228
handCount was incorrect. Expected 363 but got 364
handCount was incorrect. Expected 90 but got 91
handCount was incorrect. Expected 111 but got 112
handCount was incorrect. Expected 414 but got 415
handCount was incorrect. Expected 101 but got 102
handCount was incorrect. Expected 275 but got 276
handCount was incorrect. Expected 170 but got 171
handCount was incorrect. Expected 51 but got 52
handCount was incorrect. Expected 228 but got 229
handCount was incorrect. Expected 407 but got 408
handCount was incorrect. Expected 161 but got 162
handCount was incorrect. Expected 414 but got 415
handCount was incorrect. Expected 141 but got 142
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 168 but got 169
handCount was incorrect. Expected 430 but got 431
handCount was incorrect. Expected 299 but got 300
handCount was incorrect. Expected 26 but got 27
handCount was incorrect. Expected 73 but got 74
handCount was incorrect. Expected 188 but got 189
handCount was incorrect. Expected 244 but got 245
handCount was incorrect. Expected 306 but got 307
handCount was incorrect. Expected 295 but got 296
handCount was incorrect. Expected 311 but got 312
handCount was incorrect. Expected 377 but got 378
handCount was incorrect. Expected 415 but got 416
handCount was incorrect. Expected 317 but got 318
handCount was incorrect. Expected 247 but got 248
handCount was incorrect. Expected 123 but got 124
handCount was incorrect. Expected 306 but got 307
handCount was incorrect. Expected 449 but got 450
handCount was incorrect. Expected 61 but got 62
handCount was incorrect. Expected 369 but got 370
handCount was incorrect. Expected 190 but got 191
handCount was incorrect. Expected 15 but got 16
handCount was incorrect. Expected 182 but got 183
handCount was incorrect. Expected 283 but got 284
handCount was incorrect. Expected 152 but got 153
handCount was incorrect. Expected 120 but got 121
handCount was incorrect. Expected 367 but got 368
handCount was incorrect. Expected 104 but got 105
handCount was incorrect. Expected 412 but got 413
handCount was incorrect. Expected 21 but got 22
handCount was incorrect. Expected 423 but got 424
handCount was incorrect. Expected 370 but got 371
handCount was incorrect. Expected 66 but got 67
handCount was incorrect. Expected 428 but got 429
handCount was incorrect. Expected 409 but got 410
handCount was incorrect. Expected 260 but got 261
handCount was incorrect. Expected 274 but got 275
handCount was incorrect. Expected 42 but got 43
handCount was incorrect. Expected 297 but got 298
handCount was incorrect. Expected 268 but got 269
handCount was incorrect. Expected 354 but got 355
handCount was incorrect. Expected 242 but got 243
handCount was incorrect. Expected 220 but got 221
handCount was incorrect. Expected 326 but got 327
handCount was incorrect. Expected 212 but got 213
handCount was incorrect. Expected 372 but got 373
handCount was incorrect. Expected 39 but got 40
handCount was incorrect. Expected 414 but got 415
handCount was incorrect. Expected 88 but got 89
handCount was incorrect. Expected 228 but got 229
handCount was incorrect. Expected 448 but got 449
handCount was incorrect. Expected 198 but got 199
handCount was incorrect. Expected 382 but got 383
handCount was incorrect. Expected 155 but got 156
handCount was incorrect. Expected 466 but got 467
handCount was incorrect. Expected 141 but got 142
handCount was incorrect. Expected 3 but got 4
handCount was incorrect. Expected 173 but got 174
handCount was incorrect. Expected 464 but got 465
handCount was incorrect. Expected 37 but got 38
handCount was incorrect. Expected 466 but got 467
handCount was incorrect. Expected 35 but got 36
handCount was incorrect. Expected 431 but got 432
handCount was incorrect. Expected 303 but got 304
handCount was incorrect. Expected 279 but got 280
handCount was incorrect. Expected 255 but got 256
handCount was incorrect. Expected 217 but got 218
handCount was incorrect. Expected 319 but got 320
handCount was incorrect. Expected 248 but got 249
handCount was incorrect. Expected 482 but got 483
handCount was incorrect. Expected 104 but got 105
handCount was incorrect. Expected 284 but got 285
handCount was incorrect. Expected 97 but got 98
handCount was incorrect. Expected 428 but got 429
handCount was incorrect. Expected 93 but got 94
handCount was incorrect. Expected 82 but got 83
handCount was incorrect. Expected 112 but got 113
handCount was incorrect. Expected 376 but got 377
handCount was incorrect. Expected 132 but got 133
handCount was incorrect. Expected 228 but got 229
handCount was incorrect. Expected 130 but got 131
handCount was incorrect. Expected 482 but got 483
handCount was incorrect. Expected 207 but got 208
handCount was incorrect. Expected 236 but got 237
handCount was incorrect. Expected 272 but got 273
handCount was incorrect. Expected 355 but got 356
handCount was incorrect. Expected 342 but got 343
handCount was incorrect. Expected 285 but got 286
handCount was incorrect. Expected 409 but got 410
handCount was incorrect. Expected 235 but got 236
handCount was incorrect. Expected 164 but got 165
handCount was incorrect. Expected 171 but got 172
handCount was incorrect. Expected 264 but got 265
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 331 but got 332
handCount was incorrect. Expected 226 but got 227
handCount was incorrect. Expected 446 but got 447
handCount was incorrect. Expected 46 but got 47
handCount was incorrect. Expected 255 but got 256
handCount was incorrect. Expected 417 but got 418
handCount was incorrect. Expected 366 but got 367
handCount was incorrect. Expected 147 but got 148
handCount was incorrect. Expected 99 but got 100
handCount was incorrect. Expected 357 but got 358
handCount was incorrect. Expected 104 but got 105
handCount was incorrect. Expected 369 but got 370
handCount was incorrect. Expected 453 but got 454
handCount was incorrect. Expected 321 but got 322
handCount was incorrect. Expected 371 but got 372
handCount was incorrect. Expected 356 but got 357
handCount was incorrect. Expected 349 but got 350
handCount was incorrect. Expected 173 but got 174
handCount was incorrect. Expected 444 but got 445
handCount was incorrect. Expected 292 but got 293
handCount was incorrect. Expected 381 but got 382
handCount was incorrect. Expected 468 but got 469
handCount was incorrect. Expected 329 but got 330
handCount was incorrect. Expected 269 but got 270
handCount was incorrect. Expected 476 but got 477
handCount was incorrect. Expected 22 but got 23
handCount was incorrect. Expected 250 but got 251
handCount was incorrect. Expected 271 but got 272
handCount was incorrect. Expected 36 but got 37
handCount was incorrect. Expected 187 but got 188
handCount was incorrect. Expected 83 but got 84
handCount was incorrect. Expected 147 but got 148
handCount was incorrect. Expected 359 but got 360
handCount was incorrect. Expected 301 but got 302
handCount was incorrect. Expected 176 but got 177
handCount was incorrect. Expected 110 but got 111
handCount was incorrect. Expected 287 but got 288
handCount was incorrect. Expected 196 but got 197
handCount was incorrect. Expected 153 but got 154
handCount was incorrect. Expected 202 but got 203
handCount was incorrect. Expected 171 but got 172
handCount was incorrect. Expected 263 but got 264
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 28 but got 29
handCount was incorrect. Expected 231 but got 232
handCount was incorrect. Expected 465 but got 466
handCount was incorrect. Expected 374 but got 375
handCount was incorrect. Expected 129 but got 130
handCount was incorrect. Expected 376 but got 377
handCount was incorrect. Expected 15 but got 16
handCount was incorrect. Expected 499 but got 500
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 103 but got 104
handCount was incorrect. Expected 247 but got 248
handCount was incorrect. Expected 92 but got 93
handCount was incorrect. Expected 32 but got 33
handCount was incorrect. Expected 130 but got 131
handCount was incorrect. Expected 221 but got 222
handCount was incorrect. Expected 326 but got 327
handCount was incorrect. Expected 326 but got 327
handCount was incorrect. Expected 422 but got 423
handCount was incorrect. Expected 199 but got 200
handCount was incorrect. Expected 383 but got 384
handCount was incorrect. Expected 14 but got 15
handCount was incorrect. Expected 41 but got 42
handCount was incorrect. Expected 69 but got 70
handCount was incorrect. Expected 345 but got 346
handCount was incorrect. Expected 36 but got 37
handCount was incorrect. Expected 197 but got 198
handCount was incorrect. Expected 310 but got 311
handCount was incorrect. Expected 261 but got 262
handCount was incorrect. Expected 11 but got 12
handCount was incorrect. Expected 40 but got 41
handCount was incorrect. Expected 405 but got 406
handCount was incorrect. Expected 265 but got 266
handCount was incorrect. Expected 338 but got 339
handCount was incorrect. Expected 141 but got 142
handCount was incorrect. Expected 289 but got 290
handCount was incorrect. Expected 461 but got 462
handCount was incorrect. Expected 173 but got 174
handCount was incorrect. Expected 211 but got 212
handCount was incorrect. Expected 464 but got 465
handCount was incorrect. Expected 183 but got 184
handCount was incorrect. Expected 144 but got 145
handCount was incorrect. Expected 395 but got 396
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 372 but got 373
handCount was incorrect. Expected 271 but got 272
handCount was incorrect. Expected 381 but got 382
handCount was incorrect. Expected 93 but got 94
handCount was incorrect. Expected 214 but got 215
handCount was incorrect. Expected 272 but got 273
handCount was incorrect. Expected 221 but got 222
handCount was incorrect. Expected 77 but got 78
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 375 but got 376
handCount was incorrect. Expected 422 but got 423
handCount was incorrect. Expected 398 but got 399
handCount was incorrect. Expected 21 but got 22
handCount was incorrect. Expected 479 but got 480
handCount was incorrect. Expected 103 but got 104
handCount was incorrect. Expected 19 but got 20
handCount was incorrect. Expected 373 but got 374
handCount was incorrect. Expected 260 but got 261
handCount was incorrect. Expected 482 but got 483
handCount was incorrect. Expected 187 but got 188
handCount was incorrect. Expected 124 but got 125
handCount was incorrect. Expected 448 but got 449
handCount was incorrect. Expected 412 but got 413
handCount was incorrect. Expected 37 but got 38
handCount was incorrect. Expected 130 but got 131
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 79 but got 80
handCount was incorrect. Expected 262 but got 263
handCount was incorrect. Expected 19 but got 20
handCount was incorrect. Expected 87 but got 88
handCount was incorrect. Expected 446 but got 447
handCount was incorrect. Expected 490 but got 491
handCount was incorrect. Expected 17 but got 18
handCount was incorrect. Expected 446 but got 447
handCount was incorrect. Expected 399 but got 400
handCount was incorrect. Expected 219 but got 220
handCount was incorrect. Expected 386 but got 387
handCount was incorrect. Expected 8 but got 9
handCount was incorrect. Expected 112 but got 113
handCount was incorrect. Expected 269 but got 270
handCount was incorrect. Expected 288 but got 289
handCount was incorrect. Expected 27 but got 28
handCount was incorrect. Expected 211 but got 212
handCount was incorrect. Expected 242 but got 243
handCount was incorrect. Expected 258 but got 259
handCount was incorrect. Expected 276 but got 277
handCount was incorrect. Expected 88 but got 89
handCount was incorrect. Expected 100 but got 101
handCount was incorrect. Expected 424 but got 425
handCount was incorrect. Expected 105 but got 106
handCount was incorrect. Expected 241 but got 242
handCount was incorrect. Expected 40 but got 41
handCount was incorrect. Expected 53 but got 54
handCount was incorrect. Expected 112 but got 113
handCount was incorrect. Expected 396 but got 397
handCount was incorrect. Expected 359 but got 360
handCount was incorrect. Expected 284 but got 285
handCount was incorrect. Expected 135 but got 136
handCount was incorrect. Expected 117 but got 118
handCount was incorrect. Expected 118 but got 119
handCount was incorrect. Expected 180 but got 181
handCount was incorrect. Expected 361 but got 362
handCount was incorrect. Expected 230 but got 231
handCount was incorrect. Expected 432 but got 433
handCount was incorrect. Expected 458 but got 459
handCount was incorrect. Expected 240 but got 241
handCount was incorrect. Expected 100 but got 101
handCount was incorrect. Expected 336 but got 337
handCount was incorrect. Expected 35 but got 36
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 191 but got 192
handCount was incorrect. Expected 434 but got 435
handCount was incorrect. Expected 243 but got 244
handCount was incorrect. Expected 420 but got 421
handCount was incorrect. Expected 389 but got 390
handCount was incorrect. Expected 202 but got 203
handCount was incorrect. Expected 210 but got 211
handCount was incorrect. Expected 7 but got 8
handCount was incorrect. Expected 347 but got 348
handCount was incorrect. Expected 291 but got 292
handCount was incorrect. Expected 413 but got 414
handCount was incorrect. Expected 359 but got 360
handCount was incorrect. Expected 305 but got 306
handCount was incorrect. Expected 358 but got 359
handCount was incorrect. Expected 149 but got 150
handCount was incorrect. Expected 247 but got 248
handCount was incorrect. Expected 473 but got 474
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 460 but got 461
handCount was incorrect. Expected 477 but got 478
handCount was incorrect. Expected 496 but got 497
handCount was incorrect. Expected 375 but got 376
handCount was incorrect. Expected 164 but got 165
handCount was incorrect. Expected 42 but got 43
handCount was incorrect. Expected 431 but got 432
handCount was incorrect. Expected 316 but got 317
handCount was incorrect. Expected 436 but got 437
handCount was incorrect. Expected 30 but got 31
handCount was incorrect. Expected 164 but got 165
handCount was incorrect. Expected 243 but got 244
handCount was incorrect. Expected 59 but got 60
handCount was incorrect. Expected 340 but got 341
handCount was incorrect. Expected 423 but got 424
handCount was incorrect. Expected 46 but got 47
handCount was incorrect. Expected 320 but got 321
handCount was incorrect. Expected 448 but got 449
handCount was incorrect. Expected 318 but got 319
handCount was incorrect. Expected 127 but got 128
handCount was incorrect. Expected 410 but got 411
handCount was incorrect. Expected 32 but got 33
handCount was incorrect. Expected 40 but got 41
handCount was incorrect. Expected 289 but got 290
handCount was incorrect. Expected 315 but got 316
handCount was incorrect. Expected 401 but got 402
handCount was incorrect. Expected 440 but got 441
handCount was incorrect. Expected 309 but got 310
handCount was incorrect. Expected 343 but got 344
handCount was incorrect. Expected 60 but got 61
handCount was incorrect. Expected 395 but got 396
handCount was incorrect. Expected 440 but got 441
handCount was incorrect. Expected 340 but got 341
handCount was incorrect. Expected 236 but got 237
handCount was incorrect. Expected 432 but got 433
handCount was incorrect. Expected 58 but got 59
handCount was incorrect. Expected 324 but got 325
handCount was incorrect. Expected 351 but got 352
handCount was incorrect. Expected 324 but got 325
handCount was incorrect. Expected 144 but got 145
handCount was incorrect. Expected 494 but got 495
handCount was incorrect. Expected 468 but got 469
handCount was incorrect. Expected 366 but got 367
handCount was incorrect. Expected 356 but got 357
handCount was incorrect. Expected 222 but got 223
handCount was incorrect. Expected 404 but got 405
handCount was incorrect. Expected 280 but got 281
handCount was incorrect. Expected 418 but got 419
handCount was incorrect. Expected 99 but got 100
handCount was incorrect. Expected 353 but got 354
handCount was incorrect. Expected 460 but got 461
handCount was incorrect. Expected 120 but got 121
handCount was incorrect. Expected 308 but got 309
handCount was incorrect. Expected 245 but got 246
handCount was incorrect. Expected 330 but got 331
handCount was incorrect. Expected 493 but got 494
handCount was incorrect. Expected 65 but got 66
handCount was incorrect. Expected 452 but got 453
handCount was incorrect. Expected 407 but got 408
handCount was incorrect. Expected 44 but got 45
handCount was incorrect. Expected 353 but got 354
handCount was incorrect. Expected 349 but got 350
handCount was incorrect. Expected 492 but got 493
handCount was incorrect. Expected 106 but got 107
handCount was incorrect. Expected 200 but got 201
handCount was incorrect. Expected 153 but got 154
handCount was incorrect. Expected 269 but got 270
handCount was incorrect. Expected 302 but got 303
handCount was incorrect. Expected 10 but got 11
handCount was incorrect. Expected 10 but got 11
handCount was incorrect. Expected 496 but got 497
handCount was incorrect. Expected 64 but got 65
handCount was incorrect. Expected 427 but got 428
handCount was incorrect. Expected 307 but got 308
handCount was incorrect. Expected 283 but got 284
handCount was incorrect. Expected 134 but got 135
handCount was incorrect. Expected 145 but got 146
handCount was incorrect. Expected 488 but got 489
handCount was incorrect. Expected 395 but got 396
handCount was incorrect. Expected 331 but got 332
handCount was incorrect. Expected 263 but got 264
handCount was incorrect. Expected 418 but got 419
handCount was incorrect. Expected 78 but got 79
handCount was incorrect. Expected 428 but got 429
handCount was incorrect. Expected 282 but got 283
handCount was incorrect. Expected 102 but got 103
handCount was incorrect. Expected 69 but got 70
handCount was incorrect. Expected 105 but got 106
handCount was incorrect. Expected 157 but got 158
handCount was incorrect. Expected 268 but got 269
handCount was incorrect. Expected 4 but got 5
handCount was incorrect. Expected 402 but got 403
handCount was incorrect. Expected 74 but got 75
handCount was incorrect. Expected 349 but got 350
handCount was incorrect. Expected 145 but got 146
handCount was incorrect. Expected 135 but got 136
handCount was incorrect. Expected 11 but got 12
handCount was incorrect. Expected 323 but got 324
handCount was incorrect. Expected 318 but got 319
handCount was incorrect. Expected 5 but got 6
handCount was incorrect. Expected 23 but got 24
handCount was incorrect. Expected 118 but got 119
handCount was incorrect. Expected 443 but got 444
handCount was incorrect. Expected 126 but got 127
handCount was incorrect. Expected 119 but got 120
handCount was incorrect. Expected 17 but got 18
handCount was incorrect. Expected 141 but got 142
handCount was incorrect. Expected 324 but got 325
handCount was incorrect. Expected 64 but got 65
handCount was incorrect. Expected 225 but got 226
handCount was incorrect. Expected 195 but got 196
handCount was incorrect. Expected 3 but got 4
handCount was incorrect. Expected 175 but got 176
handCount was incorrect. Expected 211 but got 212
handCount was incorrect. Expected 366 but got 367
handCount was incorrect. Expected 292 but got 293
handCount was incorrect. Expected 432 but got 433
handCount was incorrect. Expected 409 but got 410
handCount was incorrect. Expected 291 but got 292
handCount was incorrect. Expected 349 but got 350
handCount was incorrect. Expected 271 but got 272
handCount was incorrect. Expected 179 but got 180
handCount was incorrect. Expected 458 but got 459
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 80 but got 81
handCount was incorrect. Expected 244 but got 245
handCount was incorrect. Expected 149 but got 150
handCount was incorrect. Expected 474 but got 475
handCount was incorrect. Expected 423 but got 424
handCount was incorrect. Expected 467 but got 468
handCount was incorrect. Expected 139 but got 140
handCount was incorrect. Expected 211 but got 212
handCount was incorrect. Expected 274 but got 275
handCount was incorrect. Expected 117 but got 118
handCount was incorrect. Expected 73 but got 74
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 308 but got 309
handCount was incorrect. Expected 137 but got 138
handCount was incorrect. Expected 203 but got 204
handCount was incorrect. Expected 321 but got 322
handCount was incorrect. Expected 20 but got 21
handCount was incorrect. Expected 12 but got 13
handCount was incorrect. Expected 391 but got 392
handCount was incorrect. Expected 33 but got 34
handCount was incorrect. Expected 67 but got 68
handCount was incorrect. Expected 410 but got 411
handCount was incorrect. Expected 409 but got 410
handCount was incorrect. Expected 485 but got 486
handCount was incorrect. Expected 287 but got 288
handCount was incorrect. Expected 476 but got 477
handCount was incorrect. Expected 186 but got 187
handCount was incorrect. Expected 464 but got 465
handCount was incorrect. Expected 45 but got 46
handCount was incorrect. Expected 463 but got 464
handCount was incorrect. Expected 418 but got 419
handCount was incorrect. Expected 430 but got 431
handCount was incorrect. Expected 434 but got 435
handCount was incorrect. Expected 211 but got 212
handCount was incorrect. Expected 136 but got 137
handCount was incorrect. Expected 203 but got 204
handCount was incorrect. Expected 143 but got 144
handCount was incorrect. Expected 124 but got 125
handCount was incorrect. Expected 45 but got 46
handCount was incorrect. Expected 441 but got 442
handCount was incorrect. Expected 416 but got 417
handCount was incorrect. Expected 356 but got 357
handCount was incorrect. Expected 359 but got 360
handCount was incorrect. Expected 266 but got 267
handCount was incorrect. Expected 224 but got 225
handCount was incorrect. Expected 337 but got 338
handCount was incorrect. Expected 135 but got 136
handCount was incorrect. Expected 420 but got 421
handCount was incorrect. Expected 481 but got 482
handCount was incorrect. Expected 58 but got 59
handCount was incorrect. Expected 384 but got 385
handCount was incorrect. Expected 417 but got 418
handCount was incorrect. Expected 438 but got 439
handCount was incorrect. Expected 415 but got 416
handCount was incorrect. Expected 71 but got 72
handCount was incorrect. Expected 32 but got 33
handCount was incorrect. Expected 496 but got 497
handCount was incorrect. Expected 307 but got 308
handCount was incorrect. Expected 208 but got 209
handCount was incorrect. Expected 369 but got 370
handCount was incorrect. Expected 15 but got 16
handCount was incorrect. Expected 129 but got 130
handCount was incorrect. Expected 248 but got 249
handCount was incorrect. Expected 191 but got 192
handCount was incorrect. Expected 297 but got 298
handCount was incorrect. Expected 304 but got 305
handCount was incorrect. Expected 208 but got 209
handCount was incorrect. Expected 68 but got 69
handCount was incorrect. Expected 84 but got 85
handCount was incorrect. Expected 251 but got 252
handCount was incorrect. Expected 153 but got 154
handCount was incorrect. Expected 279 but got 280
handCount was incorrect. Expected 340 but got 341
handCount was incorrect. Expected 380 but got 381
handCount was incorrect. Expected 311 but got 312
handCount was incorrect. Expected 468 but got 469
handCount was incorrect. Expected 359 but got 360
handCount was incorrect. Expected 387 but got 388
handCount was incorrect. Expected 4 but got 5
handCount was incorrect. Expected 242 but got 243
handCount was incorrect. Expected 287 but got 288
handCount was incorrect. Expected 162 but got 163
handCount was incorrect. Expected 32 but got 33
handCount was incorrect. Expected 313 but got 314
handCount was incorrect. Expected 36 but got 37
handCount was incorrect. Expected 197 but got 198
handCount was incorrect. Expected 29 but got 30
handCount was incorrect. Expected 56 but got 57
handCount was incorrect. Expected 133 but got 134
handCount was incorrect. Expected 191 but got 192
handCount was incorrect. Expected 151 but got 152
handCount was incorrect. Expected 437 but got 438
handCount was incorrect. Expected 192 but got 193
handCount was incorrect. Expected 335 but got 336
handCount was incorrect. Expected 453 but got 454
handCount was incorrect. Expected 90 but got 91
handCount was incorrect. Expected 371 but got 372
handCount was incorrect. Expected 277 but got 278
handCount was incorrect. Expected 280 but got 281
handCount was incorrect. Expected 63 but got 64
handCount was incorrect. Expected 100 but got 101
handCount was incorrect. Expected 398 but got 399
handCount was incorrect. Expected 33 but got 34
handCount was incorrect. Expected 314 but got 315
handCount was incorrect. Expected 189 but got 190
handCount was incorrect. Expected 157 but got 158
handCount was incorrect. Expected 255 but got 256
handCount was incorrect. Expected 121 but got 122
handCount was incorrect. Expected 274 but got 275
handCount was incorrect. Expected 448 but got 449
handCount was incorrect. Expected 27 but got 28
handCount was incorrect. Expected 244 but got 245
handCount was incorrect. Expected 380 but got 381
handCount was incorrect. Expected 94 but got 95
handCount was incorrect. Expected 260 but got 261
handCount was incorrect. Expected 44 but got 45
handCount was incorrect. Expected 332 but got 333
handCount was incorrect. Expected 378 but got 379
handCount was incorrect. Expected 124 but got 125
handCount was incorrect. Expected 44 but got 45
handCount was incorrect. Expected 261 but got 262
handCount was incorrect. Expected 75 but got 76
handCount was incorrect. Expected 37 but got 38
handCount was incorrect. Expected 430 but got 431
handCount was incorrect. Expected 258 but got 259
handCount was incorrect. Expected 457 but got 458
handCount was incorrect. Expected 73 but got 74
handCount was incorrect. Expected 118 but got 119
handCount was incorrect. Expected 230 but got 231
handCount was incorrect. Expected 313 but got 314
handCount was incorrect. Expected 123 but got 124
handCount was incorrect. Expected 8 but got 9
handCount was incorrect. Expected 184 but got 185
handCount was incorrect. Expected 235 but got 236
handCount was incorrect. Expected 363 but got 364
handCount was incorrect. Expected 207 but got 208
handCount was incorrect. Expected 438 but got 439
handCount was incorrect. Expected 285 but got 286
handCount was incorrect. Expected 394 but got 395
handCount was incorrect. Expected 406 but got 407
handCount was incorrect. Expected 24 but got 25
handCount was incorrect. Expected 12 but got 13
handCount was incorrect. Expected 457 but got 458
handCount was incorrect. Expected 83 but got 84
handCount was incorrect. Expected 295 but got 296
handCount was incorrect. Expected 438 but got 439
handCount was incorrect. Expected 168 but got 169
handCount was incorrect. Expected 385 but got 386
handCount was incorrect. Expected 186 but got 187
handCount was incorrect. Expected 372 but got 373
handCount was incorrect. Expected 48 but got 49
handCount was incorrect. Expected 346 but got 347
handCount was incorrect. Expected 221 but got 222
handCount was incorrect. Expected 328 but got 329
handCount was incorrect. Expected 398 but got 399
handCount was incorrect. Expected 438 but got 439
handCount was incorrect. Expected 294 but got 295
handCount was incorrect. Expected 368 but got 369
handCount was incorrect. Expected 189 but got 190
handCount was incorrect. Expected 237 but got 238
handCount was incorrect. Expected 393 but got 394
handCount was incorrect. Expected 287 but got 288
handCount was incorrect. Expected 47 but got 48
handCount was incorrect. Expected 308 but got 309
handCount was incorrect. Expected 267 but got 268
handCount was incorrect. Expected 39 but got 40
handCount was incorrect. Expected 435 but got 436
handCount was incorrect. Expected 358 but got 359
handCount was incorrect. Expected 351 but got 352
handCount was incorrect. Expected 206 but got 207
handCount was incorrect. Expected 190 but got 191
handCount was incorrect. Expected 447 but got 448
handCount was incorrect. Expected 248 but got 249
handCount was incorrect. Expected 222 but got 223
handCount was incorrect. Expected 371 but got 372
handCount was incorrect. Expected 370 but got 371
handCount was incorrect. Expected 232 but got 233
handCount was incorrect. Expected 360 but got 361
handCount was incorrect. Expected 288 but got 289
handCount was incorrect. Expected 132 but got 133
handCount was incorrect. Expected 215 but got 216
handCount was incorrect. Expected 343 but got 344
handCount was incorrect. Expected 217 but got 218
handCount was incorrect. Expected 498 but got 499
handCount was incorrect. Expected 173 but got 174
handCount was incorrect. Expected 313 but got 314
handCount was incorrect. Expected 122 but got 123
handCount was incorrect. Expected 253 but got 254
handCount was incorrect. Expected 394 but got 395
handCount was incorrect. Expected 7 but got 8
handCount was incorrect. Expected 279 but got 280
handCount was incorrect. Expected 4 but got 5
handCount was incorrect. Expected 391 but got 392
handCount was incorrect. Expected 31 but got 32
handCount was incorrect. Expected 130 but got 131
handCount was incorrect. Expected 180 but got 181
handCount was incorrect. Expected 145 but got 146
handCount was incorrect. Expected 448 but got 449
handCount was incorrect. Expected 73 but got 74
handCount was incorrect. Expected 151 but got 152
handCount was incorrect. Expected 398 but got 399
handCount was incorrect. Expected 56 but got 57
handCount was incorrect. Expected 73 but got 74
handCount was incorrect. Expected 72 but got 73
handCount was incorrect. Expected 375 but got 376
handCount was incorrect. Expected 458 but got 459
handCount was incorrect. Expected 334 but got 335
handCount was incorrect. Expected 365 but got 366
handCount was incorrect. Expected 285 but got 286
handCount was incorrect. Expected 212 but got 213
handCount was incorrect. Expected 211 but got 212
handCount was incorrect. Expected 320 but got 321
handCount was incorrect. Expected 3 but got 4
handCount was incorrect. Expected 397 but got 398
handCount was incorrect. Expected 465 but got 466
handCount was incorrect. Expected 254 but got 255
handCount was incorrect. Expected 85 but got 86
handCount was incorrect. Expected 471 but got 472
handCount was incorrect. Expected 414 but got 415
handCount was incorrect. Expected 153 but got 154
handCount was incorrect. Expected 383 but got 384
handCount was incorrect. Expected 307 but got 308
handCount was incorrect. Expected 485 but got 486
handCount was incorrect. Expected 159 but got 160
handCount was incorrect. Expected 497 but got 498
handCount was incorrect. Expected 121 but got 122
handCount was incorrect. Expected 316 but got 317
handCount was incorrect. Expected 54 but got 55
handCount was incorrect. Expected 95 but got 96
handCount was incorrect. Expected 484 but got 485
handCount was incorrect. Expected 130 but got 131
handCount was incorrect. Expected 66 but got 67
handCount was incorrect. Expected 262 but got 263
handCount was incorrect. Expected 195 but got 196
handCount was incorrect. Expected 492 but got 493
handCount was incorrect. Expected 376 but got 377
handCount was incorrect. Expected 78 but got 79
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 188 but got 189
handCount was incorrect. Expected 212 but got 213
handCount was incorrect. Expected 494 but got 495
handCount was incorrect. Expected 18 but got 19
handCount was incorrect. Expected 302 but got 303
handCount was incorrect. Expected 472 but got 473
handCount was incorrect. Expected 21 but got 22
handCount was incorrect. Expected 261 but got 262
handCount was incorrect. Expected 132 but got 133
handCount was incorrect. Expected 311 but got 312
handCount was incorrect. Expected 276 but got 277
handCount was incorrect. Expected 449 but got 450
handCount was incorrect. Expected 282 but got 283
handCount was incorrect. Expected 41 but got 42
handCount was incorrect. Expected 334 but got 335
handCount was incorrect. Expected 37 but got 38
handCount was incorrect. Expected 336 but got 337
handCount was incorrect. Expected 361 but got 362
handCount was incorrect. Expected 65 but got 66
handCount was incorrect. Expected 5 but got 6
handCount was incorrect. Expected 144 but got 145
handCount was incorrect. Expected 45 but got 46
handCount was incorrect. Expected 235 but got 236
handCount was incorrect. Expected 158 but got 159
handCount was incorrect. Expected 24 but got 25
handCount was incorrect. Expected 63 but got 64
handCount was incorrect. Expected 484 but got 485
handCount was incorrect. Expected 75 but got 76
handCount was incorrect. Expected 460 but got 461
handCount was incorrect. Expected 98 but got 99
handCount was incorrect. Expected 294 but got 295
handCount was incorrect. Expected 304 but got 305
handCount was incorrect. Expected 175 but got 176
handCount was incorrect. Expected 473 but got 474
handCount was incorrect. Expected 121 but got 122
handCount was incorrect. Expected 218 but got 219
handCount was incorrect. Expected 25 but got 26
handCount was incorrect. Expected 292 but got 293
handCount was incorrect. Expected 420 but got 421
handCount was incorrect. Expected 94 but got 95
handCount was incorrect. Expected 444 but got 445
handCount was incorrect. Expected 330 but got 331
handCount was incorrect. Expected 58 but got 59
handCount was incorrect. Expected 110 but got 111
handCount was incorrect. Expected 4 but got 5
handCount was incorrect. Expected 168 but got 169
handCount was incorrect. Expected 447 but got 448
handCount was incorrect. Expected 35 but got 36
handCount was incorrect. Expected 211 but got 212
handCount was incorrect. Expected 202 but got 203
handCount was incorrect. Expected 71 but got 72
handCount was incorrect. Expected 365 but got 366
handCount was incorrect. Expected 452 but got 453
handCount was incorrect. Expected 425 but got 426
handCount was incorrect. Expected 48 but got 49
handCount was incorrect. Expected 44 but got 45
handCount was incorrect. Expected 221 but got 222
handCount was incorrect. Expected 49 but got 50
handCount was incorrect. Expected 191 but got 192
handCount was incorrect. Expected 416 but got 417
handCount was incorrect. Expected 303 but got 304
handCount was incorrect. Expected 203 but got 204
handCount was incorrect. Expected 474 but got 475
handCount was incorrect. Expected 406 but got 407
handCount was incorrect. Expected 35 but got 36
handCount was incorrect. Expected 367 but got 368
handCount was incorrect. Expected 292 but got 293
handCount was incorrect. Expected 270 but got 271
handCount was incorrect. Expected 394 but got 395
handCount was incorrect. Expected 76 but got 77
handCount was incorrect. Expected 314 but got 315
handCount was incorrect. Expected 413 but got 414
handCount was incorrect. Expected 473 but got 474
handCount was incorrect. Expected 406 but got 407
handCount was incorrect. Expected 376 but got 377
handCount was incorrect. Expected 216 but got 217
handCount was incorrect. Expected 262 but got 263
handCount was incorrect. Expected 215 but got 216
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 22 but got 23
handCount was incorrect. Expected 322 but got 323
handCount was incorrect. Expected 415 but got 416
handCount was incorrect. Expected 323 but got 324
handCount was incorrect. Expected 356 but got 357
handCount was incorrect. Expected 273 but got 274
handCount was incorrect. Expected 144 but got 145
handCount was incorrect. Expected 464 but got 465
handCount was incorrect. Expected 180 but got 181
handCount was incorrect. Expected 481 but got 482
handCount was incorrect. Expected 363 but got 364
handCount was incorrect. Expected 449 but got 450
handCount was incorrect. Expected 145 but got 146
handCount was incorrect. Expected 68 but got 69
handCount was incorrect. Expected 473 but got 474
handCount was incorrect. Expected 491 but got 492
handCount was incorrect. Expected 267 but got 268
handCount was incorrect. Expected 416 but got 417
handCount was incorrect. Expected 147 but got 148
handCount was incorrect. Expected 165 but got 166
handCount was incorrect. Expected 419 but got 420
handCount was incorrect. Expected 306 but got 307
handCount was incorrect. Expected 413 but got 414
handCount was incorrect. Expected 359 but got 360
handCount was incorrect. Expected 176 but got 177
handCount was incorrect. Expected 93 but got 94
handCount was incorrect. Expected 223 but got 224
handCount was incorrect. Expected 238 but got 239
handCount was incorrect. Expected 339 but got 340
handCount was incorrect. Expected 379 but got 380
handCount was incorrect. Expected 211 but got 212
handCount was incorrect. Expected 78 but got 79
handCount was incorrect. Expected 14 but got 15
handCount was incorrect. Expected 356 but got 357
handCount was incorrect. Expected 10 but got 11
handCount was incorrect. Expected 442 but got 443
handCount was incorrect. Expected 284 but got 285
handCount was incorrect. Expected 367 but got 368
handCount was incorrect. Expected 413 but got 414
handCount was incorrect. Expected 31 but got 32
handCount was incorrect. Expected 341 but got 342
handCount was incorrect. Expected 63 but got 64
handCount was incorrect. Expected 257 but got 258
handCount was incorrect. Expected 11 but got 12
handCount was incorrect. Expected 231 but got 232
handCount was incorrect. Expected 447 but got 448
handCount was incorrect. Expected 262 but got 263
handCount was incorrect. Expected 317 but got 318
handCount was incorrect. Expected 144 but got 145
handCount was incorrect. Expected 472 but got 473
handCount was incorrect. Expected 198 but got 199
handCount was incorrect. Expected 125 but got 126
handCount was incorrect. Expected 227 but got 228
handCount was incorrect. Expected 445 but got 446
handCount was incorrect. Expected 251 but got 252
handCount was incorrect. Expected 134 but got 135
handCount was incorrect. Expected 62 but got 63
handCount was incorrect. Expected 65 but got 66
handCount was incorrect. Expected 471 but got 472
handCount was incorrect. Expected 97 but got 98
handCount was incorrect. Expected 295 but got 296
handCount was incorrect. Expected 41 but got 42
handCount was incorrect. Expected 181 but got 182
handCount was incorrect. Expected 468 but got 469
handCount was incorrect. Expected 17 but got 18
handCount was incorrect. Expected 357 but got 358
handCount was incorrect. Expected 113 but got 114
handCount was incorrect. Expected 13 but got 14
handCount was incorrect. Expected 260 but got 261
handCount was incorrect. Expected 452 but got 453
handCount was incorrect. Expected 373 but got 374
handCount was incorrect. Expected 23 but got 24
handCount was incorrect. Expected 446 but got 447
handCount was incorrect. Expected 166 but got 167
handCount was incorrect. Expected 289 but got 290
handCount was incorrect. Expected 418 but got 419
handCount was incorrect. Expected 140 but got 141
handCount was incorrect. Expected 53 but got 54
handCount was incorrect. Expected 332 but got 333
handCount was incorrect. Expected 67 but got 68
handCount was incorrect. Expected 75 but got 76
handCount was incorrect. Expected 460 but got 461
handCount was incorrect. Expected 361 but got 362
handCount was incorrect. Expected 52 but got 53
handCount was incorrect. Expected 182 but got 183
handCount was incorrect. Expected 458 but got 459
handCount was incorrect. Expected 52 but got 53
handCount was incorrect. Expected 299 but got 300
handCount was incorrect. Expected 190 but got 191
handCount was incorrect. Expected 406 but got 407
handCount was incorrect. Expected 41 but got 42
handCount was incorrect. Expected 419 but got 420
handCount was incorrect. Expected 395 but got 396
handCount was incorrect. Expected 63 but got 64
handCount was incorrect. Expected 91 but got 92
handCount was incorrect. Expected 311 but got 312
handCount was incorrect. Expected 407 but got 408
handCount was incorrect. Expected 152 but got 153
handCount was incorrect. Expected 415 but got 416
handCount was incorrect. Expected 395 but got 396
handCount was incorrect. Expected 95 but got 96
handCount was incorrect. Expected 201 but got 202
handCount was incorrect. Expected 417 but got 418
handCount was incorrect. Expected 358 but got 359
handCount was incorrect. Expected 11 but got 12
handCount was incorrect. Expected 331 but got 332
handCount was incorrect. Expected 345 but got 346
handCount was incorrect. Expected 77 but got 78
handCount was incorrect. Expected 183 but got 184
handCount was incorrect. Expected 239 but got 240
handCount was incorrect. Expected 90 but got 91
handCount was incorrect. Expected 471 but got 472
handCount was incorrect. Expected 63 but got 64
handCount was incorrect. Expected 139 but got 140
handCount was incorrect. Expected 395 but got 396
handCount was incorrect. Expected 398 but got 399
handCount was incorrect. Expected 325 but got 326
handCount was incorrect. Expected 482 but got 483
handCount was incorrect. Expected 471 but got 472
handCount was incorrect. Expected 320 but got 321
handCount was incorrect. Expected 212 but got 213
handCount was incorrect. Expected 86 but got 87
handCount was incorrect. Expected 306 but got 307
handCount was incorrect. Expected 16 but got 17
handCount was incorrect. Expected 270 but got 271
handCount was incorrect. Expected 264 but got 265
handCount was incorrect. Expected 339 but got 340
handCount was incorrect. Expected 261 but got 262
handCount was incorrect. Expected 177 but got 178
handCount was incorrect. Expected 58 but got 59
handCount was incorrect. Expected 203 but got 204
handCount was incorrect. Expected 256 but got 257
handCount was incorrect. Expected 276 but got 277
handCount was incorrect. Expected 59 but got 60
handCount was incorrect. Expected 159 but got 160
handCount was incorrect. Expected 254 but got 255
handCount was incorrect. Expected 225 but got 226
handCount was incorrect. Expected 278 but got 279
handCount was incorrect. Expected 466 but got 467
handCount was incorrect. Expected 266 but got 267
All tests passed! Returned fine and 3 new cards were added
File 'dominion.c'
Lines executed:14.52% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
    #####:  215:    card = floor(Random() * state->deckCount[player]);
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
       12:  311:int numHandCards(struct gameState *state) {
       12:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
     4012:  346:int whoseTurn(struct gameState *state) {
     4012:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
     1002:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
     1002:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      113:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      889:  401:  j = 0;
    23114:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    22225:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     2664:  406:	  j++;
        -:  407:	}
        -:  408:    }
      889:  409:  if ( j >= 3)
        -:  410:    {
      888:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    16000:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    16000:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    16000:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    16000:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    16000:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    16000:  576:    state->deckCount[player]--;
    16000:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    16000:  580:  return 0;
        -:  581:}
        -:  582:
       35:  583:int getCost(int cardNumber)
        -:  584:{
       35:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo:
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
        8:  643:  return -1;
        -:  644:}
        -:  645:
     4000:  646:int smithy_card(int handPos, struct gameState *state, int currentPlayer){
        -:  647:  //+3 Cards
        -:  648:  int i;
        -:  649:
    20000:  650:	  for (i = 0; i < 4; i++)	//4 not 3 bug here
        -:  651:	{
    16000:  652:	  drawCard(currentPlayer, state);
        -:  653:	}
        -:  654:
        -:  655:      //discard card from hand
     4000:  656:      discardCard(handPos, currentPlayer, state, 0);
     4000:  657:      return 0;
        -:  658:
        -:  659:}
    #####:  660:int adventurer_card(struct gameState *state, int currentPlayer){
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
    #####:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
    #####:  664:  int z = 0;
    #####:  665:  while(drawntreasure<5){	//error, lets you get 5 instead of 2 treasures
    #####:  666:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  667:	  shuffle(currentPlayer, state);
        -:  668:	}
    #####:  669:	drawCard(currentPlayer, state);
    #####:  670:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  671:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  672:	  drawntreasure++;
        -:  673:	else{
    #####:  674:	  temphand[z]=cardDrawn;
    #####:  675:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  676:	  z++;
        -:  677:	}
        -:  678:      }
    #####:  679:      while(z-1>=0){
    #####:  680:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  681:	z=z-1;
        -:  682:      }
    #####:  683:      return 0;
        -:  684:
        -:  685:}
    #####:  686:int baron_card(int choice1, struct gameState *state, int currentPlayer){
    #####:  687:	state->numBuys++;//Increase buys by 1!
    #####:  688:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  689:	int p = 0;//Iterator for hand!
    #####:  690:	int card_not_discarded = 1;//Flag for discard set!
    #####:  691:	while(card_not_discarded){
    #####:  692:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  693:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  694:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  695:	    state->discardCount[currentPlayer]++;
    #####:  696:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  697:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  698:	    }
    #####:  699:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  700:	    state->handCount[currentPlayer]--;
    #####:  701:	    card_not_discarded = 0;//Exit the loop
        -:  702:	  }
    #####:  703:	  else if (p > state->handCount[currentPlayer]){
        -:  704:	    if(DEBUG) {
        -:  705:	      printf("No estate cards in your hand, invalid choice\n");
        -:  706:	      printf("Must gain an estate if there are any\n");
        -:  707:	    }
    #####:  708:	    if (supplyCount(estate, state) > 0){
    #####:  709:	      gainCard(estate, state, 0, currentPlayer);
    #####:  710:	      state->supplyCount[estate]--;//Decrement estates
    #####:  711:	      if (supplyCount(estate, state) == 0){
    #####:  712:		isGameOver(state);
        -:  713:	      }
        -:  714:	    }
    #####:  715:	    card_not_discarded = 0;//Exit the loop
        -:  716:	  }
        -:  717:
        -:  718:	  else{
    #####:  719:	    p++;//Next card
        -:  720:	  }
        -:  721:	}
        -:  722:      }
        -:  723:
        -:  724:      else{
    #####:  725:	if (supplyCount(estate, state) > 0){
    #####:  726:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  727:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  728:	  if (supplyCount(estate, state) == 0){
    #####:  729:	    isGameOver(state);
        -:  730:	  }
        -:  731:	}
        -:  732:      }
        -:  733:
        -:  734:
    #####:  735:      return 0;
        -:  736:
        -:  737:}
    #####:  738:int mine_card(int choice1,int choice2, int handPos, struct gameState *state, int currentPlayer){
        -:  739:	int i;
        -:  740:	int j;
        -:  741:
        -:  742:
    #####:  743:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  744:
    #####:  745:      if (state->hand[currentPlayer][choice1] < copper && state->hand[currentPlayer][choice1] > gold)
        -:  746:	{
    #####:  747:	  return -1;
        -:  748:	}
        -:  749:
    #####:  750:      if (choice2 > treasure_map || choice2 < curse)
        -:  751:	{
    #####:  752:	  return -1;
        -:  753:	}
        -:  754:
    #####:  755:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:
    #####:  760:      gainCard(choice2, state, 2, currentPlayer);
        -:  761:
        -:  762:      //discard card from hand
    #####:  763:      discardCard(handPos, currentPlayer, state, 0);
        -:  764:
        -:  765:
        -:  766:      //discard trashed card
        -:  767:	  //
        -:  768:
    #####:  769:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  770:	{
    #####:  771:	  if (state->hand[currentPlayer][i] == j)
        -:  772:	    {
    #####:  773:	      discardCard(i, currentPlayer, state, 0);
    #####:  774:		  break;
        -:  775:	    }
        -:  776:	}
        -:  777:
        -:  778:
    #####:  779:      return 0;
        -:  780:
        -:  781:}
        -:  782:
        -:  783:
    #####:  784:int council_room_card(struct gameState *state, int handPos, int currentPlayer){
        -:  785:  //+4 Cards
        -:  786:  int i;
        -:  787:
    #####:  788:      for (i = 0; i < 4; i++)
        -:  789:  	  {
    #####:  790:	  drawCard(currentPlayer, state);
        -:  791:	}
        -:  792:
        -:  793:      //+1 Buy
    #####:  794:      state->numBuys++;
        -:  795:
        -:  796:      //Each other player draws a card
    #####:  797:      for (i = 0; i < state->numPlayers; i++)
        -:  798:	{
        -:  799:	 //bug, doesn' t exlude current player for additional draw
    #####:  800:		 if ( i == currentPlayer )// added bug changed not equal to equal
        -:  801:	    {
    #####:  802:	      drawCard(i, state);
        -:  803:	    }
        -:  804:	}
        -:  805:
        -:  806:      //put played card in played card pile
    #####:  807:      discardCard(handPos, currentPlayer, state, 0);
        -:  808:
    #####:  809:      return 0;
        -:  810:
        -:  811:}
        -:  812:
        -:  813:
     4000:  814:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  815:{
        -:  816:  int i;
        -:  817:  int j;
        -:  818:  int k;
        -:  819:  int x;
        -:  820:  int index;
     4000:  821:  int currentPlayer = whoseTurn(state);
     4000:  822:  int nextPlayer = currentPlayer + 1;
        -:  823:
     4000:  824:  int tributeRevealedCards[2] = {-1, -1};
        -:  825:  int temphand[MAX_HAND];// moved above the if statement
        -:  826: // int drawntreasure=0;
        -:  827: // int cardDrawn;
        -:  828:  //int z = 0;// this is the counter for the temp hand
     4000:  829:  if (nextPlayer > (state->numPlayers - 1)){
     4000:  830:    nextPlayer = 0;
        -:  831:  }
        -:  832:
        -:  833:
        -:  834:  //uses switch to select card and perform actions
     4000:  835:  switch( card )
        -:  836:    {
        -:  837:
        -:  838:	//refactored
        -:  839:    case adventurer:
        -:  840:
    #####:  841:	return adventurer_card(state, currentPlayer);
        -:  842:
        -:  843:	//refactored
        -:  844:    case council_room:
    #####:  845:    	council_room_card(state, handPos, currentPlayer);
        -:  846:
        -:  847:
        -:  848:    case feast:
        -:  849:      //gain card with cost up to 5
        -:  850:      //Backup hand
    #####:  851:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  852:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  853:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  854:      }
        -:  855:      //Backup hand
        -:  856:
        -:  857:      //Update Coins for Buy
    #####:  858:      updateCoins(currentPlayer, state, 5);
    #####:  859:      x = 1;//Condition to loop on
    #####:  860:      while( x == 1) {//Buy one card
    #####:  861:	if (supplyCount(choice1, state) <= 0){
        -:  862:	  if (DEBUG)
        -:  863:	    printf("None of that card left, sorry!\n");
        -:  864:
        -:  865:	  if (DEBUG){
        -:  866:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  867:	  }
        -:  868:	}
    #####:  869:	else if (state->coins < getCost(choice1)){
    #####:  870:	  printf("That card is too expensive!\n");
        -:  871:
        -:  872:	  if (DEBUG){
        -:  873:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  874:	  }
        -:  875:	}
        -:  876:	else{
        -:  877:
        -:  878:	  if (DEBUG){
        -:  879:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  880:	  }
        -:  881:
    #####:  882:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  883:	  x = 0;//No more buying cards
        -:  884:
        -:  885:	  if (DEBUG){
        -:  886:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  887:	  }
        -:  888:
        -:  889:	}
        -:  890:      }
        -:  891:
        -:  892:      //Reset Hand
    #####:  893:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  894:	state->hand[currentPlayer][i] = temphand[i];
    #####:  895:	temphand[i] = -1;
        -:  896:      }
        -:  897:      //Reset Hand
        -:  898:
    #####:  899:      return 0;
        -:  900:
        -:  901:    case gardens:
    #####:  902:      return -1;
        -:  903:
        -:  904:
        -:  905:
        -:  906:	//refactored
        -:  907:	case mine:
    #####:  908:     	return mine_card(choice1, choice2, handPos, state, currentPlayer);
        -:  909:
        -:  910:
        -:  911:
        -:  912:    case remodel:
    #####:  913:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  914:
    #####:  915:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  916:	{
    #####:  917:	  return -1;
        -:  918:	}
        -:  919:
    #####:  920:      gainCard(choice2, state, 0, currentPlayer);
        -:  921:
        -:  922:      //discard card from hand
    #####:  923:      discardCard(handPos, currentPlayer, state, 0);
        -:  924:
        -:  925:      //discard trashed card
    #####:  926:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  927:	{
    #####:  928:	  if (state->hand[currentPlayer][i] == j)
        -:  929:	    {
    #####:  930:	      discardCard(i, currentPlayer, state, 0);
    #####:  931:	      break;
        -:  932:	    }
        -:  933:	}
        -:  934:
        -:  935:
    #####:  936:      return 0;
        -:  937:
        -:  938:
        -:  939:	  //refactored
        -:  940:    case smithy:
     4000:  941:   		return smithy_card(handPos, state, currentPlayer);
        -:  942:
        -:  943:    case village:
        -:  944:      //+1 Card
    #####:  945:      drawCard(currentPlayer, state);
        -:  946:
        -:  947:      //+2 Actions
    #####:  948:      state->numActions = state->numActions + 2;
        -:  949:
        -:  950:      //discard played card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
    #####:  952:      return 0;
        -:  953:
        -:  954:
        -:  955:	//refactored
        -:  956:    case baron:
    #####:  957:    	return baron_card(choice1, state, currentPlayer);
        -:  958:
        -:  959:    case great_hall:
        -:  960:      //+1 Card
    #####:  961:      drawCard(currentPlayer, state);
        -:  962:
        -:  963:      //+1 Actions
    #####:  964:      state->numActions++;
        -:  965:
        -:  966:      //discard card from hand
    #####:  967:      discardCard(handPos, currentPlayer, state, 0);
    #####:  968:      return 0;
        -:  969:
        -:  970:    case minion:
        -:  971:      //+1 action
    #####:  972:      state->numActions++;
        -:  973:
        -:  974:      //discard card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);
        -:  976:
    #####:  977:      if (choice1)		//+2 coins
        -:  978:	{
    #####:  979:	  state->coins = state->coins + 2;
        -:  980:	}
        -:  981:
    #####:  982:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  983:	{
        -:  984:	  //discard hand
    #####:  985:	  while(numHandCards(state) > 0)
        -:  986:	    {
    #####:  987:	      discardCard(handPos, currentPlayer, state, 0);
        -:  988:	    }
        -:  989:
        -:  990:	  //draw 4
    #####:  991:	  for (i = 0; i < 4; i++)
        -:  992:	    {
    #####:  993:	      drawCard(currentPlayer, state);
        -:  994:	    }
        -:  995:
        -:  996:	  //other players discard hand and redraw if hand size > 4
    #####:  997:	  for (i = 0; i < state->numPlayers; i++)
        -:  998:	    {
    #####:  999:	      if (i != currentPlayer)
        -: 1000:		{
    #####: 1001:		  if ( state->handCount[i] > 4 )
        -: 1002:		    {
        -: 1003:		      //discard hand
    #####: 1004:		      while( state->handCount[i] > 0 )
        -: 1005:			{
    #####: 1006:			  discardCard(handPos, i, state, 0);
        -: 1007:			}
        -: 1008:
        -: 1009:		      //draw 4
    #####: 1010:		      for (j = 0; j < 4; j++)
        -: 1011:			{
    #####: 1012:			  drawCard(i, state);
        -: 1013:			}
        -: 1014:		    }
        -: 1015:		}
        -: 1016:	    }
        -: 1017:
        -: 1018:	}
    #####: 1019:      return 0;
        -: 1020:
        -: 1021:    case steward:
    #####: 1022:      if (choice1 == 1)
        -: 1023:	{
        -: 1024:	  //+2 cards
    #####: 1025:	  drawCard(currentPlayer, state);
    #####: 1026:	  drawCard(currentPlayer, state);
        -: 1027:	}
    #####: 1028:      else if (choice1 == 2)
        -: 1029:	{
        -: 1030:	  //+2 coins
    #####: 1031:	  state->coins = state->coins + 2;
        -: 1032:	}
        -: 1033:      else
        -: 1034:	{
        -: 1035:	  //trash 2 cards in hand
    #####: 1036:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1037:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card from hand
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case tribute:
    #####: 1045:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1046:	if (state->deckCount[nextPlayer] > 0){
    #####: 1047:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	  state->deckCount[nextPlayer]--;
        -: 1049:	}
    #####: 1050:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1051:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1052:	  state->discardCount[nextPlayer]--;
        -: 1053:	}
        -: 1054:	else{
        -: 1055:	  //No Card to Reveal
        -: 1056:	  if (DEBUG){
        -: 1057:	    printf("No cards to reveal\n");
        -: 1058:	  }
        -: 1059:	}
        -: 1060:      }
        -: 1061:
        -: 1062:      else{
    #####: 1063:	if (state->deckCount[nextPlayer] == 0){
    #####: 1064:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1065:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1066:	    state->deckCount[nextPlayer]++;
    #####: 1067:	    state->discard[nextPlayer][i] = -1;
    #####: 1068:	    state->discardCount[nextPlayer]--;
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1072:	}
    #####: 1073:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1074:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1075:	state->deckCount[nextPlayer]--;
    #####: 1076:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1077:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1078:	state->deckCount[nextPlayer]--;
        -: 1079:      }
        -: 1080:
    #####: 1081:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1082:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1083:	state->playedCardCount++;
    #####: 1084:	tributeRevealedCards[1] = -1;
        -: 1085:      }
        -: 1086:
    #####: 1087:      for (i = 0; i <= 2; i ++){
    #####: 1088:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1089:	  state->coins += 2;
        -: 1090:	}
        -: 1091:
    #####: 1092:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1093:	  drawCard(currentPlayer, state);
    #####: 1094:	  drawCard(currentPlayer, state);
        -: 1095:	}
        -: 1096:	else{//Action Card
    #####: 1097:	  state->numActions = state->numActions + 2;
        -: 1098:	}
        -: 1099:      }
        -: 1100:
    #####: 1101:      return 0;
        -: 1102:
        -: 1103:    case ambassador:
    #####: 1104:      j = 0;		//used to check if player has enough cards to discard
        -: 1105:
    #####: 1106:      if (choice2 > 2 || choice2 < 0)
        -: 1107:	{
    #####: 1108:	  return -1;
        -: 1109:	}
        -: 1110:
    #####: 1111:      if (choice1 == handPos)
        -: 1112:	{
    #####: 1113:	  return -1;
        -: 1114:	}
        -: 1115:
    #####: 1116:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1117:	{
    #####: 1118:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1119:	    {
    #####: 1120:	      j++;
        -: 1121:	    }
        -: 1122:	}
    #####: 1123:      if (j < choice2)
        -: 1124:	{
    #####: 1125:	  return -1;
        -: 1126:	}
        -: 1127:
        -: 1128:      if (DEBUG)
        -: 1129:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1130:
        -: 1131:      //increase supply count for choosen card by amount being discarded
    #####: 1132:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1133:
        -: 1134:      //each other player gains a copy of revealed card
    #####: 1135:      for (i = 0; i < state->numPlayers; i++)
        -: 1136:	{
    #####: 1137:	  if (i != currentPlayer)
        -: 1138:	    {
    #####: 1139:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1140:	    }
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
        -: 1146:      //trash copies of cards returned to supply
    #####: 1147:      for (j = 0; j < choice2; j++)
        -: 1148:	{
    #####: 1149:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1150:	    {
    #####: 1151:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1152:		{
    #####: 1153:		  discardCard(i, currentPlayer, state, 1);
    #####: 1154:		  break;
        -: 1155:		}
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
    #####: 1159:      return 0;
        -: 1160:
        -: 1161:    case cutpurse:
        -: 1162:
    #####: 1163:      updateCoins(currentPlayer, state, 2);
    #####: 1164:      for (i = 0; i < state->numPlayers; i++)
        -: 1165:	{
    #####: 1166:	  if (i != currentPlayer)
        -: 1167:	    {
    #####: 1168:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1169:		{
    #####: 1170:		  if (state->hand[i][j] == copper)
        -: 1171:		    {
    #####: 1172:		      discardCard(j, i, state, 0);
    #####: 1173:		      break;
        -: 1174:		    }
    #####: 1175:		  if (j == state->handCount[i])
        -: 1176:		    {
    #####: 1177:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1178:			{
        -: 1179:			  if (DEBUG)
        -: 1180:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1181:			}
    #####: 1182:		      break;
        -: 1183:		    }
        -: 1184:		}
        -: 1185:
        -: 1186:	    }
        -: 1187:
        -: 1188:	}
        -: 1189:
        -: 1190:      //discard played card from hand
    #####: 1191:      discardCard(handPos, currentPlayer, state, 0);
        -: 1192:
    #####: 1193:      return 0;
        -: 1194:
        -: 1195:
        -: 1196:    case embargo:
        -: 1197:      //+2 Coins
    #####: 1198:      state->coins = state->coins + 2;
        -: 1199:
        -: 1200:      //see if selected pile is in play
    #####: 1201:      if ( state->supplyCount[choice1] == -1 )
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
        -: 1206:      //add embargo token to selected supply pile
    #####: 1207:      state->embargoTokens[choice1]++;
        -: 1208:
        -: 1209:      //trash card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1211:      return 0;
        -: 1212:
        -: 1213:    case outpost:
        -: 1214:      //set outpost flag
    #####: 1215:      state->outpostPlayed++;
        -: 1216:
        -: 1217:      //discard card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1219:      return 0;
        -: 1220:
        -: 1221:    case salvager:
        -: 1222:      //+1 buy
    #####: 1223:      state->numBuys++;
        -: 1224:
    #####: 1225:      if (choice1)
        -: 1226:	{
        -: 1227:	  //gain coins equal to trashed card
    #####: 1228:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1229:	  //trash card
    #####: 1230:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1231:	}
        -: 1232:
        -: 1233:      //discard card
    #####: 1234:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1235:      return 0;
        -: 1236:
        -: 1237:    case sea_hag:
    #####: 1238:      for (i = 0; i < state->numPlayers; i++){
    #####: 1239:	if (i != currentPlayer){
    #####: 1240:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1241:	  state->discardCount[i]++;
    #####: 1242:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1243:	}
        -: 1244:      }
    #####: 1245:      return 0;
        -: 1246:
        -: 1247:    case treasure_map:
        -: 1248:      //search hand for another treasure_map
    #####: 1249:      index = -1;
    #####: 1250:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1251:	{
    #####: 1252:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1253:	    {
    #####: 1254:	      index = i;
    #####: 1255:	      break;
        -: 1256:	    }
        -: 1257:	}
    #####: 1258:      if (index > -1)
        -: 1259:	{
        -: 1260:	  //trash both treasure cards
    #####: 1261:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1262:	  discardCard(index, currentPlayer, state, 1);
        -: 1263:
        -: 1264:	  //gain 4 Gold cards
    #####: 1265:	  for (i = 0; i < 4; i++)
        -: 1266:	    {
    #####: 1267:	      gainCard(gold, state, 1, currentPlayer);
        -: 1268:	    }
        -: 1269:
        -: 1270:	  //return success
    #####: 1271:	  return 1;
        -: 1272:	}
        -: 1273:
        -: 1274:      //no second treasure_map found in hand
    #####: 1275:      return -1;
        -: 1276:    }
        -: 1277:
    #####: 1278:  return -1;
        -: 1279:}
        -: 1280:
     4000: 1281:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1282:{
        -: 1283:
        -: 1284:  //if card is not trashed, added to Played pile
     4000: 1285:  if (trashFlag < 1)
        -: 1286:    {
        -: 1287:      //add card to played pile
     4000: 1288:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     4000: 1289:      state->playedCardCount++;
        -: 1290:    }
        -: 1291:
        -: 1292:  //set played card to -1
     4000: 1293:  state->hand[currentPlayer][handPos] = -1;
        -: 1294:
        -: 1295:  //remove card from player's hand
     4000: 1296:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1297:    {
        -: 1298:      //reduce number of cards in hand
    #####: 1299:      state->handCount[currentPlayer]--;
        -: 1300:    }
     4000: 1301:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1302:    {
        -: 1303:      //reduce number of cards in hand
    #####: 1304:      state->handCount[currentPlayer]--;
        -: 1305:    }
        -: 1306:  else
        -: 1307:    {
        -: 1308:      //replace discarded card with last card in hand
     4000: 1309:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1310:      //set last card to -1
     4000: 1311:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1312:      //reduce number of cards in hand
     4000: 1313:      state->handCount[currentPlayer]--;
        -: 1314:    }
        -: 1315:
     4000: 1316:  return 0;
        -: 1317:}
        -: 1318:
    #####: 1319:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1320:{
        -: 1321:  //Note: supplyPos is enum of choosen card
        -: 1322:
        -: 1323:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1324:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1325:    {
    #####: 1326:      return -1;
        -: 1327:    }
        -: 1328:
        -: 1329:  //added card for [whoseTurn] current player:
        -: 1330:  // toFlag = 0 : add to discard
        -: 1331:  // toFlag = 1 : add to deck
        -: 1332:  // toFlag = 2 : add to hand
        -: 1333:
    #####: 1334:  if (toFlag == 1)
        -: 1335:    {
    #####: 1336:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1337:      state->deckCount[player]++;
        -: 1338:    }
    #####: 1339:  else if (toFlag == 2)
        -: 1340:    {
    #####: 1341:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1342:      state->handCount[player]++;
        -: 1343:    }
        -: 1344:  else
        -: 1345:    {
    #####: 1346:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1347:      state->discardCount[player]++;
        -: 1348:    }
        -: 1349:
        -: 1350:  //decrease number in supply pile
    #####: 1351:  state->supplyCount[supplyPos]--;
        -: 1352:
    #####: 1353:  return 0;
        -: 1354:}
        -: 1355:
        8: 1356:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1357:{
        -: 1358:  int i;
        -: 1359:
        -: 1360:  //reset coin count
        8: 1361:  state->coins = 0;
        -: 1362:
        -: 1363:  //add coins for each Treasure card in player's hand
        8: 1364:  for (i = 0; i < state->handCount[player]; i++)
        -: 1365:    {
    #####: 1366:      if (state->hand[player][i] == copper)
        -: 1367:	{
    #####: 1368:	  state->coins += 1;
        -: 1369:	}
    #####: 1370:      else if (state->hand[player][i] == silver)
        -: 1371:	{
    #####: 1372:	  state->coins += 2;
        -: 1373:	}
    #####: 1374:      else if (state->hand[player][i] == gold)
        -: 1375:	{
    #####: 1376:	  state->coins += 3;
        -: 1377:	}
        -: 1378:    }
        -: 1379:
        -: 1380:  //add bonus
        8: 1381:  state->coins += bonus;
        -: 1382:
        8: 1383:  return 0;
        -: 1384:}
        -: 1385:
        -: 1386:
        -: 1387://end of dominion.c
cardtest2.c:
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
File 'dominion.c'
Lines executed:37.10% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       10:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
        6:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        6:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        6:  209:  if (state->deckCount[player] < 1)
        4:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       72:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       52:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
       12:  311:int numHandCards(struct gameState *state) {
       12:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
     4013:  346:int whoseTurn(struct gameState *state) {
     4013:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
     1002:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
     1002:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      113:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      889:  401:  j = 0;
    23114:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    22225:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     2664:  406:	  j++;
        -:  407:	}
        -:  408:    }
      889:  409:  if ( j >= 3)
        -:  410:    {
      888:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
        6:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        6:  420:  int score = 0;
        -:  421:  //score from hand
       32:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
       26:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
       26:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
       26:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
       26:  427:      if (state->hand[player][i] == province) { score = score + 6; };
       26:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       26:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       10:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
        4:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
        4:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
        4:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
        4:  438:      if (state->discard[player][i] == province) { score = score + 6; };
        4:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
        4:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       10:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
        4:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
        4:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
        4:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
        4:  449:      if (state->deck[player][i] == province) { score = score + 6; };
        4:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
        4:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        6:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    16012:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    16012:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        2:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
        2:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    16010:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    16010:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    16010:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    16010:  576:    state->deckCount[player]--;
    16010:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    16010:  580:  return 0;
        -:  581:}
        -:  582:
       35:  583:int getCost(int cardNumber)
        -:  584:{
       35:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo:
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
        8:  643:  return -1;
        -:  644:}
        -:  645:
     4000:  646:int smithy_card(int handPos, struct gameState *state, int currentPlayer){
        -:  647:  //+3 Cards
        -:  648:  int i;
        -:  649:
    20000:  650:	  for (i = 0; i < 4; i++)	//4 not 3 bug here
        -:  651:	{
    16000:  652:	  drawCard(currentPlayer, state);
        -:  653:	}
        -:  654:
        -:  655:      //discard card from hand
     4000:  656:      discardCard(handPos, currentPlayer, state, 0);
     4000:  657:      return 0;
        -:  658:
        -:  659:}
        1:  660:int adventurer_card(struct gameState *state, int currentPlayer){
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
        1:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
        1:  664:  int z = 0;
        9:  665:  while(drawntreasure<5){	//error, lets you get 5 instead of 2 treasures
        7:  666:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        2:  667:	  shuffle(currentPlayer, state);
        -:  668:	}
        7:  669:	drawCard(currentPlayer, state);
        7:  670:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        7:  671:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        5:  672:	  drawntreasure++;
        -:  673:	else{
        2:  674:	  temphand[z]=cardDrawn;
        2:  675:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2:  676:	  z++;
        -:  677:	}
        -:  678:      }
        4:  679:      while(z-1>=0){
        2:  680:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        2:  681:	z=z-1;
        -:  682:      }
        1:  683:      return 0;
        -:  684:
        -:  685:}
    #####:  686:int baron_card(int choice1, struct gameState *state, int currentPlayer){
    #####:  687:	state->numBuys++;//Increase buys by 1!
    #####:  688:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  689:	int p = 0;//Iterator for hand!
    #####:  690:	int card_not_discarded = 1;//Flag for discard set!
    #####:  691:	while(card_not_discarded){
    #####:  692:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  693:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  694:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  695:	    state->discardCount[currentPlayer]++;
    #####:  696:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  697:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  698:	    }
    #####:  699:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  700:	    state->handCount[currentPlayer]--;
    #####:  701:	    card_not_discarded = 0;//Exit the loop
        -:  702:	  }
    #####:  703:	  else if (p > state->handCount[currentPlayer]){
        -:  704:	    if(DEBUG) {
        -:  705:	      printf("No estate cards in your hand, invalid choice\n");
        -:  706:	      printf("Must gain an estate if there are any\n");
        -:  707:	    }
    #####:  708:	    if (supplyCount(estate, state) > 0){
    #####:  709:	      gainCard(estate, state, 0, currentPlayer);
    #####:  710:	      state->supplyCount[estate]--;//Decrement estates
    #####:  711:	      if (supplyCount(estate, state) == 0){
    #####:  712:		isGameOver(state);
        -:  713:	      }
        -:  714:	    }
    #####:  715:	    card_not_discarded = 0;//Exit the loop
        -:  716:	  }
        -:  717:
        -:  718:	  else{
    #####:  719:	    p++;//Next card
        -:  720:	  }
        -:  721:	}
        -:  722:      }
        -:  723:
        -:  724:      else{
    #####:  725:	if (supplyCount(estate, state) > 0){
    #####:  726:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  727:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  728:	  if (supplyCount(estate, state) == 0){
    #####:  729:	    isGameOver(state);
        -:  730:	  }
        -:  731:	}
        -:  732:      }
        -:  733:
        -:  734:
    #####:  735:      return 0;
        -:  736:
        -:  737:}
    #####:  738:int mine_card(int choice1,int choice2, int handPos, struct gameState *state, int currentPlayer){
        -:  739:	int i;
        -:  740:	int j;
        -:  741:
        -:  742:
    #####:  743:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  744:
    #####:  745:      if (state->hand[currentPlayer][choice1] < copper && state->hand[currentPlayer][choice1] > gold)
        -:  746:	{
    #####:  747:	  return -1;
        -:  748:	}
        -:  749:
    #####:  750:      if (choice2 > treasure_map || choice2 < curse)
        -:  751:	{
    #####:  752:	  return -1;
        -:  753:	}
        -:  754:
    #####:  755:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:
    #####:  760:      gainCard(choice2, state, 2, currentPlayer);
        -:  761:
        -:  762:      //discard card from hand
    #####:  763:      discardCard(handPos, currentPlayer, state, 0);
        -:  764:
        -:  765:
        -:  766:      //discard trashed card
        -:  767:	  //
        -:  768:
    #####:  769:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  770:	{
    #####:  771:	  if (state->hand[currentPlayer][i] == j)
        -:  772:	    {
    #####:  773:	      discardCard(i, currentPlayer, state, 0);
    #####:  774:		  break;
        -:  775:	    }
        -:  776:	}
        -:  777:
        -:  778:
    #####:  779:      return 0;
        -:  780:
        -:  781:}
        -:  782:
        -:  783:
    #####:  784:int council_room_card(struct gameState *state, int handPos, int currentPlayer){
        -:  785:  //+4 Cards
        -:  786:  int i;
        -:  787:
    #####:  788:      for (i = 0; i < 4; i++)
        -:  789:  	  {
    #####:  790:	  drawCard(currentPlayer, state);
        -:  791:	}
        -:  792:
        -:  793:      //+1 Buy
    #####:  794:      state->numBuys++;
        -:  795:
        -:  796:      //Each other player draws a card
    #####:  797:      for (i = 0; i < state->numPlayers; i++)
        -:  798:	{
        -:  799:	 //bug, doesn' t exlude current player for additional draw
    #####:  800:		 if ( i == currentPlayer )// added bug changed not equal to equal
        -:  801:	    {
    #####:  802:	      drawCard(i, state);
        -:  803:	    }
        -:  804:	}
        -:  805:
        -:  806:      //put played card in played card pile
    #####:  807:      discardCard(handPos, currentPlayer, state, 0);
        -:  808:
    #####:  809:      return 0;
        -:  810:
        -:  811:}
        -:  812:
        -:  813:
     4001:  814:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  815:{
        -:  816:  int i;
        -:  817:  int j;
        -:  818:  int k;
        -:  819:  int x;
        -:  820:  int index;
     4001:  821:  int currentPlayer = whoseTurn(state);
     4001:  822:  int nextPlayer = currentPlayer + 1;
        -:  823:
     4001:  824:  int tributeRevealedCards[2] = {-1, -1};
        -:  825:  int temphand[MAX_HAND];// moved above the if statement
        -:  826: // int drawntreasure=0;
        -:  827: // int cardDrawn;
        -:  828:  //int z = 0;// this is the counter for the temp hand
     4001:  829:  if (nextPlayer > (state->numPlayers - 1)){
     4000:  830:    nextPlayer = 0;
        -:  831:  }
        -:  832:
        -:  833:
        -:  834:  //uses switch to select card and perform actions
     4001:  835:  switch( card )
        -:  836:    {
        -:  837:
        -:  838:	//refactored
        -:  839:    case adventurer:
        -:  840:
        1:  841:	return adventurer_card(state, currentPlayer);
        -:  842:
        -:  843:	//refactored
        -:  844:    case council_room:
    #####:  845:    	council_room_card(state, handPos, currentPlayer);
        -:  846:
        -:  847:
        -:  848:    case feast:
        -:  849:      //gain card with cost up to 5
        -:  850:      //Backup hand
    #####:  851:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  852:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  853:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  854:      }
        -:  855:      //Backup hand
        -:  856:
        -:  857:      //Update Coins for Buy
    #####:  858:      updateCoins(currentPlayer, state, 5);
    #####:  859:      x = 1;//Condition to loop on
    #####:  860:      while( x == 1) {//Buy one card
    #####:  861:	if (supplyCount(choice1, state) <= 0){
        -:  862:	  if (DEBUG)
        -:  863:	    printf("None of that card left, sorry!\n");
        -:  864:
        -:  865:	  if (DEBUG){
        -:  866:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  867:	  }
        -:  868:	}
    #####:  869:	else if (state->coins < getCost(choice1)){
    #####:  870:	  printf("That card is too expensive!\n");
        -:  871:
        -:  872:	  if (DEBUG){
        -:  873:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  874:	  }
        -:  875:	}
        -:  876:	else{
        -:  877:
        -:  878:	  if (DEBUG){
        -:  879:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  880:	  }
        -:  881:
    #####:  882:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  883:	  x = 0;//No more buying cards
        -:  884:
        -:  885:	  if (DEBUG){
        -:  886:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  887:	  }
        -:  888:
        -:  889:	}
        -:  890:      }
        -:  891:
        -:  892:      //Reset Hand
    #####:  893:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  894:	state->hand[currentPlayer][i] = temphand[i];
    #####:  895:	temphand[i] = -1;
        -:  896:      }
        -:  897:      //Reset Hand
        -:  898:
    #####:  899:      return 0;
        -:  900:
        -:  901:    case gardens:
    #####:  902:      return -1;
        -:  903:
        -:  904:
        -:  905:
        -:  906:	//refactored
        -:  907:	case mine:
    #####:  908:     	return mine_card(choice1, choice2, handPos, state, currentPlayer);
        -:  909:
        -:  910:
        -:  911:
        -:  912:    case remodel:
    #####:  913:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  914:
    #####:  915:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  916:	{
    #####:  917:	  return -1;
        -:  918:	}
        -:  919:
    #####:  920:      gainCard(choice2, state, 0, currentPlayer);
        -:  921:
        -:  922:      //discard card from hand
    #####:  923:      discardCard(handPos, currentPlayer, state, 0);
        -:  924:
        -:  925:      //discard trashed card
    #####:  926:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  927:	{
    #####:  928:	  if (state->hand[currentPlayer][i] == j)
        -:  929:	    {
    #####:  930:	      discardCard(i, currentPlayer, state, 0);
    #####:  931:	      break;
        -:  932:	    }
        -:  933:	}
        -:  934:
        -:  935:
    #####:  936:      return 0;
        -:  937:
        -:  938:
        -:  939:	  //refactored
        -:  940:    case smithy:
     4000:  941:   		return smithy_card(handPos, state, currentPlayer);
        -:  942:
        -:  943:    case village:
        -:  944:      //+1 Card
    #####:  945:      drawCard(currentPlayer, state);
        -:  946:
        -:  947:      //+2 Actions
    #####:  948:      state->numActions = state->numActions + 2;
        -:  949:
        -:  950:      //discard played card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
    #####:  952:      return 0;
        -:  953:
        -:  954:
        -:  955:	//refactored
        -:  956:    case baron:
    #####:  957:    	return baron_card(choice1, state, currentPlayer);
        -:  958:
        -:  959:    case great_hall:
        -:  960:      //+1 Card
    #####:  961:      drawCard(currentPlayer, state);
        -:  962:
        -:  963:      //+1 Actions
    #####:  964:      state->numActions++;
        -:  965:
        -:  966:      //discard card from hand
    #####:  967:      discardCard(handPos, currentPlayer, state, 0);
    #####:  968:      return 0;
        -:  969:
        -:  970:    case minion:
        -:  971:      //+1 action
    #####:  972:      state->numActions++;
        -:  973:
        -:  974:      //discard card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);
        -:  976:
    #####:  977:      if (choice1)		//+2 coins
        -:  978:	{
    #####:  979:	  state->coins = state->coins + 2;
        -:  980:	}
        -:  981:
    #####:  982:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  983:	{
        -:  984:	  //discard hand
    #####:  985:	  while(numHandCards(state) > 0)
        -:  986:	    {
    #####:  987:	      discardCard(handPos, currentPlayer, state, 0);
        -:  988:	    }
        -:  989:
        -:  990:	  //draw 4
    #####:  991:	  for (i = 0; i < 4; i++)
        -:  992:	    {
    #####:  993:	      drawCard(currentPlayer, state);
        -:  994:	    }
        -:  995:
        -:  996:	  //other players discard hand and redraw if hand size > 4
    #####:  997:	  for (i = 0; i < state->numPlayers; i++)
        -:  998:	    {
    #####:  999:	      if (i != currentPlayer)
        -: 1000:		{
    #####: 1001:		  if ( state->handCount[i] > 4 )
        -: 1002:		    {
        -: 1003:		      //discard hand
    #####: 1004:		      while( state->handCount[i] > 0 )
        -: 1005:			{
    #####: 1006:			  discardCard(handPos, i, state, 0);
        -: 1007:			}
        -: 1008:
        -: 1009:		      //draw 4
    #####: 1010:		      for (j = 0; j < 4; j++)
        -: 1011:			{
    #####: 1012:			  drawCard(i, state);
        -: 1013:			}
        -: 1014:		    }
        -: 1015:		}
        -: 1016:	    }
        -: 1017:
        -: 1018:	}
    #####: 1019:      return 0;
        -: 1020:
        -: 1021:    case steward:
    #####: 1022:      if (choice1 == 1)
        -: 1023:	{
        -: 1024:	  //+2 cards
    #####: 1025:	  drawCard(currentPlayer, state);
    #####: 1026:	  drawCard(currentPlayer, state);
        -: 1027:	}
    #####: 1028:      else if (choice1 == 2)
        -: 1029:	{
        -: 1030:	  //+2 coins
    #####: 1031:	  state->coins = state->coins + 2;
        -: 1032:	}
        -: 1033:      else
        -: 1034:	{
        -: 1035:	  //trash 2 cards in hand
    #####: 1036:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1037:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card from hand
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case tribute:
    #####: 1045:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1046:	if (state->deckCount[nextPlayer] > 0){
    #####: 1047:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	  state->deckCount[nextPlayer]--;
        -: 1049:	}
    #####: 1050:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1051:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1052:	  state->discardCount[nextPlayer]--;
        -: 1053:	}
        -: 1054:	else{
        -: 1055:	  //No Card to Reveal
        -: 1056:	  if (DEBUG){
        -: 1057:	    printf("No cards to reveal\n");
        -: 1058:	  }
        -: 1059:	}
        -: 1060:      }
        -: 1061:
        -: 1062:      else{
    #####: 1063:	if (state->deckCount[nextPlayer] == 0){
    #####: 1064:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1065:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1066:	    state->deckCount[nextPlayer]++;
    #####: 1067:	    state->discard[nextPlayer][i] = -1;
    #####: 1068:	    state->discardCount[nextPlayer]--;
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1072:	}
    #####: 1073:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1074:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1075:	state->deckCount[nextPlayer]--;
    #####: 1076:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1077:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1078:	state->deckCount[nextPlayer]--;
        -: 1079:      }
        -: 1080:
    #####: 1081:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1082:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1083:	state->playedCardCount++;
    #####: 1084:	tributeRevealedCards[1] = -1;
        -: 1085:      }
        -: 1086:
    #####: 1087:      for (i = 0; i <= 2; i ++){
    #####: 1088:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1089:	  state->coins += 2;
        -: 1090:	}
        -: 1091:
    #####: 1092:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1093:	  drawCard(currentPlayer, state);
    #####: 1094:	  drawCard(currentPlayer, state);
        -: 1095:	}
        -: 1096:	else{//Action Card
    #####: 1097:	  state->numActions = state->numActions + 2;
        -: 1098:	}
        -: 1099:      }
        -: 1100:
    #####: 1101:      return 0;
        -: 1102:
        -: 1103:    case ambassador:
    #####: 1104:      j = 0;		//used to check if player has enough cards to discard
        -: 1105:
    #####: 1106:      if (choice2 > 2 || choice2 < 0)
        -: 1107:	{
    #####: 1108:	  return -1;
        -: 1109:	}
        -: 1110:
    #####: 1111:      if (choice1 == handPos)
        -: 1112:	{
    #####: 1113:	  return -1;
        -: 1114:	}
        -: 1115:
    #####: 1116:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1117:	{
    #####: 1118:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1119:	    {
    #####: 1120:	      j++;
        -: 1121:	    }
        -: 1122:	}
    #####: 1123:      if (j < choice2)
        -: 1124:	{
    #####: 1125:	  return -1;
        -: 1126:	}
        -: 1127:
        -: 1128:      if (DEBUG)
        -: 1129:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1130:
        -: 1131:      //increase supply count for choosen card by amount being discarded
    #####: 1132:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1133:
        -: 1134:      //each other player gains a copy of revealed card
    #####: 1135:      for (i = 0; i < state->numPlayers; i++)
        -: 1136:	{
    #####: 1137:	  if (i != currentPlayer)
        -: 1138:	    {
    #####: 1139:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1140:	    }
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
        -: 1146:      //trash copies of cards returned to supply
    #####: 1147:      for (j = 0; j < choice2; j++)
        -: 1148:	{
    #####: 1149:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1150:	    {
    #####: 1151:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1152:		{
    #####: 1153:		  discardCard(i, currentPlayer, state, 1);
    #####: 1154:		  break;
        -: 1155:		}
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
    #####: 1159:      return 0;
        -: 1160:
        -: 1161:    case cutpurse:
        -: 1162:
    #####: 1163:      updateCoins(currentPlayer, state, 2);
    #####: 1164:      for (i = 0; i < state->numPlayers; i++)
        -: 1165:	{
    #####: 1166:	  if (i != currentPlayer)
        -: 1167:	    {
    #####: 1168:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1169:		{
    #####: 1170:		  if (state->hand[i][j] == copper)
        -: 1171:		    {
    #####: 1172:		      discardCard(j, i, state, 0);
    #####: 1173:		      break;
        -: 1174:		    }
    #####: 1175:		  if (j == state->handCount[i])
        -: 1176:		    {
    #####: 1177:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1178:			{
        -: 1179:			  if (DEBUG)
        -: 1180:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1181:			}
    #####: 1182:		      break;
        -: 1183:		    }
        -: 1184:		}
        -: 1185:
        -: 1186:	    }
        -: 1187:
        -: 1188:	}
        -: 1189:
        -: 1190:      //discard played card from hand
    #####: 1191:      discardCard(handPos, currentPlayer, state, 0);
        -: 1192:
    #####: 1193:      return 0;
        -: 1194:
        -: 1195:
        -: 1196:    case embargo:
        -: 1197:      //+2 Coins
    #####: 1198:      state->coins = state->coins + 2;
        -: 1199:
        -: 1200:      //see if selected pile is in play
    #####: 1201:      if ( state->supplyCount[choice1] == -1 )
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
        -: 1206:      //add embargo token to selected supply pile
    #####: 1207:      state->embargoTokens[choice1]++;
        -: 1208:
        -: 1209:      //trash card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1211:      return 0;
        -: 1212:
        -: 1213:    case outpost:
        -: 1214:      //set outpost flag
    #####: 1215:      state->outpostPlayed++;
        -: 1216:
        -: 1217:      //discard card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1219:      return 0;
        -: 1220:
        -: 1221:    case salvager:
        -: 1222:      //+1 buy
    #####: 1223:      state->numBuys++;
        -: 1224:
    #####: 1225:      if (choice1)
        -: 1226:	{
        -: 1227:	  //gain coins equal to trashed card
    #####: 1228:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1229:	  //trash card
    #####: 1230:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1231:	}
        -: 1232:
        -: 1233:      //discard card
    #####: 1234:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1235:      return 0;
        -: 1236:
        -: 1237:    case sea_hag:
    #####: 1238:      for (i = 0; i < state->numPlayers; i++){
    #####: 1239:	if (i != currentPlayer){
    #####: 1240:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1241:	  state->discardCount[i]++;
    #####: 1242:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1243:	}
        -: 1244:      }
    #####: 1245:      return 0;
        -: 1246:
        -: 1247:    case treasure_map:
        -: 1248:      //search hand for another treasure_map
    #####: 1249:      index = -1;
    #####: 1250:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1251:	{
    #####: 1252:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1253:	    {
    #####: 1254:	      index = i;
    #####: 1255:	      break;
        -: 1256:	    }
        -: 1257:	}
    #####: 1258:      if (index > -1)
        -: 1259:	{
        -: 1260:	  //trash both treasure cards
    #####: 1261:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1262:	  discardCard(index, currentPlayer, state, 1);
        -: 1263:
        -: 1264:	  //gain 4 Gold cards
    #####: 1265:	  for (i = 0; i < 4; i++)
        -: 1266:	    {
    #####: 1267:	      gainCard(gold, state, 1, currentPlayer);
        -: 1268:	    }
        -: 1269:
        -: 1270:	  //return success
    #####: 1271:	  return 1;
        -: 1272:	}
        -: 1273:
        -: 1274:      //no second treasure_map found in hand
    #####: 1275:      return -1;
        -: 1276:    }
        -: 1277:
    #####: 1278:  return -1;
        -: 1279:}
        -: 1280:
     4000: 1281:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1282:{
        -: 1283:
        -: 1284:  //if card is not trashed, added to Played pile
     4000: 1285:  if (trashFlag < 1)
        -: 1286:    {
        -: 1287:      //add card to played pile
     4000: 1288:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     4000: 1289:      state->playedCardCount++;
        -: 1290:    }
        -: 1291:
        -: 1292:  //set played card to -1
     4000: 1293:  state->hand[currentPlayer][handPos] = -1;
        -: 1294:
        -: 1295:  //remove card from player's hand
     4000: 1296:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1297:    {
        -: 1298:      //reduce number of cards in hand
    #####: 1299:      state->handCount[currentPlayer]--;
        -: 1300:    }
     4000: 1301:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1302:    {
        -: 1303:      //reduce number of cards in hand
    #####: 1304:      state->handCount[currentPlayer]--;
        -: 1305:    }
        -: 1306:  else
        -: 1307:    {
        -: 1308:      //replace discarded card with last card in hand
     4000: 1309:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1310:      //set last card to -1
     4000: 1311:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1312:      //reduce number of cards in hand
     4000: 1313:      state->handCount[currentPlayer]--;
        -: 1314:    }
        -: 1315:
     4000: 1316:  return 0;
        -: 1317:}
        -: 1318:
    #####: 1319:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1320:{
        -: 1321:  //Note: supplyPos is enum of choosen card
        -: 1322:
        -: 1323:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1324:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1325:    {
    #####: 1326:      return -1;
        -: 1327:    }
        -: 1328:
        -: 1329:  //added card for [whoseTurn] current player:
        -: 1330:  // toFlag = 0 : add to discard
        -: 1331:  // toFlag = 1 : add to deck
        -: 1332:  // toFlag = 2 : add to hand
        -: 1333:
    #####: 1334:  if (toFlag == 1)
        -: 1335:    {
    #####: 1336:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1337:      state->deckCount[player]++;
        -: 1338:    }
    #####: 1339:  else if (toFlag == 2)
        -: 1340:    {
    #####: 1341:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1342:      state->handCount[player]++;
        -: 1343:    }
        -: 1344:  else
        -: 1345:    {
    #####: 1346:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1347:      state->discardCount[player]++;
        -: 1348:    }
        -: 1349:
        -: 1350:  //decrease number in supply pile
    #####: 1351:  state->supplyCount[supplyPos]--;
        -: 1352:
    #####: 1353:  return 0;
        -: 1354:}
        -: 1355:
        9: 1356:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1357:{
        -: 1358:  int i;
        -: 1359:
        -: 1360:  //reset coin count
        9: 1361:  state->coins = 0;
        -: 1362:
        -: 1363:  //add coins for each Treasure card in player's hand
       14: 1364:  for (i = 0; i < state->handCount[player]; i++)
        -: 1365:    {
        5: 1366:      if (state->hand[player][i] == copper)
        -: 1367:	{
        4: 1368:	  state->coins += 1;
        -: 1369:	}
        1: 1370:      else if (state->hand[player][i] == silver)
        -: 1371:	{
    #####: 1372:	  state->coins += 2;
        -: 1373:	}
        1: 1374:      else if (state->hand[player][i] == gold)
        -: 1375:	{
    #####: 1376:	  state->coins += 3;
        -: 1377:	}
        -: 1378:    }
        -: 1379:
        -: 1380:  //add bonus
        9: 1381:  state->coins += bonus;
        -: 1382:
        9: 1383:  return 0;
        -: 1384:}
        -: 1385:
        -: 1386:
        -: 1387://end of dominion.c
cardtest4.c:
All tests passed! Returned fine and a new card was added and old was removed. Number of actions also right.
File 'dominion.c'
Lines executed:37.99% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       10:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
        6:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        6:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        6:  209:  if (state->deckCount[player] < 1)
        4:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       72:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       52:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
       12:  311:int numHandCards(struct gameState *state) {
       12:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
     6013:  346:int whoseTurn(struct gameState *state) {
     6013:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
     1002:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
     1002:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      113:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      889:  401:  j = 0;
    23114:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    22225:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     2664:  406:	  j++;
        -:  407:	}
        -:  408:    }
      889:  409:  if ( j >= 3)
        -:  410:    {
      888:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
        6:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        6:  420:  int score = 0;
        -:  421:  //score from hand
       32:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
       26:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
       26:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
       26:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
       26:  427:      if (state->hand[player][i] == province) { score = score + 6; };
       26:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       26:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       10:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
        4:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
        4:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
        4:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
        4:  438:      if (state->discard[player][i] == province) { score = score + 6; };
        4:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
        4:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       10:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
        4:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
        4:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
        4:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
        4:  449:      if (state->deck[player][i] == province) { score = score + 6; };
        4:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
        4:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        6:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    18012:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    18012:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        2:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
        2:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    18010:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    18010:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    18010:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    18010:  576:    state->deckCount[player]--;
    18010:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    18010:  580:  return 0;
        -:  581:}
        -:  582:
       35:  583:int getCost(int cardNumber)
        -:  584:{
       35:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo:
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
        8:  643:  return -1;
        -:  644:}
        -:  645:
     4000:  646:int smithy_card(int handPos, struct gameState *state, int currentPlayer){
        -:  647:  //+3 Cards
        -:  648:  int i;
        -:  649:
    20000:  650:	  for (i = 0; i < 4; i++)	//4 not 3 bug here
        -:  651:	{
    16000:  652:	  drawCard(currentPlayer, state);
        -:  653:	}
        -:  654:
        -:  655:      //discard card from hand
     4000:  656:      discardCard(handPos, currentPlayer, state, 0);
     4000:  657:      return 0;
        -:  658:
        -:  659:}
        1:  660:int adventurer_card(struct gameState *state, int currentPlayer){
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
        1:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
        1:  664:  int z = 0;
        9:  665:  while(drawntreasure<5){	//error, lets you get 5 instead of 2 treasures
        7:  666:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        2:  667:	  shuffle(currentPlayer, state);
        -:  668:	}
        7:  669:	drawCard(currentPlayer, state);
        7:  670:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        7:  671:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        5:  672:	  drawntreasure++;
        -:  673:	else{
        2:  674:	  temphand[z]=cardDrawn;
        2:  675:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2:  676:	  z++;
        -:  677:	}
        -:  678:      }
        4:  679:      while(z-1>=0){
        2:  680:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        2:  681:	z=z-1;
        -:  682:      }
        1:  683:      return 0;
        -:  684:
        -:  685:}
    #####:  686:int baron_card(int choice1, struct gameState *state, int currentPlayer){
    #####:  687:	state->numBuys++;//Increase buys by 1!
    #####:  688:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  689:	int p = 0;//Iterator for hand!
    #####:  690:	int card_not_discarded = 1;//Flag for discard set!
    #####:  691:	while(card_not_discarded){
    #####:  692:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  693:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  694:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  695:	    state->discardCount[currentPlayer]++;
    #####:  696:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  697:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  698:	    }
    #####:  699:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  700:	    state->handCount[currentPlayer]--;
    #####:  701:	    card_not_discarded = 0;//Exit the loop
        -:  702:	  }
    #####:  703:	  else if (p > state->handCount[currentPlayer]){
        -:  704:	    if(DEBUG) {
        -:  705:	      printf("No estate cards in your hand, invalid choice\n");
        -:  706:	      printf("Must gain an estate if there are any\n");
        -:  707:	    }
    #####:  708:	    if (supplyCount(estate, state) > 0){
    #####:  709:	      gainCard(estate, state, 0, currentPlayer);
    #####:  710:	      state->supplyCount[estate]--;//Decrement estates
    #####:  711:	      if (supplyCount(estate, state) == 0){
    #####:  712:		isGameOver(state);
        -:  713:	      }
        -:  714:	    }
    #####:  715:	    card_not_discarded = 0;//Exit the loop
        -:  716:	  }
        -:  717:
        -:  718:	  else{
    #####:  719:	    p++;//Next card
        -:  720:	  }
        -:  721:	}
        -:  722:      }
        -:  723:
        -:  724:      else{
    #####:  725:	if (supplyCount(estate, state) > 0){
    #####:  726:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  727:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  728:	  if (supplyCount(estate, state) == 0){
    #####:  729:	    isGameOver(state);
        -:  730:	  }
        -:  731:	}
        -:  732:      }
        -:  733:
        -:  734:
    #####:  735:      return 0;
        -:  736:
        -:  737:}
    #####:  738:int mine_card(int choice1,int choice2, int handPos, struct gameState *state, int currentPlayer){
        -:  739:	int i;
        -:  740:	int j;
        -:  741:
        -:  742:
    #####:  743:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  744:
    #####:  745:      if (state->hand[currentPlayer][choice1] < copper && state->hand[currentPlayer][choice1] > gold)
        -:  746:	{
    #####:  747:	  return -1;
        -:  748:	}
        -:  749:
    #####:  750:      if (choice2 > treasure_map || choice2 < curse)
        -:  751:	{
    #####:  752:	  return -1;
        -:  753:	}
        -:  754:
    #####:  755:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:
    #####:  760:      gainCard(choice2, state, 2, currentPlayer);
        -:  761:
        -:  762:      //discard card from hand
    #####:  763:      discardCard(handPos, currentPlayer, state, 0);
        -:  764:
        -:  765:
        -:  766:      //discard trashed card
        -:  767:	  //
        -:  768:
    #####:  769:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  770:	{
    #####:  771:	  if (state->hand[currentPlayer][i] == j)
        -:  772:	    {
    #####:  773:	      discardCard(i, currentPlayer, state, 0);
    #####:  774:		  break;
        -:  775:	    }
        -:  776:	}
        -:  777:
        -:  778:
    #####:  779:      return 0;
        -:  780:
        -:  781:}
        -:  782:
        -:  783:
    #####:  784:int council_room_card(struct gameState *state, int handPos, int currentPlayer){
        -:  785:  //+4 Cards
        -:  786:  int i;
        -:  787:
    #####:  788:      for (i = 0; i < 4; i++)
        -:  789:  	  {
    #####:  790:	  drawCard(currentPlayer, state);
        -:  791:	}
        -:  792:
        -:  793:      //+1 Buy
    #####:  794:      state->numBuys++;
        -:  795:
        -:  796:      //Each other player draws a card
    #####:  797:      for (i = 0; i < state->numPlayers; i++)
        -:  798:	{
        -:  799:	 //bug, doesn' t exlude current player for additional draw
    #####:  800:		 if ( i == currentPlayer )// added bug changed not equal to equal
        -:  801:	    {
    #####:  802:	      drawCard(i, state);
        -:  803:	    }
        -:  804:	}
        -:  805:
        -:  806:      //put played card in played card pile
    #####:  807:      discardCard(handPos, currentPlayer, state, 0);
        -:  808:
    #####:  809:      return 0;
        -:  810:
        -:  811:}
        -:  812:
        -:  813:
     6001:  814:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  815:{
        -:  816:  int i;
        -:  817:  int j;
        -:  818:  int k;
        -:  819:  int x;
        -:  820:  int index;
     6001:  821:  int currentPlayer = whoseTurn(state);
     6001:  822:  int nextPlayer = currentPlayer + 1;
        -:  823:
     6001:  824:  int tributeRevealedCards[2] = {-1, -1};
        -:  825:  int temphand[MAX_HAND];// moved above the if statement
        -:  826: // int drawntreasure=0;
        -:  827: // int cardDrawn;
        -:  828:  //int z = 0;// this is the counter for the temp hand
     6001:  829:  if (nextPlayer > (state->numPlayers - 1)){
     4000:  830:    nextPlayer = 0;
        -:  831:  }
        -:  832:
        -:  833:
        -:  834:  //uses switch to select card and perform actions
     6001:  835:  switch( card )
        -:  836:    {
        -:  837:
        -:  838:	//refactored
        -:  839:    case adventurer:
        -:  840:
        1:  841:	return adventurer_card(state, currentPlayer);
        -:  842:
        -:  843:	//refactored
        -:  844:    case council_room:
    #####:  845:    	council_room_card(state, handPos, currentPlayer);
        -:  846:
        -:  847:
        -:  848:    case feast:
        -:  849:      //gain card with cost up to 5
        -:  850:      //Backup hand
    #####:  851:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  852:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  853:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  854:      }
        -:  855:      //Backup hand
        -:  856:
        -:  857:      //Update Coins for Buy
    #####:  858:      updateCoins(currentPlayer, state, 5);
    #####:  859:      x = 1;//Condition to loop on
    #####:  860:      while( x == 1) {//Buy one card
    #####:  861:	if (supplyCount(choice1, state) <= 0){
        -:  862:	  if (DEBUG)
        -:  863:	    printf("None of that card left, sorry!\n");
        -:  864:
        -:  865:	  if (DEBUG){
        -:  866:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  867:	  }
        -:  868:	}
    #####:  869:	else if (state->coins < getCost(choice1)){
    #####:  870:	  printf("That card is too expensive!\n");
        -:  871:
        -:  872:	  if (DEBUG){
        -:  873:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  874:	  }
        -:  875:	}
        -:  876:	else{
        -:  877:
        -:  878:	  if (DEBUG){
        -:  879:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  880:	  }
        -:  881:
    #####:  882:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  883:	  x = 0;//No more buying cards
        -:  884:
        -:  885:	  if (DEBUG){
        -:  886:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  887:	  }
        -:  888:
        -:  889:	}
        -:  890:      }
        -:  891:
        -:  892:      //Reset Hand
    #####:  893:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  894:	state->hand[currentPlayer][i] = temphand[i];
    #####:  895:	temphand[i] = -1;
        -:  896:      }
        -:  897:      //Reset Hand
        -:  898:
    #####:  899:      return 0;
        -:  900:
        -:  901:    case gardens:
    #####:  902:      return -1;
        -:  903:
        -:  904:
        -:  905:
        -:  906:	//refactored
        -:  907:	case mine:
    #####:  908:     	return mine_card(choice1, choice2, handPos, state, currentPlayer);
        -:  909:
        -:  910:
        -:  911:
        -:  912:    case remodel:
    #####:  913:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  914:
    #####:  915:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  916:	{
    #####:  917:	  return -1;
        -:  918:	}
        -:  919:
    #####:  920:      gainCard(choice2, state, 0, currentPlayer);
        -:  921:
        -:  922:      //discard card from hand
    #####:  923:      discardCard(handPos, currentPlayer, state, 0);
        -:  924:
        -:  925:      //discard trashed card
    #####:  926:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  927:	{
    #####:  928:	  if (state->hand[currentPlayer][i] == j)
        -:  929:	    {
    #####:  930:	      discardCard(i, currentPlayer, state, 0);
    #####:  931:	      break;
        -:  932:	    }
        -:  933:	}
        -:  934:
        -:  935:
    #####:  936:      return 0;
        -:  937:
        -:  938:
        -:  939:	  //refactored
        -:  940:    case smithy:
     4000:  941:   		return smithy_card(handPos, state, currentPlayer);
        -:  942:
        -:  943:    case village:
        -:  944:      //+1 Card
    #####:  945:      drawCard(currentPlayer, state);
        -:  946:
        -:  947:      //+2 Actions
    #####:  948:      state->numActions = state->numActions + 2;
        -:  949:
        -:  950:      //discard played card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
    #####:  952:      return 0;
        -:  953:
        -:  954:
        -:  955:	//refactored
        -:  956:    case baron:
    #####:  957:    	return baron_card(choice1, state, currentPlayer);
        -:  958:
        -:  959:    case great_hall:
        -:  960:      //+1 Card
     2000:  961:      drawCard(currentPlayer, state);
        -:  962:
        -:  963:      //+1 Actions
     2000:  964:      state->numActions++;
        -:  965:
        -:  966:      //discard card from hand
     2000:  967:      discardCard(handPos, currentPlayer, state, 0);
     2000:  968:      return 0;
        -:  969:
        -:  970:    case minion:
        -:  971:      //+1 action
    #####:  972:      state->numActions++;
        -:  973:
        -:  974:      //discard card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);
        -:  976:
    #####:  977:      if (choice1)		//+2 coins
        -:  978:	{
    #####:  979:	  state->coins = state->coins + 2;
        -:  980:	}
        -:  981:
    #####:  982:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  983:	{
        -:  984:	  //discard hand
    #####:  985:	  while(numHandCards(state) > 0)
        -:  986:	    {
    #####:  987:	      discardCard(handPos, currentPlayer, state, 0);
        -:  988:	    }
        -:  989:
        -:  990:	  //draw 4
    #####:  991:	  for (i = 0; i < 4; i++)
        -:  992:	    {
    #####:  993:	      drawCard(currentPlayer, state);
        -:  994:	    }
        -:  995:
        -:  996:	  //other players discard hand and redraw if hand size > 4
    #####:  997:	  for (i = 0; i < state->numPlayers; i++)
        -:  998:	    {
    #####:  999:	      if (i != currentPlayer)
        -: 1000:		{
    #####: 1001:		  if ( state->handCount[i] > 4 )
        -: 1002:		    {
        -: 1003:		      //discard hand
    #####: 1004:		      while( state->handCount[i] > 0 )
        -: 1005:			{
    #####: 1006:			  discardCard(handPos, i, state, 0);
        -: 1007:			}
        -: 1008:
        -: 1009:		      //draw 4
    #####: 1010:		      for (j = 0; j < 4; j++)
        -: 1011:			{
    #####: 1012:			  drawCard(i, state);
        -: 1013:			}
        -: 1014:		    }
        -: 1015:		}
        -: 1016:	    }
        -: 1017:
        -: 1018:	}
    #####: 1019:      return 0;
        -: 1020:
        -: 1021:    case steward:
    #####: 1022:      if (choice1 == 1)
        -: 1023:	{
        -: 1024:	  //+2 cards
    #####: 1025:	  drawCard(currentPlayer, state);
    #####: 1026:	  drawCard(currentPlayer, state);
        -: 1027:	}
    #####: 1028:      else if (choice1 == 2)
        -: 1029:	{
        -: 1030:	  //+2 coins
    #####: 1031:	  state->coins = state->coins + 2;
        -: 1032:	}
        -: 1033:      else
        -: 1034:	{
        -: 1035:	  //trash 2 cards in hand
    #####: 1036:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1037:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card from hand
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case tribute:
    #####: 1045:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1046:	if (state->deckCount[nextPlayer] > 0){
    #####: 1047:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	  state->deckCount[nextPlayer]--;
        -: 1049:	}
    #####: 1050:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1051:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1052:	  state->discardCount[nextPlayer]--;
        -: 1053:	}
        -: 1054:	else{
        -: 1055:	  //No Card to Reveal
        -: 1056:	  if (DEBUG){
        -: 1057:	    printf("No cards to reveal\n");
        -: 1058:	  }
        -: 1059:	}
        -: 1060:      }
        -: 1061:
        -: 1062:      else{
    #####: 1063:	if (state->deckCount[nextPlayer] == 0){
    #####: 1064:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1065:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1066:	    state->deckCount[nextPlayer]++;
    #####: 1067:	    state->discard[nextPlayer][i] = -1;
    #####: 1068:	    state->discardCount[nextPlayer]--;
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1072:	}
    #####: 1073:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1074:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1075:	state->deckCount[nextPlayer]--;
    #####: 1076:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1077:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1078:	state->deckCount[nextPlayer]--;
        -: 1079:      }
        -: 1080:
    #####: 1081:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1082:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1083:	state->playedCardCount++;
    #####: 1084:	tributeRevealedCards[1] = -1;
        -: 1085:      }
        -: 1086:
    #####: 1087:      for (i = 0; i <= 2; i ++){
    #####: 1088:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1089:	  state->coins += 2;
        -: 1090:	}
        -: 1091:
    #####: 1092:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1093:	  drawCard(currentPlayer, state);
    #####: 1094:	  drawCard(currentPlayer, state);
        -: 1095:	}
        -: 1096:	else{//Action Card
    #####: 1097:	  state->numActions = state->numActions + 2;
        -: 1098:	}
        -: 1099:      }
        -: 1100:
    #####: 1101:      return 0;
        -: 1102:
        -: 1103:    case ambassador:
    #####: 1104:      j = 0;		//used to check if player has enough cards to discard
        -: 1105:
    #####: 1106:      if (choice2 > 2 || choice2 < 0)
        -: 1107:	{
    #####: 1108:	  return -1;
        -: 1109:	}
        -: 1110:
    #####: 1111:      if (choice1 == handPos)
        -: 1112:	{
    #####: 1113:	  return -1;
        -: 1114:	}
        -: 1115:
    #####: 1116:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1117:	{
    #####: 1118:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1119:	    {
    #####: 1120:	      j++;
        -: 1121:	    }
        -: 1122:	}
    #####: 1123:      if (j < choice2)
        -: 1124:	{
    #####: 1125:	  return -1;
        -: 1126:	}
        -: 1127:
        -: 1128:      if (DEBUG)
        -: 1129:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1130:
        -: 1131:      //increase supply count for choosen card by amount being discarded
    #####: 1132:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1133:
        -: 1134:      //each other player gains a copy of revealed card
    #####: 1135:      for (i = 0; i < state->numPlayers; i++)
        -: 1136:	{
    #####: 1137:	  if (i != currentPlayer)
        -: 1138:	    {
    #####: 1139:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1140:	    }
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
        -: 1146:      //trash copies of cards returned to supply
    #####: 1147:      for (j = 0; j < choice2; j++)
        -: 1148:	{
    #####: 1149:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1150:	    {
    #####: 1151:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1152:		{
    #####: 1153:		  discardCard(i, currentPlayer, state, 1);
    #####: 1154:		  break;
        -: 1155:		}
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
    #####: 1159:      return 0;
        -: 1160:
        -: 1161:    case cutpurse:
        -: 1162:
    #####: 1163:      updateCoins(currentPlayer, state, 2);
    #####: 1164:      for (i = 0; i < state->numPlayers; i++)
        -: 1165:	{
    #####: 1166:	  if (i != currentPlayer)
        -: 1167:	    {
    #####: 1168:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1169:		{
    #####: 1170:		  if (state->hand[i][j] == copper)
        -: 1171:		    {
    #####: 1172:		      discardCard(j, i, state, 0);
    #####: 1173:		      break;
        -: 1174:		    }
    #####: 1175:		  if (j == state->handCount[i])
        -: 1176:		    {
    #####: 1177:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1178:			{
        -: 1179:			  if (DEBUG)
        -: 1180:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1181:			}
    #####: 1182:		      break;
        -: 1183:		    }
        -: 1184:		}
        -: 1185:
        -: 1186:	    }
        -: 1187:
        -: 1188:	}
        -: 1189:
        -: 1190:      //discard played card from hand
    #####: 1191:      discardCard(handPos, currentPlayer, state, 0);
        -: 1192:
    #####: 1193:      return 0;
        -: 1194:
        -: 1195:
        -: 1196:    case embargo:
        -: 1197:      //+2 Coins
    #####: 1198:      state->coins = state->coins + 2;
        -: 1199:
        -: 1200:      //see if selected pile is in play
    #####: 1201:      if ( state->supplyCount[choice1] == -1 )
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
        -: 1206:      //add embargo token to selected supply pile
    #####: 1207:      state->embargoTokens[choice1]++;
        -: 1208:
        -: 1209:      //trash card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1211:      return 0;
        -: 1212:
        -: 1213:    case outpost:
        -: 1214:      //set outpost flag
    #####: 1215:      state->outpostPlayed++;
        -: 1216:
        -: 1217:      //discard card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1219:      return 0;
        -: 1220:
        -: 1221:    case salvager:
        -: 1222:      //+1 buy
    #####: 1223:      state->numBuys++;
        -: 1224:
    #####: 1225:      if (choice1)
        -: 1226:	{
        -: 1227:	  //gain coins equal to trashed card
    #####: 1228:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1229:	  //trash card
    #####: 1230:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1231:	}
        -: 1232:
        -: 1233:      //discard card
    #####: 1234:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1235:      return 0;
        -: 1236:
        -: 1237:    case sea_hag:
    #####: 1238:      for (i = 0; i < state->numPlayers; i++){
    #####: 1239:	if (i != currentPlayer){
    #####: 1240:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1241:	  state->discardCount[i]++;
    #####: 1242:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1243:	}
        -: 1244:      }
    #####: 1245:      return 0;
        -: 1246:
        -: 1247:    case treasure_map:
        -: 1248:      //search hand for another treasure_map
    #####: 1249:      index = -1;
    #####: 1250:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1251:	{
    #####: 1252:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1253:	    {
    #####: 1254:	      index = i;
    #####: 1255:	      break;
        -: 1256:	    }
        -: 1257:	}
    #####: 1258:      if (index > -1)
        -: 1259:	{
        -: 1260:	  //trash both treasure cards
    #####: 1261:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1262:	  discardCard(index, currentPlayer, state, 1);
        -: 1263:
        -: 1264:	  //gain 4 Gold cards
    #####: 1265:	  for (i = 0; i < 4; i++)
        -: 1266:	    {
    #####: 1267:	      gainCard(gold, state, 1, currentPlayer);
        -: 1268:	    }
        -: 1269:
        -: 1270:	  //return success
    #####: 1271:	  return 1;
        -: 1272:	}
        -: 1273:
        -: 1274:      //no second treasure_map found in hand
    #####: 1275:      return -1;
        -: 1276:    }
        -: 1277:
    #####: 1278:  return -1;
        -: 1279:}
        -: 1280:
     6000: 1281:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1282:{
        -: 1283:
        -: 1284:  //if card is not trashed, added to Played pile
     6000: 1285:  if (trashFlag < 1)
        -: 1286:    {
        -: 1287:      //add card to played pile
     6000: 1288:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     6000: 1289:      state->playedCardCount++;
        -: 1290:    }
        -: 1291:
        -: 1292:  //set played card to -1
     6000: 1293:  state->hand[currentPlayer][handPos] = -1;
        -: 1294:
        -: 1295:  //remove card from player's hand
     6000: 1296:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1297:    {
        -: 1298:      //reduce number of cards in hand
        2: 1299:      state->handCount[currentPlayer]--;
        -: 1300:    }
     5998: 1301:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1302:    {
        -: 1303:      //reduce number of cards in hand
    #####: 1304:      state->handCount[currentPlayer]--;
        -: 1305:    }
        -: 1306:  else
        -: 1307:    {
        -: 1308:      //replace discarded card with last card in hand
     5998: 1309:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1310:      //set last card to -1
     5998: 1311:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1312:      //reduce number of cards in hand
     5998: 1313:      state->handCount[currentPlayer]--;
        -: 1314:    }
        -: 1315:
     6000: 1316:  return 0;
        -: 1317:}
        -: 1318:
    #####: 1319:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1320:{
        -: 1321:  //Note: supplyPos is enum of choosen card
        -: 1322:
        -: 1323:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1324:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1325:    {
    #####: 1326:      return -1;
        -: 1327:    }
        -: 1328:
        -: 1329:  //added card for [whoseTurn] current player:
        -: 1330:  // toFlag = 0 : add to discard
        -: 1331:  // toFlag = 1 : add to deck
        -: 1332:  // toFlag = 2 : add to hand
        -: 1333:
    #####: 1334:  if (toFlag == 1)
        -: 1335:    {
    #####: 1336:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1337:      state->deckCount[player]++;
        -: 1338:    }
    #####: 1339:  else if (toFlag == 2)
        -: 1340:    {
    #####: 1341:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1342:      state->handCount[player]++;
        -: 1343:    }
        -: 1344:  else
        -: 1345:    {
    #####: 1346:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1347:      state->discardCount[player]++;
        -: 1348:    }
        -: 1349:
        -: 1350:  //decrease number in supply pile
    #####: 1351:  state->supplyCount[supplyPos]--;
        -: 1352:
    #####: 1353:  return 0;
        -: 1354:}
        -: 1355:
        9: 1356:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1357:{
        -: 1358:  int i;
        -: 1359:
        -: 1360:  //reset coin count
        9: 1361:  state->coins = 0;
        -: 1362:
        -: 1363:  //add coins for each Treasure card in player's hand
       14: 1364:  for (i = 0; i < state->handCount[player]; i++)
        -: 1365:    {
        5: 1366:      if (state->hand[player][i] == copper)
        -: 1367:	{
        4: 1368:	  state->coins += 1;
        -: 1369:	}
        1: 1370:      else if (state->hand[player][i] == silver)
        -: 1371:	{
    #####: 1372:	  state->coins += 2;
        -: 1373:	}
        1: 1374:      else if (state->hand[player][i] == gold)
        -: 1375:	{
    #####: 1376:	  state->coins += 3;
        -: 1377:	}
        -: 1378:    }
        -: 1379:
        -: 1380:  //add bonus
        9: 1381:  state->coins += bonus;
        -: 1382:
        9: 1383:  return 0;
        -: 1384:}
        -: 1385:
        -: 1386:
        -: 1387://end of dominion.c
randomtestadventurer.c:
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 4
FAIL: Score after playing adventurer was not correct. Expected 0, got 1
FAIL: Hand count after playing adventurer was not correct. Expected 6, got 8
FAIL: Deck count after playing adventurer was not correct. Expected 3, got 0
FAIL: Score after playing adventurer was not correct. Expected 1, got 4
FAIL: Hand count after playing adventurer was not correct. Expected 1, got 5
FAIL: Deck count after playing adventurer was not correct. Expected 8, got 2
FAIL: Score after playing adventurer was not correct. Expected 0, got 3
File 'dominion.c'
Lines executed:39.07% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    19800:    8:int compare(const void* a, const void* b) {
    19800:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    19800:   11:  if (*(int*)a < *(int*)b)
     5280:   12:    return -1;
    14520:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     1001:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
     1001:   44:  SelectStream(1);
     1001:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
     1001:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
      475:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      526:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     5786:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    57860:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    52600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      526:   73:  if (numPlayers == 2)
        -:   74:    {
      258:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      268:   77:  else if (numPlayers == 3)
        -:   78:    {
      268:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      526:   87:  if (numPlayers == 2)
        -:   88:    {
      258:   89:      state->supplyCount[estate] = 8;
      258:   90:      state->supplyCount[duchy] = 8;
      258:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      268:   95:      state->supplyCount[estate] = 12;
      268:   96:      state->supplyCount[duchy] = 12;
      268:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      526:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      526:  102:  state->supplyCount[silver] = 40;
      526:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    11046:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    86790:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    81530:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     5260:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     5260:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     5260:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    76270:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1846:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1320:  140:      state->deckCount[i] = 0;
     5280:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     3960:  143:	  state->deck[i][j] = estate;
     3960:  144:	  state->deckCount[i]++;
        -:  145:	}
    10560:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     9240:  148:	  state->deck[i][j] = copper;
     9240:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1846:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1320:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1846:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
     1320:  166:      state->handCount[i] = 0;
     1320:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    14728:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    14202:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      526:  182:  state->outpostPlayed = 0;
      526:  183:  state->phase = 0;
      526:  184:  state->numActions = 1;
      526:  185:  state->numBuys = 1;
      526:  186:  state->playedCardCount = 0;
      526:  187:  state->whoseTurn = 0;
      526:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     3156:  192:  for (it = 0; it < 5; it++){
     2630:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      526:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      526:  198:  return 0;
        -:  199:}
        -:  200:
     3624:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3624:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3624:  209:  if (state->deckCount[player] < 1)
     2304:  210:    return -1;
     1320:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15840:  214:  while (state->deckCount[player] > 0) {
    13200:  215:    card = floor(Random() * state->deckCount[player]);
    13200:  216:    newDeck[newDeckPos] = state->deck[player][card];
    13200:  217:    newDeckPos++;
    45912:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    32712:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    13200:  221:    state->deckCount[player]--;
        -:  222:  }
    14520:  223:  for (i = 0; i < newDeckPos; i++) {
    13200:  224:    state->deck[player][i] = newDeck[i];
    13200:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1320:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
       12:  311:int numHandCards(struct gameState *state) {
       12:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
     7013:  346:int whoseTurn(struct gameState *state) {
     7013:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
     1002:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
     1002:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      113:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      889:  401:  j = 0;
    23114:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    22225:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     2664:  406:	  j++;
        -:  407:	}
        -:  408:    }
      889:  409:  if ( j >= 3)
        -:  410:    {
      888:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
     5592:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
     5592:  420:  int score = 0;
        -:  421:  //score from hand
    27938:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    22346:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    22346:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    22346:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    22346:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    22346:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    22346:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
     9278:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     3686:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     3686:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     3686:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     3686:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     3686:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     3686:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
     9278:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     3686:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     3686:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     3686:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     3686:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     3686:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     3686:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
     5592:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    27478:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    27478:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1152:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     1152:  538:    state->deckCount[player] = state->discardCount[player];
     1152:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     1152:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
     1152:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     1152:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
     1152:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     1152:  559:    if (deckCounter == 0)
     1152:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    26326:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    26326:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    26326:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    26326:  576:    state->deckCount[player]--;
    26326:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    26326:  580:  return 0;
        -:  581:}
        -:  582:
       35:  583:int getCost(int cardNumber)
        -:  584:{
       35:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo:
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
        8:  643:  return -1;
        -:  644:}
        -:  645:
     4000:  646:int smithy_card(int handPos, struct gameState *state, int currentPlayer){
        -:  647:  //+3 Cards
        -:  648:  int i;
        -:  649:
    20000:  650:	  for (i = 0; i < 4; i++)	//4 not 3 bug here
        -:  651:	{
    16000:  652:	  drawCard(currentPlayer, state);
        -:  653:	}
        -:  654:
        -:  655:      //discard card from hand
     4000:  656:      discardCard(handPos, currentPlayer, state, 0);
     4000:  657:      return 0;
        -:  658:
        -:  659:}
     1001:  660:int adventurer_card(struct gameState *state, int currentPlayer){
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
     1001:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
     1001:  664:  int z = 0;
     8850:  665:  while(drawntreasure<5){	//error, lets you get 5 instead of 2 treasures
     6848:  666:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
     1152:  667:	  shuffle(currentPlayer, state);
        -:  668:	}
     6848:  669:	drawCard(currentPlayer, state);
     6848:  670:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     6848:  671:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     5005:  672:	  drawntreasure++;
        -:  673:	else{
     1843:  674:	  temphand[z]=cardDrawn;
     1843:  675:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     1843:  676:	  z++;
        -:  677:	}
        -:  678:      }
     3845:  679:      while(z-1>=0){
     1843:  680:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     1843:  681:	z=z-1;
        -:  682:      }
     1001:  683:      return 0;
        -:  684:
        -:  685:}
    #####:  686:int baron_card(int choice1, struct gameState *state, int currentPlayer){
    #####:  687:	state->numBuys++;//Increase buys by 1!
    #####:  688:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  689:	int p = 0;//Iterator for hand!
    #####:  690:	int card_not_discarded = 1;//Flag for discard set!
    #####:  691:	while(card_not_discarded){
    #####:  692:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  693:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  694:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  695:	    state->discardCount[currentPlayer]++;
    #####:  696:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  697:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  698:	    }
    #####:  699:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  700:	    state->handCount[currentPlayer]--;
    #####:  701:	    card_not_discarded = 0;//Exit the loop
        -:  702:	  }
    #####:  703:	  else if (p > state->handCount[currentPlayer]){
        -:  704:	    if(DEBUG) {
        -:  705:	      printf("No estate cards in your hand, invalid choice\n");
        -:  706:	      printf("Must gain an estate if there are any\n");
        -:  707:	    }
    #####:  708:	    if (supplyCount(estate, state) > 0){
    #####:  709:	      gainCard(estate, state, 0, currentPlayer);
    #####:  710:	      state->supplyCount[estate]--;//Decrement estates
    #####:  711:	      if (supplyCount(estate, state) == 0){
    #####:  712:		isGameOver(state);
        -:  713:	      }
        -:  714:	    }
    #####:  715:	    card_not_discarded = 0;//Exit the loop
        -:  716:	  }
        -:  717:
        -:  718:	  else{
    #####:  719:	    p++;//Next card
        -:  720:	  }
        -:  721:	}
        -:  722:      }
        -:  723:
        -:  724:      else{
    #####:  725:	if (supplyCount(estate, state) > 0){
    #####:  726:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  727:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  728:	  if (supplyCount(estate, state) == 0){
    #####:  729:	    isGameOver(state);
        -:  730:	  }
        -:  731:	}
        -:  732:      }
        -:  733:
        -:  734:
    #####:  735:      return 0;
        -:  736:
        -:  737:}
    #####:  738:int mine_card(int choice1,int choice2, int handPos, struct gameState *state, int currentPlayer){
        -:  739:	int i;
        -:  740:	int j;
        -:  741:
        -:  742:
    #####:  743:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  744:
    #####:  745:      if (state->hand[currentPlayer][choice1] < copper && state->hand[currentPlayer][choice1] > gold)
        -:  746:	{
    #####:  747:	  return -1;
        -:  748:	}
        -:  749:
    #####:  750:      if (choice2 > treasure_map || choice2 < curse)
        -:  751:	{
    #####:  752:	  return -1;
        -:  753:	}
        -:  754:
    #####:  755:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:
    #####:  760:      gainCard(choice2, state, 2, currentPlayer);
        -:  761:
        -:  762:      //discard card from hand
    #####:  763:      discardCard(handPos, currentPlayer, state, 0);
        -:  764:
        -:  765:
        -:  766:      //discard trashed card
        -:  767:	  //
        -:  768:
    #####:  769:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  770:	{
    #####:  771:	  if (state->hand[currentPlayer][i] == j)
        -:  772:	    {
    #####:  773:	      discardCard(i, currentPlayer, state, 0);
    #####:  774:		  break;
        -:  775:	    }
        -:  776:	}
        -:  777:
        -:  778:
    #####:  779:      return 0;
        -:  780:
        -:  781:}
        -:  782:
        -:  783:
    #####:  784:int council_room_card(struct gameState *state, int handPos, int currentPlayer){
        -:  785:  //+4 Cards
        -:  786:  int i;
        -:  787:
    #####:  788:      for (i = 0; i < 4; i++)
        -:  789:  	  {
    #####:  790:	  drawCard(currentPlayer, state);
        -:  791:	}
        -:  792:
        -:  793:      //+1 Buy
    #####:  794:      state->numBuys++;
        -:  795:
        -:  796:      //Each other player draws a card
    #####:  797:      for (i = 0; i < state->numPlayers; i++)
        -:  798:	{
        -:  799:	 //bug, doesn' t exlude current player for additional draw
    #####:  800:		 if ( i == currentPlayer )// added bug changed not equal to equal
        -:  801:	    {
    #####:  802:	      drawCard(i, state);
        -:  803:	    }
        -:  804:	}
        -:  805:
        -:  806:      //put played card in played card pile
    #####:  807:      discardCard(handPos, currentPlayer, state, 0);
        -:  808:
    #####:  809:      return 0;
        -:  810:
        -:  811:}
        -:  812:
        -:  813:
     7001:  814:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  815:{
        -:  816:  int i;
        -:  817:  int j;
        -:  818:  int k;
        -:  819:  int x;
        -:  820:  int index;
     7001:  821:  int currentPlayer = whoseTurn(state);
     7001:  822:  int nextPlayer = currentPlayer + 1;
        -:  823:
     7001:  824:  int tributeRevealedCards[2] = {-1, -1};
        -:  825:  int temphand[MAX_HAND];// moved above the if statement
        -:  826: // int drawntreasure=0;
        -:  827: // int cardDrawn;
        -:  828:  //int z = 0;// this is the counter for the temp hand
     7001:  829:  if (nextPlayer > (state->numPlayers - 1)){
     4311:  830:    nextPlayer = 0;
        -:  831:  }
        -:  832:
        -:  833:
        -:  834:  //uses switch to select card and perform actions
     7001:  835:  switch( card )
        -:  836:    {
        -:  837:
        -:  838:	//refactored
        -:  839:    case adventurer:
        -:  840:
     1001:  841:	return adventurer_card(state, currentPlayer);
        -:  842:
        -:  843:	//refactored
        -:  844:    case council_room:
    #####:  845:    	council_room_card(state, handPos, currentPlayer);
        -:  846:
        -:  847:
        -:  848:    case feast:
        -:  849:      //gain card with cost up to 5
        -:  850:      //Backup hand
    #####:  851:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  852:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  853:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  854:      }
        -:  855:      //Backup hand
        -:  856:
        -:  857:      //Update Coins for Buy
    #####:  858:      updateCoins(currentPlayer, state, 5);
    #####:  859:      x = 1;//Condition to loop on
    #####:  860:      while( x == 1) {//Buy one card
    #####:  861:	if (supplyCount(choice1, state) <= 0){
        -:  862:	  if (DEBUG)
        -:  863:	    printf("None of that card left, sorry!\n");
        -:  864:
        -:  865:	  if (DEBUG){
        -:  866:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  867:	  }
        -:  868:	}
    #####:  869:	else if (state->coins < getCost(choice1)){
    #####:  870:	  printf("That card is too expensive!\n");
        -:  871:
        -:  872:	  if (DEBUG){
        -:  873:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  874:	  }
        -:  875:	}
        -:  876:	else{
        -:  877:
        -:  878:	  if (DEBUG){
        -:  879:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  880:	  }
        -:  881:
    #####:  882:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  883:	  x = 0;//No more buying cards
        -:  884:
        -:  885:	  if (DEBUG){
        -:  886:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  887:	  }
        -:  888:
        -:  889:	}
        -:  890:      }
        -:  891:
        -:  892:      //Reset Hand
    #####:  893:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  894:	state->hand[currentPlayer][i] = temphand[i];
    #####:  895:	temphand[i] = -1;
        -:  896:      }
        -:  897:      //Reset Hand
        -:  898:
    #####:  899:      return 0;
        -:  900:
        -:  901:    case gardens:
    #####:  902:      return -1;
        -:  903:
        -:  904:
        -:  905:
        -:  906:	//refactored
        -:  907:	case mine:
    #####:  908:     	return mine_card(choice1, choice2, handPos, state, currentPlayer);
        -:  909:
        -:  910:
        -:  911:
        -:  912:    case remodel:
    #####:  913:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  914:
    #####:  915:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  916:	{
    #####:  917:	  return -1;
        -:  918:	}
        -:  919:
    #####:  920:      gainCard(choice2, state, 0, currentPlayer);
        -:  921:
        -:  922:      //discard card from hand
    #####:  923:      discardCard(handPos, currentPlayer, state, 0);
        -:  924:
        -:  925:      //discard trashed card
    #####:  926:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  927:	{
    #####:  928:	  if (state->hand[currentPlayer][i] == j)
        -:  929:	    {
    #####:  930:	      discardCard(i, currentPlayer, state, 0);
    #####:  931:	      break;
        -:  932:	    }
        -:  933:	}
        -:  934:
        -:  935:
    #####:  936:      return 0;
        -:  937:
        -:  938:
        -:  939:	  //refactored
        -:  940:    case smithy:
     4000:  941:   		return smithy_card(handPos, state, currentPlayer);
        -:  942:
        -:  943:    case village:
        -:  944:      //+1 Card
    #####:  945:      drawCard(currentPlayer, state);
        -:  946:
        -:  947:      //+2 Actions
    #####:  948:      state->numActions = state->numActions + 2;
        -:  949:
        -:  950:      //discard played card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
    #####:  952:      return 0;
        -:  953:
        -:  954:
        -:  955:	//refactored
        -:  956:    case baron:
    #####:  957:    	return baron_card(choice1, state, currentPlayer);
        -:  958:
        -:  959:    case great_hall:
        -:  960:      //+1 Card
     2000:  961:      drawCard(currentPlayer, state);
        -:  962:
        -:  963:      //+1 Actions
     2000:  964:      state->numActions++;
        -:  965:
        -:  966:      //discard card from hand
     2000:  967:      discardCard(handPos, currentPlayer, state, 0);
     2000:  968:      return 0;
        -:  969:
        -:  970:    case minion:
        -:  971:      //+1 action
    #####:  972:      state->numActions++;
        -:  973:
        -:  974:      //discard card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);
        -:  976:
    #####:  977:      if (choice1)		//+2 coins
        -:  978:	{
    #####:  979:	  state->coins = state->coins + 2;
        -:  980:	}
        -:  981:
    #####:  982:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  983:	{
        -:  984:	  //discard hand
    #####:  985:	  while(numHandCards(state) > 0)
        -:  986:	    {
    #####:  987:	      discardCard(handPos, currentPlayer, state, 0);
        -:  988:	    }
        -:  989:
        -:  990:	  //draw 4
    #####:  991:	  for (i = 0; i < 4; i++)
        -:  992:	    {
    #####:  993:	      drawCard(currentPlayer, state);
        -:  994:	    }
        -:  995:
        -:  996:	  //other players discard hand and redraw if hand size > 4
    #####:  997:	  for (i = 0; i < state->numPlayers; i++)
        -:  998:	    {
    #####:  999:	      if (i != currentPlayer)
        -: 1000:		{
    #####: 1001:		  if ( state->handCount[i] > 4 )
        -: 1002:		    {
        -: 1003:		      //discard hand
    #####: 1004:		      while( state->handCount[i] > 0 )
        -: 1005:			{
    #####: 1006:			  discardCard(handPos, i, state, 0);
        -: 1007:			}
        -: 1008:
        -: 1009:		      //draw 4
    #####: 1010:		      for (j = 0; j < 4; j++)
        -: 1011:			{
    #####: 1012:			  drawCard(i, state);
        -: 1013:			}
        -: 1014:		    }
        -: 1015:		}
        -: 1016:	    }
        -: 1017:
        -: 1018:	}
    #####: 1019:      return 0;
        -: 1020:
        -: 1021:    case steward:
    #####: 1022:      if (choice1 == 1)
        -: 1023:	{
        -: 1024:	  //+2 cards
    #####: 1025:	  drawCard(currentPlayer, state);
    #####: 1026:	  drawCard(currentPlayer, state);
        -: 1027:	}
    #####: 1028:      else if (choice1 == 2)
        -: 1029:	{
        -: 1030:	  //+2 coins
    #####: 1031:	  state->coins = state->coins + 2;
        -: 1032:	}
        -: 1033:      else
        -: 1034:	{
        -: 1035:	  //trash 2 cards in hand
    #####: 1036:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1037:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card from hand
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case tribute:
    #####: 1045:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1046:	if (state->deckCount[nextPlayer] > 0){
    #####: 1047:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	  state->deckCount[nextPlayer]--;
        -: 1049:	}
    #####: 1050:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1051:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1052:	  state->discardCount[nextPlayer]--;
        -: 1053:	}
        -: 1054:	else{
        -: 1055:	  //No Card to Reveal
        -: 1056:	  if (DEBUG){
        -: 1057:	    printf("No cards to reveal\n");
        -: 1058:	  }
        -: 1059:	}
        -: 1060:      }
        -: 1061:
        -: 1062:      else{
    #####: 1063:	if (state->deckCount[nextPlayer] == 0){
    #####: 1064:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1065:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1066:	    state->deckCount[nextPlayer]++;
    #####: 1067:	    state->discard[nextPlayer][i] = -1;
    #####: 1068:	    state->discardCount[nextPlayer]--;
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1072:	}
    #####: 1073:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1074:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1075:	state->deckCount[nextPlayer]--;
    #####: 1076:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1077:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1078:	state->deckCount[nextPlayer]--;
        -: 1079:      }
        -: 1080:
    #####: 1081:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1082:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1083:	state->playedCardCount++;
    #####: 1084:	tributeRevealedCards[1] = -1;
        -: 1085:      }
        -: 1086:
    #####: 1087:      for (i = 0; i <= 2; i ++){
    #####: 1088:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1089:	  state->coins += 2;
        -: 1090:	}
        -: 1091:
    #####: 1092:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1093:	  drawCard(currentPlayer, state);
    #####: 1094:	  drawCard(currentPlayer, state);
        -: 1095:	}
        -: 1096:	else{//Action Card
    #####: 1097:	  state->numActions = state->numActions + 2;
        -: 1098:	}
        -: 1099:      }
        -: 1100:
    #####: 1101:      return 0;
        -: 1102:
        -: 1103:    case ambassador:
    #####: 1104:      j = 0;		//used to check if player has enough cards to discard
        -: 1105:
    #####: 1106:      if (choice2 > 2 || choice2 < 0)
        -: 1107:	{
    #####: 1108:	  return -1;
        -: 1109:	}
        -: 1110:
    #####: 1111:      if (choice1 == handPos)
        -: 1112:	{
    #####: 1113:	  return -1;
        -: 1114:	}
        -: 1115:
    #####: 1116:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1117:	{
    #####: 1118:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1119:	    {
    #####: 1120:	      j++;
        -: 1121:	    }
        -: 1122:	}
    #####: 1123:      if (j < choice2)
        -: 1124:	{
    #####: 1125:	  return -1;
        -: 1126:	}
        -: 1127:
        -: 1128:      if (DEBUG)
        -: 1129:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1130:
        -: 1131:      //increase supply count for choosen card by amount being discarded
    #####: 1132:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1133:
        -: 1134:      //each other player gains a copy of revealed card
    #####: 1135:      for (i = 0; i < state->numPlayers; i++)
        -: 1136:	{
    #####: 1137:	  if (i != currentPlayer)
        -: 1138:	    {
    #####: 1139:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1140:	    }
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
        -: 1146:      //trash copies of cards returned to supply
    #####: 1147:      for (j = 0; j < choice2; j++)
        -: 1148:	{
    #####: 1149:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1150:	    {
    #####: 1151:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1152:		{
    #####: 1153:		  discardCard(i, currentPlayer, state, 1);
    #####: 1154:		  break;
        -: 1155:		}
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
    #####: 1159:      return 0;
        -: 1160:
        -: 1161:    case cutpurse:
        -: 1162:
    #####: 1163:      updateCoins(currentPlayer, state, 2);
    #####: 1164:      for (i = 0; i < state->numPlayers; i++)
        -: 1165:	{
    #####: 1166:	  if (i != currentPlayer)
        -: 1167:	    {
    #####: 1168:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1169:		{
    #####: 1170:		  if (state->hand[i][j] == copper)
        -: 1171:		    {
    #####: 1172:		      discardCard(j, i, state, 0);
    #####: 1173:		      break;
        -: 1174:		    }
    #####: 1175:		  if (j == state->handCount[i])
        -: 1176:		    {
    #####: 1177:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1178:			{
        -: 1179:			  if (DEBUG)
        -: 1180:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1181:			}
    #####: 1182:		      break;
        -: 1183:		    }
        -: 1184:		}
        -: 1185:
        -: 1186:	    }
        -: 1187:
        -: 1188:	}
        -: 1189:
        -: 1190:      //discard played card from hand
    #####: 1191:      discardCard(handPos, currentPlayer, state, 0);
        -: 1192:
    #####: 1193:      return 0;
        -: 1194:
        -: 1195:
        -: 1196:    case embargo:
        -: 1197:      //+2 Coins
    #####: 1198:      state->coins = state->coins + 2;
        -: 1199:
        -: 1200:      //see if selected pile is in play
    #####: 1201:      if ( state->supplyCount[choice1] == -1 )
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
        -: 1206:      //add embargo token to selected supply pile
    #####: 1207:      state->embargoTokens[choice1]++;
        -: 1208:
        -: 1209:      //trash card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1211:      return 0;
        -: 1212:
        -: 1213:    case outpost:
        -: 1214:      //set outpost flag
    #####: 1215:      state->outpostPlayed++;
        -: 1216:
        -: 1217:      //discard card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1219:      return 0;
        -: 1220:
        -: 1221:    case salvager:
        -: 1222:      //+1 buy
    #####: 1223:      state->numBuys++;
        -: 1224:
    #####: 1225:      if (choice1)
        -: 1226:	{
        -: 1227:	  //gain coins equal to trashed card
    #####: 1228:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1229:	  //trash card
    #####: 1230:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1231:	}
        -: 1232:
        -: 1233:      //discard card
    #####: 1234:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1235:      return 0;
        -: 1236:
        -: 1237:    case sea_hag:
    #####: 1238:      for (i = 0; i < state->numPlayers; i++){
    #####: 1239:	if (i != currentPlayer){
    #####: 1240:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1241:	  state->discardCount[i]++;
    #####: 1242:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1243:	}
        -: 1244:      }
    #####: 1245:      return 0;
        -: 1246:
        -: 1247:    case treasure_map:
        -: 1248:      //search hand for another treasure_map
    #####: 1249:      index = -1;
    #####: 1250:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1251:	{
    #####: 1252:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1253:	    {
    #####: 1254:	      index = i;
    #####: 1255:	      break;
        -: 1256:	    }
        -: 1257:	}
    #####: 1258:      if (index > -1)
        -: 1259:	{
        -: 1260:	  //trash both treasure cards
    #####: 1261:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1262:	  discardCard(index, currentPlayer, state, 1);
        -: 1263:
        -: 1264:	  //gain 4 Gold cards
    #####: 1265:	  for (i = 0; i < 4; i++)
        -: 1266:	    {
    #####: 1267:	      gainCard(gold, state, 1, currentPlayer);
        -: 1268:	    }
        -: 1269:
        -: 1270:	  //return success
    #####: 1271:	  return 1;
        -: 1272:	}
        -: 1273:
        -: 1274:      //no second treasure_map found in hand
    #####: 1275:      return -1;
        -: 1276:    }
        -: 1277:
    #####: 1278:  return -1;
        -: 1279:}
        -: 1280:
     6000: 1281:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1282:{
        -: 1283:
        -: 1284:  //if card is not trashed, added to Played pile
     6000: 1285:  if (trashFlag < 1)
        -: 1286:    {
        -: 1287:      //add card to played pile
     6000: 1288:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     6000: 1289:      state->playedCardCount++;
        -: 1290:    }
        -: 1291:
        -: 1292:  //set played card to -1
     6000: 1293:  state->hand[currentPlayer][handPos] = -1;
        -: 1294:
        -: 1295:  //remove card from player's hand
     6000: 1296:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1297:    {
        -: 1298:      //reduce number of cards in hand
        2: 1299:      state->handCount[currentPlayer]--;
        -: 1300:    }
     5998: 1301:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1302:    {
        -: 1303:      //reduce number of cards in hand
    #####: 1304:      state->handCount[currentPlayer]--;
        -: 1305:    }
        -: 1306:  else
        -: 1307:    {
        -: 1308:      //replace discarded card with last card in hand
     5998: 1309:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1310:      //set last card to -1
     5998: 1311:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1312:      //reduce number of cards in hand
     5998: 1313:      state->handCount[currentPlayer]--;
        -: 1314:    }
        -: 1315:
     6000: 1316:  return 0;
        -: 1317:}
        -: 1318:
    #####: 1319:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1320:{
        -: 1321:  //Note: supplyPos is enum of choosen card
        -: 1322:
        -: 1323:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1324:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1325:    {
    #####: 1326:      return -1;
        -: 1327:    }
        -: 1328:
        -: 1329:  //added card for [whoseTurn] current player:
        -: 1330:  // toFlag = 0 : add to discard
        -: 1331:  // toFlag = 1 : add to deck
        -: 1332:  // toFlag = 2 : add to hand
        -: 1333:
    #####: 1334:  if (toFlag == 1)
        -: 1335:    {
    #####: 1336:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1337:      state->deckCount[player]++;
        -: 1338:    }
    #####: 1339:  else if (toFlag == 2)
        -: 1340:    {
    #####: 1341:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1342:      state->handCount[player]++;
        -: 1343:    }
        -: 1344:  else
        -: 1345:    {
    #####: 1346:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1347:      state->discardCount[player]++;
        -: 1348:    }
        -: 1349:
        -: 1350:  //decrease number in supply pile
    #####: 1351:  state->supplyCount[supplyPos]--;
        -: 1352:
    #####: 1353:  return 0;
        -: 1354:}
        -: 1355:
      534: 1356:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1357:{
        -: 1358:  int i;
        -: 1359:
        -: 1360:  //reset coin count
      534: 1361:  state->coins = 0;
        -: 1362:
        -: 1363:  //add coins for each Treasure card in player's hand
     3164: 1364:  for (i = 0; i < state->handCount[player]; i++)
        -: 1365:    {
     2630: 1366:      if (state->hand[player][i] == copper)
        -: 1367:	{
     2104: 1368:	  state->coins += 1;
        -: 1369:	}
      526: 1370:      else if (state->hand[player][i] == silver)
        -: 1371:	{
    #####: 1372:	  state->coins += 2;
        -: 1373:	}
      526: 1374:      else if (state->hand[player][i] == gold)
        -: 1375:	{
    #####: 1376:	  state->coins += 3;
        -: 1377:	}
        -: 1378:    }
        -: 1379:
        -: 1380:  //add bonus
      534: 1381:  state->coins += bonus;
        -: 1382:
      534: 1383:  return 0;
        -: 1384:}
        -: 1385:
        -: 1386:
        -: 1387://end of dominion.c
randomtestcard1.c:
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
FAIL! Number of actions was not correct after playing great_hall
All tests passed! Returned fine and a new card was added and old was removed. Number of actions also right.
File 'dominion.c'
Lines executed:39.07% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    19800:    8:int compare(const void* a, const void* b) {
    19800:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    19800:   11:  if (*(int*)a < *(int*)b)
     5280:   12:    return -1;
    14520:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     1001:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
     1001:   44:  SelectStream(1);
     1001:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
     1001:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
      475:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      526:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     5786:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    57860:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    52600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      526:   73:  if (numPlayers == 2)
        -:   74:    {
      258:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      268:   77:  else if (numPlayers == 3)
        -:   78:    {
      268:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      526:   87:  if (numPlayers == 2)
        -:   88:    {
      258:   89:      state->supplyCount[estate] = 8;
      258:   90:      state->supplyCount[duchy] = 8;
      258:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      268:   95:      state->supplyCount[estate] = 12;
      268:   96:      state->supplyCount[duchy] = 12;
      268:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      526:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      526:  102:  state->supplyCount[silver] = 40;
      526:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    11046:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    86790:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    81530:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     5260:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     5260:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     5260:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    76270:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1846:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1320:  140:      state->deckCount[i] = 0;
     5280:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     3960:  143:	  state->deck[i][j] = estate;
     3960:  144:	  state->deckCount[i]++;
        -:  145:	}
    10560:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     9240:  148:	  state->deck[i][j] = copper;
     9240:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1846:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1320:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1846:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
     1320:  166:      state->handCount[i] = 0;
     1320:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    14728:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    14202:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      526:  182:  state->outpostPlayed = 0;
      526:  183:  state->phase = 0;
      526:  184:  state->numActions = 1;
      526:  185:  state->numBuys = 1;
      526:  186:  state->playedCardCount = 0;
      526:  187:  state->whoseTurn = 0;
      526:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     3156:  192:  for (it = 0; it < 5; it++){
     2630:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      526:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      526:  198:  return 0;
        -:  199:}
        -:  200:
     3624:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3624:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3624:  209:  if (state->deckCount[player] < 1)
     2304:  210:    return -1;
     1320:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15840:  214:  while (state->deckCount[player] > 0) {
    13200:  215:    card = floor(Random() * state->deckCount[player]);
    13200:  216:    newDeck[newDeckPos] = state->deck[player][card];
    13200:  217:    newDeckPos++;
    45912:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    32712:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    13200:  221:    state->deckCount[player]--;
        -:  222:  }
    14520:  223:  for (i = 0; i < newDeckPos; i++) {
    13200:  224:    state->deck[player][i] = newDeck[i];
    13200:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1320:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
       12:  311:int numHandCards(struct gameState *state) {
       12:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
     8526:  346:int whoseTurn(struct gameState *state) {
     8526:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
     1002:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
     1002:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      113:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      889:  401:  j = 0;
    23114:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    22225:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     2664:  406:	  j++;
        -:  407:	}
        -:  408:    }
      889:  409:  if ( j >= 3)
        -:  410:    {
      888:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
     5592:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
     5592:  420:  int score = 0;
        -:  421:  //score from hand
    27938:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    22346:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    22346:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    22346:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    22346:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    22346:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    22346:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
     9278:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     3686:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     3686:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     3686:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     3686:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     3686:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     3686:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
     9278:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     3686:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     3686:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     3686:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     3686:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     3686:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     3686:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
     5592:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    28991:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    28991:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1152:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     1152:  538:    state->deckCount[player] = state->discardCount[player];
     1152:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     1152:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
     1152:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     1152:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
     1152:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     1152:  559:    if (deckCounter == 0)
     1152:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    27839:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    27839:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    27839:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    27839:  576:    state->deckCount[player]--;
    27839:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    27839:  580:  return 0;
        -:  581:}
        -:  582:
       35:  583:int getCost(int cardNumber)
        -:  584:{
       35:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo:
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
        8:  643:  return -1;
        -:  644:}
        -:  645:
     4000:  646:int smithy_card(int handPos, struct gameState *state, int currentPlayer){
        -:  647:  //+3 Cards
        -:  648:  int i;
        -:  649:
    20000:  650:	  for (i = 0; i < 4; i++)	//4 not 3 bug here
        -:  651:	{
    16000:  652:	  drawCard(currentPlayer, state);
        -:  653:	}
        -:  654:
        -:  655:      //discard card from hand
     4000:  656:      discardCard(handPos, currentPlayer, state, 0);
     4000:  657:      return 0;
        -:  658:
        -:  659:}
     1001:  660:int adventurer_card(struct gameState *state, int currentPlayer){
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
     1001:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
     1001:  664:  int z = 0;
     8850:  665:  while(drawntreasure<5){	//error, lets you get 5 instead of 2 treasures
     6848:  666:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
     1152:  667:	  shuffle(currentPlayer, state);
        -:  668:	}
     6848:  669:	drawCard(currentPlayer, state);
     6848:  670:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     6848:  671:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     5005:  672:	  drawntreasure++;
        -:  673:	else{
     1843:  674:	  temphand[z]=cardDrawn;
     1843:  675:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     1843:  676:	  z++;
        -:  677:	}
        -:  678:      }
     3845:  679:      while(z-1>=0){
     1843:  680:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     1843:  681:	z=z-1;
        -:  682:      }
     1001:  683:      return 0;
        -:  684:
        -:  685:}
    #####:  686:int baron_card(int choice1, struct gameState *state, int currentPlayer){
    #####:  687:	state->numBuys++;//Increase buys by 1!
    #####:  688:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  689:	int p = 0;//Iterator for hand!
    #####:  690:	int card_not_discarded = 1;//Flag for discard set!
    #####:  691:	while(card_not_discarded){
    #####:  692:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  693:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  694:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  695:	    state->discardCount[currentPlayer]++;
    #####:  696:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  697:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  698:	    }
    #####:  699:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  700:	    state->handCount[currentPlayer]--;
    #####:  701:	    card_not_discarded = 0;//Exit the loop
        -:  702:	  }
    #####:  703:	  else if (p > state->handCount[currentPlayer]){
        -:  704:	    if(DEBUG) {
        -:  705:	      printf("No estate cards in your hand, invalid choice\n");
        -:  706:	      printf("Must gain an estate if there are any\n");
        -:  707:	    }
    #####:  708:	    if (supplyCount(estate, state) > 0){
    #####:  709:	      gainCard(estate, state, 0, currentPlayer);
    #####:  710:	      state->supplyCount[estate]--;//Decrement estates
    #####:  711:	      if (supplyCount(estate, state) == 0){
    #####:  712:		isGameOver(state);
        -:  713:	      }
        -:  714:	    }
    #####:  715:	    card_not_discarded = 0;//Exit the loop
        -:  716:	  }
        -:  717:
        -:  718:	  else{
    #####:  719:	    p++;//Next card
        -:  720:	  }
        -:  721:	}
        -:  722:      }
        -:  723:
        -:  724:      else{
    #####:  725:	if (supplyCount(estate, state) > 0){
    #####:  726:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  727:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  728:	  if (supplyCount(estate, state) == 0){
    #####:  729:	    isGameOver(state);
        -:  730:	  }
        -:  731:	}
        -:  732:      }
        -:  733:
        -:  734:
    #####:  735:      return 0;
        -:  736:
        -:  737:}
    #####:  738:int mine_card(int choice1,int choice2, int handPos, struct gameState *state, int currentPlayer){
        -:  739:	int i;
        -:  740:	int j;
        -:  741:
        -:  742:
    #####:  743:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  744:
    #####:  745:      if (state->hand[currentPlayer][choice1] < copper && state->hand[currentPlayer][choice1] > gold)
        -:  746:	{
    #####:  747:	  return -1;
        -:  748:	}
        -:  749:
    #####:  750:      if (choice2 > treasure_map || choice2 < curse)
        -:  751:	{
    #####:  752:	  return -1;
        -:  753:	}
        -:  754:
    #####:  755:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:
    #####:  760:      gainCard(choice2, state, 2, currentPlayer);
        -:  761:
        -:  762:      //discard card from hand
    #####:  763:      discardCard(handPos, currentPlayer, state, 0);
        -:  764:
        -:  765:
        -:  766:      //discard trashed card
        -:  767:	  //
        -:  768:
    #####:  769:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  770:	{
    #####:  771:	  if (state->hand[currentPlayer][i] == j)
        -:  772:	    {
    #####:  773:	      discardCard(i, currentPlayer, state, 0);
    #####:  774:		  break;
        -:  775:	    }
        -:  776:	}
        -:  777:
        -:  778:
    #####:  779:      return 0;
        -:  780:
        -:  781:}
        -:  782:
        -:  783:
    #####:  784:int council_room_card(struct gameState *state, int handPos, int currentPlayer){
        -:  785:  //+4 Cards
        -:  786:  int i;
        -:  787:
    #####:  788:      for (i = 0; i < 4; i++)
        -:  789:  	  {
    #####:  790:	  drawCard(currentPlayer, state);
        -:  791:	}
        -:  792:
        -:  793:      //+1 Buy
    #####:  794:      state->numBuys++;
        -:  795:
        -:  796:      //Each other player draws a card
    #####:  797:      for (i = 0; i < state->numPlayers; i++)
        -:  798:	{
        -:  799:	 //bug, doesn' t exlude current player for additional draw
    #####:  800:		 if ( i == currentPlayer )// added bug changed not equal to equal
        -:  801:	    {
    #####:  802:	      drawCard(i, state);
        -:  803:	    }
        -:  804:	}
        -:  805:
        -:  806:      //put played card in played card pile
    #####:  807:      discardCard(handPos, currentPlayer, state, 0);
        -:  808:
    #####:  809:      return 0;
        -:  810:
        -:  811:}
        -:  812:
        -:  813:
     8514:  814:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  815:{
        -:  816:  int i;
        -:  817:  int j;
        -:  818:  int k;
        -:  819:  int x;
        -:  820:  int index;
     8514:  821:  int currentPlayer = whoseTurn(state);
     8514:  822:  int nextPlayer = currentPlayer + 1;
        -:  823:
     8514:  824:  int tributeRevealedCards[2] = {-1, -1};
        -:  825:  int temphand[MAX_HAND];// moved above the if statement
        -:  826: // int drawntreasure=0;
        -:  827: // int cardDrawn;
        -:  828:  //int z = 0;// this is the counter for the temp hand
     8514:  829:  if (nextPlayer > (state->numPlayers - 1)){
     4554:  830:    nextPlayer = 0;
        -:  831:  }
        -:  832:
        -:  833:
        -:  834:  //uses switch to select card and perform actions
     8514:  835:  switch( card )
        -:  836:    {
        -:  837:
        -:  838:	//refactored
        -:  839:    case adventurer:
        -:  840:
     1001:  841:	return adventurer_card(state, currentPlayer);
        -:  842:
        -:  843:	//refactored
        -:  844:    case council_room:
    #####:  845:    	council_room_card(state, handPos, currentPlayer);
        -:  846:
        -:  847:
        -:  848:    case feast:
        -:  849:      //gain card with cost up to 5
        -:  850:      //Backup hand
    #####:  851:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  852:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  853:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  854:      }
        -:  855:      //Backup hand
        -:  856:
        -:  857:      //Update Coins for Buy
    #####:  858:      updateCoins(currentPlayer, state, 5);
    #####:  859:      x = 1;//Condition to loop on
    #####:  860:      while( x == 1) {//Buy one card
    #####:  861:	if (supplyCount(choice1, state) <= 0){
        -:  862:	  if (DEBUG)
        -:  863:	    printf("None of that card left, sorry!\n");
        -:  864:
        -:  865:	  if (DEBUG){
        -:  866:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  867:	  }
        -:  868:	}
    #####:  869:	else if (state->coins < getCost(choice1)){
    #####:  870:	  printf("That card is too expensive!\n");
        -:  871:
        -:  872:	  if (DEBUG){
        -:  873:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  874:	  }
        -:  875:	}
        -:  876:	else{
        -:  877:
        -:  878:	  if (DEBUG){
        -:  879:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  880:	  }
        -:  881:
    #####:  882:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  883:	  x = 0;//No more buying cards
        -:  884:
        -:  885:	  if (DEBUG){
        -:  886:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  887:	  }
        -:  888:
        -:  889:	}
        -:  890:      }
        -:  891:
        -:  892:      //Reset Hand
    #####:  893:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  894:	state->hand[currentPlayer][i] = temphand[i];
    #####:  895:	temphand[i] = -1;
        -:  896:      }
        -:  897:      //Reset Hand
        -:  898:
    #####:  899:      return 0;
        -:  900:
        -:  901:    case gardens:
    #####:  902:      return -1;
        -:  903:
        -:  904:
        -:  905:
        -:  906:	//refactored
        -:  907:	case mine:
    #####:  908:     	return mine_card(choice1, choice2, handPos, state, currentPlayer);
        -:  909:
        -:  910:
        -:  911:
        -:  912:    case remodel:
    #####:  913:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  914:
    #####:  915:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  916:	{
    #####:  917:	  return -1;
        -:  918:	}
        -:  919:
    #####:  920:      gainCard(choice2, state, 0, currentPlayer);
        -:  921:
        -:  922:      //discard card from hand
    #####:  923:      discardCard(handPos, currentPlayer, state, 0);
        -:  924:
        -:  925:      //discard trashed card
    #####:  926:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  927:	{
    #####:  928:	  if (state->hand[currentPlayer][i] == j)
        -:  929:	    {
    #####:  930:	      discardCard(i, currentPlayer, state, 0);
    #####:  931:	      break;
        -:  932:	    }
        -:  933:	}
        -:  934:
        -:  935:
    #####:  936:      return 0;
        -:  937:
        -:  938:
        -:  939:	  //refactored
        -:  940:    case smithy:
     4000:  941:   		return smithy_card(handPos, state, currentPlayer);
        -:  942:
        -:  943:    case village:
        -:  944:      //+1 Card
    #####:  945:      drawCard(currentPlayer, state);
        -:  946:
        -:  947:      //+2 Actions
    #####:  948:      state->numActions = state->numActions + 2;
        -:  949:
        -:  950:      //discard played card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
    #####:  952:      return 0;
        -:  953:
        -:  954:
        -:  955:	//refactored
        -:  956:    case baron:
    #####:  957:    	return baron_card(choice1, state, currentPlayer);
        -:  958:
        -:  959:    case great_hall:
        -:  960:      //+1 Card
     3513:  961:      drawCard(currentPlayer, state);
        -:  962:
        -:  963:      //+1 Actions
     3513:  964:      state->numActions++;
        -:  965:
        -:  966:      //discard card from hand
     3513:  967:      discardCard(handPos, currentPlayer, state, 0);
     3513:  968:      return 0;
        -:  969:
        -:  970:    case minion:
        -:  971:      //+1 action
    #####:  972:      state->numActions++;
        -:  973:
        -:  974:      //discard card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);
        -:  976:
    #####:  977:      if (choice1)		//+2 coins
        -:  978:	{
    #####:  979:	  state->coins = state->coins + 2;
        -:  980:	}
        -:  981:
    #####:  982:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  983:	{
        -:  984:	  //discard hand
    #####:  985:	  while(numHandCards(state) > 0)
        -:  986:	    {
    #####:  987:	      discardCard(handPos, currentPlayer, state, 0);
        -:  988:	    }
        -:  989:
        -:  990:	  //draw 4
    #####:  991:	  for (i = 0; i < 4; i++)
        -:  992:	    {
    #####:  993:	      drawCard(currentPlayer, state);
        -:  994:	    }
        -:  995:
        -:  996:	  //other players discard hand and redraw if hand size > 4
    #####:  997:	  for (i = 0; i < state->numPlayers; i++)
        -:  998:	    {
    #####:  999:	      if (i != currentPlayer)
        -: 1000:		{
    #####: 1001:		  if ( state->handCount[i] > 4 )
        -: 1002:		    {
        -: 1003:		      //discard hand
    #####: 1004:		      while( state->handCount[i] > 0 )
        -: 1005:			{
    #####: 1006:			  discardCard(handPos, i, state, 0);
        -: 1007:			}
        -: 1008:
        -: 1009:		      //draw 4
    #####: 1010:		      for (j = 0; j < 4; j++)
        -: 1011:			{
    #####: 1012:			  drawCard(i, state);
        -: 1013:			}
        -: 1014:		    }
        -: 1015:		}
        -: 1016:	    }
        -: 1017:
        -: 1018:	}
    #####: 1019:      return 0;
        -: 1020:
        -: 1021:    case steward:
    #####: 1022:      if (choice1 == 1)
        -: 1023:	{
        -: 1024:	  //+2 cards
    #####: 1025:	  drawCard(currentPlayer, state);
    #####: 1026:	  drawCard(currentPlayer, state);
        -: 1027:	}
    #####: 1028:      else if (choice1 == 2)
        -: 1029:	{
        -: 1030:	  //+2 coins
    #####: 1031:	  state->coins = state->coins + 2;
        -: 1032:	}
        -: 1033:      else
        -: 1034:	{
        -: 1035:	  //trash 2 cards in hand
    #####: 1036:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1037:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard card from hand
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:    case tribute:
    #####: 1045:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1046:	if (state->deckCount[nextPlayer] > 0){
    #####: 1047:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	  state->deckCount[nextPlayer]--;
        -: 1049:	}
    #####: 1050:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1051:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1052:	  state->discardCount[nextPlayer]--;
        -: 1053:	}
        -: 1054:	else{
        -: 1055:	  //No Card to Reveal
        -: 1056:	  if (DEBUG){
        -: 1057:	    printf("No cards to reveal\n");
        -: 1058:	  }
        -: 1059:	}
        -: 1060:      }
        -: 1061:
        -: 1062:      else{
    #####: 1063:	if (state->deckCount[nextPlayer] == 0){
    #####: 1064:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1065:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1066:	    state->deckCount[nextPlayer]++;
    #####: 1067:	    state->discard[nextPlayer][i] = -1;
    #####: 1068:	    state->discardCount[nextPlayer]--;
        -: 1069:	  }
        -: 1070:
    #####: 1071:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1072:	}
    #####: 1073:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1074:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1075:	state->deckCount[nextPlayer]--;
    #####: 1076:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1077:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1078:	state->deckCount[nextPlayer]--;
        -: 1079:      }
        -: 1080:
    #####: 1081:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1082:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1083:	state->playedCardCount++;
    #####: 1084:	tributeRevealedCards[1] = -1;
        -: 1085:      }
        -: 1086:
    #####: 1087:      for (i = 0; i <= 2; i ++){
    #####: 1088:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1089:	  state->coins += 2;
        -: 1090:	}
        -: 1091:
    #####: 1092:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1093:	  drawCard(currentPlayer, state);
    #####: 1094:	  drawCard(currentPlayer, state);
        -: 1095:	}
        -: 1096:	else{//Action Card
    #####: 1097:	  state->numActions = state->numActions + 2;
        -: 1098:	}
        -: 1099:      }
        -: 1100:
    #####: 1101:      return 0;
        -: 1102:
        -: 1103:    case ambassador:
    #####: 1104:      j = 0;		//used to check if player has enough cards to discard
        -: 1105:
    #####: 1106:      if (choice2 > 2 || choice2 < 0)
        -: 1107:	{
    #####: 1108:	  return -1;
        -: 1109:	}
        -: 1110:
    #####: 1111:      if (choice1 == handPos)
        -: 1112:	{
    #####: 1113:	  return -1;
        -: 1114:	}
        -: 1115:
    #####: 1116:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1117:	{
    #####: 1118:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1119:	    {
    #####: 1120:	      j++;
        -: 1121:	    }
        -: 1122:	}
    #####: 1123:      if (j < choice2)
        -: 1124:	{
    #####: 1125:	  return -1;
        -: 1126:	}
        -: 1127:
        -: 1128:      if (DEBUG)
        -: 1129:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1130:
        -: 1131:      //increase supply count for choosen card by amount being discarded
    #####: 1132:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1133:
        -: 1134:      //each other player gains a copy of revealed card
    #####: 1135:      for (i = 0; i < state->numPlayers; i++)
        -: 1136:	{
    #####: 1137:	  if (i != currentPlayer)
        -: 1138:	    {
    #####: 1139:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1140:	    }
        -: 1141:	}
        -: 1142:
        -: 1143:      //discard played card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:
        -: 1146:      //trash copies of cards returned to supply
    #####: 1147:      for (j = 0; j < choice2; j++)
        -: 1148:	{
    #####: 1149:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1150:	    {
    #####: 1151:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1152:		{
    #####: 1153:		  discardCard(i, currentPlayer, state, 1);
    #####: 1154:		  break;
        -: 1155:		}
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
    #####: 1159:      return 0;
        -: 1160:
        -: 1161:    case cutpurse:
        -: 1162:
    #####: 1163:      updateCoins(currentPlayer, state, 2);
    #####: 1164:      for (i = 0; i < state->numPlayers; i++)
        -: 1165:	{
    #####: 1166:	  if (i != currentPlayer)
        -: 1167:	    {
    #####: 1168:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1169:		{
    #####: 1170:		  if (state->hand[i][j] == copper)
        -: 1171:		    {
    #####: 1172:		      discardCard(j, i, state, 0);
    #####: 1173:		      break;
        -: 1174:		    }
    #####: 1175:		  if (j == state->handCount[i])
        -: 1176:		    {
    #####: 1177:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1178:			{
        -: 1179:			  if (DEBUG)
        -: 1180:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1181:			}
    #####: 1182:		      break;
        -: 1183:		    }
        -: 1184:		}
        -: 1185:
        -: 1186:	    }
        -: 1187:
        -: 1188:	}
        -: 1189:
        -: 1190:      //discard played card from hand
    #####: 1191:      discardCard(handPos, currentPlayer, state, 0);
        -: 1192:
    #####: 1193:      return 0;
        -: 1194:
        -: 1195:
        -: 1196:    case embargo:
        -: 1197:      //+2 Coins
    #####: 1198:      state->coins = state->coins + 2;
        -: 1199:
        -: 1200:      //see if selected pile is in play
    #####: 1201:      if ( state->supplyCount[choice1] == -1 )
        -: 1202:	{
    #####: 1203:	  return -1;
        -: 1204:	}
        -: 1205:
        -: 1206:      //add embargo token to selected supply pile
    #####: 1207:      state->embargoTokens[choice1]++;
        -: 1208:
        -: 1209:      //trash card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1211:      return 0;
        -: 1212:
        -: 1213:    case outpost:
        -: 1214:      //set outpost flag
    #####: 1215:      state->outpostPlayed++;
        -: 1216:
        -: 1217:      //discard card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1219:      return 0;
        -: 1220:
        -: 1221:    case salvager:
        -: 1222:      //+1 buy
    #####: 1223:      state->numBuys++;
        -: 1224:
    #####: 1225:      if (choice1)
        -: 1226:	{
        -: 1227:	  //gain coins equal to trashed card
    #####: 1228:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1229:	  //trash card
    #####: 1230:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1231:	}
        -: 1232:
        -: 1233:      //discard card
    #####: 1234:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1235:      return 0;
        -: 1236:
        -: 1237:    case sea_hag:
    #####: 1238:      for (i = 0; i < state->numPlayers; i++){
    #####: 1239:	if (i != currentPlayer){
    #####: 1240:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1241:	  state->discardCount[i]++;
    #####: 1242:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1243:	}
        -: 1244:      }
    #####: 1245:      return 0;
        -: 1246:
        -: 1247:    case treasure_map:
        -: 1248:      //search hand for another treasure_map
    #####: 1249:      index = -1;
    #####: 1250:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1251:	{
    #####: 1252:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1253:	    {
    #####: 1254:	      index = i;
    #####: 1255:	      break;
        -: 1256:	    }
        -: 1257:	}
    #####: 1258:      if (index > -1)
        -: 1259:	{
        -: 1260:	  //trash both treasure cards
    #####: 1261:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1262:	  discardCard(index, currentPlayer, state, 1);
        -: 1263:
        -: 1264:	  //gain 4 Gold cards
    #####: 1265:	  for (i = 0; i < 4; i++)
        -: 1266:	    {
    #####: 1267:	      gainCard(gold, state, 1, currentPlayer);
        -: 1268:	    }
        -: 1269:
        -: 1270:	  //return success
    #####: 1271:	  return 1;
        -: 1272:	}
        -: 1273:
        -: 1274:      //no second treasure_map found in hand
    #####: 1275:      return -1;
        -: 1276:    }
        -: 1277:
    #####: 1278:  return -1;
        -: 1279:}
        -: 1280:
     7513: 1281:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1282:{
        -: 1283:
        -: 1284:  //if card is not trashed, added to Played pile
     7513: 1285:  if (trashFlag < 1)
        -: 1286:    {
        -: 1287:      //add card to played pile
     7513: 1288:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     7513: 1289:      state->playedCardCount++;
        -: 1290:    }
        -: 1291:
        -: 1292:  //set played card to -1
     7513: 1293:  state->hand[currentPlayer][handPos] = -1;
        -: 1294:
        -: 1295:  //remove card from player's hand
     7513: 1296:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1297:    {
        -: 1298:      //reduce number of cards in hand
        3: 1299:      state->handCount[currentPlayer]--;
        -: 1300:    }
     7510: 1301:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1302:    {
        -: 1303:      //reduce number of cards in hand
    #####: 1304:      state->handCount[currentPlayer]--;
        -: 1305:    }
        -: 1306:  else
        -: 1307:    {
        -: 1308:      //replace discarded card with last card in hand
     7510: 1309:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1310:      //set last card to -1
     7510: 1311:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1312:      //reduce number of cards in hand
     7510: 1313:      state->handCount[currentPlayer]--;
        -: 1314:    }
        -: 1315:
     7513: 1316:  return 0;
        -: 1317:}
        -: 1318:
    #####: 1319:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1320:{
        -: 1321:  //Note: supplyPos is enum of choosen card
        -: 1322:
        -: 1323:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1324:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1325:    {
    #####: 1326:      return -1;
        -: 1327:    }
        -: 1328:
        -: 1329:  //added card for [whoseTurn] current player:
        -: 1330:  // toFlag = 0 : add to discard
        -: 1331:  // toFlag = 1 : add to deck
        -: 1332:  // toFlag = 2 : add to hand
        -: 1333:
    #####: 1334:  if (toFlag == 1)
        -: 1335:    {
    #####: 1336:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1337:      state->deckCount[player]++;
        -: 1338:    }
    #####: 1339:  else if (toFlag == 2)
        -: 1340:    {
    #####: 1341:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1342:      state->handCount[player]++;
        -: 1343:    }
        -: 1344:  else
        -: 1345:    {
    #####: 1346:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1347:      state->discardCount[player]++;
        -: 1348:    }
        -: 1349:
        -: 1350:  //decrease number in supply pile
    #####: 1351:  state->supplyCount[supplyPos]--;
        -: 1352:
    #####: 1353:  return 0;
        -: 1354:}
        -: 1355:
      534: 1356:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1357:{
        -: 1358:  int i;
        -: 1359:
        -: 1360:  //reset coin count
      534: 1361:  state->coins = 0;
        -: 1362:
        -: 1363:  //add coins for each Treasure card in player's hand
     3164: 1364:  for (i = 0; i < state->handCount[player]; i++)
        -: 1365:    {
     2630: 1366:      if (state->hand[player][i] == copper)
        -: 1367:	{
     2104: 1368:	  state->coins += 1;
        -: 1369:	}
      526: 1370:      else if (state->hand[player][i] == silver)
        -: 1371:	{
    #####: 1372:	  state->coins += 2;
        -: 1373:	}
      526: 1374:      else if (state->hand[player][i] == gold)
        -: 1375:	{
    #####: 1376:	  state->coins += 3;
        -: 1377:	}
        -: 1378:    }
        -: 1379:
        -: 1380:  //add bonus
      534: 1381:  state->coins += bonus;
        -: 1382:
      534: 1383:  return 0;
        -: 1384:}
        -: 1385:
        -: 1386:
        -: 1387://end of dominion.c
